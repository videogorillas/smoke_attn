/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 *  Copyright 2011 Alexandru Craciun, Eyal Kaspi
	 *
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *       http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */
	/**** Functionality in Java, but not in JS ********
	 * methods added to JS prototypes
	 */
	
	var stjs = {};
	
	stjs.NOT_IMPLEMENTED = function () {
	    throw "This method is not implemented in Javascript.";
	};
	
	stjs.JavalikeEquals = function (value) {
	    if (value == null) return false;
	    if (value.valueOf) return this.valueOf() === value.valueOf();
	    return this === value;
	};
	
	stjs.JavalikeGetClass = function () {
	    return this.constructor;
	};
	
	/* String */
	if (!String.prototype.equals) {
	    String.prototype.equals = stjs.JavalikeEquals;
	}
	if (!String.prototype.getBytes) {
	    String.prototype.getBytes = stjs.NOT_IMPLEMENTED;
	}
	if (!String.prototype.getChars) {
	    String.prototype.getChars = stjs.NOT_IMPLEMENTED;
	}
	if (!String.prototype.contentEquals) {
	    String.prototype.contentEquals = stjs.NOT_IMPLEMENTED;
	}
	if (!String.prototype.startsWith) {
	    String.prototype.startsWith = function (start, from) {
	        var f = from != null ? from : 0;
	        return this.substring(f, f + start.length) == start;
	    };
	}
	if (!String.prototype.endsWith) {
	    String.prototype.endsWith = function (end) {
	        if (end == null) return false;
	        if (this.length < end.length) return false;
	        return this.substring(this.length - end.length, this.length) == end;
	    };
	}
	if (!String.prototype.trim) {
	    stjs.trimLeftRegExp = /^\s+/;
	    stjs.trimRightRegExp = /\s+$/;
	    String.prototype.trim = function () {
	        return this.replace(stjs.trimLeftRegExp, "").replace(stjs.trimRightRegExp, "");
	    };
	}
	if (!String.prototype.matches) {
	    String.prototype.matches = function (regexp) {
	        return this.match("^" + regexp + "$") != null;
	    };
	}
	if (!String.prototype.compareTo) {
	    String.prototype.compareTo = function (other) {
	        if (other == null) return 1;
	        if (this < other) return -1;
	        if (this == other) return 0;
	        return 1;
	    };
	}
	
	if (!String.prototype.compareToIgnoreCase) {
	    String.prototype.compareToIgnoreCase = function (other) {
	        if (other == null) return 1;
	        return this.toLowerCase().compareTo(other.toLowerCase());
	    };
	}
	
	if (!String.prototype.equalsIgnoreCase) {
	    String.prototype.equalsIgnoreCase = function (other) {
	        if (other == null) return false;
	        return this.toLowerCase() === other.toLowerCase();
	    };
	}
	
	if (!String.prototype.codePointAt) {
	    String.prototype.codePointAt = String.prototype.charCodeAt;
	}
	
	if (!String.prototype.codePointBefore) {
	    String.prototype.codePointBefore = stjs.NOT_IMPLEMENTED;
	}
	if (!String.prototype.codePointCount) {
	    String.prototype.codePointCount = stjs.NOT_IMPLEMENTED;
	}
	
	if (!String.prototype.replaceAll) {
	    String.prototype.replaceAll = function (regexp, replace) {
	        return this.replace(new RegExp(regexp, "g"), replace);
	    };
	}
	
	if (!String.prototype.replaceFirst) {
	    String.prototype.replaceFirst = function (regexp, replace) {
	        return this.replace(new RegExp(regexp), replace);
	    };
	}
	
	if (!String.prototype.regionMatches) {
	    String.prototype.regionMatches = function (ignoreCase, toffset, other, ooffset, len) {
	        if (arguments.length == 4) {
	            len = arguments[3];
	            ooffset = arguments[2];
	            other = arguments[1];
	            toffset = arguments[0];
	            ignoreCase = false;
	        }
	        if (toffset < 0 || ooffset < 0 || other == null || toffset + len > this.length || ooffset + len > other.length) return false;
	        var s1 = this.substring(toffset, toffset + len);
	        var s2 = other.substring(ooffset, ooffset + len);
	        return ignoreCase ? s1.equalsIgnoreCase(s2) : s1 === s2;
	    };
	}
	
	if (!String.prototype.contains) {
	    String.prototype.contains = function (it) {
	        return this.indexOf(it) >= 0;
	    };
	}
	
	if (!String.prototype.getClass) {
	    String.prototype.getClass = stjs.JavalikeGetClass;
	}
	
	//force valueof to match the Java's behavior
	String.valueOf = function (value) {
	    return new String(value);
	};
	
	/* Number */
	var Byte = Number;
	var Double = Number;
	var Float = Number;
	var Integer = Number;
	var Long = Number;
	var Short = Number;
	
	/* type conversion - approximative as Javascript only has integers and doubles */
	if (!Number.prototype.intValue) {
	    Number.prototype.intValue = function () {
	        return parseInt(this);
	    };
	}
	if (!Number.prototype.shortValue) {
	    Number.prototype.shortValue = function () {
	        return parseInt(this);
	    };
	}
	if (!Number.prototype.longValue) {
	    Number.prototype.longValue = function () {
	        return parseInt(this);
	    };
	}
	if (!Number.prototype.byteValue) {
	    Number.prototype.byteValue = function () {
	        return parseInt(this);
	    };
	}
	
	if (!Number.prototype.floatValue) {
	    Number.prototype.floatValue = function () {
	        return parseFloat(this);
	    };
	}
	
	if (!Number.prototype.doubleValue) {
	    Number.prototype.doubleValue = function () {
	        return parseFloat(this);
	    };
	}
	
	if (!Number.parseInt) {
	    Number.parseInt = parseInt;
	}
	if (!Number.parseShort) {
	    Number.parseShort = parseInt;
	}
	if (!Number.parseLong) {
	    Number.parseLong = parseInt;
	}
	if (!Number.parseByte) {
	    Number.parseByte = parseInt;
	}
	
	if (!Number.parseDouble) {
	    Number.parseDouble = parseFloat;
	}
	
	if (!Number.parseFloat) {
	    Number.parseFloat = parseFloat;
	}
	
	if (!Number.isNaN) {
	    Number.isNaN = isNaN;
	}
	
	if (!Number.prototype.isNaN) {
	    Number.prototype.isNaN = function () {
	        return isNaN(this);
	    };
	}
	if (!Number.prototype.equals) {
	    Number.prototype.equals = stjs.JavalikeEquals;
	}
	if (!Number.prototype.getClass) {
	    Number.prototype.getClass = stjs.JavalikeGetClass;
	}
	
	//force valueof to match approximately the Java's behavior (for Integer.valueOf it returns in fact a double)
	Number.valueOf = function (value) {
	    return new Number(value).valueOf();
	};
	
	/* Boolean */
	if (!Boolean.prototype.equals) {
	    Boolean.prototype.equals = stjs.JavalikeEquals;
	}
	if (!Boolean.prototype.getClass) {
	    Boolean.prototype.getClass = stjs.JavalikeGetClass;
	}
	
	//force valueof to match the Java's behavior
	Boolean.valueOf = function (value) {
	    return new Boolean(value).valueOf();
	};
	
	/************* STJS helper functions ***************/
	stjs.global = this;
	stjs.skipCopy = { "prototype": true, "constructor": true, "$typeDescription": true, "$inherit": true };
	
	stjs.ns = function (path) {
	    var p = path.split(".");
	    var obj = stjs.global;
	    for (var i = 0; i < p.length; ++i) {
	        var part = p[i];
	        obj = obj[part] = obj[part] || {};
	    }
	    return obj;
	};
	
	stjs.copyProps = function (from, to) {
	    for (var key in from) {
	        if (!stjs.skipCopy[key]) to[key] = from[key];
	    }
	    return to;
	};
	
	stjs.copyInexistentProps = function (from, to) {
	    for (var key in from) {
	        if (!stjs.skipCopy[key] && !to[key]) to[key] = from[key];
	    }
	    return to;
	};
	
	stjs.extend = function (_constructor, _super, _implements, _initializer, _typeDescription, _annotations) {
	    if (typeof _typeDescription !== "object") {
	        // stjs 1.3+ always passes an non-null object to _typeDescription => The code calling stjs.extend
	        // was generated with version 1.2 or earlier, so let's call the 1.2 version of stjs.extend
	        return stjs.extend12.apply(this, arguments);
	    }
	
	    _constructor.$inherit = [];
	
	    if (_super != null) {
	        // I is used as a no-op constructor that has the same prototype as _super
	        // we do this because we cannot predict the result of calling new _super()
	        // without parameters (it might throw an exception).
	        // Basically, the following 3 lines are a safe equivalent for
	        // _constructor.prototype = new _super();
	        var I = function () {};
	        I.prototype = _super.prototype;
	        _constructor.prototype = new I();
	
	        // copy static properties for super
	        // assign every method from proto instance
	        stjs.copyProps(_super, _constructor);
	        stjs.copyProps(_super.$typeDescription, _typeDescription);
	        stjs.copyProps(_super.$annotations, _annotations);
	
	        //add the super class to inherit array
	        _constructor.$inherit.push(_super);
	    }
	
	    // copy static properties and default methods from interfaces
	    for (var a = 0; a < _implements.length; ++a) {
	        if (!_implements[a]) continue;
	        stjs.copyProps(_implements[a], _constructor);
	        stjs.copyInexistentProps(_implements[a].prototype, _constructor.prototype);
	        _constructor.$inherit.push(_implements[a]);
	    }
	
	    // remember the correct constructor
	    _constructor.prototype.constructor = _constructor;
	
	    // run the initializer to assign all static and instance variables/functions
	    if (_initializer != null) {
	        _initializer(_constructor, _constructor.prototype);
	    }
	
	    _constructor.$typeDescription = _typeDescription;
	    _constructor.$annotations = _annotations;
	
	    // add the default equals method if it is not present yet, and we don't have a superclass
	    if (_super == null) {
	        if (!_constructor.prototype.equals) {
	            _constructor.prototype.equals = stjs.JavalikeEquals;
	        }
	        if (!_constructor.prototype.getClass) {
	            _constructor.prototype.getClass = stjs.JavalikeGetClass;
	        }
	    }
	
	    // build package and assign
	    return _constructor;
	};
	
	/**
	 * 1.2 and earlier version of stjs.extend. Included for backwards compatibility
	 */
	stjs.extend12 = function (_constructor, _super, _implements) {
	    var I = function () {};
	    I.prototype = _super.prototype;
	    _constructor.prototype = new I();
	
	    //copy static properties for super and interfaces
	    // assign every method from proto instance
	    for (var a = 1; a < arguments.length; ++a) {
	        stjs.copyProps(arguments[a], _constructor);
	    }
	    // remember the correct constructor
	    _constructor.prototype.constructor = _constructor;
	
	    // add the default equals method if we don't have a superclass. Code generated with version 1.2 will
	    // override this method is equals() is present in the original java code.
	    // this was not part of the original 1.2 version of extends, however forward compatibility
	    // with 1.3 requires it
	    if (_super == null) {
	        _constructor.prototype.equals = stjs.JavalikeEquals;
	        _constructor.prototype.getClass = stjs.JavalikeGetClass;
	    }
	
	    // build package and assign
	    return _constructor;
	};
	
	/**
	 * return type's annotations
	 */
	stjs.getAnnotations = function (clz) {
	    return clz.$annotations;
	};
	
	stjs.getTypeAnnotation = function (clz, annType) {
	    var ann = clz.$annotations._;
	    return ann ? ann[annType] : null;
	};
	
	stjs.getMemberAnnotation = function (clz, memberName, annType) {
	    var ann = clz.$annotations.memberName;
	    return ann ? ann[annType] : null;
	};
	
	stjs.getParameterAnnotation = function (clz, methodName, idx, annType) {
	    var ann = clz.$annotations[methodName + "$" + idx];
	    return ann ? ann[annType] : null;
	};
	
	/**
	 * checks if the child is an instanceof parent. it checks recursively if "parent" is the child itself or it's found somewhere in the $inherit array
	 */
	stjs.isInstanceOf = function (child, parent) {
	    if (child == null) return false;
	    if (child === parent) return true;
	    if (!child.$inherit) return false;
	    for (var i = 0; i < child.$inherit.length; ++i) {
	        if (stjs.isInstanceOf(child.$inherit[i], parent)) {
	            return true;
	        }
	    }
	    return false;
	};
	
	stjs.enumEntry = function (idx, name) {
	    this._name = name;
	    this._ordinal = idx;
	};
	
	stjs.enumEntry.prototype.name = function () {
	    return this._name;
	};
	stjs.enumEntry.prototype.ordinal = function () {
	    return this._ordinal;
	};
	stjs.enumEntry.prototype.toString = function () {
	    return this._name;
	};
	stjs.enumEntry.prototype.equals = stjs.JavalikeEquals;
	
	stjs.enumeration = function () {
	    var i;
	    var e = {};
	    e._values = [];
	    for (i = 0; i < arguments.length; ++i) {
	        e[arguments[i]] = new stjs.enumEntry(i, arguments[i]);
	        e._values[i] = e[arguments[i]];
	    }
	    e.values = function () {
	        return this._values;
	    };
	    e.valueOf = function (label) {
	        return this[label];
	    };
	    return e;
	};
	
	/**
	 * if true the execution of generated main methods is disabled.
	 * this is useful when executing unit tests, to no have the main methods executing before the tests
	 */
	stjs.mainCallDisabled = false;
	
	stjs.exception = function (err) {
	    return err;
	};
	
	stjs.isEnum = function (obj) {
	    return obj != null && obj.constructor == stjs.enumEntry;
	};
	
	if (typeof Math.trunc === "function") {
	    stjs.trunc = Math.trunc;
	} else {
	    stjs.trunc = function (n) {
	        if (n == null) return null;
	        return n >= 0 ? Math.floor(n) : Math.ceil(n);
	    };
	}
	
	stjs.converters = {
	    Date: function (s, type) {
	        var a = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)$/.exec(s);
	        if (a) {
	            return new Date(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]);
	        }
	        return null;
	    },
	
	    Enum: function (s, type) {
	        return eval(type.arguments[0])[s];
	    }
	};
	
	stjs.serializers = {
	    Date: function (d, type) {
	        function pad(n) {
	            return n < 10 ? "0" + n : "" + n;
	        }
	        if (d) {
	            return "" + d.getFullYear() + "-" + pad(d.getMonth() + 1) + "-" + pad(d.getDate()) + " " + pad(d.getHours()) + ":" + pad(d.getMinutes()) + ":" + pad(d.getSeconds());
	        }
	        return null;
	    },
	
	    Enum: function (e, type) {
	        return e != null ? e.toString() : null;
	    }
	};
	
	/**
	 * Used to be able to send method references and lambdas that capture 'this' as callbacks.
	 * This method has a bunch of different usage patterns:
	 *
	 * bind(instance, "methodName"):
	 *     Used when translating a capturing method reference (eg: instance::methodName), or when translating
	 *
	 * bind(this, function):
	 *     Used when translating a lambda that uses 'this' explicitly or implicitly (eg: () -> this.doSomething(3))
	 *
	 * bind(this, function, specialTHISparamPosition)
	 *     Used when translating a lambda that uses the special all-caps 'THIS' parameter
	 *
	 * bind("methodName")
	 *     Used when translating a non-static method reference (eg: TypeName::methodName, where methodName is non-static)
	 */
	stjs.bind = function (obj, method, thisParamPos) {
	    var useFirstParamAsContext = false;
	    if (method == null) {
	        // the bind("methodName") is the only usage where the method argument can be null
	        method = obj;
	        obj = null;
	        useFirstParamAsContext = true;
	    }
	    var addThisToParameters = thisParamPos != null;
	
	    var f = function () {
	        var args = arguments;
	        if (addThisToParameters) {
	            Array.prototype.splice.call(args, thisParamPos, 0, this);
	        }
	        if (useFirstParamAsContext) {
	            obj = Array.prototype.shift.call(args);
	        }
	
	        if (typeof method === "string") {
	            return obj[method].apply(obj, args);
	        } else {
	            return method.apply(obj, args);
	        }
	    };
	    return f;
	};
	
	/** *********** global ************** */
	function exception(err) {
	    return err;
	}
	
	function isEnum(obj) {
	    return obj != null && obj.constructor == stjs.enumEntry;
	}
	
	/******* parsing *************/
	
	/**
	 * parse a json string using the type definition to build a typed object hierarchy
	 */
	stjs.parseJSON = function () {
	    var number = '(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)';
	    var oneChar = '(?:[^\\0-\\x08\\x0a-\\x1f\"\\\\]' + '|\\\\(?:[\"/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';
	    var string = '(?:\"' + oneChar + '*\")';
	
	    // Will match a value in a well-formed JSON file.
	    // If the input is not well-formed, may match strangely, but not in an unsafe
	    // way.
	    // Since this only matches value tokens, it does not match whitespace, colons,
	    // or commas.
	    var jsonToken = new RegExp('(?:false|true|null|[\\{\\}\\[\\]]' + '|' + number + '|' + string + ')', 'g');
	
	    // Matches escape sequences in a string literal
	    var escapeSequence = new RegExp('\\\\(?:([^u])|u(.{4}))', 'g');
	
	    // Decodes escape sequences in object literals
	    var escapes = {
	        '"': '"',
	        '/': '/',
	        '\\': '\\',
	        'b': '\b',
	        'f': '\f',
	        'n': '\n',
	        'r': '\r',
	        't': '\t'
	    };
	    function unescapeOne(_, ch, hex) {
	        return ch ? escapes[ch] : String.fromCharCode(parseInt(hex, 16));
	    }
	
	    var constructors = {};
	
	    function constr(name, param) {
	        var c = constructors[name];
	        if (!c) constructors[name] = c = eval(name);
	        return new c(param);
	    }
	
	    function convert(type, json) {
	        if (!type) return json;
	        var cv = stjs.converters[type.name || type];
	        if (cv) return cv(json, type);
	        //hopefully the type has a string constructor
	        return constr(type, json);
	    }
	
	    function builder(type) {
	        if (!type) return {};
	        if (typeof type == "function") return new type();
	        if (type.name) {
	            if (type.name == "Map") return {};
	            if (type.name == "Array") return [];
	            return constr(type.name);
	        }
	        return constr(type);
	    }
	
	    // A non-falsy value that coerces to the empty string when used as a key.
	    var EMPTY_STRING = new String('');
	    var SLASH = '\\';
	
	    // Constructor to use based on an open token.
	    var firstTokenCtors = { '{': Object, '[': Array };
	
	    var hop = Object.hasOwnProperty;
	
	    function nextMatch(str) {
	        var m = jsonToken.exec(str);
	        return m != null ? m[0] : null;
	    }
	    return function (json, type) {
	        // Split into tokens
	        // Construct the object to return
	        var result;
	        var tok = nextMatch(json);
	        var topLevelPrimitive = false;
	        if ('{' === tok) {
	            result = builder(type, null);
	        } else if ('[' === tok) {
	            result = [];
	        } else {
	            // The RFC only allows arrays or objects at the top level, but the JSON.parse
	            // defined by the EcmaScript 5 draft does allow strings, booleans, numbers, and null
	            // at the top level.
	            result = [];
	            topLevelPrimitive = true;
	        }
	
	        // If undefined, the key in an object key/value record to use for the next
	        // value parsed.
	        var key;
	        // Loop over remaining tokens maintaining a stack of uncompleted objects and
	        // arrays.
	        var stack = [result];
	        var stack2 = [type];
	        for (tok = nextMatch(json); tok != null; tok = nextMatch(json)) {
	
	            var cont;
	            switch (tok.charCodeAt(0)) {
	                default:
	                    // sign or digit
	                    cont = stack[0];
	                    cont[key || cont.length] = +tok;
	                    key = void 0;
	                    break;
	                case 0x22:
	                    // '"'
	                    tok = tok.substring(1, tok.length - 1);
	                    if (tok.indexOf(SLASH) !== -1) {
	                        tok = tok.replace(escapeSequence, unescapeOne);
	                    }
	                    cont = stack[0];
	                    if (!key) {
	                        if (cont instanceof Array) {
	                            key = cont.length;
	                        } else {
	                            key = tok || EMPTY_STRING; // Use as key for next value seen.
	                            stack2[0] = cont.constructor.$typeDescription ? cont.constructor.$typeDescription[key] : stack2[1].arguments[1];
	                            break;
	                        }
	                    }
	                    cont[key] = convert(stack2[0], tok);
	                    key = void 0;
	                    break;
	                case 0x5b:
	                    // '['
	                    cont = stack[0];
	                    stack.unshift(cont[key || cont.length] = []);
	                    stack2.unshift(stack2[0].arguments[0]);
	                    //put the element type desc
	                    key = void 0;
	                    break;
	                case 0x5d:
	                    // ']'
	                    stack.shift();
	                    stack2.shift();
	                    break;
	                case 0x66:
	                    // 'f'
	                    cont = stack[0];
	                    cont[key || cont.length] = false;
	                    key = void 0;
	                    break;
	                case 0x6e:
	                    // 'n'
	                    cont = stack[0];
	                    cont[key || cont.length] = null;
	                    key = void 0;
	                    break;
	                case 0x74:
	                    // 't'
	                    cont = stack[0];
	                    cont[key || cont.length] = true;
	                    key = void 0;
	                    break;
	                case 0x7b:
	                    // '{'
	                    cont = stack[0];
	                    stack.unshift(cont[key || cont.length] = builder(stack2[0]));
	                    stack2.unshift(null);
	                    key = void 0;
	                    break;
	                case 0x7d:
	                    // '}'
	                    stack.shift();
	                    stack2.shift();
	                    break;
	            }
	        }
	        // Fail if we've got an uncompleted object.
	        if (topLevelPrimitive) {
	            if (stack.length !== 1) {
	                throw new Error();
	            }
	            result = result[0];
	        } else {
	            if (stack.length) {
	                throw new Error();
	            }
	        }
	
	        return result;
	    };
	}();
	
	stjs.isArray = function (obj) {
	    return stjs.toString.call(obj) === "[object Array]";
	};
	
	/**
	 * cls can by the type of the return.
	 * If it's an array it can be either the type of an element or the type definition of the field.
	 * TODO - for other collections and classes is not done yet
	 */
	stjs.typefy = function (obj, cls) {
	    if (stjs.isArray(obj)) {
	        var result = [];
	        for (var idx = 0; idx < obj.length; idx++) {
	            result.push(stjs.typefy(obj[idx], elementType(cls)));
	        }
	        return result;
	    }
	    var constructors = {};
	    function constr(name, param) {
	        var c = constructors[name];
	        if (!c) constructors[name] = c = eval(name);
	        return new c(param);
	    }
	
	    function elementType(type) {
	        if (typeof type == "function") return type;
	        if (type.arguments) {
	            return eval(type.arguments[0]);
	        }
	        if (typeof type == "string") return eval(type);
	        return Object;
	    }
	
	    function convert(type, json) {
	        if (!type) return json;
	        var cv = stjs.converters[type.name || type];
	        if (cv) return cv(json, type);
	        //hopefully the type has a string constructor
	        return constr(type, json);
	    }
	
	    function builder(type) {
	        if (!type) return {};
	        if (typeof type == "function") return new type();
	        if (type.name) {
	            if (type.name == "Map") return {};
	            if (type.name == "Array") return [];
	            return constr(type.name);
	        }
	        return constr(type);
	    }
	
	    if (obj == null) return null;
	
	    var ret = new cls();
	    for (var key in obj) {
	        var prop = obj[key];
	        if (prop == null) continue;
	        var td = cls.$typeDescription[key];
	        if (!td) {
	            ret[key] = prop;
	            continue;
	        }
	        if (typeof prop == "string") ret[key] = convert(td, prop);else if (typeof prop == "object") {
	            if (typeof td == "string") {
	                td = eval(td);
	            }
	            ret[key] = stjs.typefy(prop, td);
	        }
	    }
	    return ret;
	};
	stjs.hydrate = stjs.typefy;
	
	stjs.stringify = function (obj, cls) {
	    if (obj == null) return null;
	
	    var ret = {};
	    for (var key in obj) {
	        var td = cls.$typeDescription[key];
	        var prop = obj[key];
	        var ser = td != null ? stjs.serializers[td.name || td] : null;
	
	        if (typeof prop == "function") continue;
	
	        if (!td || !ser) {
	            ret[key] = prop;
	            continue;
	        }
	        if (typeof prop != "string") if (ser) ret[key] = ser(prop, td);else ret[key] = stjs.typefy(prop, td);
	    }
	    return ret;
	};
	/************* STJS asserts ***************/
	stjs.assertHandler = function (position, code, msg) {
	    throw msg + " at " + position;
	};
	
	stjs.STJSAssert = {};
	
	stjs.STJSAssert.setAssertHandler = function (a) {
	    stjs.assertHandler = a;
	};
	
	stjs.STJSAssert.assertArgEquals = function (position, code, expectedValue, testValue) {
	    if (expectedValue != testValue && stjs.assertHandler) stjs.assertHandler(position, code, "Wrong argument. Expected: " + expectedValue + ", got:" + testValue);
	};
	
	stjs.STJSAssert.assertArgNotNull = function (position, code, testValue) {
	    if (testValue == null && stjs.assertHandler) stjs.assertHandler(position, code, "Wrong argument. Null value");
	};
	
	stjs.STJSAssert.assertArgTrue = function (position, code, condition) {
	    if (!condition && stjs.assertHandler) stjs.assertHandler(position, code, "Wrong argument. Condition is false");
	};
	
	stjs.STJSAssert.assertStateEquals = function (position, code, expectedValue, testValue) {
	    if (expectedValue != testValue && stjs.assertHandler) stjs.assertHandler(position, code, "Wrong state. Expected: " + expectedValue + ", got:" + testValue);
	};
	
	stjs.STJSAssert.assertStateNotNull = function (position, code, testValue) {
	    if (testValue == null && stjs.assertHandler) stjs.assertHandler(position, code, "Wrong state. Null value");
	};
	
	stjs.STJSAssert.assertStateTrue = function (position, code, condition) {
	    if (!condition && stjs.assertHandler) stjs.assertHandler(position, code, "Wrong state. Condition is false");
	};
	/** exception **/
	var Throwable = function (message, cause) {
	    Error.call(this);
	    if (typeof Error.captureStackTrace === 'function') {
	        // nice way to capture the stack trace for chrome
	        Error.captureStackTrace(this, arguments.callee);
	    } else {
	        // alternate way to capture the stack trace for other browsers
	        try {
	            throw new Error();
	        } catch (e) {
	            this.stack = e.stack;
	        }
	    }
	    if (typeof message === "string") {
	        this.detailMessage = message;
	        this.message = message;
	        this.cause = cause;
	    } else {
	        this.cause = message;
	    }
	};
	stjs.extend(Throwable, Error, [], function (constructor, prototype) {
	    prototype.detailMessage = null;
	    prototype.cause = null;
	    prototype.getMessage = function () {
	        return this.detailMessage;
	    };
	
	    prototype.getLocalizedMessage = function () {
	        return this.getMessage();
	    };
	
	    prototype.getCause = function () {
	        return this.cause == this ? null : this.cause;
	    };
	
	    prototype.toString = function () {
	        var s = "Exception"; //TODO should get the exception's type name here
	        var message = this.getLocalizedMessage();
	        return message != null ? s + ": " + message : s;
	    };
	
	    prototype.getStackTrace = function () {
	        return this.stack;
	    };
	
	    prototype.printStackTrace = function () {
	        console.error(this.getStackTrace());
	    };
	}, {});
	
	var Exception = function (message, cause) {
	    Throwable.call(this, message, cause);
	};
	stjs.extend(Exception, Throwable, [], function (constructor, prototype) {}, {});
	
	var RuntimeException = function (message, cause) {
	    Exception.call(this, message, cause);
	};
	stjs.extend(RuntimeException, Exception, [], function (constructor, prototype) {}, {});
	
	var Iterator = function () {};
	Iterator = stjs.extend(Iterator, null, [], function (constructor, prototype) {
	    prototype.hasNext = function () {};
	    prototype.next = function () {};
	    prototype.remove = function () {};
	}, {}, {});
	
	var Iterable = function () {};
	Iterable = stjs.extend(Iterable, null, [], function (constructor, prototype) {
	    prototype.iterator = function () {};
	}, {}, {});
	
	/** stjs field manipulation */
	stjs.setField = function (obj, field, value, returnOldValue) {
	    if (stjs.setFieldHandler) return stjs.setFieldHandler(obj, field, value, returnOldValue);
	    var toReturn = returnOldValue ? obj[field] : value;
	    obj[field] = value;
	    return toReturn;
	};
	
	stjs.getField = function (obj, field) {
	    if (stjs.getFieldHandler) return stjs.getFieldHandler(obj, field);
	    return obj[field];
	};
	
	;
	var Decoder = __webpack_require__(1);
	var MovDasher = __webpack_require__(3);
	var Rx = __webpack_require__(5);
	var _mp4box = __webpack_require__(4);
	var DataStream = _mp4box.DataStream;
	var BoxParser = _mp4box.BoxParser;
	var ISOFile = _mp4box.ISOFile;
	var MP4Box = _mp4box.MP4Box;;
	var Extend = {};
	Extend.extend = function (parent, childContructor) {
	    var child = function () {
	        parent.apply(this, arguments);
	        childContructor.apply(this, arguments);
	    };
	    child.prototype = Object.create(parent.prototype);
	    child.prototype.constructor = childContructor;
	    return child;
	};;
	var FrameExtractor = function (url, http, log) {
	    this.url = url || '';
	    this.http = http;
	    this.log = log;
	};
	
	FrameExtractor.prototype.init = function (callback) {
	    this.mp4box = new MP4Box(false);
	    this.downloader = new Downloader();
	    this.samples = [];
	    this.chunkSize = 1024 * 1024;
	    this.maintrack = 1;
	    this.nextStart = 0;
	
	    var self = this;
	    this.moovLoaded = false;
	    this.mp4box.onReady = function () {
	        self.log.debug('moov processed');
	        self.moovLoaded = true;
	
	        self.mp4box.flush();
	        self.maintrack = self.mp4box.getInfo().tracks[0].id;
	        self.samples = self.mp4box.getTrackSamplesInfo(self.maintrack);
	
	        var stss = self.mp4box.inputIsoFile.moov.traks[0].mdia.minf.stbl.stss;
	        if (stss) {
	            self.iframes = new Array(stss.sample_numbers.length);
	            for (var i = 0; i < stss.sample_numbers.length; i++) {
	                self.iframes[i] = stss.sample_numbers[i] - 1;
	            }
	        }
	
	        self.downloader.stop();
	
	        if (callback) {
	            callback(self.getInfo());
	        }
	    };
	    this.frameData = [];
	    this.downloader.setCallback(function (response, end, error) {
	        if (response) {
	            var nextfilestart = self.mp4box.appendBuffer(response);
	            self.nextStart = nextfilestart;
	            self.downloader.setChunkSize(self.chunkSize);
	        }
	        self.downloader.setChunkStart(self.nextStart);
	    });
	    this.downloader.setInterval(10);
	    this.downloader.setChunkSize(1024 * 128);
	    this.downloader.setUrl(Utils.addQueryParams(this.url, this.http.queryParams));
	    this.downloader.setWithCredentials(this.http.withCredentials);
	    this.downloader.start();
	};
	
	FrameExtractor.prototype.getRange = function (start, size) {
	    return this.http.getArrayBufferRange(this.url, start, start + size + 1).map(function (buffer) {
	        buffer.fileStart = start;
	        if (!buffer.fileStart) {
	            buffer = buffer.slice(0);
	            buffer.fileStart = start;
	        }
	        return buffer;
	    });
	};
	
	FrameExtractor.prototype.getPrevIframe = function (fn) {
	    for (var i = 0; i < this.iframes.length; i++) {
	        if (this.iframes[i] <= fn && fn < this.iframes[i + 1]) return this.iframes[i];
	    }
	    return this.iframes[this.iframes.length - 1];
	};
	
	FrameExtractor.prototype.saveNALUnits = function (bytes, sampleId) {
	    var offset = 0;
	    var end = this.getFrameSize(sampleId);
	    var nalUnits = [];
	    while (end - offset > 0) {
	        var length = new DataView(bytes.buffer, offset + bytes.byteOffset).getUint32(0);
	        nalUnits.push(bytes.subarray(offset + 4, offset + length + 4));
	        offset = offset + length + 4;
	    }
	    this.frameData[sampleId] = nalUnits;
	};
	
	// loads all nal units needed to decode the frame. Starting from GOP start.
	FrameExtractor.prototype.loadFrameData = function (frameId) {
	    if (this.moovLoaded) {
	        var self = this;
	
	        if (frameId >= this.samples.length) {
	            return Rx.Observable.just(frameId);
	        }
	
	        if (this.iframes) {
	            var prevIframe = this.getPrevIframe(frameId);
	            var framesToParse = [];
	            var rangeLength = 0;
	            var dataStored = true;
	            var startOffset = this.getFrameOffset(prevIframe);
	            for (var fId = prevIframe; fId <= frameId; fId++) {
	                var framesize = this.getFrameSize(fId);
	                framesToParse.push({
	                    rangeFrameOffset: this.getFrameOffset(fId) - startOffset,
	                    size: framesize,
	                    id: fId
	                });
	                rangeLength += framesize;
	                if (!this.frameData[fId]) {
	                    dataStored = false;
	                }
	            };
	            if (!dataStored) {
	                return this.getRange(startOffset, rangeLength).doOnNext(function (buffer) {
	                    var framesData = new Uint8Array(buffer);
	                    for (var i = 0; i < framesToParse.length; i++) {
	                        self.saveNALUnits(framesData.subarray(framesToParse[i].rangeFrameOffset, framesToParse[i].rangeFrameOffset + framesToParse[i].size), framesToParse[i].id);
	                    }
	                }).map(function (x) {
	                    return frameId;
	                });
	            } else {
	                return Rx.Observable.just(frameId);
	            }
	        } else {
	            if (!this.frameData[frameId]) {
	                return this.getRange(this.getFrameOffset(frameId), this.getFrameSize(frameId)).doOnNext(function (buffer) {
	                    self.saveNALUnits(new Uint8Array(buffer), frameId);
	                }).map(function (x) {
	                    return frameId;
	                });
	            } else {
	                return Rx.Observable.just(frameId);
	            }
	        }
	    } else {
	        this.log.error('moov is not loaded');
	        return Rx.Observable.throw('moov is not loaded');
	    }
	};
	
	FrameExtractor.prototype.getFrameOffset = function (framenumber) {
	    return this.samples[framenumber].offset;
	};
	FrameExtractor.prototype.getFrameSize = function (framenumber) {
	    return this.samples[framenumber].size;
	};
	
	FrameExtractor.prototype.getInfo = function () {
	    var video = this.mp4box.inputIsoFile.moov.traks[0];
	    return {
	        width: video.tkhd.width >> 16,
	        height: video.tkhd.height >> 16,
	        framesTotal: this.samples.length
	    };
	};
	
	FrameExtractor.prototype.getAvcC = function () {
	    return MovDasher.getAvcC(this.mp4box);
	};
	;
	function Downloader() {
	    this.isActive = false;
	    this.realtime = false;
	    this.chunkStart = 0;
	    this.chunkSize = 0;
	    this.totalLength = 0;
	    this.chunkTimeout = 1000;
	    this.url = null;
	    this.callback = null;
	    this.eof = false;
	    this.setDownloadTimeoutCallback = null;
	    this.withCredentials = false;
	}
	
	Downloader.prototype.setDownloadTimeoutCallback = function (callback) {
	    this.setDownloadTimeoutCallback = callback;
	    return this;
	};
	
	Downloader.prototype.reset = function () {
	    this.chunkStart = 0;
	    this.totalLength = 0;
	    this.eof = false;
	    return this;
	};
	
	Downloader.prototype.setRealTime = function (_realtime) {
	    this.realtime = _realtime;
	    return this;
	};
	
	Downloader.prototype.setChunkSize = function (_size) {
	    this.chunkSize = _size;
	    return this;
	};
	
	Downloader.prototype.setChunkStart = function (_start) {
	    this.chunkStart = _start;
	    this.eof = false;
	    return this;
	};
	
	Downloader.prototype.setInterval = function (_timeout) {
	    this.chunkTimeout = _timeout;
	    return this;
	};
	
	Downloader.prototype.setUrl = function (_url) {
	    this.url = _url;
	    return this;
	};
	
	Downloader.prototype.setWithCredentials = function (b) {
	    this.withCredentials = !!b;
	    return this;
	};
	
	Downloader.prototype.setCallback = function (_callback) {
	    this.callback = _callback;
	    return this;
	};
	
	Downloader.prototype.isStopped = function () {
	    return !this.isActive;
	};
	
	Downloader.prototype.getFileLength = function () {
	    return this.totalLength;
	};
	
	Downloader.prototype.getFile = function () {
	    var dl = this;
	    if (dl.totalLength && this.chunkStart >= dl.totalLength) {
	        dl.eof = true;
	    }
	    if (dl.eof === true) {
	        this.callback(null, true);
	        return;
	    }
	    var xhr = new XMLHttpRequest();
	    xhr.open("GET", this.url, true);
	    xhr.responseType = "arraybuffer";
	    var range = null;
	    xhr.start = this.chunkStart;
	    var maxRange;
	    if (this.chunkStart + this.chunkSize < Infinity) {
	        range = 'bytes=' + this.chunkStart + '-';
	        maxRange = this.chunkStart + this.chunkSize - 1;
	        /* if the file length is known we limit the max range to that length */
	        /*if (dl.totalLength !== 0) {
	        	maxRange = Math.min(maxRange, dl.totalLength);
	        }*/
	        range += maxRange;
	        xhr.setRequestHeader('Range', range);
	    }
	    xhr.onerror = function (e) {
	        dl.callback(null, false, true);
	    };
	    xhr.onreadystatechange = function (e) {
	        if ((xhr.status == 200 || xhr.status == 206 || xhr.status == 304 || xhr.status == 416) && xhr.readyState == this.DONE) {
	            var rangeReceived = xhr.getResponseHeader("Content-Range");
	            /* if the length of the file is not known, we get it from the response header */
	            if (!dl.totalLength && rangeReceived) {
	                var sizeIndex;
	                sizeIndex = rangeReceived.indexOf("/");
	                if (sizeIndex > -1) {
	                    dl.totalLength = +rangeReceived.slice(sizeIndex + 1);
	                }
	            }
	            dl.eof = xhr.response.byteLength !== dl.chunkSize || xhr.response.byteLength === dl.totalLength;
	            var buffer = xhr.response;
	            buffer.fileStart = xhr.start;
	            if (!buffer.fileStart) {
	                // IE does not support adding properties to an ArrayBuffer generated by XHR
	                buffer = buffer.slice(0);
	                buffer.fileStart = xhr.start;
	            }
	            dl.callback(buffer, dl.eof);
	            if (dl.isActive === true && dl.eof === false) {
	                var timeoutDuration = 0;
	                if (!dl.realtime) {
	                    timeoutDuration = dl.chunkTimeout;
	                } else {
	                    timeoutDuration = computeWaitingTimeFromBuffer(video);
	                }
	                if (dl.setDownloadTimeoutCallback) dl.setDownloadTimeoutCallback(timeoutDuration);
	                dl.timeoutID = window.setTimeout(dl.getFile.bind(dl), timeoutDuration);
	            } else {
	                /* end of file */
	                dl.isActive = false;
	            }
	        }
	    };
	    if (dl.isActive) {
	        xhr.send();
	    }
	};
	
	Downloader.prototype.start = function () {
	    this.chunkStart = 0;
	    this.resume();
	    return this;
	};
	
	Downloader.prototype.resume = function () {
	    this.isActive = true;
	    if (this.chunkSize === 0) {
	        this.chunkSize = Infinity;
	    }
	    this.getFile();
	    return this;
	};
	
	Downloader.prototype.stop = function () {
	    this.isActive = false;
	    if (this.timeoutID) {
	        window.clearTimeout(this.timeoutID);
	        delete this.timeoutID;
	    }
	    return this;
	};
	
	;
	(function (e) {
	    e.closest = e.closest || function closest(css) {
	        return this.parentNode ? this.matches(css) ? this : closest.call(this.parentNode, css) : null;
	    };
	})(Element.prototype);
	
	if (!Array.prototype.fill) {
	    Array.prototype.fill = function (value) {
	
	        // Steps 1-2.
	        if (this == null) {
	            throw new TypeError('this is null or not defined');
	        }
	
	        var O = Object(this);
	
	        // Steps 3-5.
	        var len = O.length >>> 0;
	
	        // Steps 6-7.
	        var start = arguments[1];
	        var relativeStart = start >> 0;
	
	        // Step 8.
	        var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);
	
	        // Steps 9-10.
	        var end = arguments[2];
	        var relativeEnd = end === undefined ? len : end >> 0;
	
	        // Step 11.
	        var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);
	
	        // Step 12.
	        while (k < final) {
	            O[k] = value;
	            k++;
	        }
	
	        // Step 13.
	        return O;
	    };
	}
	if (!Array.prototype.find) {
	    Array.prototype.find = function (predicate) {
	        if (this === null) {
	            throw new TypeError('Array.prototype.find called on null or undefined');
	        }
	        if (typeof predicate !== 'function') {
	            throw new TypeError('predicate must be a function');
	        }
	        var list = Object(this);
	        var length = list.length >>> 0;
	        var thisArg = arguments[1];
	        var value;
	
	        for (var i = 0; i < length; i++) {
	            value = list[i];
	            if (predicate.call(thisArg, value, i, list)) {
	                return value;
	            }
	        }
	        return undefined;
	    };
	}
	
	//Production steps of ECMA-262, Edition 5, 15.4.4.21
	//Reference: http://es5.github.io/#x15.4.4.21
	if (!Array.prototype.reduce) {
	    Array.prototype.reduce = function (callback /*, initialValue*/) {
	        'use strict';
	
	        if (this == null) {
	            throw new TypeError('Array.prototype.reduce called on null or undefined');
	        }
	        if (typeof callback !== 'function') {
	            throw new TypeError(callback + ' is not a function');
	        }
	        var t = Object(this),
	            len = t.length >>> 0,
	            k = 0,
	            value;
	        if (arguments.length == 2) {
	            value = arguments[1];
	        } else {
	            while (k < len && !(k in t)) {
	                k++;
	            }
	            if (k >= len) {
	                throw new TypeError('Reduce of empty array with no initial value');
	            }
	            value = t[k++];
	        }
	        for (; k < len; k++) {
	            if (k in t) {
	                value = callback(value, t[k], k, t);
	            }
	        }
	        return value;
	    };
	};
	var Utils = function () {};
	Utils = stjs.extend(Utils, null, [], function (constructor, prototype) {
	    constructor.match = function (str, regex) {
	        var match = str.match(new RegExp(regex, "i"));
	        return match != null && match.length > 0;
	    };
	    constructor.timestampToHHmmSS = function (dt) {
	        var hours = stjs.trunc(dt.getUTCHours());
	        var mins = stjs.trunc(dt.getUTCMinutes());
	        var sec = stjs.trunc(dt.getUTCSeconds());
	        return Utils.zeroPad2(hours) + ":" + Utils.zeroPad2(mins) + ":" + Utils.zeroPad2(sec);
	    };
	    constructor.timestampToHHmmSSmsec = function (dt) {
	        var msec = Utils.zeroPad(stjs.trunc(dt.getUTCMilliseconds()), 3);
	        return Utils.timestampToHHmmSS(dt) + "." + msec;
	    };
	    constructor.isString = function (anything) {
	        return "string".equals(typeof anything);
	    };
	    constructor.isNumber = function (anything) {
	        return "number".equals(typeof anything);
	    };
	    constructor.isNormalNumber = function (anything) {
	        return Utils.isNumber(anything) && isFinite(anything);
	    };
	    constructor.isSomething = function (anything) {
	        return Boolean(anything);
	    };
	    constructor.isObject = function (anything) {
	        return "object".equals(typeof anything);
	    };
	    constructor.findWhere = function (array, predicate) {
	        for (var i = 0; i < array.length; i++) {
	            var item = array[i];
	            if (predicate(item)) {
	                return item;
	            }
	        }
	        return null;
	    };
	    constructor.toInt = function (anything) {
	        if (Utils.isString(anything)) {
	            return Integer.parseInt(Utils.defaultString(anything, "0"));
	        }
	        return parseInt(anything);
	    };
	    constructor.toDouble = function (anything) {
	        if (Utils.isString(anything)) {
	            return parseFloat(Utils.defaultString(anything, "0"));
	        }
	        return parseFloat(anything);
	    };
	    constructor.isPropertyDefined = function (o, property) {
	        return !"undefined".equals(typeof o[property]);
	    };
	    constructor.removeFromList = function (a, item) {
	        var indexOf = a.indexOf(item);
	        if (indexOf >= 0) {
	            a.splice(indexOf, 1);
	            return true;
	        }
	        return false;
	    };
	    constructor.userAgentContains = function (str) {
	        return window != null && Utils.match(window.navigator.userAgent, str);
	    };
	    constructor.isChrome = Utils.userAgentContains("chrome");
	    constructor.isFirefox = Utils.userAgentContains("firefox");
	    constructor.isSafari = Utils.userAgentContains("safari") && !Utils.userAgentContains("chrome");
	    constructor.isMobileSafari = Utils.isSafari && Utils.userAgentContains("mobile");
	    constructor.constructorName = function (obj) {
	        return obj.constructor["name"];
	    };
	    constructor.defaultObject = function (obj, defaultValue) {
	        return obj || defaultValue;
	    };
	    constructor.convertTv = function (srcTv, srcTs, dstTs) {
	        return stjs.trunc(srcTv * dstTs / srcTs);
	    };
	    constructor.binarySearch0 = function (a, key) {
	        var low = 0;
	        var high = a.length - 1;
	        while (low <= high) {
	            var mid = low + high >>> 1;
	            var midVal = a[mid];
	            if (midVal < key) low = mid + 1;else if (midVal > key) high = mid - 1;else return mid;
	        }
	        return -(low + 1);
	    };
	    constructor.binarySearch1 = function (a, key) {
	        var idx = Utils.binarySearch0(a, key);
	        if (idx >= 0) return idx;
	        idx += 1;
	        idx = -idx;
	        if (idx == 0) return 0;
	        if (idx >= a.length) return a.length - 1;
	        return idx - 1;
	    };
	    constructor.min = function (array) {
	        var min = Integer.MAX_VALUE;
	        for (var i = 0; i < array.length; i++) {
	            min = Math.min(min, array[i]);
	        }
	        return stjs.trunc(min);
	    };
	    constructor.hms = function (sec) {
	        return Utils.hhmmss(stjs.trunc(sec * 1000));
	    };
	    constructor.hhmmss = function (timestamp) {
	        var dt = new Date(timestamp);
	        return Utils.timestampToHHmmSS(dt);
	    };
	    constructor.hhmmssms = function (timestamp) {
	        var dt = new Date(timestamp);
	        return Utils.timestampToHHmmSSmsec(dt);
	    };
	    constructor.toDuration = function (time) {
	        var t = Math.abs(time);
	        if (t < 1000) {
	            return Math.round(time) + " msec";
	        }
	        if (t < 60000) {
	            return Math.round(stjs.trunc(time / 1000)) + " sec";
	        }
	        return Math.round(stjs.trunc(stjs.trunc(time / 1000) / 60)) + " mins";
	    };
	    constructor.zeroPad = function (n, width) {
	        var z = "0";
	        var _n = n + "";
	        return _n.length >= width ? _n : new Array(width - _n.length + 1).join(z) + _n;
	    };
	    constructor.zeroPad2 = function (n) {
	        var _n = n + "";
	        if (_n.length < 2) {
	            return "0" + _n;
	        } else {
	            return _n;
	        }
	    };
	    constructor.hmsf = function (h, m, s, f) {
	        return Utils.zeroPad2(h) + ":" + Utils.zeroPad2(m) + ":" + Utils.zeroPad2(s) + ":" + Utils.zeroPad2(f);
	    };
	    constructor.currentTimeMillis = function () {
	        return stjs.trunc(new Date().getTime());
	    };
	    constructor.defaultString = function (string, defaultString) {
	        if (string != null && Utils.isString(string) && !"".equals(string)) {
	            return string;
	        }
	        return defaultString;
	    };
	    constructor.isEmpty = function (string) {
	        return string == null || "".equals(string);
	    };
	    constructor.isNotEmpty = function (string) {
	        return string != null && !"".equals(string);
	    };
	    constructor.isBlank = function (string) {
	        return string == null || "".equals(string) || string.matches("\\s+");
	    };
	    constructor.isNotBlank = function (str) {
	        return str != null && !"".equals(str) && !str.matches("\\s+");
	    };
	    constructor.contains = function (array, s) {
	        return array.indexOf(s) > -1;
	    };
	    constructor.includes = function (haystack, needle) {
	        return Utils.defaultString(haystack, "").indexOf(needle) >= 0;
	    };
	    constructor.filter = function (array, predicate) {
	        var filtered = new Array();
	        for (var i = 0; i < array.length; i++) {
	            var item = array[i];
	            var ok = predicate(item);
	            if (ok) {
	                filtered.push(item);
	            }
	        }
	        return filtered;
	    };
	    constructor.isDigit = function (str) {
	        return !isNaN(parseFloat(str));
	    };
	    constructor.replaceAt = function (_this, index, character) {
	        return _this.substring(0, index) + character + _this.substring(index + character.length);
	    };
	    constructor.addMethod = function (o, methodName, func) {
	        o[methodName] = func;
	    };
	    constructor.addField = function (o, fieldName, val) {
	        o[fieldName] = val;
	    };
	    constructor.callMethod = function (o, methodName) {
	        var func = o[methodName];
	        return func();
	    };
	    constructor.toBoolean = function (anything) {
	        return Boolean(anything);
	    };
	    constructor.binarySearch = function (a, comparator) {
	        var low = 0;
	        var high = a.length - 1;
	        while (low <= high) {
	            var mid = low + high >>> 1;
	            var midVal = a[mid];
	            var c = comparator(midVal);
	            if (c < 0) low = mid + 1;else if (c > 0) high = mid - 1;else return mid;
	        }
	        var floor = low - 1;
	        return -floor - 1;
	    };
	    constructor.binarySearchFloor = function (a, comparator) {
	        var idx = Utils.binarySearch(a, comparator);
	        if (idx < 0) {
	            idx += 1;
	            idx = -idx;
	        }
	        return idx;
	    };
	    constructor.isFullScreen = function () {
	        return window.document.fullscreenElement != null || window.document.webkitFullscreenElement != null || window.document.mozFullscreenElement != null || window.document.mozFullScreen || window.document.webkitIsFullScreen || Utils.isPropertyDefined(window.document, "msFullscreenElement");
	    };
	    constructor.fullScreenElement = function (document) {
	        return document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["fullscreenElement"];
	    };
	    constructor.map = function (map, func) {
	        var result = [];
	        for (var k in map) {
	            var item = map[k];
	            result.push(func(k, item));
	        }
	        return result;
	    };
	    constructor.mapValues = function (map) {
	        var result = [];
	        for (var k in map) {
	            var item = map[k];
	            result.push(item);
	        }
	        return result;
	    };
	    constructor.filterMapValues = function (map, predicate) {
	        var result = [];
	        for (var k in map) {
	            var item = map[k];
	            if (predicate(item, k)) {
	                result.push(item);
	            }
	        }
	        return result;
	    };
	    constructor.filterMap = function (map, predicate) {
	        var result = {};
	        for (var k in map) {
	            var item = map[k];
	            if (predicate(item, k)) {
	                result[k] = item;
	            }
	        }
	        return result;
	    };
	    constructor.jdb = function () {
	        debugger;
	    };
	    constructor.newUUIDString = function () {
	        var d1 = stjs.trunc(Math.abs(Math.random()) * 10000);
	        var d0 = stjs.trunc(Math.abs(Math.random()) * 10000);
	        var d2 = stjs.trunc(Math.abs(Math.random()) * 10000);
	        var d3 = stjs.trunc(Math.abs(Math.random()) * 10000);
	        return d0 + "-" + d1 + "-" + d2 + "-" + d3;
	    };
	    constructor.cast = function (cls, fromJson) {
	        var instance = Object.create(cls.prototype);
	        var casted = Object.assign(instance, fromJson);
	        return casted;
	    };
	    constructor.isDashBrowser = function () {
	        return window["MediaSource"] != null;
	    };
	    constructor.querySelectorNotNull = function (el, query) {
	        if (query == null) {
	            throw new RuntimeException("query is null");
	        }
	        var element1 = el.querySelector(query);
	        if (element1 == null) {
	            throw new RuntimeException("query selector returned Great Emptiness but should not: " + query);
	        }
	        return element1;
	    };
	    constructor.readCookie = function (name) {
	        var nameEQ = name + "=";
	        var a = window.document.cookie.split(";");
	        var ca = a;
	        for (var i = 0; i < ca.length; i++) {
	            var c = ca[i];
	            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
	            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
	        }
	        return null;
	    };
	    constructor.jsonClone = function (o) {
	        return JSON.parse(JSON.stringify(o));
	    };
	    constructor.jsonToString = function (o) {
	        return JSON.stringify(o);
	    };
	    constructor.toAbsoluteUri = function (base, relative) {
	        var absoluteUrl = relative.startsWith("http://") || relative.startsWith("https://") || relative.startsWith("/");
	        if (!absoluteUrl) {
	            var idx = base.lastIndexOf("/");
	            if (idx >= 0) {
	                relative = base.substring(0, idx) + "/" + relative;
	            }
	        }
	        return relative;
	    };
	    constructor.dataURLtoBlob = function (dataURI) {
	        var dataURIPattern = "^data:((.*?)(;charset=.*?)?)(;base64)?,";
	        var dataURIRegExp = new RegExp(dataURIPattern);
	        var matches = dataURIRegExp.exec(dataURI);
	        if (matches == null || matches.length == 0) {
	            throw new RuntimeException("invalid data URI");
	        }
	        var mediaType = Utils.isNotBlank(matches[2]) ? matches[1] : "text/plain" + Utils.defaultString(matches[3], ";charset=US-ASCII");
	        var isBase64 = Utils.isNotBlank(matches[4]);
	        var dataString = dataURI.substring(matches[0].length);
	        var byteString;
	        if (isBase64) {
	            byteString = window.atob(dataString);
	        } else {
	            byteString = decodeURIComponent(dataString);
	        }
	        var intArray = new Uint8Array(byteString.length);
	        for (var i = 0; i < byteString.length; i += 1) {
	            intArray[i] = byteString.codePointAt(i);
	        }
	        return new Blob([intArray], { "type": mediaType });
	    };
	    constructor.canvasToBlob = function (canvas) {
	        return Utils.dataURLtoBlob(canvas.toDataURL("image/jpeg"));
	    };
	    /**
	     *  <code>
	     *         _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *           console.log(key);
	     *         });
	     *       </code>
	     * 
	     *  @param map
	     *  @param callback
	     */
	    constructor.forEach = function (map, callback) {
	        if (map == null) return;
	        Object.keys(map).forEach(function (key) {
	            callback(map[key], key);
	        });
	    };
	    constructor.sumBy = function (array, func) {
	        var sum = 0;
	        for (var i = 0; i < array.length; i++) {
	            var j = func(array[i]);
	            sum += j;
	        }
	        return sum;
	    };
	    constructor.defaults = function (defaultValues, src) {
	        Utils.forEach(src, function (v, k) {
	            if (defaultValues[k] == undefined) defaultValues[k] = v;
	        });
	        return defaultValues;
	    };
	    constructor.forEachElement = function (elements, callback) {
	        if (elements == null) return;
	        for (var i = 0; i < elements.length; i++) {
	            callback(elements[i]);
	        }
	    };
	    constructor.findElement = function (elements, predicate) {
	        for (var i = 0; i < elements.length; i++) {
	            var $invoke = predicate(elements[i]);
	            if ($invoke) {
	                return elements[i];
	            }
	        }
	        return null;
	    };
	    constructor.find = function (elements, predicate) {
	        for (var i = 0; i < elements.length; i++) {
	            var $invoke = predicate(elements[i]);
	            if ($invoke) {
	                return elements[i];
	            }
	        }
	        return null;
	    };
	    constructor.defaultArray = function (arr) {
	        return arr == null ? [] : arr;
	    };
	    constructor.base64ToArrayBuffer = function (base64) {
	        var binary_string = window.atob(base64);
	        var len = binary_string.length;
	        var bytes = new Uint8Array(len);
	        for (var i = 0; i < len; i++) {
	            bytes[i] = binary_string.charCodeAt(i);
	        }
	        return bytes.buffer;
	    };
	    constructor.secondsToTv = function (seconds, timescale) {
	        return stjs.trunc(seconds * timescale + 1.0E-6);
	    };
	    constructor.keys = function (map) {
	        return map == null ? [] : Object.keys(map);
	    };
	    constructor.HHmmSSmsecToTimestamp = function (string) {
	        var splited = string.split(":", 3);
	        if (splited.length != 3) {
	            return -1;
	        }
	        var ssmsec = splited[2].split(".", 2);
	        if (ssmsec.length != 2) {
	            return -1;
	        }
	        var msec = Integer.parseInt(ssmsec[1]);
	        var sec = Integer.parseInt(ssmsec[0]);
	        var min = Integer.parseInt(splited[1]);
	        var hour = Integer.parseInt(splited[0]);
	        return msec + sec * 1000 + min * 60 * 1000 + hour * 60 * 60 * 1000;
	    };
	    constructor.XS_DURATION_PATTERN = "^(-)?P(([0-9]*)Y)?(([0-9]*)M)?(([0-9]*)D)?(T(([0-9]*)H)?(([0-9]*)M)?(([0-9.]*)S)?)?$";
	    /**
	     *  Parses an xs:duration attribute value, returning the parsed duration in
	     *  milliseconds.
	     * 
	     *  @param value
	     *             The attribute value to parse.
	     *  @return The parsed duration in milliseconds.
	     */
	    constructor.parseXsDuration = function (value) {
	        var matches = value.match(new RegExp(Utils.XS_DURATION_PATTERN));
	        if (matches != null) {
	            var negated = Utils.isNotEmpty(matches[1]);
	            var years = matches[3];
	            var durationSeconds = years != null ? Double.parseDouble(years) * 31556908 : 0;
	            var months = matches[5];
	            durationSeconds += months != null ? Double.parseDouble(months) * 2629739 : 0;
	            var days = matches[7];
	            durationSeconds += days != null ? Double.parseDouble(days) * 86400 : 0;
	            var hours = matches[10];
	            durationSeconds += hours != null ? Double.parseDouble(hours) * 3600 : 0;
	            var minutes = matches[12];
	            durationSeconds += minutes != null ? Double.parseDouble(minutes) * 60 : 0;
	            var seconds = matches[14];
	            durationSeconds += seconds != null ? Double.parseDouble(seconds) : 0;
	            var durationMillis = stjs.trunc(durationSeconds * 1000);
	            return negated ? -durationMillis : durationMillis;
	        } else {
	            return stjs.trunc(Double.parseDouble(value) * 3600 * 1000);
	        }
	    };
	    constructor.arrayFrom = function (obj) {
	        return Array.from(obj);
	    };
	    constructor.addQueryParams = function (url, params) {
	        if (params == null) {
	            return url;
	        }
	        var query = url.replaceAll("^[^?]*", "");
	        var names = Utils.keys(params);
	        for (var i = 0; i < names.length; i++) {
	            var name = encodeURIComponent(names[i]);
	            var value = encodeURIComponent(params[names[i]]);
	            var kvp = name + "=" + value;
	            var existingRegex = new RegExp("(&|\\?)" + name + "=[^&]*");
	            if (query.match(existingRegex) != null) {
	                query = query.replace(existingRegex, "$1" + kvp);
	            } else {
	                query += query.length == 0 ? "?" : "&";
	                query += kvp;
	            }
	        }
	        return url.replaceAll("\\?.*", "") + query;
	    };
	    constructor.fromCharCodes = function (codes) {
	        var str = "";
	        for (var i = 0; i < codes.length; i++) {
	            str += String.fromCharCode(codes[i]);
	        }
	        return str;
	    };
	    constructor.stringToArray = function (str) {
	        var array = new Uint16Array(str.length);
	        for (var i = 0; i < str.length; i++) {
	            array[i] = str.charCodeAt(i);
	        }
	        return array;
	    };
	    constructor.buffersEqual = function (buf1, buf2) {
	        var a1 = new Uint8Array(buf1);
	        var a2 = new Uint8Array(buf2);
	        if (a1.length != a2.length) return false;
	        for (var i = 0; i < a1.length; i++) {
	            if (a1[i] != a2[i]) return false;
	        }
	        return true;
	    };
	}, {}, {});
	/**
	 *  Created by zhukov on 2/2/16.
	 */
	var Timeline = function () {};
	Timeline = stjs.extend(Timeline, null, [], function (constructor, prototype) {
	    constructor.UNKNOWN = null;
	    prototype.getTimeScale = function () {};
	    prototype.getFrameCount = function () {};
	    prototype.getTvBySec = function (sec) {};
	    prototype.getLastFrame = function () {};
	    prototype.getLastTv = function () {};
	    prototype.getTvByTimecode = function (timecode) {};
	    prototype.getTvByFrame = function (fn) {};
	    prototype.getFrameByTv = function (tv) {};
	    prototype.getFrameBySec = function (sec) {};
	    prototype.getFrameByTimecode = function (tc) {};
	    prototype.getFrameByMillis = function (time) {};
	    prototype.floorTv = function (tv) {};
	    prototype.boundsFn = function (fn) {};
	    prototype.getSecByFrame = function (fn) {};
	    prototype.getSecByTv = function (tv) {};
	    prototype.getMillisByTv = function (tv) {};
	    prototype.getTapeByTv = function (tv) {};
	    prototype.getTapeByFrame = function (fn) {};
	    prototype.getTapeBySec = function (time) {};
	    prototype.getTapeTimecode = function () {};
	    prototype.getDurationSec = function () {};
	    prototype.getSeekableDurationSec = function () {};
	    prototype.setSeekableDurationSec = function (durationSec) {};
	    prototype.getUpdateRx = function () {};
	    prototype.getStartUTCTimestamp = function () {};
	    prototype.setStartUTCTimestamp = function (timestamp) {};
	    prototype.getUTCTimestampBySec = function (sec) {};
	}, { UNKNOWN: "Timeline" }, {});
	var PlayerEvents = function () {};
	PlayerEvents = stjs.extend(PlayerEvents, null, [], function (constructor, prototype) {
	    constructor.PLAY_EVENT = "play";
	    constructor.LOAD_EVENT = "load";
	    constructor.TIMEUPDATE_EVENT = "timeupdate";
	    constructor.FULLSCREEN_EVENT = "fullscreen";
	    constructor.INIT_EVENT = "init";
	    constructor.TIMELINE_EVENT = "timeline";
	    constructor.ERROR_EVENT = "error";
	    constructor.VOLUME_CHANGED = "volumechange";
	    constructor.PROGRESS = "progress";
	}, {}, {});
	/**
	 *  VG Player public API
	 */
	var VGPlayerPublicApi = function () {};
	VGPlayerPublicApi = stjs.extend(VGPlayerPublicApi, null, [], function (constructor, prototype) {
	    prototype.close = function () {};
	    prototype.addCaptionsHandler = function (cb) {};
	    prototype.audioAddHandler = function (cb) {};
	    prototype.addCaptions = function (input) {};
	    prototype.load = function (url, onDone) {};
	    prototype.loadUrl = function (url, onDone) {};
	    prototype.loadAudioTrack = function (url, displayName, onDone) {};
	    prototype.setAudioTrackUrl = function (trackId, url, onDone) {};
	    prototype.conformAudioTrack = function (trackId, offset) {};
	    prototype.getAudioTrack = function (id) {};
	    prototype.setCurrentAudioTrack = function (id) {};
	    prototype.addAudioTrack = function (displayName, channelNames) {};
	    prototype.addAudioTrackWithId = function (id, displayName, channelNames) {};
	    prototype.muteAudioTrack = function (id) {};
	    prototype.togglePlay = function () {};
	    prototype.play = function () {};
	    prototype.pause = function () {};
	    prototype.getTimeline = function () {};
	    prototype.getCurrentTapeTimecode = function () {};
	    prototype.getCurrentStandardTimecode = function () {};
	    prototype.getCurrentFrame = function () {};
	    prototype.getCurrentTime = function () {};
	    prototype.getCurrentTimeValue = function () {};
	    prototype.getCurrentUTCTimestamp = function () {};
	    prototype.seekSec = function (time) {};
	    prototype.seekUTCTimestamp = function (timestamp) {};
	    prototype.seek = function (anything) {};
	    prototype.seekFrame = function (fn) {};
	    prototype.nextFrame = function (n) {};
	    prototype.previousFrame = function (n) {};
	    prototype.nextSec = function (n) {};
	    prototype.previousSec = function (n) {};
	    prototype.enterFullscreen = function () {};
	    prototype.exitFullscreen = function () {};
	    prototype.setRange = function (fromTimecode, toTimecode) {};
	    prototype.cancelRange = function () {};
	    prototype.hasRange = function () {};
	    prototype.playAtRate = function (rate) {};
	    prototype.playFasterBackwards = function () {};
	    prototype.playFaster = function () {};
	    prototype.setLoop = function (loop) {};
	    prototype.setPauseOnLoop = function (pauseOnLoop) {};
	    prototype.getPlaybackRate = function () {};
	    prototype.isPlaying = function () {};
	    prototype.getCurrentAudioTrack = function () {};
	    prototype.isAudioMutable = function () {};
	    prototype.setVolume = function (val) {};
	    prototype.getVolume = function () {};
	    prototype.getSeekableDurationSec = function () {};
	    prototype.getDurationSec = function () {};
	    prototype.getTimeSample = function () {};
	    prototype.setVideoQuality = function (res) {};
	    prototype.setStartTapeTimecode = function (tapeTimecode) {};
	    prototype.getStartTapeTimecode = function () {};
	    prototype.getCaptionsList = function () {};
	    prototype.getAudioTracks = function () {};
	    prototype.disableHotKeys = function () {};
	    prototype.enableHotKeys = function () {};
	    prototype.addEventListener = function (type, handler) {};
	    prototype.removeEventListener = function (type, handler) {};
	    prototype.getFilmStripDrawer = function (callback) {};
	    prototype.registerPlugin = function (plugin) {};
	    prototype.getBuffered = function () {};
	    prototype.setLogLevel = function (logLevel) {};
	    prototype.isLive = function () {};
	    prototype.setStartUTCTimestamp = function (timestamp) {};
	    prototype.getStartUTCTimestamp = function () {};
	}, {}, {});
	var LogLevel = stjs.enumeration("DEBUG", "INFO", "WARN", "ERROR", "OFF");
	var DRMInfo = function (streamId, keySystem, initData, contentType) {
	    this.streamId = streamId;
	    this.keySystem = keySystem;
	    this.initData = initData;
	    this.contentType = contentType;
	};
	DRMInfo = stjs.extend(DRMInfo, null, [], function (constructor, prototype) {
	    prototype.streamId = null;
	    prototype.keySystem = null;
	    prototype.initData = null;
	    prototype.contentType = null;
	}, {}, {});
	var DashSegmentUrls = function (init, urls) {
	    this.urls = urls;
	    this.init = init;
	};
	DashSegmentUrls = stjs.extend(DashSegmentUrls, null, [], function (constructor, prototype) {
	    prototype.urls = null;
	    prototype.init = null;
	    prototype.getInitUrl = function () {
	        return this.init;
	    };
	    prototype.getSegmentUrl = function (segmentIdx) {
	        return this.urls[segmentIdx];
	    };
	    prototype.getCount = function () {
	        return this.urls.length;
	    };
	}, { urls: { name: "Array", arguments: [null] } }, {});
	var SubtitleEntry = function () {};
	SubtitleEntry = stjs.extend(SubtitleEntry, null, [], function (constructor, prototype) {
	    prototype.startMsec = 0;
	    prototype.endMsec = 0;
	    prototype.startTv = 0;
	    prototype.endTv = 0;
	    prototype.timeCodeIn = null;
	    prototype.timeCodeOut = null;
	    prototype.notes = null;
	    prototype.red = false;
	}, {}, {});
	var VGPlugin = function () {};
	VGPlugin = stjs.extend(VGPlugin, null, [], function (constructor, prototype) {
	    prototype.setAPI = function (playerApi) {};
	    prototype.getId = function () {};
	    prototype.renderInto = function (container, containerWidth, onDone) {};
	}, {}, {});
	var SegmentedStream = function () {
	    this.updateRx = new Rx.Subject();
	};
	SegmentedStream = stjs.extend(SegmentedStream, null, [], function (constructor, prototype) {
	    prototype.id = null;
	    prototype.mimeType = null;
	    prototype.codecs = null;
	    prototype.url = null;
	    prototype.updateRx = null;
	    prototype.getDashInit = function (onDone, onError) {};
	    prototype.loadSegment = function (segmentIdx, onDone, onError) {};
	    prototype.getDashDescriptor = function () {};
	    prototype.getSegmentIdxByTime = function (time) {
	        return this.getDashDescriptor().getSegmentIdxByTime(time);
	    };
	    prototype.getSegmentStartTime = function (idx) {
	        return this.getDashDescriptor().getSegmentStartTime(idx);
	    };
	    prototype.getSegmentStartTv = function (idx) {
	        return this.getDashDescriptor().getSegmentStartTv(idx);
	    };
	    prototype.getSegmentTimestampOffset = function (idx) {
	        return 0;
	    };
	    prototype.getSegmentDuration = function (idx) {
	        return this.getDashDescriptor().getSegmentDuration(idx);
	    };
	    prototype.getSegmentCount = function () {
	        return this.getDashDescriptor().getSegmentCount();
	    };
	    prototype.getDurationSec = function () {
	        var desc = this.getDashDescriptor();
	        return desc.duration / desc.timescale;
	    };
	    prototype.getUpdateRx = function () {
	        return this.updateRx;
	    };
	    prototype.isDynamic = function () {
	        return this.getDashDescriptor().dynamic;
	    };
	}, { updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var AudioInfo = function () {};
	AudioInfo = stjs.extend(AudioInfo, null, [], function (constructor, prototype) {
	    constructor.AAC_CHANNEL_CONFIGS = [null, ["FrontCenter"], ["FrontLeft", "FrontRight"], ["FrontCenter", "FrontLeft", "FrontRight"], ["FrontCenter", "FrontLeft", "FrontRight", "BackCenter"], ["FrontCenter", "FrontLeft", "FrontRight", "BackLeft", "BackRight"], ["FrontCenter", "FrontLeft", "FrontRight", "BackLeft", "BackRight", "LFE"], ["FrontCenter", "FrontLeft", "FrontRight", "SideLeft", "SideRight", "BackLeft", "BackRight", "LFE"]];
	    prototype.audioType = null;
	    prototype.channelCount = 0;
	    prototype.channelLabels = null;
	    prototype.sampleRate = 0;
	    prototype.totalSamples = 0;
	    prototype.waveformPreviews = null;
	}, { AAC_CHANNEL_CONFIGS: { name: "Array", arguments: [{ name: "Array", arguments: [null] }] }, channelLabels: { name: "Array", arguments: [null] }, waveformPreviews: { name: "Array", arguments: [null] } }, {});
	/**
	 *  Created by zhukov on 2/2/16.
	 */
	var VideoSrc = function () {};
	VideoSrc = stjs.extend(VideoSrc, null, [], function (constructor, prototype) {
	    constructor.VIDEO_ONLY = 0;
	    constructor.VIDEO_AUDIO = 1;
	    prototype.detach = function () {};
	    prototype.attach = function (video) {};
	    prototype.canSetAudioWithoutReattach = function (audio) {};
	    prototype.setAudio = function (audio) {};
	    prototype.clearAudioBuffer = function () {};
	}, {}, {});
	var PlayerOptions = function () {};
	PlayerOptions = stjs.extend(PlayerOptions, null, [], function (constructor, prototype) {
	    constructor.PLUGINS = stjs.enumeration("filmstrip", "waveform", "videolog");
	    prototype.logLevel = null;
	    prototype.enableCORS = false;
	    prototype.staticVideoSrc = false;
	    prototype.hotkeys = false;
	    prototype.serverUrl = null;
	    prototype.playlist = false;
	    prototype.search = false;
	    prototype.streaming = null;
	    prototype.plugins = null;
	    prototype.theme = null;
	    prototype.preservePlaybackRate = false;
	    prototype.allowCrossSiteCredentials = false;
	    prototype.drm = null;
	    prototype.queryParams = null;
	    constructor.STREAMING_CUTLIST = "cutlist";
	    constructor.STREAMING_VFILE = "vfile";
	    constructor.STREAMING_FILE = "file";
	    constructor.DRMOptions = function () {};
	    constructor.DRMOptions = stjs.extend(constructor.DRMOptions, null, [], function (constructor, prototype) {
	        prototype.widevine = null;
	        prototype.playready = null;
	        prototype.fairplay = null;
	    }, { widevine: "PlayerOptions.DRMWidevineOptions", playready: "PlayerOptions.DRMPlayreadyOptions", fairplay: "PlayerOptions.DRMFairplayOptions" }, {});
	    constructor.DRMWidevineOptions = function () {};
	    constructor.DRMWidevineOptions = stjs.extend(constructor.DRMWidevineOptions, null, [], function (constructor, prototype) {
	        prototype.laUrl = null;
	    }, {}, {});
	    constructor.DRMPlayreadyOptions = function () {};
	    constructor.DRMPlayreadyOptions = stjs.extend(constructor.DRMPlayreadyOptions, null, [], function (constructor, prototype) {
	        prototype.laUrl = null;
	    }, {}, {});
	    constructor.DRMFairplayOptions = function () {};
	    constructor.DRMFairplayOptions = stjs.extend(constructor.DRMFairplayOptions, null, [], function (constructor, prototype) {
	        prototype.laUrl = null;
	        prototype.certUrl = null;
	    }, {}, {});
	}, { logLevel: { name: "Enum", arguments: ["LogLevel"] }, plugins: { name: "Array", arguments: [null] }, drm: "PlayerOptions.DRMOptions", queryParams: { name: "Map", arguments: [null, null] } }, {});
	var Pair = function (k, v) {
	    this.k = k;
	    this.v = v;
	};
	Pair = stjs.extend(Pair, null, [], function (constructor, prototype) {
	    prototype.k = null;
	    prototype.v = null;
	    constructor.of = function (k, v) {
	        return new Pair(k, v);
	    };
	    prototype.getKey = function () {
	        return this.k;
	    };
	    prototype.getValue = function () {
	        return this.v;
	    };
	}, {}, {});
	var Subtitles = function () {};
	Subtitles = stjs.extend(Subtitles, null, [], function (constructor, prototype) {
	    prototype.id = null;
	    prototype.rows = null;
	    prototype.title = null;
	}, { rows: { name: "Array", arguments: ["SubtitleEntry"] } }, {});
	var VideoElement = function () {};
	VideoElement = stjs.extend(VideoElement, null, [], function (constructor, prototype) {
	    constructor.SEEKING = "seeking";
	    constructor.SEEKED = "seeked";
	    constructor.VG_PLAYER_OPACITY_0 = "vg_player_opacity_0";
	    constructor.PAUSE = "pause";
	    constructor.PLAYING = "playing";
	    constructor.LOADEDMETADATA = "loadedmetadata";
	    constructor.VOLUMECHANGE = "volumechange";
	    constructor.mediaErrors = ["lalala", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED"];
	    constructor.networkStates = ["NETWORK_EMPTY", "NETWORK_IDLE", "NETWORK_LOADING", "NETWORK_NO_SOURCE"];
	    constructor.readyStates = ["HAVE_NOTHING", "HAVE_METADATA", "HAVE_CURRENT_DATA", "HAVE_FUTURE_DATA", "HAVE_ENOUGH_DATA"];
	    constructor.TIMEUPDATE = "timeupdate";
	    constructor.CANPLAY = "canplay";
	    constructor.PROGRESS = "progress";
	    prototype.seek = function (time) {};
	    prototype.getBusyRx = function () {};
	    prototype.playAtRate = function (r) {};
	    prototype.close = function () {};
	    prototype.pause = function () {};
	    prototype.isPlaying = function () {};
	    prototype.getFrame = function () {};
	    prototype.getVolume = function () {};
	    prototype.setVolume = function (v) {};
	    prototype.getTimeSec = function () {};
	    prototype.getVideoWidth = function () {};
	    prototype.getVideoHeight = function () {};
	    prototype.getTimeline = function () {};
	    prototype.getVideoShownRx = function () {};
	    prototype.getTimeUpdateRx = function () {};
	    prototype.forwardSec = function (n) {};
	    prototype.forward1 = function (n) {};
	    prototype.backward1 = function (n) {};
	    prototype.seekFrame = function (fn) {};
	    prototype.backwardSec = function (n) {};
	    prototype.getPlayRate = function () {};
	    prototype.getTimeValue = function () {};
	    prototype.playFaster = function () {};
	    prototype.playFasterBackwards = function () {};
	    prototype.getDuration = function () {};
	    prototype.getSeekableDuration = function () {};
	    prototype.endQuickSeek = function () {};
	    prototype.startQuickSeek = function () {};
	    prototype.setInitialTime = function (initialTime) {};
	    prototype.setLoop = function (loop) {};
	    prototype.setPauseOnLoop = function (pauseOnLoop) {};
	    prototype.hasRange = function () {};
	    prototype.inRange = function (fn) {};
	    prototype.setRange = function (fromFrame, toFrame) {};
	    prototype.cancelRange = function () {};
	    prototype.getPlayRx = function () {};
	    prototype.getVolumeChangeRx = function () {};
	    prototype.setCrossOrigin = function (type) {};
	    prototype.setResetPlayRateOnSeek = function (reset) {};
	    prototype.getBuffered = function () {};
	    prototype.getProgressRx = function () {};
	}, { mediaErrors: { name: "Array", arguments: [null] }, networkStates: { name: "Array", arguments: [null] }, readyStates: { name: "Array", arguments: [null] } }, {});
	var TimeRange = function (start, end) {
	    this.start = start;
	    this.end = end;
	};
	TimeRange = stjs.extend(TimeRange, null, [], function (constructor, prototype) {
	    prototype.start = 0.0;
	    prototype.end = 0.0;
	}, {}, {});
	var Mp4Streams = function () {};
	Mp4Streams = stjs.extend(Mp4Streams, null, [], function (constructor, prototype) {
	    prototype.video = null;
	    prototype.audio = null;
	    prototype.timeline = null;
	}, { video: "SegmentedStream", audio: { name: "Array", arguments: ["SegmentedAudioStream"] }, timeline: "Timeline" }, {});
	var SubsUtils = function () {};
	SubsUtils = stjs.extend(SubsUtils, null, [], function (constructor, prototype) {
	    constructor.parseTimestamp = function (timestamp) {
	        var split2 = timestamp.split(new RegExp("[:,.]"));
	        var msec = Integer.parseInt(split2.pop());
	        var sec = Integer.parseInt(split2.pop());
	        var min = Integer.parseInt(split2.pop());
	        var hour = Integer.parseInt(split2.pop());
	        return hour * 3600000 + min * 60000 + sec * 1000 + msec;
	    };
	}, {}, {});
	var MutableBoolean = function (value) {
	    this.value = value;
	};
	MutableBoolean = stjs.extend(MutableBoolean, null, [], function (constructor, prototype) {
	    prototype.value = false;
	}, {}, {});
	var PlayerAudioChannel = function () {};
	PlayerAudioChannel = stjs.extend(PlayerAudioChannel, null, [], function (constructor, prototype) {
	    prototype.muted = false;
	    prototype.label = null;
	    prototype.waveformPngUrl = null;
	}, {}, {});
	var VGPlugins = function (player) {
	    this.player = player;
	};
	VGPlugins = stjs.extend(VGPlugins, null, [], function (constructor, prototype) {
	    prototype.player = null;
	    prototype.type = null;
	    prototype.view = null;
	}, { player: "PlayerImpl", view: "VGView" }, {});
	var Proxy = function () {};
	Proxy = stjs.extend(Proxy, null, [], function (constructor, prototype) {
	    prototype.audioInfo = null;
	    prototype.proxyId = null;
	    prototype.video = null;
	    prototype.audio = null;
	    prototype.thumbshq = null;
	}, { audioInfo: "AudioInfo", video: "SegmentedVideoStream", audio: "SegmentedAudioStream", thumbshq: "SegmentedVideoStream" }, {});
	var MPDStreams = function () {};
	MPDStreams = stjs.extend(MPDStreams, null, [], function (constructor, prototype) {
	    prototype.video = null;
	    prototype.audio = null;
	    prototype.thumbshq = null;
	    prototype.thumbs = null;
	    prototype.drmInfo = null;
	}, { video: "MPDSegmentedVideoStream", audio: "MPDSegmentedAudioStream", thumbshq: "MPDSegmentedVideoStream", thumbs: "MPDSegmentedVideoStream", drmInfo: { name: "Array", arguments: ["DRMInfo"] } }, {});
	var CloseableView = function () {};
	CloseableView = stjs.extend(CloseableView, null, [], function (constructor, prototype) {
	    prototype.children = null;
	    prototype.addChild = function (view) {
	        if (this.children == null) this.children = new Array();
	        this.children.push(view);
	    };
	    prototype.close = function () {
	        if (this.children != null) {
	            for (var i = 0; i < this.children.length; i++) this.children[i].close();
	            this.children = null;
	        }
	    };
	}, { children: { name: "Array", arguments: ["CloseableView"] } }, {});
	var MutableInt = function (val) {
	    this.value = val;
	};
	MutableInt = stjs.extend(MutableInt, null, [], function (constructor, prototype) {
	    prototype.value = 0;
	    prototype.decrementAndGet = function () {
	        return --this.value;
	    };
	    prototype.incrementAndGet = function () {
	        return ++this.value;
	    };
	}, {}, {});
	var DataSrc = function () {};
	DataSrc = stjs.extend(DataSrc, null, [], function (constructor, prototype) {
	    prototype.fetch = function (from, to, onDone, onError) {};
	}, {}, {});
	var TimeSample = function (tv, frame, sec) {
	    this.tv = tv;
	    this.frame = frame;
	    this.sec = sec;
	};
	TimeSample = stjs.extend(TimeSample, null, [], function (constructor, prototype) {
	    prototype.tv = 0;
	    prototype.frame = 0;
	    prototype.sec = 0.0;
	}, {}, {});
	var DashStreamUtils = function () {};
	DashStreamUtils = stjs.extend(DashStreamUtils, null, [], function (constructor, prototype) {
	    constructor.createDownloadLink = function (stream) {
	        console.log("creating downloadable mp4");
	        var init = Rx.Observable.create(function (observer) {
	            stream.getDashInit(function (buf) {
	                observer.onNext(buf);
	                observer.onCompleted();
	            }, stjs.bind(observer, "onError"));
	        });
	        var segs = Rx.Observable.range(0, stream.getSegmentCount()).concatMap(function (idx) {
	            return Rx.Observable.create(function (observer) {
	                console.log("segment " + idx + "/" + stream.getSegmentCount());
	                stream.loadSegment(idx, function (buf) {
	                    observer.onNext(buf);
	                    observer.onCompleted();
	                }, function (err) {
	                    return observer.onError(err);
	                });
	            });
	        });
	        init.concat(segs).reduce(function (parts, buf, x, xx) {
	            parts.push(buf);
	            return parts;
	        }, []).subscribe(function (parts) {
	            console.log("finished creating downloadable mp4");
	            var blob = new Blob(parts, { "type": "video/mp4" });
	            var a = window.document.createElement("a");
	            a.href = URL.createObjectURL(blob);
	            a.target = "_blank";
	            a.download = "generated.mp4";
	            a.innerHTML = "download mp4";
	            window.document.body.appendChild(a);
	        });
	    };
	    constructor.segmentSize = function (segment) {
	        var size = 0;
	        for (var i = 0; i < segment.dataIntervals.length; i++) {
	            var interval = segment.dataIntervals[i];
	            size += interval.dataTo - interval.dataFrom;
	        }
	        return size;
	    };
	}, {}, {});
	var DashSegmentDataInterval = function () {};
	DashSegmentDataInterval = stjs.extend(DashSegmentDataInterval, null, [], function (constructor, prototype) {
	    prototype.dataFrom = 0;
	    prototype.dataTo = 0;
	}, {}, {});
	var Platform = function () {};
	Platform = stjs.extend(Platform, null, [], function (constructor, prototype) {
	    constructor.isJava = "9007199254740993".equals("" + (9007199254740991 + 2));
	    constructor.regexSplit = function (str, regex) {
	        if (!Platform.isJava) {
	            return str.split(new RegExp(regex));
	        } else {
	            return str.split(regex);
	        }
	    };
	    constructor.fromCharCode = function (charcode) {
	        if (!Platform.isJava) {
	            return String.fromCharCode(charcode);
	        } else {
	            return String.valueOf(stjs.trunc(charcode));
	        }
	    };
	    constructor.ascii = function (view, offset, len) {
	        var str = "";
	        for (var i = offset; i < offset + len; i++) {
	            var charcode = view.getUint8(i);
	            str += Platform.fromCharCode(charcode);
	        }
	        return str;
	    };
	}, {}, {});
	var FilmstripInfo = function (width, height, framesTotal) {
	    this.width = width;
	    this.height = height;
	    this.framesTotal = framesTotal;
	};
	FilmstripInfo = stjs.extend(FilmstripInfo, null, [], function (constructor, prototype) {
	    prototype.width = 0;
	    prototype.height = 0;
	    prototype.framesTotal = 0;
	}, {}, {});
	/**
	 * Methods marked with this annotation are exposed to customers 
	 */
	var PublicApi = function () {};
	PublicApi = stjs.extend(PublicApi, null, [], null, {}, {});
	var DashSegment = function () {};
	DashSegment = stjs.extend(DashSegment, null, [], function (constructor, prototype) {
	    prototype.dataIntervals = null;
	    prototype.header = null;
	}, { dataIntervals: { name: "Array", arguments: ["DashSegmentDataInterval"] }, header: "ArrayBuffer" }, {});
	var CutInfo = function (startFrame, endFrame, proxyId, cutListFrameStart, cutListFrameEnd, audioDashFile, audioInfo) {
	    this.start = startFrame;
	    this.end = endFrame;
	    this.proxyId = proxyId;
	    this.cutListFrameStart = cutListFrameStart;
	    this.cutListFrameEnd = cutListFrameEnd;
	    this.audioDashFile = audioDashFile;
	    this.audioInfo = audioInfo;
	};
	CutInfo = stjs.extend(CutInfo, null, [], function (constructor, prototype) {
	    prototype.start = 0;
	    prototype.end = 0;
	    prototype.proxyId = null;
	    prototype.cutListFrameStart = 0;
	    prototype.cutListFrameEnd = 0;
	    prototype.audioDashFile = null;
	    prototype.audioInfo = null;
	    prototype.frameCount = 0;
	    prototype.cutListFrameCount = 0;
	    prototype.cutId = 0;
	}, { audioDashFile: "SegmentedAudioStream", audioInfo: "AudioInfo" }, {});
	var ChannelMute = function (muted, channel) {
	    this.mute = muted;
	    this.channel = channel;
	};
	ChannelMute = stjs.extend(ChannelMute, null, [], function (constructor, prototype) {
	    prototype.mute = false;
	    prototype.channel = 0;
	}, {}, {});
	var PlayerCut = function (proxy, startFrame, endFrame) {
	    if (proxy != null) {
	        this.proxyId = proxy.proxyId;
	        this.videoDashFile = proxy.video;
	        this.audioDashFile = proxy.audio;
	        this.audioInfo = proxy.audioInfo;
	    }
	    this.startFrame = startFrame;
	    this.endFrame = endFrame;
	};
	PlayerCut = stjs.extend(PlayerCut, null, [], function (constructor, prototype) {
	    prototype.audioDashFile = null;
	    prototype.audioInfo = null;
	    prototype.endFrame = 0;
	    prototype.startFrame = 0;
	    prototype.videoDashFile = null;
	    prototype.proxyId = null;
	    prototype.start = 0;
	    prototype.end = 0;
	    constructor.fromProxyId = function (proxyId) {
	        var playerCut = new PlayerCut(null, 0, 0);
	        playerCut.proxyId = proxyId;
	        return playerCut;
	    };
	    constructor.LowRes = function (proxy, startFrame, endFrame) {
	        var cut = new PlayerCut(proxy, startFrame, endFrame);
	        cut.videoDashFile = proxy.thumbshq;
	        return cut;
	    };
	    prototype.setAudio = function (dashStream) {
	        this.audioDashFile = dashStream;
	        this.audioInfo = dashStream.audioInfo;
	    };
	}, { audioDashFile: "SegmentedAudioStream", audioInfo: "AudioInfo", videoDashFile: "SegmentedVideoStream" }, {});
	var ObjectEvents = function () {
	    this.events = {};
	    this.mandatoryEvents = {};
	    this.listenAlls = [];
	};
	ObjectEvents = stjs.extend(ObjectEvents, null, [], function (constructor, prototype) {
	    prototype.events = null;
	    prototype.listenAlls = null;
	    prototype.mandatoryEvents = null;
	    prototype.addEventListener = function (type, func) {
	        this.addEvent(type, func);
	    };
	    prototype.addEvent = function (type, func) {
	        if (null == this.events[type]) {
	            this.events[type] = [];
	        }
	        this.events[type].push(func);
	        if (null != this.mandatoryEvents[type]) {
	            for (var i = 0; i < this.mandatoryEvents[type].length; i++) {
	                var args = this.mandatoryEvents[type][i];
	                func(args);
	            }
	        }
	    };
	    prototype.fireEvent = function (type, args) {
	        var listeners = this.events[type];
	        if (null != listeners) {
	            for (var i = 0; i < listeners.length; i++) {
	                var listener = listeners[i];
	                listener(args);
	            }
	        }
	        for (var j = 0; j < this.listenAlls.length; j++) {
	            var listener = this.listenAlls[j];
	            listener(type, args);
	        }
	    };
	    prototype.fireMandatoryEvent = function (type, args) {
	        this.fireEvent(type, args);
	        if (null == this.mandatoryEvents[type]) {
	            this.mandatoryEvents[type] = [];
	        }
	        this.mandatoryEvents[type].push(args);
	    };
	    prototype.removeEvent = function (type, func) {
	        if (null != this.events[type]) {
	            var listeners = this.events[type];
	            for (var i = 0; i < listeners.length; i++) {
	                var listener = listeners[i];
	                if (func == listener) {
	                    listeners.splice(i, 1);
	                    this.removeEvent(type, func);
	                    return;
	                }
	            }
	        }
	    };
	    prototype.removeEvents = function (type) {
	        if (null != this.events[type]) {
	            this.events[type] = [];
	        }
	    };
	    prototype.listenAll = function (func) {
	        this.listenAlls.push(func);
	    };
	}, { events: { name: "Map", arguments: [null, { name: "Array", arguments: [{ name: "Callback1", arguments: ["Object"] }] }] }, listenAlls: { name: "Array", arguments: [{ name: "Callback2", arguments: [null, "Object"] }] }, mandatoryEvents: { name: "Map", arguments: [null, { name: "Array", arguments: ["Object"] }] } }, {});
	var PacketCache = function () {};
	PacketCache = stjs.extend(PacketCache, null, [], function (constructor, prototype) {
	    prototype.updateTimePackets = function (segmentIdx, newPkts) {};
	    prototype.getFrameByTv = function (tv) {};
	    prototype.getTvByFrame = function (fn) {};
	    prototype.floorTv = function (tv) {};
	    prototype.getFrameCount = function (durationTv) {};
	    constructor.longCompare = function (x, y) {
	        return x < y ? -1 : x == y ? 0 : 1;
	    };
	    prototype.getAverageFrameDuration = function () {};
	    prototype.updateStartSegments = function (segmentStartFrames, segmentStartTv) {};
	}, {}, {});
	var ProxyType = stjs.enumeration("HLS", "DASH", "GENERIC", "VG", "MP4");
	var KeyOptions = function () {};
	KeyOptions = stjs.extend(KeyOptions, null, [], function (constructor, prototype) {
	    prototype.group = null;
	    prototype.description = null;
	    prototype.allowInputs = false;
	    prototype.scope = null;
	    prototype.ignoreSummary = false;
	    prototype.onKeyUp = false;
	    constructor.gd = function (group, desc, allowInputs) {
	        var gd = new KeyOptions();
	        gd.group = group;
	        gd.description = desc;
	        gd.allowInputs = allowInputs;
	        return gd;
	    };
	}, {}, {});
	var AbstractFrameExtractor = function () {};
	AbstractFrameExtractor = stjs.extend(AbstractFrameExtractor, null, [], function (constructor, prototype) {
	    prototype.mp4box = null;
	    prototype.iframes = null;
	    prototype.frameData = null;
	    prototype.init = function (callback) {};
	    prototype.getInfo = function () {};
	    prototype.getPrevIframe = function (fn) {};
	    prototype.loadFrameData = function (fn) {};
	    prototype.getAvcC = function () {
	        return MovDasher.getAvcC(this.mp4box);
	    };
	}, { mp4box: "MP4Box", iframes: { name: "Array", arguments: [null] }, frameData: { name: "Array", arguments: [{ name: "Array", arguments: ["Uint8Array"] }] } }, {});
	/**
	 * methods marked with this annotation MUST NOT be exposed to customers 
	 */
	var InternalApi = function () {};
	InternalApi = stjs.extend(InternalApi, null, [], null, {}, {});
	var FrameDrawer = function (frameExtractor) {
	    this.frameExtractor = frameExtractor;
	    this.iframes = frameExtractor.iframes;
	    this.canvas = window.document.createElement("canvas");
	    this.canvas.height = this.align16(frameExtractor.getInfo().height);
	    this.canvas.width = this.align16(frameExtractor.getInfo().width);
	    this.ctx = this.canvas.getContext("2d", null);
	    this.imgData = this.ctx.createImageData(this.canvas.width, this.canvas.height);
	    this.decoder = new Decoder({ rgb: true });
	    this.lastDecodedFn = -1;
	    var avcC = frameExtractor.getAvcC();
	    this.sps = avcC.SPS[0];
	    this.pps = avcC.PPS[0];
	};
	FrameDrawer = stjs.extend(FrameDrawer, null, [], function (constructor, prototype) {
	    prototype.frameExtractor = null;
	    prototype.iframes = null;
	    prototype.canvas = null;
	    prototype.ctx = null;
	    prototype.imgData = null;
	    prototype.decoder = null;
	    prototype.lastDecodedFn = 0;
	    prototype.sps = null;
	    prototype.pps = null;
	    prototype.align16 = function (n) {
	        var rem = n % 16;
	        return rem > 0 ? n + (16 - rem) : n;
	    };
	    prototype.resetDecoder = function () {
	        this.decoder.decode(this.sps);
	        this.decoder.decode(this.pps);
	    };
	    prototype.renderFromPrevIframe = function (targetFn) {
	        var fromFn;
	        if (targetFn == this.lastDecodedFn) {
	            return Rx.Observable.just(this.canvas);
	        }
	        if (this.iframes != null) {
	            var iframe = this.frameExtractor.getPrevIframe(targetFn);
	            if (this.lastDecodedFn != -1 && this.lastDecodedFn < targetFn && this.frameExtractor.getPrevIframe(this.lastDecodedFn) == iframe) {
	                fromFn = this.lastDecodedFn + 1;
	            } else {
	                fromFn = iframe;
	                this.resetDecoder();
	            }
	        } else {
	            fromFn = targetFn;
	            this.resetDecoder();
	        }
	        return Rx.Observable.create(stjs.bind(this, function (observer) {
	            this.decoder.onPictureDecoded = function (x) {};
	            for (var fn = fromFn; fn <= targetFn; fn++) {
	                var nalUnits = this.frameExtractor.frameData[fn];
	                if (nalUnits == null) {
	                    observer.onNext(null);
	                    observer.onCompleted();
	                    break;
	                }
	                this.lastDecodedFn = fn;
	                for (var i = 0; i < nalUnits.length; i++) {
	                    if (fn == targetFn && i == nalUnits.length - 1) {
	                        this.decoder.onPictureDecoded = stjs.bind(this, function (buffer) {
	                            this.imgData.data.set(buffer, 0);
	                            this.ctx.putImageData(this.imgData, 0, 0);
	                            observer.onNext(this.canvas);
	                            observer.onCompleted();
	                        });
	                    }
	                    this.decoder.decode(nalUnits[i]);
	                }
	            }
	        }));
	    };
	    prototype.decodeFrame = function (fn) {
	        if (fn >= 0 && fn < this.frameExtractor.getInfo().framesTotal) {
	            return this.renderFromPrevIframe(fn);
	        } else {
	            return Rx.Observable.just(null);
	        }
	    };
	}, { frameExtractor: "AbstractFrameExtractor", iframes: { name: "Array", arguments: [null] }, canvas: "Canvas", ctx: "CanvasRenderingContext2D", imgData: "CanvasImageData", decoder: "Decoder", sps: "Uint8Array", pps: "Uint8Array" }, {});
	var PriorityQueue = function (comparator) {
	    this.comparator = comparator;
	    this.arr = new Array();
	};
	PriorityQueue = stjs.extend(PriorityQueue, null, [], function (constructor, prototype) {
	    prototype.arr = null;
	    prototype.comparator = null;
	    prototype.isEmpty = function () {
	        return this.arr.length == 0;
	    };
	    prototype.add = function (c) {
	        this.arr.push(c);
	        this.arr.sort(this.comparator);
	    };
	    prototype.poll = function () {
	        return this.arr.shift();
	    };
	}, { arr: { name: "Array", arguments: ["T"] }, comparator: { name: "SortFunction", arguments: ["T"] } }, {});
	var PlayerError = function (_arguments) {
	    this.message = arguments[0];
	    this.severity = stjs.trunc(arguments[1]);
	    this.data = Utils.arrayFrom(arguments).slice(2);
	};
	PlayerError = stjs.extend(PlayerError, null, [], function (constructor, prototype) {
	    prototype.message = null;
	    prototype.severity = 0;
	    prototype.data = null;
	    constructor.FATAL = 0;
	    constructor.NONFATAL = 1;
	}, { data: { name: "Array", arguments: ["Object"] } }, {});
	var TapeTimecode = function (dropFrame, startTimecode, fps) {
	    this.dropFrame = dropFrame;
	    this.startTimecode = startTimecode;
	    this.tapeFps = fps;
	};
	TapeTimecode = stjs.extend(TapeTimecode, null, [], function (constructor, prototype) {
	    prototype.startTimecode = 0;
	    prototype.dropFrame = false;
	    prototype.tapeFps = 0;
	    constructor.timecodeFromString = function (tapeTimecode, fps) {
	        var dropFrame = TapeTimecode.isDropFrameString(tapeTimecode);
	        return new TapeTimecode(dropFrame, TapeTimecode.parseTimecode(tapeTimecode, fps, dropFrame), fps);
	    };
	    prototype.setStartTimecode = function (startTimecode) {
	        this.startTimecode = startTimecode;
	    };
	    prototype.getTapeFps = function () {
	        return this.tapeFps;
	    };
	    prototype.setTapeFps = function (tapeFps) {
	        this.tapeFps = tapeFps;
	    };
	    prototype.isDropFrame = function () {
	        return this.dropFrame;
	    };
	    constructor.parseTimecode = function (tc, timecodeRate, dropFrame) {
	        var split = tc.replace(";", ":").split(":", 4);
	        var h = parseInt(split[0], 10);
	        var m = parseInt(split[1], 10);
	        var s = parseInt(split[2], 10);
	        var f = parseInt(split[3], 10);
	        var timeCode = (h * 3600 + m * 60 + s) * timecodeRate + f;
	        if (dropFrame) {
	            var D = stjs.trunc(stjs.trunc(timeCode / 17982));
	            var M = timeCode % 17982;
	            timeCode -= 18 * D + 2 * parseInt(stjs.trunc((M - 2) / 1798));
	        }
	        return timeCode;
	    };
	    constructor.timecodeToString = function (timeCode, dropFrame, timecodeRate) {
	        if (dropFrame) {
	            var D = stjs.trunc(stjs.trunc(timeCode / 17982));
	            var M = timeCode % 17982;
	            timeCode += 18 * D + 2 * stjs.trunc(stjs.trunc((M - 2) / 1798));
	        }
	        var frames = timeCode % timecodeRate;
	        timeCode = parseInt(stjs.trunc(timeCode / timecodeRate));
	        var seconds = timeCode % 60;
	        timeCode = parseInt(stjs.trunc(timeCode / 60));
	        var minutes = timeCode % 60;
	        timeCode = parseInt(stjs.trunc(timeCode / 60));
	        var hours = timeCode % 24;
	        var tcfmt = "";
	        tcfmt += Utils.zeroPad2(hours) + ':';
	        tcfmt += Utils.zeroPad2(minutes) + ':';
	        tcfmt += Utils.zeroPad2(seconds);
	        tcfmt += dropFrame ? ';' : ':';
	        tcfmt += Utils.zeroPad2(frames);
	        return tcfmt;
	    };
	    constructor.isDropFrameString = function (tc) {
	        return tc.indexOf(';') == 8;
	    };
	    prototype.getTimecodedDuration = function (frames) {
	        return TapeTimecode.timecodeToString(parseInt(frames), this.dropFrame, this.tapeFps);
	    };
	    prototype.getTimecodeAtFrame = function (frame) {
	        return TapeTimecode.timecodeToString(this.startTimecode + frame, this.dropFrame, this.tapeFps);
	    };
	    prototype.getFrameByTimecode = function (tc) {
	        return TapeTimecode.parseTimecode(tc, this.tapeFps, this.dropFrame) - this.startTimecode;
	    };
	    constructor.TIMECODE_REGEX = new RegExp("^\\d\\d[:;]\\d\\d[:;]\\d\\d[:;]\\d\\d$");
	    constructor.isTimecode = function (tc) {
	        return TapeTimecode.TIMECODE_REGEX.test(tc);
	    };
	}, { TIMECODE_REGEX: "RegExp" }, {});
	var DashDescriptor = function () {};
	DashDescriptor = stjs.extend(DashDescriptor, null, [], function (constructor, prototype) {
	    prototype.timecode = null;
	    prototype.timescale = 0;
	    prototype.avgFrameDuration = 0;
	    prototype.segmentStartTv = null;
	    prototype.segmentStartFrame = null;
	    prototype.duration = 0;
	    prototype.mimeType = null;
	    prototype.codecs = null;
	    prototype.dynamic = false;
	    prototype.width = 0;
	    prototype.height = 0;
	    prototype.channelConfig = 0;
	    prototype.baseTv = 0;
	    prototype.availabilityStartTime = null;
	    prototype.getSegmentCount = function () {
	        return this.segmentStartTv.length - 1;
	    };
	    prototype.getSegmentDuration = function (idx) {
	        var startTv = this.segmentStartTv[idx];
	        var endTv = this.segmentStartTv[idx + 1];
	        return (endTv - startTv) / this.timescale;
	    };
	    prototype.frameDataAvailable = function () {
	        return this.segmentStartFrame != null;
	    };
	    prototype.getSegmentFrameCount = function (idx) {
	        if (!this.frameDataAvailable()) {
	            return -1;
	        }
	        return this.segmentStartFrame[idx + 1] - this.segmentStartFrame[idx];
	    };
	    prototype.getSegmentIdxByFrame = function (fn) {
	        if (!this.frameDataAvailable()) {
	            return -1;
	        }
	        return Utils.binarySearchFloor(this.segmentStartFrame, function (segFn) {
	            return segFn - fn;
	        });
	    };
	    prototype.getSegmentIdxByTime = function (time) {
	        var tv = Utils.secondsToTv(time, this.timescale);
	        var segmentIdx = Utils.binarySearchFloor(this.segmentStartTv, function (segTv) {
	            return stjs.trunc(segTv - tv);
	        });
	        return segmentIdx;
	    };
	    prototype.getSegmentStartTime = function (idx) {
	        return this.segmentStartTv[idx] / this.timescale;
	    };
	    prototype.getSegmentStartTv = function (idx) {
	        return this.segmentStartTv[idx];
	    };
	    prototype.update = function (updated) {
	        this.segmentStartTv = updated.segmentStartTv;
	        this.duration = updated.duration;
	    };
	}, { segmentStartTv: { name: "Array", arguments: [null] }, segmentStartFrame: { name: "Array", arguments: [null] } }, {});
	var PlayerUtils = function () {};
	PlayerUtils = stjs.extend(PlayerUtils, null, [], function (constructor, prototype) {
	    constructor.MAX_INT = 2 * 1024 * 1024 * 1024;
	    constructor.randomString = function () {
	        var time = Utils.currentTimeMillis().toString(36);
	        var random = stjs.trunc(Math.random() * PlayerUtils.MAX_INT).toString(36);
	        return time + "-" + random;
	    };
	}, {}, {});
	var VGPlayerPluginApi = function () {};
	VGPlayerPluginApi = stjs.extend(VGPlayerPluginApi, null, [VGPlayerPublicApi], function (constructor, prototype) {
	    prototype.getCaptionListChangeRx = function () {};
	    prototype.getTimeUpdateRx = function () {};
	    prototype.getTimeline = function () {};
	    prototype.seekSec = function (frameByTv) {};
	    prototype.getCaptionHandlerRx = function () {};
	    prototype.getOptions = function () {};
	    prototype.getHttp = function () {};
	    prototype.getLog = function () {};
	    prototype.getErrorRx = function () {};
	}, {}, {});
	var Log = function (level) {
	    this.level = level;
	};
	Log = stjs.extend(Log, null, [], function (constructor, prototype) {
	    prototype.level = null;
	    prototype.setLevel = function (logLevel) {
	        this.level = logLevel;
	    };
	    prototype.getLevel = function () {
	        return this.level;
	    };
	    prototype.debug = function (_arguments) {
	        if (this.level.ordinal() <= LogLevel.DEBUG.ordinal()) {
	            this.log(arguments);
	        }
	    };
	    prototype.info = function (_arguments) {
	        if (this.level.ordinal() <= LogLevel.INFO.ordinal()) {
	            this.log(arguments);
	        }
	    };
	    prototype.warn = function (_arguments) {
	        if (this.level.ordinal() <= LogLevel.WARN.ordinal()) {
	            this.log(arguments);
	        }
	    };
	    prototype.error = function (_arguments) {
	        if (this.level.ordinal() <= LogLevel.ERROR.ordinal()) {
	            this.err(arguments);
	        }
	    };
	    prototype.log = function (_arguments) {
	        console.log.apply(console, _arguments);
	    };
	    prototype.err = function (_arguments) {
	        console.error.apply(console, _arguments);
	    };
	}, { level: { name: "Enum", arguments: ["LogLevel"] } }, {});
	var SegmentedAudioStream = function () {
	    SegmentedStream.call(this);
	};
	SegmentedAudioStream = stjs.extend(SegmentedAudioStream, SegmentedStream, [], function (constructor, prototype) {
	    constructor.FRAMES_PER_SEGMENT = 42 * 2;
	    prototype.channelMuted = null;
	    prototype.proxyId = null;
	    prototype.sampleRate = 0;
	    prototype.totalSamples = 0;
	    prototype.serverUrl = null;
	    prototype.audioInfo = null;
	    prototype.BITRATE = 0;
	    prototype.getProxyId = function () {
	        return this.proxyId;
	    };
	    prototype.setAudioInfo = function (audioInfo) {
	        this.audioInfo = audioInfo;
	    };
	    prototype.silenceAppended = function () {};
	}, { channelMuted: { name: "Array", arguments: [null] }, audioInfo: "AudioInfo", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var DashCutListStreaming = function (cutList, b, videoAudio, serverUrl) {
	    throw new RuntimeException("DashCutListStreaming TODO");
	};
	DashCutListStreaming = stjs.extend(DashCutListStreaming, null, [VideoSrc], function (constructor, prototype) {
	    prototype.detach = function () {
	        throw new RuntimeException("TODO");
	    };
	    prototype.attach = function (video) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.canSetAudioWithoutReattach = function (audio) {
	        return false;
	    };
	    prototype.setAudio = function (audio) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.clearAudioBuffer = function () {
	        throw new RuntimeException("TODO");
	    };
	}, {}, {});
	var FileStreaming = function (cut, fullRes, hasAudio, serverUrl) {
	    throw new RuntimeException("TODO");
	};
	FileStreaming = stjs.extend(FileStreaming, null, [VideoSrc], function (constructor, prototype) {
	    prototype.detach = function () {
	        throw new RuntimeException("TODO");
	    };
	    prototype.attach = function (video) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.canSetAudioWithoutReattach = function (audio) {
	        return false;
	    };
	    prototype.setAudio = function (audio) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.clearAudioBuffer = function () {
	        throw new RuntimeException("TODO");
	    };
	}, {}, {});
	var CutListStreaming = function (cutList, videoAudio, serverUrl) {
	    throw new RuntimeException("TODO");
	};
	CutListStreaming = stjs.extend(CutListStreaming, null, [VideoSrc], function (constructor, prototype) {
	    prototype.detach = function () {
	        throw new RuntimeException("TODO");
	    };
	    prototype.attach = function (video) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.canSetAudioWithoutReattach = function (audio) {
	        return false;
	    };
	    prototype.setAudio = function (audio) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.clearAudioBuffer = function () {
	        throw new RuntimeException("TODO");
	    };
	}, {}, {});
	var DCSubs = function () {};
	DCSubs = stjs.extend(DCSubs, null, [], function (constructor, prototype) {
	    constructor.probe = function (str) {
	        if (str.length < 256) {
	            return -1;
	        }
	        var score = 0;
	        if (str.startsWith("<?xml")) {
	            score = 1;
	        }
	        if (str.contains("<DCSubtitle")) {
	            score++;
	        }
	        var idx_ = -1;
	        while (-1 != (idx_ = str.indexOf("<Subtitle", idx_ + 1))) {
	            score++;
	        }
	        idx_ = -1;
	        while (-1 != (idx_ = str.indexOf("<Text", idx_ + 1))) {
	            score++;
	        }
	        return score;
	    };
	    constructor.parse = function (string, timeline) {
	        var createElement = window.document.createElement("div");
	        createElement.innerHTML = string;
	        var subtitleElements = createElement.querySelectorAll("Subtitle");
	        var seRx = Rx.Observable.from(DCSubs.toArray(subtitleElements));
	        var subs = seRx.map(function (se) {
	            var startMsec = SubsUtils.parseTimestamp(se.getAttribute("timein"));
	            var endMsec = SubsUtils.parseTimestamp(se.getAttribute("timeout"));
	            var sub = new SubtitleEntry();
	            sub.startMsec = startMsec;
	            sub.endMsec = endMsec;
	            sub.startTv = timeline.getTvBySec(startMsec / 1000.0);
	            sub.endTv = timeline.getTvBySec(endMsec / 1000.0);
	            sub.timeCodeIn = timeline.getTapeBySec(startMsec / 1000.0);
	            sub.timeCodeOut = timeline.getTapeBySec(endMsec / 1000.0);
	            sub.notes = se.innerText;
	            return sub;
	        });
	        var subtitles = new Subtitles();
	        subtitles.rows = [];
	        var subtitle = subs.reduce(function (all, sub) {
	            all.rows.push(sub);
	            return all;
	        }, subtitles);
	        return subtitle;
	    };
	    constructor.toArray = function (list) {
	        if (list == null) return null;
	        var arr = [];
	        for (var i = 0; i < list.length; i++) {
	            arr.push(list[i]);
	        }
	        return arr;
	    };
	}, {}, {});
	var Mp4Loader = function (dataSrc, onDone, onError) {
	    this.dataSrc = dataSrc;
	    this.onDone = onDone;
	    this.onError = onError;
	};
	Mp4Loader = stjs.extend(Mp4Loader, null, [], function (constructor, prototype) {
	    prototype.moovParsed = false;
	    prototype.dataSrc = null;
	    prototype.onDone = null;
	    prototype.onError = null;
	    prototype.inputMp4Box = null;
	    prototype.load = function () {
	        this.inputMp4Box = new MP4Box(false);
	        this.inputMp4Box.onReady = stjs.bind(this, function () {
	            this.moovParsed = true;
	            this.inputMp4Box.flush();
	            this.onDone(this.inputMp4Box);
	        });
	        this.loadChunk(0, 10000);
	    };
	    prototype.loadChunk = function (chunkStart, chunkEnd) {
	        this.dataSrc.fetch(chunkStart, chunkEnd, stjs.bind(this, function (buf) {
	            var buffer = buf;
	            buffer.fileStart = chunkStart;
	            if (buffer.fileStart != chunkStart) {
	                buffer = buffer.slice(0);
	                buffer.fileStart = chunkStart;
	            }
	            var nextStart = this.inputMp4Box.appendBuffer(buffer);
	            if (!this.moovParsed) {
	                if (nextStart != chunkStart) {
	                    this.loadChunk(nextStart, nextStart + 1024 * 1024);
	                } else {
	                    this.onError("mp4 parser went into a deadlock");
	                }
	            }
	        }), this.onError);
	    };
	    constructor.loadMp4 = function (dataSrc, onDone, onError) {
	        new Mp4Loader(dataSrc, onDone, onError).load();
	    };
	    constructor.parseMoov = function (buf) {
	        var inputMp4Box = new MP4Box(false);
	        var moovParsed = new MutableBoolean(false);
	        inputMp4Box.onReady = function () {
	            moovParsed.value = true;
	            inputMp4Box.flush();
	        };
	        var _buf = buf;
	        _buf.fileStart = 0;
	        inputMp4Box.appendBuffer(_buf);
	        return moovParsed.value ? inputMp4Box : null;
	    };
	    constructor.parseMoof = function (buf) {
	        var inputMp4Box = new MP4Box(false);
	        var _buf = buf;
	        _buf.fileStart = 0;
	        inputMp4Box.appendBuffer(_buf);
	        return inputMp4Box;
	    };
	}, { dataSrc: "DataSrc", onDone: { name: "Callback1", arguments: ["MP4Box"] }, onError: { name: "Callback1", arguments: ["Object"] }, inputMp4Box: "MP4Box" }, {});
	var VGView = function (container, parentView, className) {
	    CloseableView.call(this);
	    this.container = container;
	    this.parent = parentView;
	    this.el = window.document.createElement("div");
	    Utils.addMethod(this.el, "getView", stjs.bind(this, function () {
	        return this;
	    }));
	    this.parent.addChild(this);
	    if (Utils.isNotBlank(className)) {
	        this.el.className = className;
	    }
	};
	VGView = stjs.extend(VGView, CloseableView, [], function (constructor, prototype) {
	    prototype.el = null;
	    prototype.container = null;
	    prototype.parent = null;
	    prototype.render = function (template) {
	        var comment = window.document.createComment(Utils.constructorName(this));
	        this.el.innerHTML = template;
	        this.container.appendChild(comment);
	        this.container.appendChild(this.el);
	    };
	    prototype.toggleActive = function (el) {
	        var active = false;
	        if (el != null) {
	            active = el.classList.toggle("active");
	        }
	        return active;
	    };
	    constructor.findIndex = function (collection, el) {
	        for (var i = 0; i < collection.length; i++) {
	            if (collection[i].isEqualNode(el)) return i;
	        }
	        return -1;
	    };
	    constructor.offsetLeft = function (el) {
	        return el.getBoundingClientRect().left;
	    };
	    constructor.offsetX = function (clientX, el) {
	        return clientX - VGView.offsetLeft(el);
	    };
	    constructor.offsetTop = function (el) {
	        return el.getBoundingClientRect().top;
	    };
	    constructor.offsetY = function (clientY, el) {
	        return clientY - VGView.offsetTop(el);
	    };
	    constructor.toggleCollectionClass = function (collection, className) {
	        for (var i = collection.length - 1; i >= 0; i--) {
	            collection[i].classList.toggle(className);
	        }
	    };
	    constructor.toggleListClass = function (collection, className) {
	        for (var i = collection.length - 1; i >= 0; i--) {
	            collection[i].classList.toggle(className);
	        }
	    };
	    constructor.removeAll = function (collection) {
	        Utils.forEachElement(collection, function (el) {
	            el.outerHTML = "";
	        });
	    };
	    prototype.addHandlers = function (eventsObj) {
	        Utils.forEach(eventsObj, stjs.bind(this, function (handler, typeSelector) {
	            var typeSelectorArr = typeSelector.split(" ");
	            var type = typeSelectorArr[0];
	            var el = this.el.querySelector(typeSelectorArr[1]);
	            var useCapture = Boolean(typeSelectorArr[2]);
	            if (el != null && type != null && handler != null) {
	                el.addEventListener(type, handler, useCapture);
	            } else {}
	        }));
	    };
	}, { el: "Element", container: "Element", parent: "CloseableView", children: { name: "Array", arguments: ["CloseableView"] } }, {});
	var RetryWithDelay = function () {};
	RetryWithDelay = stjs.extend(RetryWithDelay, null, [], function (constructor, prototype) {
	    constructor.create = function (maxRetries, retryDelayMillis) {
	        var retryCount = new MutableInt(0);
	        return function (attempts) {
	            return attempts.flatMap(function (errorNotification) {
	                if (++retryCount.value < maxRetries) {
	                    return Rx.Observable.timer(retryDelayMillis);
	                }
	                return Rx.Observable.throw(errorNotification);
	            });
	        };
	    };
	}, {}, {});
	var Http = function (log) {
	    this.log = log;
	};
	Http = stjs.extend(Http, null, [], function (constructor, prototype) {
	    prototype.log = null;
	    prototype.queryParams = null;
	    prototype.withCredentials = false;
	    constructor.bandwidth = -1;
	    prototype.setWithCredentials = function (withCredentials) {
	        this.withCredentials = withCredentials;
	    };
	    prototype.loadTime = function (byteLength) {
	        return stjs.trunc(byteLength / (Http.bandwidth * 1024 / 8.0) * 1000);
	    };
	    prototype.postAsJson = function (url, o) {
	        return this.request(function () {
	            return url;
	        }, JSON.stringify(o), "POST", { "Content-type": "application/json" });
	    };
	    prototype.putAsJson = function (url, o) {
	        return this.request(function () {
	            return url;
	        }, JSON.stringify(o), "PUT", { "Content-type": "application/json" });
	    };
	    prototype.get = function (url) {
	        return this.request(function () {
	            return url;
	        }, null, "GET", null);
	    };
	    prototype.delete_ = function (url) {
	        return this.request(function () {
	            return url;
	        }, null, "DELETE", null);
	    };
	    prototype.getJson = function (url, cls) {
	        return this.request(function () {
	            return url;
	        }, null, "GET", null).map(stjs.bind(this, function (jsonResponse) {
	            try {
	                return stjs.parseJSON(jsonResponse, cls);
	            } catch (e) {
	                this.log.warn("error parsing json. using default json parser", url);
	                var object = JSON.parse(jsonResponse);
	                return Utils.cast(cls, object);
	            }
	        }));
	    };
	    prototype.request = function (urlFunc, data, method, headers) {
	        return this.requestBinary(urlFunc, data, method, headers, false);
	    };
	    prototype.requestBinary = function (urlFunc, data, method, headers, binary) {
	        var o = Rx.Observable.create(stjs.bind(this, function (observer) {
	            var url = Utils.addQueryParams(urlFunc(), this.queryParams);
	            var requestObserver = new Http.RequestObserver(url, data, headers, null, method, observer, this.withCredentials, binary, this.log).invoke();
	            var http = requestObserver.getHttp();
	            return stjs.bind(this, function () {
	                if (!requestObserver.loaded) {
	                    if (http.readyState != 4) {
	                        this.log.debug("abort " + method + " " + requestObserver.url);
	                        http.abort();
	                    }
	                }
	            });
	        }));
	        return o;
	    };
	    prototype.getWithUrlFunc = function (urlFunc) {
	        return this.request(urlFunc, null, "GET", null);
	    };
	    prototype.getArrayBuffer = function (url) {
	        return this.getArrayBufferRange(url, 0, 0);
	    };
	    prototype.getArrayBufferRange = function (url, from, to) {
	        var _url = Utils.addQueryParams(url, this.queryParams);
	        var o = Rx.Observable.create(stjs.bind(this, function (observer) {
	            var http = new XMLHttpRequest();
	            http.open("GET", _url, true);
	            if (to > 0) {
	                http.setRequestHeader("Range", "bytes=" + from + "-" + (to - 1));
	            }
	            http.withCredentials = this.withCredentials;
	            http.responseType = "arraybuffer";
	            http.onreadystatechange = function () {
	                if (http.readyState == 4) {
	                    if (http.status == 200 || http.status == 206 || http.status == 304) {
	                        observer.onNext(http.response);
	                        observer.onCompleted();
	                    } else {
	                        observer.onError(http);
	                    }
	                }
	            };
	            http.send(null);
	            return stjs.bind(this, function () {
	                if (http.readyState != 4) {
	                    this.log.debug("abort GET " + _url);
	                    http.abort();
	                }
	            });
	        }));
	        if (to > 0) {
	            o = o.retryWhen(stjs.bind(this, function (errs) {
	                var errorCount = new MutableInt(0);
	                return errs.flatMap(function (err) {
	                    var http = err;
	                    if (http.readyState == 4 && http.status == 0 && errorCount.incrementAndGet() <= 3) {
	                        return Rx.Observable.just(err);
	                    } else {
	                        return Rx.Observable.throw(err);
	                    }
	                }).doOnNext(stjs.bind(this, function (x) {
	                    return this.log.debug("retrying", _url);
	                }));
	            }));
	        }
	        if (Http.bandwidth != -1) {
	            o = o.flatMap(function (buf) {
	                return Http.slowdown(buf);
	            });
	        }
	        return o;
	    };
	    constructor.slowdown = function (buf) {
	        var chunkSize = 100000;
	        var chunks = new Array();
	        for (var i = 0; i < stjs.trunc(buf.byteLength / chunkSize); i++) chunks.push(chunkSize);
	        if (buf.byteLength % chunkSize > 0) chunks.push(buf.byteLength % chunkSize);
	        return Rx.Observable.from(chunks).concatMap(function (size) {
	            return Http.Slowdown.create(size);
	        }).takeLast(1).map(function (x) {
	            return buf;
	        });
	    };
	    prototype.setQueryParams = function (queryParams) {
	        this.queryParams = queryParams;
	    };
	    constructor.RequestObserver = function (url, data, headers, form, method, observer, withCredentials, binary, log) {
	        this.url = url;
	        this.data = data;
	        this.withCredentials = withCredentials;
	        this.binary = binary;
	        this.log = log;
	        this.headers = headers == null ? {} : headers;
	        this.form = form;
	        this.method = method;
	        this.observer = observer;
	    };
	    constructor.RequestObserver = stjs.extend(constructor.RequestObserver, null, [], function (constructor, prototype) {
	        prototype.url = null;
	        prototype.data = null;
	        prototype.withCredentials = false;
	        prototype.binary = false;
	        prototype.log = null;
	        prototype.form = null;
	        prototype.method = null;
	        prototype.observer = null;
	        prototype.http = null;
	        prototype.loaded = false;
	        prototype.headers = null;
	        prototype.getHttp = function () {
	            return this.http;
	        };
	        prototype.getLoaded = function () {
	            return this.loaded;
	        };
	        prototype.invoke = function () {
	            this.http = new XMLHttpRequest();
	            this.http.open(this.method, this.url);
	            this.http.withCredentials = this.withCredentials;
	            if (this.binary) {
	                this.http.responseType = "arraybuffer";
	            }
	            Utils.keys(this.headers).forEach(stjs.bind(this, function (h) {
	                return this.http.setRequestHeader(h, this.headers[h]);
	            }));
	            this.log.debug(this.method, this.url);
	            this.loaded = false;
	            this.http.onreadystatechange = stjs.bind(this, function () {
	                if (this.http.readyState == 1) {
	                    Utils.keys(this.headers).forEach(stjs.bind(this, function (h) {
	                        return this.http.setRequestHeader(h, this.headers[h]);
	                    }));
	                }
	            });
	            this.http.onload = stjs.bind(this, function () {
	                this.loaded = true;
	                if (this.http.status == 204) {
	                    this.observer.onNext(null);
	                    this.observer.onCompleted();
	                }
	                if (this.http.status >= 200 && this.http.status < 400) {
	                    this.observer.onNext(this.http.response);
	                    this.observer.onCompleted();
	                }
	                if (this.http.status >= 400) {
	                    this.log.debug("error " + this.http.status + " " + this.method + " " + this.url);
	                    this.observer.onError(this.http);
	                }
	                if (this.http.status == 0) {
	                    this.log.debug("error " + this.http.status + " " + this.method + " " + this.url);
	                    this.observer.onError(this.http);
	                }
	            });
	            this.http.onerror = stjs.bind(this, function (e) {
	                this.log.debug("error " + this.http.status + " " + this.method + " " + this.url);
	                this.observer.onError(e);
	            });
	            if (this.data == null) {
	                this.http.send(this.form);
	            } else {
	                this.http.send(this.data);
	            }
	            return this;
	        };
	    }, { data: "Object", log: "Log", form: "FormData", observer: { name: "Rx.Observer", arguments: ["T"] }, http: "XMLHttpRequest", headers: { name: "Map", arguments: [null, null] } }, {});
	    constructor.Slowdown = function () {};
	    constructor.Slowdown = stjs.extend(constructor.Slowdown, null, [], function (constructor, prototype) {
	        prototype.tid = null;
	        constructor.create = function (byteLength) {
	            var instance = new Http.Slowdown();
	            return Rx.Observable.create(function (observer) {
	                if (Http.bandwidth == -1) {
	                    observer.onNext(true);
	                    observer.onCompleted();
	                    return function () {};
	                } else {
	                    var loadTime = stjs.trunc(byteLength / (Http.bandwidth * 1024 / 8.0) * 1000);
	                    instance.tid = setTimeout(function () {
	                        observer.onNext(true);
	                        observer.onCompleted();
	                    }, loadTime);
	                    return function () {
	                        return clearTimeout(instance.tid);
	                    };
	                }
	            });
	        };
	    }, { tid: "TimeoutHandler" }, {});
	}, { log: "Log", queryParams: { name: "Map", arguments: [null, null] } }, {});
	var HttpDataSrc = function (http, url) {
	    this.http = http;
	    this.url = url;
	};
	HttpDataSrc = stjs.extend(HttpDataSrc, null, [DataSrc], function (constructor, prototype) {
	    prototype.http = null;
	    prototype.url = null;
	    prototype.fetch = function (from, to, onDone, onError) {
	        var disp = this.http.getArrayBufferRange(this.url, from, to).subscribe(onDone, function (req) {
	            return onError("" + req.status);
	        });
	        return stjs.bind(disp, "dispose");
	    };
	}, { http: "Http" }, {});
	var DashifiedMp4SegmentedVideoStream = function (moovbuf, segments, dataSrc, desc, sampleDuration) {
	    SegmentedStream.call(this);
	    this.desc = desc;
	    this.moovbuf = moovbuf;
	    this.segments = segments;
	    this.dataSrc = dataSrc;
	    this.sampleDuration = sampleDuration;
	    this.timecode = desc.timecode;
	    this.timescale = desc.timescale;
	    this.mimeType = this.getDashDescriptor().mimeType;
	    this.codecs = this.getDashDescriptor().codecs;
	};
	DashifiedMp4SegmentedVideoStream = stjs.extend(DashifiedMp4SegmentedVideoStream, SegmentedStream, [], function (constructor, prototype) {
	    prototype.desc = null;
	    prototype.segments = null;
	    prototype.moovbuf = null;
	    prototype.dataSrc = null;
	    prototype.sampleDuration = 0;
	    prototype.timecode = null;
	    prototype.timescale = 0;
	    prototype.getFrameCount = function () {
	        return stjs.trunc(stjs.trunc(this.desc.duration / this.sampleDuration));
	    };
	    prototype.getDashDescriptor = function () {
	        return this.desc;
	    };
	    prototype.getDashInit = function (onDone, onError) {
	        onDone(this.moovbuf);
	    };
	    prototype.loadSegment = function (segmentIdx, onDone, onError) {
	        var segment = this.segments[segmentIdx];
	        var array = new Int8Array(segment.header.byteLength + DashStreamUtils.segmentSize(segment));
	        array.set(new Int8Array(segment.header), 0);
	        var merged = new DashSegmentDataInterval();
	        merged.dataFrom = segment.dataIntervals[0].dataFrom;
	        merged.dataTo = segment.dataIntervals[segment.dataIntervals.length - 1].dataTo;
	        var disposable = this.fetchSingle(merged).doOnCompleted(function () {
	            return onDone(array.buffer);
	        }).subscribe(function (response) {
	            var offset = stjs.trunc(segment.header.byteLength);
	            for (var i = 0; i < segment.dataIntervals.length; i++) {
	                var interval = segment.dataIntervals[i];
	                var subarray = response.slice(stjs.trunc(interval.dataFrom - merged.dataFrom), stjs.trunc(interval.dataTo - merged.dataFrom));
	                array.set(subarray, offset);
	                offset += interval.dataTo - interval.dataFrom;
	            }
	        }, function (e) {
	            return onError(e);
	        });
	        return stjs.bind(disposable, "dispose");
	    };
	    prototype.fetchSingle = function (dataInterval) {
	        return Rx.Observable.create(stjs.bind(this, function (o) {
	            return this.dataSrc.fetch(dataInterval.dataFrom, dataInterval.dataTo, function (data) {
	                o.onNext(new Int8Array(data));
	                o.onCompleted();
	            }, stjs.bind(o, "onError"));
	        }));
	    };
	}, { desc: "DashDescriptor", segments: { name: "Array", arguments: ["DashSegment"] }, moovbuf: "ArrayBuffer", dataSrc: "DataSrc", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var EbuSubs = function () {};
	EbuSubs = stjs.extend(EbuSubs, null, [], function (constructor, prototype) {
	    constructor.HEADER_SIZE = 1024;
	    constructor.TTI_SIZE = 128;
	    constructor.TEXT_FIELD_CRLF = 138;
	    constructor.TEXT_FIELD_TERMINATOR = 143;
	    constructor.MODE_SYMBOLS_RANGE_FROM = 128;
	    constructor.MODE_SYMBOLS_RANGE_TO = 133;
	    constructor.fromEbuSubs = function (ttis, timeline) {
	        var fun = function (tti, i, arr) {
	            var entry = new SubtitleEntry();
	            var tcin = tti.getTimecodeIn();
	            var tcout = tti.getTimecodeOut();
	            var frameIn = timeline.getFrameByTimecode(tcin);
	            var frameOut = timeline.getFrameByTimecode(tcout);
	            entry.startMsec = stjs.trunc(timeline.getSecByFrame(frameIn) * 1000);
	            entry.endMsec = stjs.trunc(timeline.getSecByFrame(frameOut) * 1000);
	            entry.startTv = timeline.getTvByFrame(frameIn);
	            entry.endTv = timeline.getTvByFrame(frameOut);
	            entry.notes = tti.text;
	            entry.timeCodeIn = tcin;
	            entry.timeCodeOut = tcout;
	            return entry;
	        };
	        var entries = ttis.map(fun);
	        var subs = new Subtitles();
	        subs.rows = entries;
	        return subs;
	    };
	    constructor.parse = function (f, timeline, log) {
	        var ttis = EbuSubs.parseFile(f, log);
	        var fromEbuSubs = EbuSubs.fromEbuSubs(ttis, timeline);
	        return fromEbuSubs;
	    };
	    constructor.probe = function (f, log) {
	        var parseFile = EbuSubs.parseFile(f, log);
	        if (parseFile == null) return -1;
	        var score = 0;
	        for (var i = 0; i < parseFile.length; i++) {
	            var tti = parseFile[i];
	            var secIn = tti.timeCodeInHours * 3600 + tti.timeCodeInMinutes * 60 + tti.timeCodeInSeconds;
	            var secOut = tti.timeCodeOutHours * 3600 + tti.timeCodeOutMinutes * 60 + tti.timeCodeOutSeconds;
	            if (secOut > secIn) {
	                score++;
	            }
	            if (secOut < secIn) {
	                score--;
	            }
	        }
	        return score;
	    };
	    constructor.parseFile = function (f, log) {
	        var data = new DataView(f);
	        if (data.byteLength > EbuSubs.HEADER_SIZE) {
	            var h = EbuSubs.parseHeader(data);
	            if (EbuSubs.isHeaderValid(h)) {
	                var ttis = EbuSubs.parseTTI(data, h, log);
	                return ttis;
	            }
	        }
	        return null;
	    };
	    constructor.VALID_CODEPAGES_SORTED = [437, 850, 860, 863, 865];
	    constructor.isHeaderValid = function (h) {
	        var codePageNumber;
	        try {
	            codePageNumber = Integer.parseInt(h.codePageNumber);
	        } catch (nfe) {
	            return false;
	        }
	        return Utils.binarySearch0(EbuSubs.VALID_CODEPAGES_SORTED, codePageNumber) != -1;
	    };
	    constructor.parseHeader = function (buffer) {
	        var header = new EbuSubs.EbuHeader();
	        header.codePageNumber = Platform.ascii(buffer, 0, 3);
	        header.diskFormatCode = Platform.ascii(buffer, 3, 8);
	        header.displayStandardCode = Platform.ascii(buffer, 11, 1);
	        header.characterCodeTableNumber = Platform.ascii(buffer, 12, 2);
	        header.languageCode = Platform.ascii(buffer, 14, 2);
	        header.originalProgrammeTitle = Platform.ascii(buffer, 16, 32);
	        header.originalEpisodeTitle = Platform.ascii(buffer, 48, 32);
	        header.translatedProgrammeTitle = Platform.ascii(buffer, 80, 32);
	        header.translatedEpisodeTitle = Platform.ascii(buffer, 112, 32);
	        header.translatorsName = Platform.ascii(buffer, 144, 32);
	        header.translatorsContactDetails = Platform.ascii(buffer, 176, 32);
	        header.subtitleListReferenceCode = Platform.ascii(buffer, 208, 16);
	        header.creationDate = Platform.ascii(buffer, 224, 6);
	        header.revisionDate = Platform.ascii(buffer, 230, 6);
	        header.revisionNumber = Platform.ascii(buffer, 236, 2);
	        header.totalNumberOfTextAndTimingInformationBlocks = Platform.ascii(buffer, 238, 5);
	        header.totalNumberOfSubtitles = Platform.ascii(buffer, 243, 5);
	        header.totalNumberOfSubtitleGroups = Platform.ascii(buffer, 248, 3);
	        header.maximumNumberOfDisplayableCharactersInAnyTextRow = Platform.ascii(buffer, 251, 2);
	        header.maximumNumberOfDisplayableRows = Platform.ascii(buffer, 253, 2);
	        header.timeCodeStatus = Platform.ascii(buffer, 255, 1);
	        header.timeCodeStartOfProgramme = Platform.ascii(buffer, 256, 8);
	        return header;
	    };
	    constructor.parseTTI = function (buffer, header, log) {
	        var result = new Array();
	        var offset = EbuSubs.HEADER_SIZE;
	        if (!(header.diskFormatCode.startsWith("STL24.01") || header.diskFormatCode.startsWith("STL25.01") || header.diskFormatCode.startsWith("STL30.01"))) {
	            log.warn("Unknown disk format code: " + header.diskFormatCode + ", was set to defult value: 24");
	        }
	        var isISO_6937 = "00".equals(header.characterCodeTableNumber);
	        while (offset + EbuSubs.TTI_SIZE < buffer.byteLength) {
	            var tti = new EbuSubs.EbuTextTimeInfo();
	            tti.offset = offset;
	            tti.subtitleGroupNumber = buffer.getUint8(offset);
	            tti.subtitleNumber = buffer.getUint8(offset + 2) * 256 + buffer.getUint8(offset + 1);
	            tti.extensionBlockNumber = buffer.getUint8(offset + 3);
	            tti.cumulativeStatus = buffer.getUint8(offset + 4);
	            tti.timeCodeInHours = buffer.getUint8(offset + 5 + 0);
	            tti.timeCodeInMinutes = buffer.getUint8(offset + 5 + 1);
	            tti.timeCodeInSeconds = buffer.getUint8(offset + 5 + 2);
	            tti.timeCodeInFrames = buffer.getUint8(offset + 5 + 3);
	            tti.timeCodeOutHours = buffer.getUint8(offset + 9 + 0);
	            tti.timeCodeOutMinutes = buffer.getUint8(offset + 9 + 1);
	            tti.timeCodeOutSeconds = buffer.getUint8(offset + 9 + 2);
	            tti.timeCodeOutFrames = buffer.getUint8(offset + 9 + 3);
	            tti.verticalPosition = buffer.getUint8(offset + 13);
	            tti.justificationCode = buffer.getUint8(offset + 14);
	            tti.commentFlag = buffer.getUint8(offset + 15);
	            var sb = "";
	            for (var i = 16; i < EbuSubs.TTI_SIZE; i++) {
	                var bi = buffer.getUint8(offset + i);
	                if (bi == EbuSubs.TEXT_FIELD_TERMINATOR) {
	                    break;
	                } else if (EbuSubs.isTextModeChange(bi) || EbuSubs.isColorSymbol(bi)) {
	                    continue;
	                } else if (bi == EbuSubs.TEXT_FIELD_CRLF) {
	                    sb += "\n";
	                } else {
	                    if (isISO_6937 && EbuSubs.isCombining(bi)) {
	                        if (i < EbuSubs.TTI_SIZE - 1) {
	                            var bNext = buffer.getUint8(offset + i + 1);
	                            if (EbuSubs.isCharacter(bNext & 255)) {
	                                var c = EbuSubs.combineChars(bi, bNext & 255);
	                                sb += c;
	                                i++;
	                            }
	                        }
	                    } else if (EbuSubs.isCharacter(bi)) {
	                        var c = Platform.fromCharCode(bi);
	                        sb += c;
	                    }
	                }
	            }
	            tti.text = sb;
	            result.push(tti);
	            offset += EbuSubs.TTI_SIZE;
	        }
	        return result;
	    };
	    constructor.CombinedChars = function (prefix, toChars, fromChars) {
	        this.prefix = prefix;
	        this.fromChars = fromChars;
	        this.toChars = toChars;
	    };
	    constructor.CombinedChars = stjs.extend(constructor.CombinedChars, null, [], function (constructor, prototype) {
	        prototype.prefix = 0;
	        prototype.fromChars = null;
	        prototype.toChars = null;
	    }, {}, {});
	    constructor.combinedChars = new Array();
	    constructor.combineChars = function (prefix, val) {
	        var c = String.fromCharCode(val);
	        for (var i = 0; i < EbuSubs.combinedChars.length; i++) {
	            var cc = EbuSubs.combinedChars[i];
	            if (cc.prefix == prefix) {
	                var idx = cc.fromChars.indexOf(c);
	                if (idx != -1) {
	                    return cc.toChars.substring(idx, idx + 1);
	                }
	            }
	        }
	        return c;
	    };
	    constructor.CODE_TABLE = ["US-ASCII", "ISO-8859-5", "ISO-8859-6", "ISO-8859-7", "ISO-8859-8"];
	    constructor.isColorSymbol = function (bi) {
	        return bi >= 0 && bi <= 23;
	    };
	    constructor.isCharacter = function (bi) {
	        return bi >= 32 && bi <= 127 || bi >= 161;
	    };
	    constructor.isCombining = function (bi) {
	        return bi >= 193 && bi <= 207;
	    };
	    constructor.isTextModeChange = function (bi) {
	        return bi >= EbuSubs.MODE_SYMBOLS_RANGE_FROM && bi <= EbuSubs.MODE_SYMBOLS_RANGE_TO;
	    };
	    constructor.EbuHeader = function () {};
	    constructor.EbuHeader = stjs.extend(constructor.EbuHeader, null, [], function (constructor, prototype) {
	        prototype.codePageNumber = null;
	        prototype.diskFormatCode = null;
	        prototype.displayStandardCode = null;
	        prototype.characterCodeTableNumber = null;
	        prototype.languageCode = null;
	        prototype.originalProgrammeTitle = null;
	        prototype.originalEpisodeTitle = null;
	        prototype.translatedProgrammeTitle = null;
	        prototype.translatedEpisodeTitle = null;
	        prototype.translatorsName = null;
	        prototype.translatorsContactDetails = null;
	        prototype.subtitleListReferenceCode = null;
	        prototype.creationDate = null;
	        prototype.revisionDate = null;
	        prototype.revisionNumber = null;
	        prototype.totalNumberOfTextAndTimingInformationBlocks = null;
	        prototype.totalNumberOfSubtitles = null;
	        prototype.totalNumberOfSubtitleGroups = null;
	        prototype.maximumNumberOfDisplayableCharactersInAnyTextRow = null;
	        prototype.maximumNumberOfDisplayableRows = null;
	        prototype.timeCodeStatus = null;
	        prototype.timeCodeStartOfProgramme = null;
	        prototype.toString = function () {
	            return Utils.jsonToString(this);
	        };
	    }, {}, {});
	    constructor.EbuTextTimeInfo = function () {};
	    constructor.EbuTextTimeInfo = stjs.extend(constructor.EbuTextTimeInfo, null, [], function (constructor, prototype) {
	        /**
	         * file offset of this subtitle entry 
	         */
	        prototype.offset = 0;
	        prototype.subtitleGroupNumber = 0;
	        prototype.subtitleNumber = 0;
	        prototype.extensionBlockNumber = 0;
	        prototype.cumulativeStatus = 0;
	        prototype.timeCodeInHours = 0;
	        prototype.timeCodeInMinutes = 0;
	        prototype.timeCodeInSeconds = 0;
	        prototype.timeCodeInFrames = 0;
	        prototype.timeCodeOutHours = 0;
	        prototype.timeCodeOutMinutes = 0;
	        prototype.timeCodeOutSeconds = 0;
	        prototype.timeCodeOutFrames = 0;
	        prototype.verticalPosition = 0;
	        prototype.justificationCode = 0;
	        prototype.commentFlag = 0;
	        prototype.text = null;
	        prototype.getTimecodeIn = function () {
	            return Utils.hmsf(this.timeCodeInHours, this.timeCodeInMinutes, this.timeCodeInSeconds, this.timeCodeInFrames);
	        };
	        prototype.getTimecodeOut = function () {
	            return Utils.hmsf(this.timeCodeOutHours, this.timeCodeOutMinutes, this.timeCodeOutSeconds, this.timeCodeOutFrames);
	        };
	    }, {}, {});
	}, { VALID_CODEPAGES_SORTED: { name: "Array", arguments: [null] }, combinedChars: { name: "Array", arguments: ["EbuSubs.CombinedChars"] }, CODE_TABLE: { name: "Array", arguments: [null] } }, {});
	(function () {
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(193, "\xc0\xc8\xcc\xd2\xd9\xe0\xe8\xec\xf2\xf9", "AEIOUaeiou"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(194, "\xc1\u0106\xc9\xcd\u0139\u0143\xd3\u0154\u015a\xda\xdd\u0179\xe1\u0107\xe9\u0123\xed\u013a\u0144\xf3\u0155\u015b\xfa\xfd\u017a", "ACEILNORSUYZacegilnorsuyz"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(195, "\xc2\u0108\xca\u011c\u0124\xce\u0134\xd4\u015c\xdb\u0174\u0176\xe2\u0109\xea\u011d\u0125\xee\u0135\xf4\u015d\xfb\u0175\u0177", "ACEGHIJOSUWYaceghijosuwy"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(196, "\xc3\u0128\xd1\xd5\u0168\xe3\u0129\xf1\xf5\u0169", "AINOUainou"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(197, "\u0100\u0112\u012a\u014c\u016a\u0101\u0113\u012b\u014d\u016b", "AEIOUaeiou"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(198, "\u0102\u011e\u016c\u0103\u011f\u016d", "AGUagu"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(199, "\u010a\u0116\u0120\u0130\u017b\u010b\u0117\u0121\u0131\u017c", "CEGIZcegiz"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(200, "\xc4\xcb\xcf\xd6\xdc\u0178\xe4\xeb\xef\xf6\xfc\xff", "AEIOUYaeiouy"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(202, "\xc5\u016e\xe5\u016f", "AUau"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(203, "\xc7\u0122\u0136\u013b\u0145\u0156\u015e\u0162\xe7\u0137\u013c\u0146\u0157\u015f\u0163", "CGKLNRSTcklnrst"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(205, "\u0150\u0170\u0151\u0171", "OUou"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(206, "\u0104\u0118\u012e\u0172\u0105\u0119\u012f\u0173", "AEIUaeiu"));
	    EbuSubs.combinedChars.push(new EbuSubs.CombinedChars(207, "\u010c\u010e\u011a\u013d\u0147\u0158\u0160\u0164\u017d\u010d\u010f\u011b\u013e\u0148\u0159\u0161\u0165\u017e", "CDELNRSTZcdelnrstz"));
	})();
	var Cavena890 = function () {};
	Cavena890 = stjs.extend(Cavena890, null, [], function (constructor, prototype) {
	    constructor.LanguageIdDanish = 7;
	    constructor.LanguageIdEnglish = 9;
	    constructor.LanguageIdRussian = 86;
	    constructor.LanguageIdArabic = 128;
	    constructor.LanguageIdHebrew = 143;
	    constructor.LanguageIdChineseTraditional = 144;
	    constructor.LanguageIdChineseSimplified = 145;
	    constructor.hebrew = null;
	    constructor.russian = null;
	    constructor.noencoding = null;
	    constructor.encodings = [];
	    constructor.textLength = 51;
	    constructor.LANGID1_OFFSET = 146;
	    constructor.LANGID2_OFFSET = 147;
	    constructor.FONTNAME1_OFFSET = 187;
	    constructor.FONTNAME2_OFFSET = 246;
	    constructor.FONTNAME_SIZE = 6;
	    constructor.TEXTSTART_OFFSET = 455;
	    /**
	     *  
	     *  @param buf
	     *  @return score -1 - not enough data, 0 - lowest score, Integer.MAX_VALUE -
	     *          highest score
	     */
	    constructor.probe = function (buf) {
	        if (buf.byteLength < Cavena890.TEXTSTART_OFFSET) {
	            return -1;
	        }
	        var view = new DataView(buf);
	        var _languageId1 = view.getUint8(Cavena890.LANGID1_OFFSET);
	        var _languageId2 = view.getUint8(Cavena890.LANGID2_OFFSET);
	        var fontName1 = Cavena890.isAsciiString(view, Cavena890.FONTNAME1_OFFSET, Cavena890.FONTNAME_SIZE);
	        var fontName2 = Cavena890.isAsciiString(view, Cavena890.FONTNAME2_OFFSET, Cavena890.FONTNAME_SIZE);
	        var score = 0;
	        if (!fontName1 || !fontName2) {
	            return score;
	        } else {
	            score = 1;
	        }
	        if (_languageId1 == Cavena890.LanguageIdEnglish) {
	            score++;
	        }
	        var i = Cavena890.TEXTSTART_OFFSET;
	        var lastNumber = -1;
	        while (i < view.byteLength - 20) {
	            var start = i - Cavena890.textLength;
	            var number = view.getUint16(start - 16);
	            if (lastNumber < number) {
	                score++;
	            } else {
	                score--;
	            }
	            var startFrame = Cavena890.uint24(view, start - 14);
	            var endFrame = Cavena890.uint24(view, start - 11);
	            if (startFrame < endFrame) {
	                score++;
	            } else {
	                score--;
	            }
	            lastNumber = number;
	            i += 128;
	        }
	        return score;
	    };
	    constructor.parse = function (_buf, timeline, log) {
	        var view = new DataView(_buf);
	        var _languageId1 = view.getUint8(Cavena890.LANGID1_OFFSET);
	        var _languageId2 = view.getUint8(Cavena890.LANGID2_OFFSET);
	        var fontName1 = Platform.ascii(view, Cavena890.FONTNAME1_OFFSET, Cavena890.FONTNAME_SIZE);
	        var fontName2 = Platform.ascii(view, Cavena890.FONTNAME2_OFFSET, Cavena890.FONTNAME_SIZE);
	        var languageId = _languageId2;
	        if (_languageId1 == Cavena890.LanguageIdRussian || fontName1.startsWith("KYRIL") || fontName2.startsWith("KYRIL")) {
	            languageId = Cavena890.LanguageIdRussian;
	        }
	        if (_languageId1 == Cavena890.LanguageIdHebrew || fontName1.startsWith("HEBNOA") || fontName2.startsWith("HEBNOA")) {
	            languageId = Cavena890.LanguageIdHebrew;
	        }
	        var encoding = Cavena890.encodings[languageId];
	        if (encoding == null) {
	            if (_languageId1 != Cavena890.LanguageIdEnglish) {
	                log.warn("unknown encoding " + _languageId1 + "/" + _languageId2 + " " + fontName1 + "/" + fontName2);
	            }
	            encoding = Cavena890.noencoding;
	        }
	        var subtitles = new Subtitles();
	        subtitles.rows = [];
	        var i = Cavena890.TEXTSTART_OFFSET;
	        while (i < view.byteLength - 20) {
	            var start = i - Cavena890.textLength;
	            var number = view.getUint16(start - 16);
	            var startFrame = Cavena890.uint24(view, start - 14);
	            var endFrame = Cavena890.uint24(view, start - 11);
	            var buf1 = new DataView(_buf, start, Cavena890.textLength);
	            var buf2 = new DataView(_buf, start + Cavena890.textLength + 6, Cavena890.textLength);
	            var line1 = Cavena890.makeString(buf1, encoding);
	            var line2 = Cavena890.makeString(buf2, encoding);
	            var sub = new SubtitleEntry();
	            sub.timeCodeIn = timeline.getTapeByFrame(startFrame);
	            sub.timeCodeOut = timeline.getTapeByFrame(endFrame);
	            sub.startTv = timeline.getTvByFrame(startFrame);
	            sub.endTv = timeline.getTvByFrame(endFrame);
	            sub.startMsec = stjs.trunc(timeline.getSecByFrame(startFrame) * 1000);
	            sub.endMsec = stjs.trunc(timeline.getSecByFrame(endFrame) * 1000);
	            sub.notes = [line1, line2].join(" ");
	            subtitles.rows.push(sub);
	            i += 128;
	        }
	        return subtitles;
	    };
	    constructor.makeString = function (buf1, encoding) {
	        var string = "";
	        var i = 0;
	        for (; i < buf1.byteLength; i++) {
	            var b = buf1.getInt8(i);
	            if (b == 127) {
	                break;
	            }
	            var c = encoding[b];
	            if (null == c) {
	                var cb = String.fromCharCode(b);
	                string += cb;
	            } else {
	                string += c;
	            }
	        }
	        return string;
	    };
	    constructor.uint24 = function (view, offset) {
	        return view.getUint16(offset) << 8 | view.getUint8(offset + 2);
	    };
	    constructor.isAsciiString = function (view, offset, len) {
	        for (var i = 0; i < len; i++) {
	            var uint8 = view.getUint8(offset + i);
	            if (uint8 < 32 || uint8 > 127) return false;
	        }
	        return true;
	    };
	}, { hebrew: { name: "Array", arguments: [null] }, russian: { name: "Array", arguments: [null] }, noencoding: { name: "Array", arguments: [null] }, encodings: { name: "Array", arguments: [{ name: "Array", arguments: [null] }] } }, {});
	(function () {
	    Cavena890.hebrew = new Array(256);
	    Cavena890.russian = new Array(256);
	    Cavena890.noencoding = new Array(256);
	    Cavena890.encodings[Cavena890.LanguageIdRussian] = Cavena890.russian;
	    Cavena890.encodings[Cavena890.LanguageIdHebrew] = Cavena890.hebrew;
	    Cavena890.hebrew[64] = "\u05d0";
	    Cavena890.hebrew[65] = "\u05d1";
	    Cavena890.hebrew[66] = "\u05d2";
	    Cavena890.hebrew[67] = "\u05d3";
	    Cavena890.hebrew[68] = "\u05d4";
	    Cavena890.hebrew[69] = "\u05d5";
	    Cavena890.hebrew[70] = "\u05d6";
	    Cavena890.hebrew[71] = "\u05d7";
	    Cavena890.hebrew[73] = "\u05d9";
	    Cavena890.hebrew[76] = "\u05dc";
	    Cavena890.hebrew[77] = "\u05dd";
	    Cavena890.hebrew[78] = "\u05de";
	    Cavena890.hebrew[79] = "\u05df";
	    Cavena890.hebrew[80] = "\u05e0";
	    Cavena890.hebrew[81] = "\u05e1";
	    Cavena890.hebrew[82] = "\u05e2";
	    Cavena890.hebrew[84] = "\u05e4";
	    Cavena890.hebrew[86] = "\u05e6";
	    Cavena890.hebrew[87] = "\u05e7";
	    Cavena890.hebrew[88] = "\u05e8";
	    Cavena890.hebrew[89] = "\u05e9";
	    Cavena890.hebrew[90] = "\u05ea";
	    Cavena890.hebrew[75] = "\u05db";
	    Cavena890.hebrew[74] = "\u05da";
	    Cavena890.hebrew[72] = "\u05d8";
	    Cavena890.hebrew[83] = "\u05e3";
	    Cavena890.hebrew[85] = "\u05e5";
	    Cavena890.russian[66] = "\u0411";
	    Cavena890.russian[69] = "\u0415";
	    Cavena890.russian[90] = "\u0417";
	    Cavena890.russian[86] = "\u0412";
	    Cavena890.russian[73] = "\u0418";
	    Cavena890.russian[78] = "\u041d";
	    Cavena890.russian[88] = "\u042b";
	    Cavena890.russian[81] = "\u042f";
	    Cavena890.russian[86] = "\u0412";
	    Cavena890.russian[83] = "\u0421";
	    Cavena890.russian[114] = "\u0440";
	    Cavena890.russian[105] = "\u0438";
	    Cavena890.russian[113] = "\u044f";
	    Cavena890.russian[110] = "\u043d";
	    Cavena890.russian[116] = "\u0442";
	    Cavena890.russian[92] = "\u042d";
	    Cavena890.russian[119] = "\u044e";
	    Cavena890.russian[70] = "\u0424";
	    Cavena890.russian[94] = "\u0427";
	    Cavena890.russian[68] = "\u0414";
	    Cavena890.russian[98] = "\u0431";
	    Cavena890.russian[115] = "\u0441";
	    Cavena890.russian[117] = "\u0443";
	    Cavena890.russian[100] = "\u0434";
	    Cavena890.russian[96] = "\u0436";
	    Cavena890.russian[106] = "\u0439";
	    Cavena890.russian[108] = "\u043b";
	    Cavena890.russian[71] = "\u0413";
	    Cavena890.russian[120] = "\u044b";
	    Cavena890.russian[122] = "\u0437";
	    Cavena890.russian[126] = "\u0447";
	    Cavena890.russian[109] = "\u043c";
	    Cavena890.russian[103] = "\u0433";
	    Cavena890.russian[121] = "\u044c";
	    Cavena890.russian[112] = "\u043f";
	    Cavena890.russian[118] = "\u0432";
	    Cavena890.russian[85] = "\u0423";
	    Cavena890.russian[125] = "\u0449";
	    Cavena890.russian[102] = "\u0444";
	    Cavena890.russian[124] = "\u044d";
	    Cavena890.russian[123] = "\u0448";
	    Cavena890.russian[64] = "\u0416";
	    Cavena890.russian[65] = "\u0410";
	    Cavena890.russian[72] = "\u041d";
	    Cavena890.russian[74] = "\u0419";
	    Cavena890.russian[75] = "\u041a";
	    Cavena890.russian[76] = "\u041b";
	    Cavena890.russian[77] = "\u041c";
	    Cavena890.russian[79] = "\u041e";
	    Cavena890.russian[80] = "\u041f";
	    Cavena890.russian[82] = "\u0420";
	    Cavena890.russian[84] = "\u0422";
	    Cavena890.russian[89] = "\u042c";
	    Cavena890.russian[97] = "\u0430";
	    Cavena890.russian[99] = "\u0446";
	    Cavena890.russian[101] = "\u0435";
	    Cavena890.russian[104] = "\u0445";
	    Cavena890.russian[107] = "\u043a";
	    Cavena890.russian[111] = "\u043e";
	})();
	var PlayerAudioTrack = function (id, log) {
	    this.proxyId = id;
	    this.log = log;
	    this.channelMuted = [];
	    this.channelMuteRx = new Rx.ReplaySubject(1);
	};
	PlayerAudioTrack = stjs.extend(PlayerAudioTrack, null, [], function (constructor, prototype) {
	    prototype.dashStream = null;
	    prototype.channelCount = 0;
	    prototype.channelLabels = null;
	    prototype.channelMuted = null;
	    prototype.filename = null;
	    prototype.proxyId = null;
	    prototype.log = null;
	    prototype.sampleRate = 0;
	    prototype.serverUrl = null;
	    prototype.totalSamples = 0;
	    prototype.waveformPreviews = null;
	    prototype.channelMuteRx = null;
	    prototype.channelOffset = 0;
	    prototype.offset = 0.0;
	    prototype.movieId = null;
	    prototype.targetSampleRate = 0;
	    constructor.DEFAULT_LABELS = ["Stereo-Left", "Stereo-Right", "Stereo-Left", "Stereo-Right", "Left", "Right", "Center", "LFE", "Left Surround", "Right Surround", "Mono", "MOS"];
	    prototype.id = function () {
	        return this.proxyId;
	    };
	    constructor.fromChannelLabels = function (id, displayName, labels, log) {
	        var p = new PlayerAudioTrack(id, log);
	        p.filename = displayName;
	        p.channelCount = labels.length;
	        p.channelLabels = labels.slice(0);
	        p.channelMuted = new Array(p.channelCount);
	        return p;
	    };
	    constructor.fromDashStream = function (id, dashStream, log) {
	        var self = new PlayerAudioTrack(id, log);
	        self.update(dashStream);
	        return self;
	    };
	    prototype.setChannelMuted = function (index, muted) {
	        this.channelMuted[index] = muted;
	        this.channelMuteRx.onNext(new ChannelMute(muted, index));
	    };
	    prototype.setChannelsMuted = function (muted) {
	        this.log.debug("setChannelsMuted", muted, this.proxyId);
	        for (var k = 0; k < this.channelMuted.length; k++) {
	            this.setChannelMuted(k, muted);
	        }
	    };
	    prototype.getChannelMuted = function (channelIdx) {
	        return this.channelMuted[channelIdx];
	    };
	    prototype.getChannels = function () {
	        var channels = [];
	        for (var i = 0; i < this.channelCount; i++) {
	            var channel = new PlayerAudioChannel();
	            channel.label = this.channelLabels[i];
	            channel.muted = this.channelMuted[i];
	            channel.waveformPngUrl = this.serverUrl + "/" + this.proxyId + "/tw" + Utils.zeroPad2(i) + ".png";
	            channels.push(channel);
	        }
	        return channels;
	    };
	    prototype.update = function (dashStream) {
	        this.dashStream = dashStream;
	        var audioInfo = dashStream == null ? null : dashStream.audioInfo;
	        this.log.debug("update audio stream", dashStream);
	        if (audioInfo != null) {
	            this.totalSamples = audioInfo.totalSamples;
	            this.sampleRate = audioInfo.sampleRate;
	            this.waveformPreviews = audioInfo.waveformPreviews || new Array();
	            this.channelCount = audioInfo.channelCount;
	            this.channelMuted = new Array(audioInfo.channelCount);
	            this.dashStream.channelMuted = this.channelMuted;
	            this.channelLabels = audioInfo.channelLabels || PlayerAudioTrack.DEFAULT_LABELS.slice(0, this.channelCount);
	        }
	        if (dashStream != null) {
	            this.serverUrl = dashStream.serverUrl;
	        }
	    };
	    prototype.initWithChannelNames = function (labels) {
	        this.channelCount = labels.length;
	        this.channelLabels = labels.slice(0);
	        this.channelMuted = new Array(this.channelCount);
	    };
	    constructor.fromAudioInfo = function (id, displayName, audioInfo, log) {
	        var self = new PlayerAudioTrack(id, log);
	        return self;
	    };
	    prototype.isMuted = function () {
	        return this.channelMuted.every(function (muted, i, a) {
	            return muted;
	        });
	    };
	}, { dashStream: "SegmentedAudioStream", channelLabels: { name: "Array", arguments: [null] }, channelMuted: { name: "Array", arguments: [null] }, log: "Log", waveformPreviews: { name: "Array", arguments: [null] }, channelMuteRx: { name: "Rx.ReplaySubject", arguments: ["ChannelMute"] }, DEFAULT_LABELS: { name: "Array", arguments: [null] } }, {});
	var HotkeyManager = function (log) {
	    ObjectEvents.call(this);
	    this.log = log;
	    this._keyHistory = "";
	    this._keyUpHistory = "";
	    this._curShortcut = [];
	    this.shortcuts = {};
	    this._groups = {};
	    this._descriptions = {};
	    this._summary = {};
	    this._allowInputs = {};
	    this._lastIsTriggered = false;
	    this.disable = false;
	    this.initKeyDown = stjs.bind(this, function (e) {
	        return this._keyDown(e);
	    });
	    this.initKeyUp = stjs.bind(this, function (e) {
	        return this._keyUp(e);
	    });
	    this.onFullScreenChange = stjs.bind(this, function (e) {
	        return this._curShortcut = [];
	    });
	};
	HotkeyManager = stjs.extend(HotkeyManager, ObjectEvents, [], function (constructor, prototype) {
	    constructor.KEYS = { "backspace": 8, "tab": 9, "enter": 13, "shift": 16, "ctrl": 17, "alt": 18, "pause": 19, "capslock": 20, "escape": 27, "pageup": 33, "pagedown": 34, "end": 35, "home": 36, "left": 37, "up": 38, "right": 39, "down": 40, "insert": 45, "delete": 46, "*": 106, "+": 107, "-": 189, ";": 186, "=": 187, ",": 188, ".": 190, "/": 191, "`": 192, "[": 219, "\\": 220, "]": 221, "\"": 222, "space": 32, "esc": 27, "?": "16+191", "del": 46 };
	    constructor.HOTKEYS_OKAY = "hotkeysenabled";
	    prototype.log = null;
	    prototype.initKeyUp = null;
	    prototype.initKeyDown = null;
	    prototype.onFullScreenChange = null;
	    prototype._summary = null;
	    prototype._allowInputs = null;
	    prototype._lastIsTriggered = false;
	    prototype._descriptions = null;
	    prototype._groups = null;
	    prototype.shortcuts = null;
	    prototype._curShortcut = null;
	    prototype._keyUpHistory = null;
	    prototype._keyHistory = null;
	    prototype._lastEscTime = 0;
	    prototype.disable = false;
	    prototype.bindedElement = null;
	    prototype.bindedDocument = null;
	    prototype.bindedWindow = null;
	    prototype.enableHotKeysForWindow = function (window) {
	        this.destruct();
	        this.bindedWindow = window;
	        this.bindedWindow.addEventListener("keydown", this.initKeyDown);
	        this.bindedWindow.addEventListener("keyup", this.initKeyUp);
	        this.bindedWindow.document.body.addEventListener("webkitfullscreenchange", this.onFullScreenChange);
	    };
	    prototype.enableHotKeysForDocument = function (document) {
	        this.destruct();
	        this.bindedDocument = document;
	        this.bindedDocument.addEventListener("keydown", this.initKeyDown);
	        this.bindedDocument.addEventListener("keyup", this.initKeyUp);
	        this.bindedDocument.body.addEventListener("webkitfullscreenchange", this.onFullScreenChange);
	    };
	    prototype.enableHotKeysForElement = function (el) {
	        this.destruct();
	        this.bindedElement = el;
	        this.bindedElement.addEventListener("keydown", this.initKeyDown);
	        this.bindedElement.addEventListener("keyup", this.initKeyUp);
	        this.bindedElement.addEventListener("webkitfullscreenchange", this.onFullScreenChange);
	    };
	    prototype.setDisable = function (disable) {
	        this.disable = disable;
	    };
	    constructor.enableHotkeysForInput = function (input) {
	        input.setAttribute(HotkeyManager.HOTKEYS_OKAY, "true");
	    };
	    constructor.isHotkeysEnabled = function (el) {
	        var isOnInput = ["textarea", "input"].indexOf(el.nodeName.toLowerCase()) >= 0 || el.contentEditable == true;
	        var forceEnable = Utils.isNotBlank(el.getAttribute(HotkeyManager.HOTKEYS_OKAY));
	        if (forceEnable) {
	            return true;
	        } else if (isOnInput) {
	            return false;
	        }
	        return true;
	    };
	    prototype.destruct = function () {
	        if (this.bindedWindow != null) {
	            this.bindedWindow.removeEventListener("keydown", this.initKeyDown);
	            this.bindedWindow.removeEventListener("keyup", this.initKeyUp);
	            this.bindedWindow.document.body.removeEventListener("webkitfullscreenchange", this.onFullScreenChange);
	        }
	        if (this.bindedDocument != null) {
	            this.bindedDocument.removeEventListener("keydown", this.initKeyDown);
	            this.bindedDocument.removeEventListener("keyup", this.initKeyUp);
	            this.bindedDocument.body.removeEventListener("webkitfullscreenchange", this.onFullScreenChange);
	        }
	        if (this.bindedElement != null) {
	            this.bindedElement.removeEventListener("keydown", this.initKeyDown);
	            this.bindedElement.removeEventListener("keyup", this.initKeyUp);
	            this.bindedElement.document.body.removeEventListener("webkitfullscreenchange", this.onFullScreenChange);
	        }
	    };
	    prototype._fireShortcut = function (e, isKeyDown) {
	        var code = e.keyCode;
	        var history = isKeyDown ? this._keyHistory : this._keyUpHistory;
	        for (var shortcut in this.shortcuts) {
	            var start = Math.max(0, history.length - shortcut.length - 1);
	            var end = history.length;
	            if (history.substring(start, end).equals(" " + shortcut)) {
	                var scArray = this.shortcuts[shortcut];
	                for (var i = 0; i < scArray.length; i++) {
	                    var shortcutObj = scArray[i];
	                    var func = shortcutObj.func;
	                    if (isKeyDown && shortcutObj.options.onKeyUp || !isKeyDown && !shortcutObj.options.onKeyUp) {
	                        continue;
	                    }
	                    if (null == this._allowInputs[func.toString()] && this._lastIsTriggered) continue;
	                    func.apply(undefined, [e, this._groups[shortcut], this._descriptions[shortcut]]);
	                }
	            }
	        }
	    };
	    constructor.notIn = function (key, map) {
	        return map[key] == null;
	    };
	    prototype._keyDown = function (e) {
	        if (!this.disable && HotkeyManager.isHotkeysEnabled(e.target)) {
	            var code = e.keyCode;
	            if (this._lastIsTriggered != HotkeyManager.isHotkeysEnabled(e.target)) {
	                this._keyHistory = "";
	            }
	            this._lastIsTriggered = HotkeyManager.isHotkeysEnabled(e.target);
	            if (code == 27) {
	                if (0 != this._lastEscTime && Utils.currentTimeMillis() - this._lastEscTime < 200) {
	                    return;
	                }
	                this._lastEscTime = Utils.currentTimeMillis();
	            }
	            if (code == 91 || e.metaKey) {
	                this._curShortcut = [];
	                return;
	            }
	            if (!e.ctrlKey && this._curShortcut.indexOf(HotkeyManager.getKeyCode("ctrl")) >= 0) {
	                this._curShortcut.splice(this._curShortcut.indexOf(HotkeyManager.getKeyCode("ctrl")), 1);
	            }
	            if (!e.shiftKey && this._curShortcut.indexOf(HotkeyManager.getKeyCode("shift")) >= 0) {
	                this._curShortcut.splice(this._curShortcut.indexOf(HotkeyManager.getKeyCode("shift")), 1);
	            }
	            if (code == 20) {
	                return;
	            }
	            if (this._curShortcut.indexOf(code) < 0) {
	                this._curShortcut.push(code);
	            }
	            this._keyHistory += " " + this._curShortcut.join("+");
	            this._fireShortcut(e, true);
	        }
	    };
	    prototype._keyUp = function (e) {
	        if (!this.disable) {
	            var code = e.keyCode;
	            if (code == 91 || e.metaKey) {
	                return;
	            }
	            if (code == 27) {
	                this._lastEscTime = 0;
	            }
	            this._curShortcut.splice(this._curShortcut.indexOf(code), 1);
	            this._keyUpHistory += " " + code;
	            this._fireShortcut(e, false);
	        }
	    };
	    prototype.addShortcut = function (keyChain, func, options) {
	        var shortcut = null;
	        if (!options.ignoreSummary) {
	            options.group = Utils.defaultString(options.group, "");
	            options.description = Utils.defaultString(options.description, "");
	            if (HotkeyManager.notIn(options.group, this._summary)) this._summary[options.group] = {};
	            shortcut = Array.isArray(keyChain) ? keyChain.constructor.join(", ") : keyChain;
	            this._summary[options.group][shortcut] = options.description;
	        }
	        var keyChainArrStr = HotkeyManager._parseKeyChain(keyChain);
	        this._groups[keyChainArrStr] = options.group;
	        this._descriptions[keyChainArrStr] = options.description;
	        this._allowInputs[func.toString()] = options.allowInputs;
	        this.shortcuts[keyChainArrStr] = [HotkeyManager.shortCutObj(func, options)];
	        if (!options.ignoreSummary) {
	            this.fireEvent("added", { "shortcut": shortcut, "description": this._descriptions[keyChainArrStr], "groups": this._groups[keyChainArrStr] });
	        }
	    };
	    constructor.ShortCut = function () {};
	    constructor.ShortCut = stjs.extend(constructor.ShortCut, null, [], function (constructor, prototype) {
	        prototype.func = null;
	        prototype.options = null;
	    }, { func: { name: "Callback1", arguments: ["DOMEvent"] }, options: "KeyOptions" }, {});
	    constructor.shortCutObj = function (func, options) {
	        var o = new HotkeyManager.ShortCut();
	        o.func = func;
	        o.options = options;
	        return o;
	    };
	    constructor._parseKeyChain = function (keyChain) {
	        var keyChainArr = keyChain.split(" ");
	        var result = [];
	        keyChainArr.forEach(function (shortcut) {
	            var bits = shortcut.split("-");
	            var shortcutResult = [];
	            for (var j = 0; j < bits.length; j++) {
	                var bit = bits[j].toLowerCase();
	                if (bit.equals("")) {
	                    if (j > 0 && bits[j - 1].equals("")) {
	                        bit = "-";
	                    } else {
	                        continue;
	                    }
	                }
	                shortcutResult.push(HotkeyManager.getKeyCode(bit));
	            }
	            result.push(shortcutResult.join("+"));
	        });
	        return result.join(" ");
	    };
	    constructor.getKeyCode = function (bit) {
	        return HotkeyManager.KEYS[bit];
	    };
	}, { KEYS: { name: "Map", arguments: [null, null] }, log: "Log", initKeyUp: { name: "Callback1", arguments: ["DOMEvent"] }, initKeyDown: { name: "Callback1", arguments: ["DOMEvent"] }, onFullScreenChange: { name: "Callback1", arguments: ["DOMEvent"] }, _summary: { name: "Map", arguments: [null, { name: "Map", arguments: [null, "Object"] }] }, _allowInputs: { name: "Map", arguments: [null, "Object"] }, _descriptions: { name: "Map", arguments: [null, "Object"] }, _groups: { name: "Map", arguments: [null, "Object"] }, shortcuts: { name: "Map", arguments: [null, { name: "Array", arguments: ["HotkeyManager.ShortCut"] }] }, _curShortcut: { name: "Array", arguments: ["Object"] }, bindedElement: "Element", bindedDocument: "Document", bindedWindow: "Window", events: { name: "Map", arguments: [null, { name: "Array", arguments: [{ name: "Callback1", arguments: ["Object"] }] }] }, listenAlls: { name: "Array", arguments: [{ name: "Callback2", arguments: [null, "Object"] }] }, mandatoryEvents: { name: "Map", arguments: [null, { name: "Array", arguments: ["Object"] }] } }, {});
	(function () {
	    for (var i = 0; i < 10; i++) {
	        HotkeyManager.KEYS["num-" + i] = i + 95;
	        HotkeyManager.KEYS["" + i] = i + 48;
	    }
	    for (var i = 1; i < 25; i++) {
	        HotkeyManager.KEYS["f" + i] = i + 111;
	    }
	    for (var i = 65; i < 91; i++) {
	        var lowerCase = String.fromCharCode(i).toLowerCase();
	        HotkeyManager.KEYS[lowerCase] = i;
	    }
	})();
	var OptimizedPacketCache = function (segmentStartFrames, segmentStartTv, log) {
	    this.segmentStartFrames = segmentStartFrames;
	    this.segmentStartTv = segmentStartTv;
	    this.log = log;
	    this.knownPkts = [];
	    this.framesByTv = {};
	};
	OptimizedPacketCache = stjs.extend(OptimizedPacketCache, null, [PacketCache], function (constructor, prototype) {
	    prototype.knownPkts = null;
	    prototype.framesByTv = null;
	    prototype.segmentStartFrames = null;
	    prototype.segmentStartTv = null;
	    prototype.log = null;
	    prototype.segmentCached = function (segment) {
	        var firstFrameOfSegment = this.segmentStartFrames[segment];
	        return this.knownPkts[firstFrameOfSegment] != null;
	    };
	    prototype.updateTimePackets = function (segmentIdx, newPkts) {
	        if (this.segmentCached(segmentIdx)) {
	            this.log.debug("Segment " + segmentIdx + " is already cached, skiping");
	            return;
	        }
	        var firstFrameOfSegment = this.segmentStartFrames[segmentIdx];
	        for (var i = 0; i < newPkts.length; i++) {
	            var packet = newPkts[i];
	            var fn = firstFrameOfSegment + i;
	            packet.frame = fn;
	            this.knownPkts[fn] = packet;
	            this.framesByTv["" + packet.pts] = fn;
	        }
	    };
	    prototype.segmentIndexByFrame = function (fn) {
	        return Utils.binarySearchFloor(this.segmentStartFrames, function (start) {
	            return PacketCache.longCompare(start, fn);
	        });
	    };
	    prototype.segmentIndexByTv = function (tv) {
	        return Utils.binarySearchFloor(this.segmentStartTv, function (start) {
	            return PacketCache.longCompare(start, tv);
	        });
	    };
	    prototype.averageFrameDuration = function (segment) {
	        var baseFn = this.segmentStartFrames[segment];
	        var baseTv = this.segmentStartTv[segment];
	        var segmentDurationTv = this.segmentStartTv[segment + 1] - baseTv;
	        var segmentDurationFrames = this.segmentStartFrames[segment + 1] - baseFn;
	        return segmentDurationTv / segmentDurationFrames;
	    };
	    prototype.estimateFrameByTv = function (tv) {
	        var segment = this.segmentIndexByTv(tv);
	        var baseFn = this.segmentStartFrames[segment];
	        var baseTv = this.segmentStartTv[segment];
	        return baseFn + stjs.trunc((tv - baseTv) / this.averageFrameDuration(segment));
	    };
	    prototype.estimateTvByFrame = function (fn) {
	        var segment = this.segmentIndexByFrame(fn);
	        var baseFn = this.segmentStartFrames[segment];
	        var baseTv = this.segmentStartTv[segment];
	        return baseTv + stjs.trunc((fn - baseFn) * this.averageFrameDuration(segment));
	    };
	    prototype.getFrameByTv = function (tv) {
	        if (tv < this.getTotalDuration()) {
	            var fn = this.framesByTv["" + this.floorTv(tv)];
	            if (fn != null) {
	                return fn;
	            } else {
	                return this.estimateFrameByTv(tv);
	            }
	        } else {
	            return this.getFrameCount(this.getTotalDuration()) - 1;
	        }
	    };
	    prototype.getTvByFrame = function (fn) {
	        var packet = this.knownPkts[fn];
	        if (packet != null) {
	            return packet.pts;
	        } else {
	            return this.estimateTvByFrame(fn);
	        }
	    };
	    prototype.estimateFloorTv = function (tv) {
	        var segment = this.segmentIndexByTv(tv);
	        var baseTv = this.segmentStartTv[segment];
	        var avgFrameDuration = stjs.trunc(this.averageFrameDuration(segment));
	        return baseTv + stjs.trunc((tv - baseTv) / avgFrameDuration) * avgFrameDuration;
	    };
	    prototype.floorTv = function (tv) {
	        var segment = this.segmentIndexByTv(tv);
	        if (this.segmentCached(segment)) {
	            var segmentPackets = this.getSegmentPackets(segment);
	            var idx = Utils.binarySearchFloor(segmentPackets, function (pkt) {
	                return PacketCache.longCompare(pkt.pts, tv);
	            });
	            return segmentPackets[idx].pts;
	        } else {
	            return this.estimateFloorTv(tv);
	        }
	    };
	    prototype.getSegmentPackets = function (segment) {
	        return this.knownPkts.slice(this.segmentStartFrames[segment], this.segmentStartFrames[segment + 1]);
	    };
	    prototype.getFrameCount = function (durationTv) {
	        return this.segmentStartFrames[this.segmentStartFrames.length - 1];
	    };
	    prototype.getTotalDuration = function () {
	        return this.segmentStartTv[this.segmentStartTv.length - 1];
	    };
	    prototype.getAverageFrameDuration = function () {
	        var totalDuration = this.getTotalDuration();
	        var frameCount = this.getFrameCount(totalDuration);
	        return totalDuration / frameCount;
	    };
	    prototype.updateStartSegments = function (segmentStartFrames, segmentStartTv) {
	        this.segmentStartFrames = segmentStartFrames;
	        this.segmentStartTv = segmentStartTv;
	    };
	}, { knownPkts: { name: "Array", arguments: ["MovDasher.TimePacket"] }, framesByTv: { name: "Map", arguments: [null, null] }, segmentStartFrames: { name: "Array", arguments: [null] }, segmentStartTv: { name: "Array", arguments: [null] }, log: "Log" }, {});
	var DefaultPacketCache = function (frameDuration) {
	    this.avgFrameDuration = frameDuration != 0 ? frameDuration : DefaultPacketCache.DEFAULT_SAMPLE_DURATION;
	    this.knownPkts = [];
	};
	DefaultPacketCache = stjs.extend(DefaultPacketCache, null, [PacketCache], function (constructor, prototype) {
	    constructor.DEFAULT_SAMPLE_DURATION = 1001;
	    prototype.knownPkts = null;
	    prototype.avgFrameDuration = 0.0;
	    prototype.contiguousDuration = 0;
	    prototype.contiguousFrames = 0;
	    prototype.packetIsKnown = function (pkt) {
	        if (this.knownPkts.length == 0) {
	            return false;
	        }
	        var idx = Utils.binarySearch(this.knownPkts, function (p) {
	            return PacketCache.longCompare(p.pts, pkt.pts);
	        });
	        return idx >= 0;
	    };
	    prototype.updateTimePackets = function (segmentIdx, newPkts) {
	        var newPackets = 0;
	        for (var i = 0; i < newPkts.length; i++) {
	            if (!this.packetIsKnown(newPkts[i])) {
	                newPackets++;
	                this.knownPkts.push(newPkts[i]);
	            }
	        }
	        if (newPackets == 0) return;
	        this.knownPkts.sort(function (pkt1, pkt2) {
	            return PacketCache.longCompare(pkt1.pts, pkt2.pts);
	        });
	        var avg = 0;
	        var len = this.knownPkts.length;
	        var contiguousDuration = 0;
	        var fn = 0;
	        var stillContiguous = true;
	        for (var i = 0; i < len; i++) {
	            var pkt = this.knownPkts[i];
	            avg += pkt.duration;
	            if (stillContiguous) {
	                if (pkt.pts == contiguousDuration) {
	                    pkt.frame = fn;
	                    fn++;
	                    contiguousDuration += pkt.duration;
	                } else {
	                    stillContiguous = false;
	                }
	            }
	        }
	        this.contiguousDuration = contiguousDuration;
	        this.contiguousFrames = fn;
	        this.avgFrameDuration = avg / len;
	    };
	    prototype.estimateFrameByTv = function (tv) {
	        return stjs.trunc(tv / this.avgFrameDuration);
	    };
	    prototype.estimateTvByFrame = function (fn) {
	        return stjs.trunc(fn * this.avgFrameDuration);
	    };
	    prototype.getFrameByTv = function (tv) {
	        if (tv < 0) {
	            return 0;
	        } else if (tv < this.contiguousDuration) {
	            var idx = Utils.binarySearch(this.knownPkts, function (pkt) {
	                return PacketCache.longCompare(pkt.pts, tv);
	            });
	            if (idx >= 0) {
	                return this.knownPkts[idx].frame;
	            }
	            var nearestIdx = -(idx + 1);
	            var nearestPacket = this.knownPkts[nearestIdx];
	            return nearestPacket.frame;
	        } else {
	            return this.estimateFrameByTv(tv);
	        }
	    };
	    prototype.getTvByFrame = function (fn) {
	        if (fn < 0) {
	            return 0;
	        } else if (fn < this.contiguousFrames) {
	            return this.knownPkts[fn].pts;
	        } else if (fn == this.contiguousFrames && fn > 0) {
	            return this.knownPkts[fn - 1].pts + this.knownPkts[fn - 1].duration;
	        } else {
	            return this.estimateTvByFrame(fn);
	        }
	    };
	    prototype.estimateFloorTv = function (tv) {
	        return stjs.trunc(tv / stjs.trunc(this.avgFrameDuration)) * stjs.trunc(this.avgFrameDuration);
	    };
	    prototype.floorTv = function (tv) {
	        if (this.knownPkts.length == 0) {
	            return this.estimateFloorTv(tv);
	        }
	        var idx = Utils.binarySearch(this.knownPkts, function (pkt) {
	            return PacketCache.longCompare(pkt.pts, tv);
	        });
	        if (idx >= 0) {
	            return this.knownPkts[idx].pts;
	        }
	        var nearestIdx = -(idx + 1);
	        var nearestPacket = this.knownPkts[nearestIdx];
	        if (tv >= nearestPacket.pts && tv < nearestPacket.pts + nearestPacket.duration) {
	            return nearestPacket.pts;
	        } else {
	            return this.estimateFloorTv(tv);
	        }
	    };
	    prototype.getFrameCount = function (durationTv) {
	        if (this.contiguousDuration == durationTv) {
	            return this.knownPkts.length;
	        } else {
	            return stjs.trunc(durationTv / this.avgFrameDuration);
	        }
	    };
	    prototype.getAverageFrameDuration = function () {
	        return this.avgFrameDuration;
	    };
	    prototype.updateStartSegments = function (segmentStartFrames, segmentStartTv) {};
	}, { knownPkts: { name: "Array", arguments: ["MovDasher.TimePacket"] } }, {});
	var RxUtil = function () {};
	RxUtil = stjs.extend(RxUtil, null, [], function (constructor, prototype) {
	    constructor.split = function (from, predicate) {
	        var scan = from.scan(function (list, item) {
	            if (list.length != 0 && predicate(list, item)) {
	                list = new Array();
	            }
	            list.push(item);
	            return list;
	        }, new Array());
	        var tokens = scan.bufferWithCount(2, 1).flatMap(function (ll) {
	            if (ll.length == 1 || ll[0] != ll[1]) {
	                return Rx.Observable.just(ll[0]);
	            } else {
	                return Rx.Observable.empty();
	            }
	        });
	        return tokens;
	    };
	    constructor.doOnFirst = function (source, action) {
	        var isFirst = new MutableBoolean(true);
	        return source.doOnNext(function (item) {
	            if (isFirst.value) {
	                isFirst.value = false;
	                action(item);
	            }
	        });
	    };
	    constructor.sequential = function (src, sequenceSelector, sequence) {
	        var lastSeqIdx = new MutableInt(0);
	        var q = new PriorityQueue(function (c1, c2) {
	            return sequenceSelector(c1) - sequenceSelector(c2);
	        });
	        var sequential = src.flatMap(function (x) {
	            var c = x;
	            var res = new Array();
	            do {
	                var seq = sequenceSelector(c);
	                if (seq == sequence[lastSeqIdx.value]) {
	                    lastSeqIdx.value++;
	                    res.push(c);
	                } else {
	                    q.add(c);
	                    break;
	                }
	            } while (null != (c = q.poll()));
	            return Rx.Observable.from(res);
	        });
	        return sequential;
	    };
	    constructor.takeWhileWithFinalValue = function (periodicReq, whileCondition) {
	        return Rx.Observable.create(function (observer) {
	            return periodicReq.subscribe(function (item) {
	                observer.onNext(item);
	                if (!whileCondition(item)) {
	                    observer.onCompleted();
	                }
	            }, function (err) {
	                observer.onError(err);
	            }, function () {
	                observer.onCompleted();
	            });
	        });
	    };
	    constructor.firstOutIgnoreNext = function (source) {
	        return Rx.Observable.create(function (observer) {
	            var oneOut = new MutableBoolean(false);
	            return source.subscribe(function (t) {
	                if (!oneOut.value) {
	                    oneOut.value = true;
	                    observer.onNext(t);
	                }
	            }, function (e) {
	                observer.onError(e);
	            }, function () {
	                observer.onCompleted();
	            });
	        });
	    };
	}, {}, {});
	var StaticVideoSrc = function (url, errorRx) {
	    this.url = url;
	    this.errorRx = errorRx;
	};
	StaticVideoSrc = stjs.extend(StaticVideoSrc, null, [VideoSrc], function (constructor, prototype) {
	    prototype.url = null;
	    prototype.errorRx = null;
	    prototype.video = null;
	    prototype.autoDisposables = null;
	    prototype.detach = function () {
	        if (this.video != null) this.video.src = "";
	        if (this.autoDisposables != null) this.autoDisposables.dispose();
	    };
	    prototype.attach = function (video) {
	        this.autoDisposables = new Rx.CompositeDisposable();
	        this.video = video;
	        this.video.src = this.url;
	        this.autoDisposables.add(Rx.Observable.fromEvent(video, "error").skipUntil(this.loadedMetadata()).subscribe(stjs.bind(this, function (e) {
	            var err = new PlayerError("media element error code=" + video.error.code, PlayerError.FATAL, video.error);
	            this.errorRx.onNext(err);
	        })));
	    };
	    prototype.getLoadingErrors = function () {
	        return Rx.Observable.fromEvent(this.video, "error").takeUntil(this.loadedMetadata()).map(stjs.bind(this, function (e) {
	            return new PlayerError("can not load media. error code=" + this.video.error.code, PlayerError.FATAL, this.video.error);
	        }));
	    };
	    prototype.loadedMetadata = function () {
	        return Rx.Observable.fromEvent(this.video, "loadedmetadata");
	    };
	    prototype.canSetAudioWithoutReattach = function (audio) {
	        return true;
	    };
	    prototype.setAudio = function (audio) {};
	    prototype.clearAudioBuffer = function () {};
	}, { errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] }, video: "Video", autoDisposables: "Rx.CompositeDisposable" }, {});
	var DynamicDash = function (videoSegmentedStream, audioDashStream, log, errorRx) {
	    this.videoSegmentedStream = videoSegmentedStream;
	    this.audioDashStream = audioDashStream;
	    this.log = log;
	    this.errorRx = errorRx;
	    this.hasAudio = audioDashStream != null;
	    this.hasVideo = videoSegmentedStream != null;
	    if (!this.hasVideo && !this.hasAudio) {
	        errorRx.onNext(new PlayerError("no audio and no video streams!", PlayerError.FATAL));
	        throw new RuntimeException("no audio and no video streams!");
	    }
	    if (this.hasAudio) {
	        this.rawAudioStream = "audio/mpeg".equals(this.audioDashStream.mimeType);
	    }
	    this.audioToSet = [];
	    this.autoDisposables = new Rx.CompositeDisposable();
	};
	DynamicDash = stjs.extend(DynamicDash, null, [VideoSrc], function (constructor, prototype) {
	    prototype.log = null;
	    prototype.errorRx = null;
	    constructor.SOURCEOPEN = "sourceopen";
	    constructor.READYSTATE_CLOSED = "closed";
	    constructor.READYSTATE_OPEN = "open";
	    constructor.READYSTATE_ENDED = "ended";
	    constructor.BUFFER_ERROR = "error";
	    constructor.BUFFER_UPDATEEND = "updateend";
	    constructor.ABORT_IMPOSSIBLE = function () {};
	    prototype.MIN_TIME = 1.0E-4;
	    prototype.VIDEO_END_THRESHOLD = 0.01;
	    prototype.hasAudio = false;
	    prototype.hasVideo = false;
	    prototype.rawAudioStream = false;
	    prototype.mediaSource = null;
	    prototype.video = null;
	    prototype.videoBuffer = null;
	    prototype.audioBuffer = null;
	    prototype.videoQueriedQueue = null;
	    prototype.videoLoadedQueue = null;
	    prototype.audioQueriedQueue = null;
	    prototype.audioLoadedQueue = null;
	    prototype.audioDashStream = null;
	    prototype.videoSegmentedStream = null;
	    prototype.videoTimeupdateRx = null;
	    prototype.videoSeekingRx = null;
	    prototype.audioUpdateSubscription = null;
	    prototype.audioToSet = null;
	    prototype.audioInitInProgress = false;
	    prototype.audioInitialized = false;
	    prototype.lastAppendedVideoSegment = 0;
	    prototype.lastAppendedAudioSegment = 0;
	    prototype.lastAppendedResetterInterval = null;
	    prototype.autoDisposables = null;
	    constructor.VIDEO_PREBUFFER_TIME = 15;
	    constructor.AUDIO_PREBUFFER_TIME = 15;
	    prototype.reset = function () {
	        this.video = null;
	        this.mediaSource = null;
	        this.videoBuffer = null;
	        this.audioBuffer = null;
	        this.videoQueriedQueue = {};
	        this.videoLoadedQueue = {};
	        this.audioQueriedQueue = {};
	        this.audioLoadedQueue = {};
	        clearInterval(this.lastAppendedResetterInterval);
	        this.lastAppendedAudioSegment = -1;
	        this.lastAppendedVideoSegment = -1;
	    };
	    prototype.detach = function () {
	        if (this.video == null) return;
	        this.autoDisposables.dispose();
	        this.autoDisposables = new Rx.CompositeDisposable();
	        this.abortAllSegmentsLoading(this.videoQueriedQueue);
	        this.abortAllSegmentsLoading(this.audioQueriedQueue);
	        if (this.video != null) this.video.src = "";
	        this.reset();
	    };
	    prototype.attach = function (video) {
	        this.reset();
	        this.mediaSource = new MediaSource();
	        this.autoDisposable(Rx.Observable.fromEvent(this.mediaSource, DynamicDash.SOURCEOPEN).doOnNext(stjs.bind(this, function (e) {
	            return this.initMediaSource();
	        })).subscribe());
	        this.video = video;
	        this.video.src = URL.createObjectURL(this.mediaSource);
	    };
	    prototype.canSetAudioWithoutReattach = function (audioDashStream) {
	        return this.hasAudio && this.audioDashStream.mimeType == audioDashStream.mimeType;
	    };
	    prototype.setAudio = function (audioDashStream) {
	        this.log.debug("set audio");
	        if (this.audioInitInProgress) {
	            this.log.debug("postponed setting audio. another audio init is in progress");
	            this.audioToSet.push(audioDashStream);
	        }
	        this.hasAudio = true;
	        this.rawAudioStream = "audio/mpeg".equals(audioDashStream.mimeType);
	        if (this.mediaSource == null || this.mediaSource.readyState != DynamicDash.READYSTATE_OPEN && this.mediaSource.readyState != DynamicDash.READYSTATE_ENDED) {
	            this.audioDashStream = audioDashStream;
	            return;
	        }
	        this.audioInitialized = false;
	        this.audioInitInProgress = true;
	        if (this.audioBuffer == null) {
	            var string = audioDashStream.mimeType + (audioDashStream.codecs == null ? "" : "; codecs=\"" + audioDashStream.codecs + "\"");
	            this.audioBuffer = this.mediaSource.addSourceBuffer(string);
	            this.audioBuffer.addEventListener(DynamicDash.BUFFER_ERROR, function (_e) {
	                throw exception("audio source buffer error");
	            });
	            this.audioBuffer.addEventListener("abort", stjs.bind(this, function (e) {
	                return this.log.debug("audio buffer abort", e);
	            }));
	            this.audioUpdateRx = Rx.Observable.fromEvent(this.audioBuffer, DynamicDash.BUFFER_UPDATEEND).filter(stjs.bind(this, function (x) {
	                return !this.audioBuffer.updating;
	            }));
	        }
	        if (this.audioUpdateSubscription != null) {
	            this.audioUpdateSubscription.dispose();
	            this.audioUpdateSubscription = null;
	        }
	        var cleared = this.clearAudioBufferRx();
	        var setAudioSubscription = cleared.flatMap(stjs.bind(this, function (b) {
	            this.log.debug("adding new audio");
	            this.audioDashStream = audioDashStream;
	            return this.initAudio();
	        })).subscribe(stjs.bind(this, function (done) {
	            this.autoDisposable(this.audioDashStream.getUpdateRx().subscribe(stjs.bind(this, function (updatedStream) {
	                this.lastAppendedAudioSegment = -1;
	                this.regularBuffersCheck();
	            })));
	            this.audioUpdateSubscription = this.audioUpdateRx.subscribe(stjs.bind(this, function (_e) {
	                return this.audioUpdateEnd();
	            }));
	            this.autoDisposable(this.audioUpdateSubscription);
	            this.audioInitialized = true;
	            this.audioInitInProgress = false;
	            var newAudio = this.audioToSet.shift();
	            if (newAudio != null) {
	                this.setAudio(newAudio);
	            }
	        }));
	        this.autoDisposable(setAudioSubscription);
	    };
	    prototype.appendAudioBuffer = function (buffer) {
	        var appended = Rx.Observable.create(stjs.bind(this, function (observer) {
	            if (this.audioBuffer.updating) {
	                observer.onError("audio buffer updating");
	            } else {
	                this.audioBuffer.appendBuffer(buffer);
	                observer.onNext(true);
	                observer.onCompleted();
	            }
	        }));
	        return appended.retryWhen(stjs.bind(this, function (errors) {
	            return errors.flatMap(stjs.bind(this, function (err) {
	                return this.audioUpdateRx.take(1);
	            }));
	        }));
	    };
	    prototype.trySetDuration = function () {
	        if ((this.audioBuffer == null || !this.audioBuffer.updating) && (this.videoBuffer == null || !this.videoBuffer.updating)) {
	            if (this.hasVideo) {
	                if (this.videoSegmentedStream.isDynamic()) {
	                    this.mediaSource.duration = 100500;
	                } else {
	                    this.mediaSource.duration = this.videoSegmentedStream.getDurationSec();
	                }
	            } else {
	                if (this.audioDashStream.isDynamic()) {
	                    this.mediaSource.duration = 100500;
	                } else {
	                    this.mediaSource.duration = this.audioDashStream.getDurationSec();
	                }
	            }
	            this.log.debug("media source duration " + this.mediaSource.duration);
	        } else {
	            var updateRx = this.videoUpdateRx;
	            if (this.audioUpdateRx != null) {
	                updateRx = Rx.Observable.merge(this.videoUpdateRx, this.audioUpdateRx);
	            }
	            this.autoDisposable(updateRx.take(1).subscribe(stjs.bind(this, function (e) {
	                return this.trySetDuration();
	            })));
	        }
	    };
	    prototype.initAudio = function () {
	        this.log.debug("adding audio init segment");
	        var initSegmentBuffer = Rx.Observable.create(stjs.bind(this, function (observer) {
	            this.audioDashStream.getDashInit(function (buffer) {
	                observer.onNext(buffer);
	                observer.onCompleted();
	            }, stjs.bind(this, function (x) {
	                var err = new PlayerError("can not load initialization segment", PlayerError.FATAL, this.audioDashStream.url);
	                this.errorRx.onNext(err);
	                observer.onError(err);
	            }));
	        }));
	        var initAppended = initSegmentBuffer.flatMap(stjs.bind(this, function (buffer) {
	            if (buffer == null) {
	                this.log.debug("special case for no init segment mp3 stream, triggering audio update end");
	                this.audioBuffer.appendBuffer(new ArrayBuffer(0));
	                return Rx.Observable.just(true);
	            } else {
	                return this.appendAudioBuffer(buffer);
	            }
	        }));
	        return initAppended.doOnNext(stjs.bind(this, function (r) {
	            return this.log.debug("audio init done");
	        }));
	    };
	    prototype.appendVideoInit = function () {
	        this.log.debug("adding video init segment");
	        this.videoSegmentedStream.getDashInit(stjs.bind(this, function (buffer) {
	            if (buffer != null && this.videoBuffer != null) {
	                this.videoBuffer.appendBuffer(buffer);
	            }
	        }), stjs.bind(this, function (x) {
	            this.errorRx.onNext(new PlayerError("can not load initialization segment", PlayerError.FATAL, this.videoSegmentedStream.url));
	        }));
	    };
	    prototype.initMediaSource = function () {
	        if (this.mediaSource.readyState != DynamicDash.READYSTATE_OPEN || this.mediaSource.sourceBuffers.length > 0) return;
	        this.log.debug("initializing media source");
	        if (this.hasVideo) {
	            this.videoBuffer = this.mediaSource.addSourceBuffer(this.videoSegmentedStream.mimeType + "; codecs=\"" + this.videoSegmentedStream.codecs + "\"");
	            this.videoBuffer.addEventListener(DynamicDash.BUFFER_ERROR, function (_e) {
	                throw exception("video source buffer error");
	            });
	            this.autoDisposable(this.videoSegmentedStream.getUpdateRx().subscribe(stjs.bind(this, function (updatedStream) {
	                this.lastAppendedVideoSegment = -1;
	                this.regularBuffersCheck();
	            })));
	            this.videoUpdateRx = Rx.Observable.fromEvent(this.videoBuffer, DynamicDash.BUFFER_UPDATEEND);
	            this.autoDisposable(this.videoUpdateRx.subscribe(stjs.bind(this, function (_e) {
	                return this.videoUpdateEnd();
	            })));
	        }
	        this.trySetDuration();
	        if (this.hasVideo) {
	            this.appendVideoInit();
	        }
	        if (this.hasAudio) {
	            this.setAudio(this.audioDashStream);
	        }
	        this.videoTimeupdateRx = Rx.Observable.fromEvent(this.video, VideoElement.TIMEUPDATE);
	        this.videoSeekingRx = Rx.Observable.fromEvent(this.video, VideoElement.SEEKING);
	        this.autoDisposable(this.videoTimeupdateRx.subscribe(stjs.bind(this, function (_e) {
	            return this.regularBuffersCheck();
	        })));
	        this.autoDisposable(this.videoSeekingRx.subscribe(stjs.bind(this, function (_e) {
	            return this.controlSegmentsRequests();
	        })));
	        this.lastAppendedResetterInterval = setInterval(stjs.bind(this, function () {
	            this.lastAppendedVideoSegment = -1;
	            this.lastAppendedAudioSegment = -1;
	        }), 30000);
	    };
	    prototype.videoUpdateEnd = function () {
	        var self = this;
	        this.log.debug("videoUpdateEnd");
	        if (self.videoBuffer == null) {
	            this.log.debug("self.videoBuffer == null");
	            return;
	        }
	        self.processVideoLoadedQueue();
	        if (this.videoBufferUpdating(self)) return;
	        if (!self.bufferedEnough(self.videoBuffer, DynamicDash.VIDEO_PREBUFFER_TIME)) self.queryVideoSegment(self.nextUnbufferedTime(self.videoBuffer));
	        if (self.mediaSource.readyState != DynamicDash.READYSTATE_ENDED && self.bufferedEndOfStream() && !this.videoBufferUpdating(self) && !this.audioBufferUpdating(self)) {
	            this.log.debug("end of stream");
	            self.mediaSource.endOfStream();
	        }
	    };
	    prototype.videoBufferUpdating = function (self) {
	        if (self.videoBuffer == null) {
	            this.log.debug("self.videoBuffer == null");
	        }
	        return self.videoBuffer != null && self.videoBuffer.updating;
	    };
	    prototype.audioBufferUpdating = function (self) {
	        return self.audioBuffer != null && self.audioBuffer.updating;
	    };
	    prototype.audioUpdateEnd = function () {
	        var self = this;
	        this.log.debug("audioUpdateEnd");
	        if (self.audioBuffer == null) {
	            this.log.debug("self.audioBuffer == null");
	            return;
	        }
	        self.processAudioLoadedQueue();
	        if (this.audioBufferUpdating(self)) {
	            return;
	        }
	        if (!self.bufferedEnough(self.audioBuffer, DynamicDash.AUDIO_PREBUFFER_TIME)) self.queryAudioSegment(self.nextUnbufferedTime(self.audioBuffer));
	        if (self.mediaSource.readyState != DynamicDash.READYSTATE_ENDED && self.bufferedEndOfStream() && !this.videoBufferUpdating(self) && !this.audioBufferUpdating(self)) {
	            this.log.debug("end of stream");
	            self.mediaSource.endOfStream();
	        }
	    };
	    prototype.regularBuffersCheck = function () {
	        if (this.hasVideo && this.videoBuffer != null && !this.videoBuffer.updating) {
	            if (!this.bufferedEnough(this.videoBuffer, DynamicDash.VIDEO_PREBUFFER_TIME)) this.queryVideoSegment(this.nextUnbufferedTime(this.videoBuffer));
	        }
	        if (this.hasAudio && this.audioInitialized && this.audioBuffer != null && !this.audioBuffer.updating) {
	            if (!this.bufferedEnough(this.audioBuffer, DynamicDash.AUDIO_PREBUFFER_TIME)) this.queryAudioSegment(this.nextUnbufferedTime(this.audioBuffer));
	        }
	    };
	    prototype.controlSegmentsRequests = function () {
	        this.abortUnneededSegmentsLoading(this.videoQueriedQueue, DynamicDash.VIDEO_PREBUFFER_TIME);
	        this.abortUnneededSegmentsLoading(this.audioQueriedQueue, DynamicDash.AUDIO_PREBUFFER_TIME);
	        this.regularBuffersCheck();
	    };
	    prototype.bufferedEndOfStream = function () {
	        var bufferedVideoEnd;
	        var bufferedAudioEnd;
	        if (this.hasVideo) {
	            if (this.videoSegmentedStream.isDynamic()) {
	                return false;
	            }
	            if (this.videoBuffer == null) {
	                return false;
	            }
	            var bufV = this.videoBuffer.buffered;
	            bufferedVideoEnd = bufV.length > 0 && bufV.end(bufV.length - 1) >= this.getTimelineEnd() - this.VIDEO_END_THRESHOLD;
	            if (!this.hasAudio || !this.audioInitialized) {
	                return bufferedVideoEnd;
	            }
	            var bufA = this.audioBuffer.buffered;
	            bufferedAudioEnd = bufA.length > 0 && bufA.end(bufA.length - 1) >= this.getTimelineEnd() - this.MIN_TIME;
	            return bufferedVideoEnd && bufferedAudioEnd;
	        } else if (this.hasAudio) {
	            var bufA = this.audioBuffer.buffered;
	            bufferedAudioEnd = bufA.length > 0 && bufA.end(bufA.length - 1) >= this.getTimelineEnd() - this.MIN_TIME;
	            return bufferedAudioEnd;
	        } else {
	            throw new RuntimeException("invalid state");
	        }
	    };
	    constructor.Infinity = Infinity;
	    prototype.videoUpdateRx = null;
	    prototype.audioUpdateRx = null;
	    prototype.nextUnbufferedTime = function (sourceBuffer) {
	        var buf = sourceBuffer.buffered;
	        var t = this.video.currentTime;
	        var nextUnbuffered = t;
	        for (var i = 0; i < buf.length; i++) {
	            if (t >= buf.start(i) && t <= buf.end(i)) {
	                nextUnbuffered = buf.end(i);
	                break;
	            }
	        }
	        return nextUnbuffered < this.getTimelineEnd() ? nextUnbuffered + this.MIN_TIME : DynamicDash.Infinity;
	    };
	    prototype.nextBufferedTime = function (sourceBuffer, t) {
	        var buf = sourceBuffer.buffered;
	        for (var i = 0; i < buf.length; i++) {
	            if (buf.start(i) > t) return buf.start(i);
	        }
	        return DynamicDash.Infinity;
	    };
	    prototype.bufferedEnough = function (sourceBuffer, bufferTime) {
	        var nextUnbufferedTime = this.nextUnbufferedTime(sourceBuffer);
	        if (Math.abs(nextUnbufferedTime - this.video.currentTime) <= this.MIN_TIME) {
	            if (this.video.readyState == this.video.constructor.HAVE_ENOUGH_DATA) {
	                if (sourceBuffer.buffered.length != 0) {
	                    return true;
	                } else {
	                    return false;
	                }
	            }
	        }
	        var desiredNextUnbufferedTime = Math.min(this.video.currentTime + bufferTime, this.getTimelineEnd() - this.MIN_TIME);
	        return nextUnbufferedTime >= desiredNextUnbufferedTime;
	    };
	    prototype.queryVideoSegment = function (time) {
	        this.log.debug("querying video segment. time=" + time + " nextBuf=" + this.nextBufferedTime(this.videoBuffer, time));
	        var segmentIdx = this.videoSegmentedStream.getSegmentIdxByTime(time);
	        this.log.debug("queryVideoSegment " + segmentIdx + " " + this.videoSegmentedStream.url);
	        if (this.lastAppendedVideoSegment != segmentIdx) {
	            this.querySegment(this.videoSegmentedStream, segmentIdx, this.videoQueriedQueue, this.videoLoadedQueue, stjs.bind(this, "processVideoLoadedQueue"));
	        }
	    };
	    prototype.queryAudioSegment = function (time) {
	        this.log.debug("querying audio segment. time=" + time + " nextBuf=" + this.nextBufferedTime(this.audioBuffer, time));
	        var segmentIdx = this.audioDashStream.getSegmentIdxByTime(time);
	        if (this.lastAppendedAudioSegment != segmentIdx) {
	            this.querySegment(this.audioDashStream, segmentIdx, this.audioQueriedQueue, this.audioLoadedQueue, stjs.bind(this, "processAudioLoadedQueue"));
	        }
	    };
	    prototype.getTimelineEnd = function () {
	        if (this.hasAudio && !this.hasVideo) {
	            return this.audioDashStream.getDurationSec();
	        } else if (this.hasAudio && this.audioInitialized && !this.audioDashStream.silenceAppended()) {
	            return Math.min(this.videoSegmentedStream.getDurationSec(), this.audioDashStream.getDurationSec());
	        } else {
	            return this.videoSegmentedStream.getDurationSec();
	        }
	    };
	    constructor.Key = function () {};
	    constructor.Key = stjs.extend(constructor.Key, null, [], function (constructor, prototype) {
	        prototype.segmentIdx = 0;
	        prototype.segStartTime = 0.0;
	        prototype.segEndTime = 0.0;
	        prototype.toString = function () {
	            return DynamicDash.keyToString(this.segmentIdx, this.segStartTime, this.segEndTime);
	        };
	    }, {}, {});
	    constructor.keyToString = function (segmentIdx, segStartTime, segEndTime) {
	        return segmentIdx + ":" + segStartTime + ":" + segEndTime;
	    };
	    constructor.keyFromString = function (key) {
	        var split = key.split(":");
	        var k = new DynamicDash.Key();
	        k.segmentIdx = Utils.toInt(split[0]);
	        k.segStartTime = Utils.toDouble(split[1]);
	        k.segEndTime = Utils.toDouble(split[2]);
	        return k;
	    };
	    prototype.querySegment = function (segmentedStream, segmentIdx, queriedQueue, loadedQueue, onLoad) {
	        var segStartTime = segmentedStream.getSegmentStartTime(segmentIdx);
	        var segEndTime = segStartTime + segmentedStream.getSegmentDuration(segmentIdx);
	        var key = DynamicDash.keyToString(segmentIdx, segStartTime, segEndTime);
	        if (queriedQueue[key] != null || loadedQueue[key] != null) return;
	        this.log.debug("requesting " + Utils.constructorName(segmentedStream) + " seg=" + segmentIdx);
	        queriedQueue[key] = DynamicDash.ABORT_IMPOSSIBLE;
	        var callbackReceived = new MutableBoolean(false);
	        var abort = segmentedStream.loadSegment(segmentIdx, function (segment) {
	            if (queriedQueue[key] != null) {
	                callbackReceived.value = true;
	                delete queriedQueue[key];
	                loadedQueue[key] = segment;
	                onLoad();
	            }
	        }, stjs.bind(this, function (_e) {
	            delete queriedQueue[key];
	            this.errorRx.onNext(new PlayerError("can not load " + Utils.constructorName(segmentedStream) + " segment " + key, PlayerError.NONFATAL));
	        }));
	        if (!callbackReceived.value) {
	            queriedQueue[key] = abort;
	        }
	    };
	    prototype.appendVideoSegment = function (segmentIdx, segment) {
	        this.videoBuffer.timestampOffset = this.videoSegmentedStream.getSegmentTimestampOffset(segmentIdx);
	        this.videoBuffer.appendBuffer(segment);
	    };
	    prototype.appendM4sAudioSegment = function (segmentIdx, segment) {
	        this.audioBuffer.timestampOffset = this.audioDashStream.getSegmentTimestampOffset(segmentIdx);
	        this.audioBuffer.appendBuffer(segment);
	    };
	    prototype.appendRawAudioSegment = function (segmentIdx, segment) {
	        var startTime = this.audioDashStream.getSegmentStartTime(segmentIdx);
	        var duration = this.audioDashStream.getSegmentDuration(segmentIdx);
	        this.audioBuffer.appendWindowStart = 0;
	        this.audioBuffer.appendWindowEnd = startTime + duration;
	        this.audioBuffer.appendWindowStart = startTime;
	        this.audioBuffer.timestampOffset = startTime + this.audioDashStream.getSegmentTimestampOffset(segmentIdx);
	        this.audioBuffer.appendBuffer(segment);
	    };
	    prototype.processVideoLoadedQueue = function () {
	        if (this.videoBuffer == null) {
	            return;
	        }
	        if (!this.videoBuffer.updating) {
	            this.processLoadedQueue(this.videoLoadedQueue, stjs.bind(this, function (segmentIdx, segment) {
	                this.lastAppendedVideoSegment = segmentIdx;
	                this.appendVideoSegment(segmentIdx, segment);
	            }));
	        }
	    };
	    prototype.processAudioLoadedQueue = function () {
	        if (!this.audioBuffer.updating) {
	            this.processLoadedQueue(this.audioLoadedQueue, stjs.bind(this, function (segmentIdx, segment) {
	                this.lastAppendedAudioSegment = segmentIdx;
	                if (this.rawAudioStream) {
	                    this.appendRawAudioSegment(segmentIdx, segment);
	                } else {
	                    this.appendM4sAudioSegment(segmentIdx, segment);
	                }
	            }));
	        }
	    };
	    prototype.processLoadedQueue = function (queue, callback) {
	        var keys = [];
	        Utils.forEach(queue, function (v, key) {
	            keys.push(DynamicDash.keyFromString(key));
	        });
	        if (keys.length == 0) return;
	        keys.sort(function (k1, k2) {
	            return stjs.trunc(k1.segStartTime - k2.segStartTime);
	        });
	        var key = keys[0];
	        var segmentIdx = key.segmentIdx;
	        var segment = queue[key.toString()];
	        delete queue[key.toString()];
	        callback(segmentIdx, segment);
	    };
	    prototype.clearAudioBufferRx = function () {
	        var o = Rx.Observable.just(true);
	        if (this.audioBuffer != null) {
	            if (this.audioBuffer.updating) {
	                o = this.audioUpdateRx.take(1).doOnNext(stjs.bind(this, function (x) {
	                    return this.log.debug("abort() cought audioupdateend");
	                })).map(function (e) {
	                    return true;
	                });
	            }
	            o = o.flatMap(stjs.bind(this, function (e) {
	                this.audioQueriedQueue = {};
	                this.audioLoadedQueue = {};
	                this.log.debug("abort++");
	                if (this.audioBuffer.updating) {
	                    this.log.debug("unexpected audio source buffer state: updating=true");
	                }
	                if (this.mediaSource.readyState != DynamicDash.READYSTATE_CLOSED) {
	                    if (this.mediaSource.readyState == DynamicDash.READYSTATE_OPEN) {
	                        this.audioBuffer.abort();
	                    }
	                    if (this.audioBuffer.buffered.length > 0) {
	                        this.log.debug("removing buffered audio");
	                        this.audioBuffer.remove(0, this.audioBuffer.buffered.end(this.audioBuffer.buffered.length - 1));
	                        return this.audioUpdateRx.take(1).map(function (e2) {
	                            return true;
	                        });
	                    }
	                }
	                return Rx.Observable.just(true);
	            })).doOnNext(stjs.bind(this, function (b) {
	                return this.lastAppendedAudioSegment = -1;
	            }));
	        }
	        return o;
	    };
	    prototype.clearAudioBuffer = function () {
	        this.autoDisposable(this.clearAudioBufferRx().subscribe(stjs.bind(this, function (b) {
	            return this.audioUpdateEnd();
	        })));
	    };
	    prototype.abortSegment = function (queue, key) {
	        var abort = queue[key];
	        delete queue[key];
	        abort();
	    };
	    prototype.abortUnneededSegmentsLoading = function (queue, bufferTime) {
	        var allowedStart = this.video.currentTime;
	        var allowedEnd = allowedStart + bufferTime;
	        Utils.forEach(queue, stjs.bind(this, function (v, key) {
	            var split = key.split(":");
	            var segStartTime = parseFloat(split[2]);
	            var segEndTime = parseFloat(split[3]);
	            if (segStartTime >= allowedEnd || segEndTime <= allowedStart) this.abortSegment(queue, key);
	        }));
	    };
	    prototype.abortAllSegmentsLoading = function (queue) {
	        Utils.forEach(queue, stjs.bind(this, function (v, key) {
	            this.abortSegment(queue, key);
	        }));
	    };
	    prototype.autoDisposable = function (disposable) {
	        this.autoDisposables.add(disposable);
	    };
	}, { log: "Log", errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] }, ABORT_IMPOSSIBLE: "Callback0", mediaSource: "MediaSource", video: "Video", videoBuffer: "SourceBuffer", audioBuffer: "SourceBuffer", videoQueriedQueue: { name: "Map", arguments: [null, "Callback0"] }, videoLoadedQueue: { name: "Map", arguments: [null, "ArrayBuffer"] }, audioQueriedQueue: { name: "Map", arguments: [null, "Callback0"] }, audioLoadedQueue: { name: "Map", arguments: [null, "ArrayBuffer"] }, audioDashStream: "SegmentedAudioStream", videoSegmentedStream: "SegmentedStream", videoTimeupdateRx: { name: "Rx.Observable", arguments: ["DOMEvent"] }, videoSeekingRx: { name: "Rx.Observable", arguments: ["DOMEvent"] }, audioUpdateSubscription: "Rx.Disposable", audioToSet: { name: "Array", arguments: ["SegmentedAudioStream"] }, lastAppendedResetterInterval: "TimeoutHandler", autoDisposables: "Rx.CompositeDisposable", videoUpdateRx: { name: "Rx.Observable", arguments: ["DOMEvent"] }, audioUpdateRx: { name: "Rx.Observable", arguments: ["DOMEvent"] } }, {});
	var BoundedTimeline = function (timeline) {
	    this.timeline = timeline;
	};
	BoundedTimeline = stjs.extend(BoundedTimeline, null, [Timeline], function (constructor, prototype) {
	    prototype.timeline = null;
	    prototype.assertFinite = function (val) {
	        if (!Utils.isNormalNumber(val)) {
	            throw new RuntimeException(val + " is not a valid value");
	        }
	    };
	    prototype.checkTimecode = function (timecode) {
	        if (!TapeTimecode.isTimecode(timecode)) {
	            throw new RuntimeException(timecode + " is not a valid timecode");
	        }
	    };
	    prototype.boundsTv = function (tv) {
	        return Math.max(0, Math.min(tv, this.timeline.getLastTv()));
	    };
	    prototype.getTimeScale = function () {
	        return this.timeline.getTimeScale();
	    };
	    prototype.getFrameCount = function () {
	        return this.timeline.getFrameCount();
	    };
	    prototype.getTvBySec = function (sec) {
	        this.assertFinite(sec);
	        return this.boundsTv(this.timeline.getTvBySec(sec));
	    };
	    prototype.getLastFrame = function () {
	        return this.timeline.getLastFrame();
	    };
	    prototype.getLastTv = function () {
	        return this.timeline.getLastTv();
	    };
	    prototype.getTvByTimecode = function (timecode) {
	        this.checkTimecode(timecode);
	        return this.boundsTv(this.timeline.getTvByTimecode(timecode));
	    };
	    prototype.getTvByFrame = function (fn) {
	        this.assertFinite(fn);
	        return this.timeline.getTvByFrame(this.boundsFn(fn));
	    };
	    prototype.getFrameByTv = function (tv) {
	        this.assertFinite(tv);
	        return this.timeline.getFrameByTv(this.boundsTv(tv));
	    };
	    prototype.getFrameBySec = function (sec) {
	        this.assertFinite(sec);
	        return this.boundsFn(this.timeline.getFrameBySec(sec));
	    };
	    prototype.getFrameByTimecode = function (tc) {
	        this.checkTimecode(tc);
	        return this.boundsFn(this.timeline.getFrameByTimecode(tc));
	    };
	    prototype.getFrameByMillis = function (time) {
	        this.assertFinite(time);
	        return this.boundsFn(this.timeline.getFrameByMillis(time));
	    };
	    prototype.floorTv = function (tv) {
	        this.assertFinite(tv);
	        return this.timeline.floorTv(this.boundsTv(tv));
	    };
	    prototype.boundsFn = function (fn) {
	        this.assertFinite(fn);
	        return this.timeline.boundsFn(fn);
	    };
	    prototype.getSecByFrame = function (fn) {
	        this.assertFinite(fn);
	        return this.timeline.getSecByFrame(this.boundsFn(fn));
	    };
	    prototype.getSecByTv = function (tv) {
	        this.assertFinite(tv);
	        return this.timeline.getSecByTv(this.boundsTv(tv));
	    };
	    prototype.getMillisByTv = function (tv) {
	        this.assertFinite(tv);
	        return this.timeline.getMillisByTv(this.boundsTv(tv));
	    };
	    prototype.getTapeByTv = function (tv) {
	        this.assertFinite(tv);
	        return this.timeline.getTapeByTv(this.boundsTv(tv));
	    };
	    prototype.getTapeByFrame = function (fn) {
	        this.assertFinite(fn);
	        return this.timeline.getTapeByFrame(this.boundsFn(fn));
	    };
	    prototype.getTapeBySec = function (time) {
	        this.assertFinite(time);
	        return this.timeline.getTapeByFrame(this.getFrameBySec(time));
	    };
	    prototype.getTapeTimecode = function () {
	        return this.timeline.getTapeTimecode();
	    };
	    prototype.getDurationSec = function () {
	        return this.timeline.getDurationSec();
	    };
	    prototype.getSeekableDurationSec = function () {
	        return this.timeline.getSeekableDurationSec();
	    };
	    prototype.setSeekableDurationSec = function (durationSec) {
	        this.assertFinite(durationSec);
	        this.timeline.setSeekableDurationSec(durationSec);
	    };
	    prototype.getUpdateRx = function () {
	        return this.timeline.getUpdateRx();
	    };
	    prototype.originalTimeline = function () {
	        return this.timeline;
	    };
	    prototype.getStartUTCTimestamp = function () {
	        return this.timeline.getStartUTCTimestamp();
	    };
	    prototype.setStartUTCTimestamp = function (timestamp) {
	        this.timeline.setStartUTCTimestamp(timestamp);
	    };
	    prototype.getUTCTimestampBySec = function (sec) {
	        return this.timeline.getUTCTimestampBySec(sec);
	    };
	}, { UNKNOWN: "Timeline" }, {});
	var GenericTimeline = function (timeScale, frameDurationTv, tapeTimecode) {
	    this.timeScale = timeScale;
	    this.frameDurationTv = frameDurationTv;
	    this.timecode = tapeTimecode;
	    this.updateRx = new Rx.Subject();
	};
	GenericTimeline = stjs.extend(GenericTimeline, null, [Timeline], function (constructor, prototype) {
	    prototype.updateRx = null;
	    prototype.timeScale = 0;
	    prototype.frameDurationTv = 0;
	    prototype.timecode = null;
	    prototype.durationSec = 0.0;
	    prototype.seekableDurationSec = -1;
	    constructor.newGenericTime = function (timeScale, frameDurationTv) {
	        var tapefps = stjs.trunc(Math.round(timeScale / frameDurationTv));
	        var _tapeTimecode = new TapeTimecode(false, 0, tapefps);
	        return new GenericTimeline(timeScale, frameDurationTv, _tapeTimecode);
	    };
	    prototype.getTimeScale = function () {
	        return this.timeScale;
	    };
	    prototype.getFrameCount = function () {
	        return stjs.trunc(this.durationSec * this.timeScale / this.frameDurationTv);
	    };
	    prototype.getTvBySec = function (sec) {
	        return stjs.trunc(this.timeScale * sec);
	    };
	    prototype.getLastFrame = function () {
	        return this.getFrameCount() - 1;
	    };
	    prototype.getLastTv = function () {
	        return this.getTvByFrame(this.getLastFrame());
	    };
	    prototype.getTvByTimecode = function (timecode) {
	        var fn = this.getTapeTimecode().getFrameByTimecode(timecode);
	        return this.getTvByFrame(fn);
	    };
	    prototype.getTvByFrame = function (fn) {
	        return fn * this.frameDurationTv;
	    };
	    prototype.getFrameByTv = function (tv) {
	        var mod = tv % this.frameDurationTv;
	        if (mod == 0) {
	            return stjs.trunc(stjs.trunc(tv / this.frameDurationTv));
	        } else {
	            return stjs.trunc(stjs.trunc((tv - mod) / this.frameDurationTv));
	        }
	    };
	    prototype.getFrameBySec = function (sec) {
	        return this.getFrameByTv(this.floorTv(stjs.trunc(sec * this.timeScale + 4.2E-4)));
	    };
	    prototype.getFrameByTimecode = function (tc) {
	        return this.timecode.getFrameByTimecode(tc);
	    };
	    prototype.getFrameByMillis = function (time) {
	        return this.getFrameBySec(time / 1000);
	    };
	    prototype.floorTv = function (tv) {
	        var mod = tv % this.frameDurationTv;
	        return mod == 0 ? tv : tv - mod;
	    };
	    prototype.boundsFn = function (fn) {
	        return Math.min(Math.max(fn, 0), this.getFrameCount() - 1);
	    };
	    prototype.getSecByFrame = function (fn) {
	        var _fn = this.boundsFn(fn);
	        return _fn * this.frameDurationTv / this.timeScale;
	    };
	    prototype.getSecByTv = function (tv) {
	        return tv / this.timeScale;
	    };
	    prototype.getMillisByTv = function (tv) {
	        return stjs.trunc(tv * 1000 / this.timeScale);
	    };
	    prototype.getTapeByTv = function (tv) {
	        return this.timecode.getTimecodeAtFrame(this.getFrameByTv(tv));
	    };
	    prototype.getTapeByFrame = function (fn) {
	        return this.timecode.getTimecodeAtFrame(fn);
	    };
	    prototype.getTapeBySec = function (time) {
	        return this.timecode.getTimecodeAtFrame(this.getFrameBySec(time));
	    };
	    prototype.getTapeTimecode = function () {
	        return this.timecode;
	    };
	    prototype.getDurationSec = function () {
	        return this.durationSec;
	    };
	    prototype.getSeekableDurationSec = function () {
	        return this.seekableDurationSec;
	    };
	    prototype.setSeekableDurationSec = function (durationSec) {
	        this.seekableDurationSec = durationSec;
	        this.updateRx.onNext(this);
	    };
	    prototype.setDurationSec = function (durationSec) {
	        this.durationSec = durationSec;
	        if (this.seekableDurationSec == -1) {
	            this.seekableDurationSec = durationSec;
	        }
	        this.updateRx.onNext(this);
	    };
	    prototype.getUpdateRx = function () {
	        return this.updateRx;
	    };
	    prototype.getStartUTCTimestamp = function () {
	        throw new RuntimeException("not supported");
	    };
	    prototype.setStartUTCTimestamp = function (timestamp) {
	        throw new RuntimeException("not supported");
	    };
	    prototype.getUTCTimestampBySec = function (sec) {
	        throw new RuntimeException("not supported");
	    };
	}, { updateRx: { name: "Rx.Subject", arguments: ["Timeline"] }, timecode: "TapeTimecode", UNKNOWN: "Timeline" }, {});
	var MP4Timeline = function (pkts) {
	    this.pkts = pkts;
	    this.timeScale = pkts[0].timescale;
	    var dropFrame = false;
	    var startTimecode = stjs.trunc(pkts[0].timecode);
	    var tapefps = stjs.trunc(Math.round(this.timeScale / pkts[0].duration));
	    this.timecode = new TapeTimecode(dropFrame, startTimecode, tapefps);
	    this.pkts.sort(function (p1, p2) {
	        var x = p1.pts;
	        var y = p2.pts;
	        return MP4Timeline.longCompare(x, y);
	    });
	    this.seekableDurationSec = this.getDurationSec();
	    this.updateRx = new Rx.Subject();
	};
	MP4Timeline = stjs.extend(MP4Timeline, null, [Timeline], function (constructor, prototype) {
	    prototype.timeScale = 0;
	    prototype.timecode = null;
	    prototype.pkts = null;
	    prototype.seekableDurationSec = 0.0;
	    prototype.updateRx = null;
	    constructor.longCompare = function (x, y) {
	        return x < y ? -1 : x == y ? 0 : 1;
	    };
	    prototype.getTimeScale = function () {
	        return this.timeScale;
	    };
	    prototype.getFrameCount = function () {
	        return this.pkts.length;
	    };
	    prototype.getTvBySec = function (sec) {
	        return stjs.trunc(this.timeScale * sec);
	    };
	    prototype.getLastFrame = function () {
	        return this.getFrameCount() - 1;
	    };
	    prototype.getLastTv = function () {
	        return this.getTvByFrame(this.getLastFrame());
	    };
	    prototype.getTvByTimecode = function (timecode) {
	        var fn = this.getTapeTimecode().getFrameByTimecode(timecode);
	        return this.getTvByFrame(this.boundsFn(fn));
	    };
	    prototype.getTvByFrame = function (fn) {
	        if (fn == this.pkts.length) {
	            var pkt = this.pkts[fn - 1];
	            return pkt.pts + pkt.duration;
	        }
	        return this.pkts[fn].pts;
	    };
	    prototype.getFrameByTv = function (tv) {
	        var idx = Utils.binarySearch(this.pkts, function (pkt) {
	            return MP4Timeline.longCompare(pkt.pts, tv);
	        });
	        if (idx >= 0) return idx;
	        return -(idx + 1);
	    };
	    prototype.getFrameBySec = function (sec) {
	        return this.getFrameByTv(this.floorTv(stjs.trunc(sec * this.timeScale + 4.2E-4)));
	    };
	    prototype.getFrameByTimecode = function (tc) {
	        return this.timecode.getFrameByTimecode(tc);
	    };
	    prototype.getFrameByMillis = function (time) {
	        return this.getFrameBySec(time / 1000);
	    };
	    prototype.floorTv = function (tv) {
	        var idx = this.getFrameByTv(tv);
	        var pkt = this.pkts[idx];
	        return pkt.pts;
	    };
	    prototype.boundsFn = function (fn) {
	        return Math.min(Math.max(fn, 0), this.getFrameCount() - 1);
	    };
	    prototype.getSecByFrame = function (fn) {
	        var _fn = this.boundsFn(fn);
	        var pkt = this.pkts[_fn];
	        return pkt.pts / pkt.timescale;
	    };
	    prototype.getSecByTv = function (tv) {
	        return tv / this.timeScale;
	    };
	    prototype.getMillisByTv = function (tv) {
	        return stjs.trunc(tv * 1000 / this.timeScale);
	    };
	    prototype.getTapeByTv = function (tv) {
	        return this.timecode.getTimecodeAtFrame(this.getFrameByTv(tv));
	    };
	    prototype.getTapeByFrame = function (fn) {
	        return this.timecode.getTimecodeAtFrame(fn);
	    };
	    prototype.getTapeBySec = function (time) {
	        return this.timecode.getTimecodeAtFrame(this.getFrameBySec(time));
	    };
	    prototype.getTapeTimecode = function () {
	        return this.timecode;
	    };
	    prototype.getDurationSec = function () {
	        var pkt = this.pkts[this.pkts.length - 1];
	        var tv = pkt.pts + pkt.duration;
	        return tv / pkt.timescale;
	    };
	    prototype.getSeekableDurationSec = function () {
	        return this.seekableDurationSec;
	    };
	    prototype.setSeekableDurationSec = function (durationSec) {
	        this.seekableDurationSec = durationSec;
	        this.updateRx.onNext(this);
	    };
	    prototype.getUpdateRx = function () {
	        return this.updateRx;
	    };
	    prototype.getStartUTCTimestamp = function () {
	        throw new RuntimeException("not supported");
	    };
	    prototype.setStartUTCTimestamp = function (timestamp) {
	        throw new RuntimeException("not supported");
	    };
	    prototype.getUTCTimestampBySec = function (sec) {
	        throw new RuntimeException("not supported");
	    };
	}, { timecode: "TapeTimecode", pkts: { name: "Array", arguments: ["MovDasher.TimePacket"] }, updateRx: { name: "Rx.Subject", arguments: ["Timeline"] }, UNKNOWN: "Timeline" }, {});
	var HLSPlaylist = function () {
	    this.headers = {};
	    this.mediaList = [];
	    this.variantList = [];
	};
	HLSPlaylist = stjs.extend(HLSPlaylist, null, [], function (constructor, prototype) {
	    constructor.NO = "NO";
	    constructor.YES = "YES";
	    constructor.ENDLIST = "#EXT-X-ENDLIST";
	    constructor.EXTM3U = "#EXTM3U";
	    constructor.EXTINF = "#EXTINF";
	    constructor.ALLOW_CACHE = "#EXT-X-ALLOW-CACHE";
	    constructor.START = "#EXT-X-START";
	    constructor.MEDIA_SEQUENCE = "#EXT-X-MEDIA-SEQUENCE";
	    /**
	     *  The EXT-X-TARGETDURATION tag specifies the maximum media segment
	     *  duration. The EXTINF duration of each media segment in the Playlist file
	     *  MUST be less than or equal to the target duration.
	     */
	    constructor.TARGETDURATION = "#EXT-X-TARGETDURATION";
	    /**
	     *  Furthermore, the Playlist file MAY contain an EXT-X-PLAYLIST-TYPE tag
	     *  with a value of either EVENT or VOD. If the tag is present and has a
	     *  value of EVENT, the server MUST NOT change or delete any part of the
	     *  Playlist file (although it MAY append lines to it). If the tag is present
	     *  and has a value of VOD, the Playlist file MUST NOT change.
	     */
	    constructor.PLAYLIST_TYPE = "#EXT-X-PLAYLIST-TYPE";
	    constructor.VERSION = "#EXT-X-VERSION";
	    /**
	     *  BANDWIDTH
	     *  
	     *  The value is a decimal-integer of bits per second. It MUST be an upper
	     *  bound of the overall bitrate of each media segment (calculated to include
	     *  container overhead) that appears or will appear in the Playlist.
	     *  
	     *  Every EXT-X-STREAM-INF tag MUST include the BANDWIDTH attribute.
	     *  
	     */
	    constructor.BANDWIDTH = "BANDWIDTH";
	    /**
	     *  RESOLUTION
	     *  
	     *  The value is a decimal-resolution describing the approximate encoded
	     *  horizontal and vertical resolution of video within the presentation. The
	     *  RESOLUTION attribute is OPTIONAL but is recommended if the variant stream
	     *  includes video.
	     */
	    constructor.RESOLUTION = "RESOLUTION";
	    constructor.URI = "URI";
	    constructor.AUTOSELECT = "AUTOSELECT";
	    constructor.DEFAULT = "DEFAULT";
	    /**
	     *  GROUP-ID
	     *  
	     *  The value is a quoted-string identifying a mutually-exclusive group of
	     *  renditions. The presence of this attribute signals membership in the
	     *  group. See Section 3.4.9.1. This attribute is REQUIRED.
	     */
	    constructor.GROUP_ID = "GROUP-ID";
	    /**
	     *  TYPE
	     *  
	     *  The value is enumerated-string; valid strings are AUDIO, VIDEO, SUBTITLES
	     *  and CLOSED-CAPTIONS. If the value is AUDIO, the Playlist described by the
	     *  tag MUST contain audio media. If the value is VIDEO, the Playlist MUST
	     *  contain video media. If the value is SUBTITLES, the Playlist MUST contain
	     *  subtitle media. If the value is CLOSED-CAPTIONS, the media segments for
	     *  the video renditions can include closed captions. This attribute is
	     *  REQUIRED.
	     *  
	     */
	    constructor.TYPE = "TYPE";
	    constructor.VIDEO = "VIDEO";
	    constructor.AUDIO = "AUDIO";
	    /**
	     *  
	     *  NAME
	     *  
	     *  The value is a quoted-string containing a human-readable description of
	     *  the rendition. If the LANGUAGE attribute is present then this description
	     *  SHOULD be in that language. This attribute is REQUIRED.
	     */
	    constructor.NAME = "NAME";
	    /**
	     *  The EXT-X-MEDIA tag is used to relate Media Playlists that contain
	     *  alternative renditions of the same content. For example, three
	     *  EXT-X-MEDIA tags can be used to identify audio-only Media Playlists that
	     *  contain English, French and Spanish renditions of the same presentation.
	     *  Or two EXT-X-MEDIA tags can be used to identify video- only Media
	     *  Playlists that show two different camera angles.
	     */
	    constructor.Related = "#EXT-X-MEDIA";
	    /**
	     *  The EXT-X-STREAM-INF tag specifies a variant stream, which is a set of
	     *  renditions which can be combined to play the presentation. The attributes
	     *  of the tag provide information about the variant stream.
	     */
	    constructor._Variant = "#EXT-X-STREAM-INF";
	    constructor.EVENT = "EVENT";
	    constructor.VOD = "VOD";
	    constructor.RelatedPlaylist = function (attrs) {
	        this.attributes = attrs;
	    };
	    constructor.RelatedPlaylist = stjs.extend(constructor.RelatedPlaylist, null, [], function (constructor, prototype) {
	        prototype.attributes = null;
	    }, { attributes: { name: "Map", arguments: [null, null] } }, {});
	    constructor.createVariant = function (uri, attributes) {
	        var v = new HLSPlaylist.Variant();
	        v.uri = uri;
	        v.attributes = attributes;
	        return v;
	    };
	    constructor.Variant = function () {};
	    constructor.Variant = stjs.extend(constructor.Variant, null, [], function (constructor, prototype) {
	        prototype.uri = null;
	        prototype.attributes = null;
	    }, { attributes: { name: "Map", arguments: [null, null] } }, {});
	    constructor.Media = function (url, durationSec) {
	        this.url = url;
	        this.durationSec = durationSec;
	    };
	    constructor.Media = stjs.extend(constructor.Media, null, [], function (constructor, prototype) {
	        prototype.url = null;
	        prototype.durationSec = 0.0;
	    }, {}, {});
	    prototype.uri = null;
	    prototype.headers = null;
	    prototype.mediaList = null;
	    prototype.variantList = null;
	    prototype.endList = false;
	    prototype.getRelatedPlaylists = function () {
	        var list = this.headers[HLSPlaylist.Related];
	        var collect = list.map(function (str, i, a) {
	            return new HLSPlaylist.RelatedPlaylist(HLSPlaylist.parseAttributeList(str));
	        });
	        return collect;
	    };
	    prototype.getVariantList = function () {
	        return this.copyOf(this.variantList);
	    };
	    prototype.copyOf = function (list) {
	        return list.slice(0);
	    };
	    prototype.getDurationSec = function () {
	        var sum = 0;
	        for (var i = 0; i < this.mediaList.length; i++) {
	            sum += this.mediaList[i].durationSec;
	        }
	        return sum;
	    };
	    prototype.getMediaList = function () {
	        return this.copyOf(this.mediaList);
	    };
	    prototype.setEndList = function (endList) {
	        this.endList = endList;
	    };
	    prototype.hasEndList = function () {
	        return this.endList;
	    };
	    prototype.addMedia = function (url, videoDurationSec) {
	        this.mediaList.push(new HLSPlaylist.Media(url, videoDurationSec));
	    };
	    prototype.setVersion = function (v) {
	        this.setHeader(HLSPlaylist.VERSION, Integer.toString(v));
	    };
	    prototype.setHeader = function (key, value) {
	        this.headers[key] = [value];
	    };
	    prototype.getVersion = function () {
	        return this.toInt(this.getHeader(HLSPlaylist.VERSION));
	    };
	    prototype.toInt = function (val) {
	        return parseInt(val);
	    };
	    prototype.setTargetDuration = function (sec) {
	        this.setHeader(HLSPlaylist.TARGETDURATION, Integer.toString(sec));
	    };
	    prototype.getTargetDuration = function () {
	        return this.toInt(this.getHeader(HLSPlaylist.TARGETDURATION));
	    };
	    prototype.setPlaylistType = function (string) {
	        this.setHeader(HLSPlaylist.PLAYLIST_TYPE, string);
	    };
	    prototype.getPlaylistType = function () {
	        return this.getHeader(HLSPlaylist.PLAYLIST_TYPE);
	    };
	    prototype.getHeader = function (key) {
	        if (this.containsKey(key)) {
	            return this.headers[key][0];
	        }
	        return null;
	    };
	    prototype.containsKey = function (key) {
	        return this.headers.hasOwnProperty(key);
	    };
	    prototype.setMediaSequence = function (ms) {
	        this.setHeader(HLSPlaylist.MEDIA_SEQUENCE, Integer.toString(ms));
	    };
	    prototype.getMediaSequence = function () {
	        return this.toInt(this.getHeader(HLSPlaylist.MEDIA_SEQUENCE));
	    };
	    prototype.setAllowCache = function (b) {
	        this.setHeader(HLSPlaylist.ALLOW_CACHE, b ? HLSPlaylist.YES : HLSPlaylist.NO);
	    };
	    prototype.getAllowCache = function () {
	        return HLSPlaylist.toBooleanObject(this.getHeader(HLSPlaylist.ALLOW_CACHE));
	    };
	    constructor.toBooleanObject = function (val) {
	        if (HLSPlaylist.YES.equals(val)) {
	            return true;
	        } else if (HLSPlaylist.NO.equals(val)) {
	            return false;
	        }
	        return null;
	    };
	    constructor.attrsToString = function (attrs) {
	        var str = "";
	        for (var key in attrs) {
	            if ("" != str) {
	                str += ",";
	            }
	            var val = attrs[key];
	            if (val != null) {
	                str += "=" + val;
	            }
	        }
	        return str;
	    };
	    constructor.parseString = function (str, log) {
	        return HLSPlaylist.parseM3U8(str.replaceAll("\r\n", "\n").split("\n"), log);
	    };
	    constructor.parseM3U8 = function (lines, log) {
	        var line = lines.length > 0 ? lines.shift() : null;
	        if (!HLSPlaylist.EXTM3U.equals(line)) {
	            return null;
	        }
	        var playlist = new HLSPlaylist();
	        var names = false;
	        var variants = false;
	        var extinf = -1.0;
	        while (lines.length > 0) {
	            line = lines.shift();
	            if (line.trim() == "") continue;
	            if (line.startsWith("#")) {
	                if (line.startsWith(HLSPlaylist.EXTINF)) {
	                    var split = HLSPlaylist.split(line);
	                    extinf = Double.parseDouble(split[1].replaceAll(",$", ""));
	                    names = true;
	                } else if (line.startsWith(HLSPlaylist._Variant)) {
	                    var split = HLSPlaylist.split(line);
	                    var variant = new HLSPlaylist.Variant();
	                    variant.attributes = HLSPlaylist.parseAttributeList(split[1]);
	                    playlist.variantList.push(variant);
	                    variants = true;
	                } else if (line.startsWith(HLSPlaylist.ENDLIST)) {
	                    playlist.endList = true;
	                } else if (line.startsWith("#EXT-X")) {
	                    var split = HLSPlaylist.split(line);
	                    var key = split[0];
	                    var value = split[1];
	                    playlist.addHeader(key, value);
	                }
	            } else if (names) {
	                playlist.addMedia(line, extinf);
	            } else if (variants) {
	                playlist.variantList[playlist.variantList.length - 1].uri = line;
	            } else {
	                throw new HLSPlaylist.HLSParseException("error parsing m3u8 line: " + line);
	            }
	        }
	        return playlist;
	    };
	    constructor.split = function (line) {
	        var idx = line.indexOf(":");
	        if (idx < 0) {
	            return [line];
	        }
	        return [line.substring(0, idx), line.substring(idx + 1)];
	    };
	    prototype.setStart = function (timeoffset, precise) {
	        this.setHeader(HLSPlaylist.START, String.format("TIME-OFFSET=%f,PRECISE=%s", timeoffset, precise ? HLSPlaylist.YES : HLSPlaylist.NO));
	    };
	    prototype.getStart = function () {
	        var string = this.getHeader(HLSPlaylist.START);
	        if (string == null) return null;
	        var map = HLSPlaylist.parseAttributeList(string);
	        return Pair.of(HLSPlaylist.toFloatObject(map["TIME-OFFSET"]), HLSPlaylist.toBooleanObject(map["PRECISE"]));
	    };
	    constructor.parseAttributeList = function (string) {
	        var map = {};
	        var m = new RegExp("(([^,]+)=(\".+?\"|[^,]+)),?", "g");
	        var myArray = [];
	        while ((myArray = m.exec(string)) != null) {
	            map[myArray[2]] = myArray[3];
	        }
	        return map;
	    };
	    constructor.toFloatObject = function (string) {
	        try {
	            return Float.parseFloat(string);
	        } catch (e) {
	            return null;
	        }
	    };
	    prototype.addRelatedPlaylist = function (attrs) {
	        this.addHeader(HLSPlaylist.Related, HLSPlaylist.attrsToString(attrs));
	    };
	    prototype.addHeader = function (key, value) {
	        if (!this.containsKey(key)) {
	            this.headers[key] = [];
	        }
	        this.headers[key].push(value);
	    };
	    prototype.addVariantStream = function (variant) {
	        this.variantList.push(variant);
	    };
	    constructor.quote = function (uri) {
	        return '"' + uri + '"';
	    };
	    constructor.audio = function (name, uri, groupId) {
	        var map = {};
	        map[HLSPlaylist.TYPE] = HLSPlaylist.AUDIO;
	        map[HLSPlaylist.GROUP_ID] = groupId;
	        map[groupId] = HLSPlaylist.quote(name);
	        map[HLSPlaylist.URI] = HLSPlaylist.quote(uri);
	        map[HLSPlaylist.TYPE] = HLSPlaylist.AUDIO;
	        return map;
	    };
	    constructor.testParse4 = function () {
	        var m3u8 = ["#EXTM3U", "#EXT-X-VERSION:4", "#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"index_audio\",NAME=\"eredeti\",DEFAULT=NO,AUTOSELECT=YES,URI=\"AUD_MUL.m3u8\"", "#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"index_audio\",NAME=\"magyar\",DEFAULT=YES,AUTOSELECT=YES,LANGUAGE=\"hu\",URI=\"AUD_HUN.m3u8\"", "#EXT-X-STREAM-INF:PROGRAM-ID=16,BANDWIDTH=2699680,RESOLUTION=1280x720,CODECS=\"avc1.4d401f,mp4a.40.2\",AUDIO=\"index_audio\"", "VID_1280x720.m3u8", "#EXT-X-STREAM-INF:PROGRAM-ID=16,BANDWIDTH=2185312,RESOLUTION=1024x576,CODECS=\"avc1.4d401f,mp4a.40.2\",AUDIO=\"index_audio\"", "VID_640x360_1.m3u8", "#EXT-X-STREAM-INF:PROGRAM-ID=16,BANDWIDTH=645216,RESOLUTION=384x216,CODECS=\"avc1.42e015,mp4a.40.2\",AUDIO=\"index_audio\"", "VID_384x216.m3u8"];
	        var log = new Log(LogLevel.DEBUG);
	        log.debug(HLSPlaylist.parseM3U8(m3u8, log));
	        var endlist = ["#EXTM3U", "#EXT-X-PLAYLIST-TYPE:VOD", "#EXT-X-TARGETDURATION:3", "#EXT-X-VERSION:3", "#EXTINF:2.13547,", "0.ts", "#EXTINF:2.13547,", "1.ts", "#EXTINF:2.13547,", "2.ts", "#EXT-X-ENDLIST"];
	        log.debug(HLSPlaylist.parseM3U8(endlist, log));
	    };
	    constructor.HLSParseException = function (message) {
	        Exception.call(this, message);
	    };
	    constructor.HLSParseException = stjs.extend(constructor.HLSParseException, Exception, [], null, {}, {});
	}, { headers: { name: "Map", arguments: [null, { name: "Array", arguments: [null] }] }, mediaList: { name: "Array", arguments: ["HLSPlaylist.Media"] }, variantList: { name: "Array", arguments: ["HLSPlaylist.Variant"] } }, {});
	var M4SMp3SegmentedStream = function (mp3) {
	    SegmentedAudioStream.call(this);
	    this.mp3 = mp3;
	    this.proxyId = mp3.proxyId;
	    this.sampleRate = mp3.sampleRate;
	    this.channelMuted = new Array(mp3.audioInfo.channelCount);
	    this.frameSize = stjs.trunc(Math.round(mp3.BITRATE * 1000 * 1152.0 / (mp3.sampleRate * 8)));
	    this.mimeType = "audio/mp4";
	    this.serverUrl = mp3.serverUrl;
	    this.audioInfo = mp3.audioInfo;
	    this.url = mp3.url;
	};
	M4SMp3SegmentedStream = stjs.extend(M4SMp3SegmentedStream, SegmentedAudioStream, [], function (constructor, prototype) {
	    prototype.mp3 = null;
	    prototype.frameSize = 0;
	    prototype.loadSegment = function (idx, onDone, onError) {
	        var self = this;
	        this.mp3.channelMuted = this.channelMuted;
	        return this.mp3.loadSegment(idx, stjs.bind(this, function (mp3Buf) {
	            var mp3Arr;
	            var frames = stjs.trunc(mp3Buf.byteLength / self.frameSize);
	            if (frames > SegmentedAudioStream.FRAMES_PER_SEGMENT && idx < self.getSegmentCount() - 1) {
	                mp3Arr = new Uint8Array(mp3Buf, 0, SegmentedAudioStream.FRAMES_PER_SEGMENT * self.frameSize);
	            } else {
	                mp3Arr = new Uint8Array(mp3Buf);
	            }
	            var m4s = MovDasher.wrapMp3Segment(idx, SegmentedAudioStream.FRAMES_PER_SEGMENT, this.totalSamples, this.frameSize, mp3Arr);
	            onDone(m4s);
	        }), onError);
	    };
	    prototype.getDurationSec = function () {
	        return this.mp3.getDurationSec();
	    };
	    prototype.getDashDescriptor = function () {
	        throw new RuntimeException("TODO");
	    };
	    prototype.getSegmentCount = function () {
	        return this.mp3.getSegmentCount();
	    };
	    prototype.getSegmentDuration = function (idx) {
	        return this.mp3.getSegmentDuration(idx);
	    };
	    prototype.getSegmentIdxByTime = function (time) {
	        return this.mp3.getSegmentIdxByTime(time);
	    };
	    prototype.getSegmentStartTime = function (idx) {
	        return this.mp3.getSegmentStartTime(idx);
	    };
	    prototype.getDashInit = function (onDone, onError) {
	        MovDasher.mp3InitSegment(this.sampleRate, this.totalSamples, this.frameSize, onDone);
	    };
	    prototype.silenceAppended = function () {
	        return this.mp3.silenceAppended();
	    };
	}, { mp3: "SegmentedAudioStream", channelMuted: { name: "Array", arguments: [null] }, audioInfo: "AudioInfo", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var Mp3SegmentedAudioStream = function (proxyId, sampleRate, totalSamples, dataSrc) {
	    SegmentedAudioStream.call(this);
	    throw new RuntimeException("Mp3DashFile TODO");
	};
	Mp3SegmentedAudioStream = stjs.extend(Mp3SegmentedAudioStream, SegmentedAudioStream, [], function (constructor, prototype) {
	    prototype.getSegmentCount = function () {
	        throw new RuntimeException("TODO");
	    };
	    prototype.loadSegment = function (segmentIdx, onDone, onError) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.getSegmentDuration = function (idx) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.getSegmentIdxByTime = function (time) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.getSegmentStartTime = function (idx) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.getDashInit = function (onDone, onError) {
	        throw new RuntimeException("TODO");
	    };
	    prototype.getDashDescriptor = function () {
	        throw new RuntimeException("TODO");
	    };
	    prototype.silenceAppended = function () {
	        throw new RuntimeException("TODO");
	    };
	}, { channelMuted: { name: "Array", arguments: [null] }, audioInfo: "AudioInfo", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var M4ASegmentedStream = function (segmentedStream) {
	    SegmentedAudioStream.call(this);
	    this.segmentedStream = segmentedStream;
	    this.sampleRate = this.getDashDescriptor().timescale;
	    this.totalSamples = this.getDashDescriptor().duration;
	    this.mimeType = this.getDashDescriptor().mimeType;
	    this.codecs = this.getDashDescriptor().codecs;
	};
	M4ASegmentedStream = stjs.extend(M4ASegmentedStream, SegmentedAudioStream, [], function (constructor, prototype) {
	    prototype.segmentedStream = null;
	    prototype.silenceAppended = function () {
	        return false;
	    };
	    prototype.getDashInit = function (onDone, onError) {
	        this.segmentedStream.getDashInit(onDone, onError);
	    };
	    prototype.loadSegment = function (segmentIdx, onDone, onError) {
	        return this.segmentedStream.loadSegment(segmentIdx, onDone, onError);
	    };
	    prototype.getDashDescriptor = function () {
	        return this.segmentedStream.getDashDescriptor();
	    };
	    prototype.getChannelConfig = function () {
	        return this.segmentedStream.getDashDescriptor().channelConfig;
	    };
	}, { segmentedStream: "SegmentedStream", channelMuted: { name: "Array", arguments: [null] }, audioInfo: "AudioInfo", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var ConformedM4sAudioStream = function (realStream, offsetSamples, totalSamples, log) {
	    SegmentedAudioStream.call(this);
	    this.realStream = realStream;
	    this.offsetPTS = offsetSamples;
	    this.log = log;
	    var tail = totalSamples - (offsetSamples + realStream.totalSamples);
	    this.tailSilenceDuration = stjs.trunc(Math.ceil(tail / 1024)) * 1024;
	    this.totalSamples = offsetSamples + realStream.totalSamples + this.tailSilenceDuration;
	    this.sampleRate = realStream.sampleRate;
	    this.offsetSec = offsetSamples / realStream.sampleRate;
	    var needAlign = offsetSamples % 1024 != 0;
	    this.frameAlignTv = needAlign ? 1024 - offsetSamples % 1024 : 0;
	    this.firstRealSegment = stjs.trunc(Math.ceil(offsetSamples / ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION));
	    this.lastRealSegment = this.firstRealSegment + this.realStream.getSegmentCount() - 1;
	    this.codecs = realStream.codecs;
	    this.mimeType = realStream.mimeType;
	};
	ConformedM4sAudioStream = stjs.extend(ConformedM4sAudioStream, SegmentedAudioStream, [], function (constructor, prototype) {
	    prototype.realStream = null;
	    prototype.offsetPTS = 0;
	    prototype.offsetSec = 0.0;
	    prototype.firstRealSegment = 0;
	    prototype.lastRealSegment = 0;
	    prototype.frameAlignTv = 0;
	    prototype.moovMp4Box = null;
	    prototype.tailSilenceDuration = 0;
	    prototype.log = null;
	    constructor.SILENCE_SEGMENT_DURATION = 245760;
	    constructor.ABORT_IMPOSSIBLE = function () {};
	    prototype.getSegmentIdxByTime = function (time) {
	        var pts = Utils.secondsToTv(time, this.sampleRate);
	        var tailStartPts = this.offsetPTS + this.realStream.totalSamples;
	        if (pts < this.offsetPTS) {
	            var dts = pts + this.frameAlignTv;
	            return stjs.trunc(stjs.trunc(dts / ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION));
	        } else if (pts < tailStartPts) {
	            return this.realStream.getSegmentIdxByTime(time - this.offsetSec) + this.firstRealSegment;
	        } else {
	            return stjs.trunc(stjs.trunc((pts - tailStartPts) / ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION)) + (this.lastRealSegment + 1);
	        }
	    };
	    prototype.getSegmentStartTime = function (idx) {
	        return this.getSegmentStartTv(idx) / this.sampleRate;
	    };
	    prototype.getSegmentStartTv = function (idx) {
	        if (idx < this.firstRealSegment) {
	            var dts = idx * ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION;
	            var pts = dts - this.frameAlignTv;
	            if (pts < 0) pts = 0;
	            return pts;
	        } else if (idx <= this.lastRealSegment) {
	            return this.realStream.getSegmentStartTv(idx - this.firstRealSegment) + this.offsetPTS;
	        } else {
	            var tailStartPts = this.offsetPTS + this.realStream.totalSamples;
	            return tailStartPts + (idx - (this.lastRealSegment + 1)) * ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION;
	        }
	    };
	    prototype.getSegmentDuration = function (idx) {
	        if (idx >= this.firstRealSegment && idx <= this.lastRealSegment) {
	            return this.realStream.getSegmentDuration(idx - this.firstRealSegment);
	        } else {
	            var duration = this.getSilenceSegmentDurationInDTS(idx);
	            if (idx == 0) {
	                duration -= this.frameAlignTv;
	            }
	            return duration / this.sampleRate;
	        }
	    };
	    prototype.getSilenceSegmentDurationInDTS = function (idx) {
	        if (idx >= this.firstRealSegment && idx <= this.lastRealSegment) {
	            throw new RuntimeException("not a silence segment " + idx);
	        } else if (idx == this.firstRealSegment - 1) {
	            var dts = idx * ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION;
	            var nextSegDts = this.offsetPTS + this.frameAlignTv;
	            return nextSegDts - dts;
	        } else if (idx == this.getSegmentCount() - 1) {
	            var dur = this.tailSilenceDuration % ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION;
	            return dur > 0 ? dur : ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION;
	        } else {
	            return ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION;
	        }
	    };
	    prototype.getSegmentCount = function () {
	        var tailSilenceSegments = stjs.trunc(Math.ceil(this.tailSilenceDuration / ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION));
	        return this.firstRealSegment + this.realStream.getSegmentCount() + tailSilenceSegments;
	    };
	    prototype.getDurationSec = function () {
	        return this.totalSamples / this.sampleRate;
	    };
	    prototype.getDashInit = function (onDone, onError) {
	        this.realStream.getDashInit(stjs.bind(this, function (buf) {
	            this.moovMp4Box = Mp4Loader.parseMoov(buf);
	            onDone(buf);
	        }), onError);
	    };
	    prototype.loadSegment = function (idx, onDone, onError) {
	        if (idx < this.firstRealSegment) {
	            var dts = idx * ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION;
	            var duration = this.getSilenceSegmentDurationInDTS(idx);
	            var buf = MovDasher.createSilenceMoof(this.moovMp4Box, idx, dts, duration, this.log);
	            onDone(buf);
	            return ConformedM4sAudioStream.ABORT_IMPOSSIBLE;
	        } else if (idx <= this.lastRealSegment) {
	            return this.realStream.loadSegment(idx - this.firstRealSegment, stjs.bind(this, function (buf) {
	                var pts = this.realStream.getSegmentStartTv(idx - this.firstRealSegment) + this.offsetPTS;
	                var dts = pts + this.frameAlignTv;
	                var patched = MovDasher.conformMoof(buf, idx, dts);
	                onDone(patched);
	            }), onError);
	        } else {
	            var tailStartPts = this.offsetPTS + this.realStream.totalSamples;
	            var tailStartDts = tailStartPts + this.frameAlignTv;
	            var dts = tailStartDts + (idx - (this.lastRealSegment + 1)) * ConformedM4sAudioStream.SILENCE_SEGMENT_DURATION;
	            var duration = this.getSilenceSegmentDurationInDTS(idx);
	            var buf = MovDasher.createSilenceMoof(this.moovMp4Box, idx, dts, duration, this.log);
	            onDone(buf);
	            return ConformedM4sAudioStream.ABORT_IMPOSSIBLE;
	        }
	    };
	    prototype.silenceAppended = function () {
	        return true;
	    };
	    prototype.getDashDescriptor = function () {
	        throw new RuntimeException("not supported");
	    };
	    prototype.isDynamic = function () {
	        return this.realStream.isDynamic();
	    };
	    prototype.getSegmentTimestampOffset = function (idx) {
	        var timestampOffset = -this.frameAlignTv / this.sampleRate;
	        return this.realStream.getSegmentTimestampOffset(idx) + timestampOffset;
	    };
	}, { realStream: "SegmentedAudioStream", moovMp4Box: "MP4Box", log: "Log", ABORT_IMPOSSIBLE: "Callback0", channelMuted: { name: "Array", arguments: [null] }, audioInfo: "AudioInfo", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var DashStreamFrameExtractor = function (segmentedStream, timeline, log, errorRx) {
	    AbstractFrameExtractor.call(this);
	    this.segmentedStream = segmentedStream;
	    this.timeline = timeline;
	    this.log = log;
	    this.errorRx = errorRx;
	};
	DashStreamFrameExtractor = stjs.extend(DashStreamFrameExtractor, AbstractFrameExtractor, [], function (constructor, prototype) {
	    prototype.segmentedStream = null;
	    prototype.timeline = null;
	    prototype.log = null;
	    prototype.errorRx = null;
	    prototype.init = function (callback) {
	        this.frameData = new Array();
	        this.iframes = new Array();
	        this.addIFrames();
	        this.segmentedStream.getUpdateRx().subscribe(stjs.bind(this, function (d) {
	            return this.addIFrames();
	        }));
	        this.segmentedStream.getDashInit(stjs.bind(this, function (buf) {
	            this.mp4box = Mp4Loader.parseMoov(buf);
	            callback(this.getInfo());
	        }), stjs.bind(this, function (req) {
	            return this.errorRx.onNext(new PlayerError("error loading dash init segment from thumb stream", PlayerError.NONFATAL));
	        }));
	    };
	    prototype.addIFrames = function () {
	        for (var i = 0; i < this.segmentedStream.getSegmentCount(); i++) {
	            var time = this.segmentedStream.getSegmentStartTime(i);
	            var fn = this.timeline.getFrameBySec(time);
	            this.addIFrame(fn);
	        }
	    };
	    prototype.addIFrame = function (fn) {
	        var prevIdx = Utils.binarySearch1(this.iframes, fn);
	        var prev = this.iframes[prevIdx];
	        if (fn != prev) {
	            this.iframes.splice(prevIdx + 1, 0, fn);
	        }
	    };
	    prototype.getInfo = function () {
	        var trackInfo = this.mp4box.getInfo().videoTracks[0].video;
	        return new FilmstripInfo(trackInfo.width, trackInfo.height, this.timeline.getFrameCount());
	    };
	    prototype.getPrevIframe = function (fn) {
	        return this.iframes[Utils.binarySearch1(this.iframes, fn)];
	    };
	    prototype.loadFrameData = function (fn) {
	        return Rx.Observable.create(stjs.bind(this, function (observer) {
	            if (this.frameData[fn] == null && fn >= 0 && fn < this.getInfo().framesTotal) {
	                var time = this.timeline.getSecByFrame(fn);
	                var segmentIdx = this.segmentedStream.getSegmentIdxByTime(time);
	                return this.segmentedStream.loadSegment(segmentIdx, stjs.bind(this, function (buf) {
	                    this.processSegment(segmentIdx, buf);
	                    observer.onNext(fn);
	                    observer.onCompleted();
	                }), stjs.bind(this, function (err) {
	                    this.errorRx.onNext(new PlayerError("error loading thumbs segment", PlayerError.NONFATAL, segmentIdx, err));
	                    observer.onError(err);
	                }));
	            } else {
	                observer.onNext(fn);
	                observer.onCompleted();
	                return function () {};
	            }
	        }));
	    };
	    prototype.processSegment = function (segmentIdx, buf) {
	        var segmentFirstFn = this.timeline.getFrameBySec(this.segmentedStream.getSegmentStartTime(segmentIdx));
	        var segmentMp4Box = Mp4Loader.parseMoof(buf);
	        var samples = MovDasher.getTrunSamplesInfo(segmentMp4Box);
	        for (var i = 0; i < samples.length; i++) {
	            var fn = segmentFirstFn + i;
	            var sample = samples[i];
	            var nalUnits = this.getNALUnits(buf, stjs.trunc(sample.offset), sample.size);
	            this.frameData[fn] = nalUnits;
	            if (this.isIFrame(nalUnits)) {
	                this.addIFrame(fn);
	            }
	        }
	    };
	    prototype.isIFrame = function (nalUnits) {
	        for (var i = 0; i < nalUnits.length; i++) {
	            var type = nalUnits[i][0] & 31;
	            if (type == 5) return true;
	        }
	        return false;
	    };
	    prototype.getNALLength = function (buf, initialOffset, maxOffset) {
	        var nalLength = new DataView(buf, initialOffset, 4).getInt32(0);
	        if (nalLength != 1) {
	            return nalLength;
	        }
	        var offset = initialOffset + 4;
	        while (new DataView(buf, offset, 4).getInt32(0) != 1) {
	            if (offset == maxOffset - 4) {
	                return maxOffset - initialOffset - 4;
	            }
	            offset++;
	        }
	        return offset - initialOffset - 4;
	    };
	    prototype.getNALUnits = function (buf, offset, size) {
	        var nalOffset = offset;
	        var nalUnits = [];
	        while (nalOffset - offset < size) {
	            var nalLength = this.getNALLength(buf, nalOffset, offset + size);
	            nalUnits.push(new Uint8Array(buf, nalOffset + 4, nalLength));
	            nalOffset += nalLength + 4;
	        }
	        return nalUnits;
	    };
	}, { segmentedStream: "SegmentedStream", timeline: "Timeline", log: "Log", errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] }, mp4box: "MP4Box", iframes: { name: "Array", arguments: [null] }, frameData: { name: "Array", arguments: [{ name: "Array", arguments: ["Uint8Array"] }] } }, {});
	var SegmentedVideoStream = function (http, urls, desc, sampleDuration) {
	    SegmentedStream.call(this);
	    this.http = http;
	    this.urls = urls;
	    this.desc = desc;
	    this.sampleDuration = sampleDuration;
	    this.timecode = desc.timecode;
	    this.timescale = desc.timescale;
	    this.sampleDuration = sampleDuration;
	    this.timecode = desc.timecode;
	    this.mimeType = desc.mimeType;
	    this.codecs = desc.codecs;
	};
	SegmentedVideoStream = stjs.extend(SegmentedVideoStream, SegmentedStream, [], function (constructor, prototype) {
	    prototype.timecode = null;
	    prototype.timescale = 0;
	    prototype.sampleDuration = 0;
	    prototype.http = null;
	    prototype.urls = null;
	    prototype.desc = null;
	    prototype.getDashInit = function (onDone, onError) {
	        this.http.getArrayBuffer(this.urls.getInitUrl()).subscribe(onDone, onError);
	    };
	    prototype.getFrameCount = function () {
	        return stjs.trunc(stjs.trunc(this.desc.duration / this.sampleDuration));
	    };
	    prototype.getDashDescriptor = function () {
	        return this.desc;
	    };
	    prototype.loadSegment = function (segmentIdx, onDone, onError) {
	        var sub = this.http.getArrayBuffer(this.urls.getSegmentUrl(segmentIdx)).retryWhen(RetryWithDelay.create(3, 3000)).subscribe(onDone, function (req) {
	            return onError(req.status);
	        });
	        return stjs.bind(sub, "dispose");
	    };
	    prototype.updateFrom = function (movDashStream) {
	        this.urls = movDashStream.urls;
	        this.desc = movDashStream.desc;
	        this.updateRx.onNext(this);
	    };
	}, { http: "Http", urls: "DashSegmentUrls", desc: "DashDescriptor", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var Fairplay = function (video, options, log, errorRx) {
	    this.video = video;
	    this.options = options;
	    this.log = log;
	    this.errorRx = errorRx;
	    this.autoDisposables = new Rx.CompositeDisposable();
	    this.autoDisposable(Rx.Observable.combineLatest(this.fetchCertificate(), Rx.Observable.fromEvent(video, "webkitneedkey"), stjs.bind(this, function (cert, event) {
	        this.certificate = cert;
	        this.onVideoWebkitNeedKey(event);
	        return true;
	    })).subscribe());
	};
	Fairplay = stjs.extend(Fairplay, null, [], function (constructor, prototype) {
	    prototype.video = null;
	    prototype.options = null;
	    prototype.log = null;
	    prototype.errorRx = null;
	    prototype.certificate = null;
	    prototype.autoDisposables = null;
	    prototype.onVideoWebkitNeedKey = function (domEvent) {
	        this.log.debug("onVideoWebkitNeedKey()");
	        var event = domEvent;
	        var keySystem = "com.apple.fps.1_0";
	        var contentId = this.extractContentId(Utils.fromCharCodes(new Uint16Array(event.initData.buffer)));
	        var contentIdBuf = Utils.stringToArray(contentId).buffer;
	        var initData = this.concatInitDataIdAndCertificate(event.initData.buffer, contentIdBuf, this.certificate);
	        var keySession = this.createKeySession(keySystem, initData);
	        if (keySession != null) {
	            keySession.contentId = contentId;
	            this.autoDisposable(Rx.Observable.fromEvent(keySession, "webkitkeyadded").subscribe(stjs.bind(this, "onKeySessionWebkitKeyAdded")));
	            this.autoDisposable(Rx.Observable.fromEvent(keySession, "webkitkeyerror").subscribe(stjs.bind(this, "onKeySessionWebkitKeyError")));
	            this.autoDisposable(Rx.Observable.fromEvent(keySession, "webkitkeymessage").subscribe(stjs.bind(this, "onKeySessionWebkitKeyMessage")));
	        }
	    };
	    prototype.extractContentId = function (initDataUri) {
	        var part = initDataUri.split("skd://")[1];
	        if (part.indexOf(';') == -1) {
	            return part;
	        } else {
	            return part.split(";", 2)[1];
	        }
	    };
	    prototype.onKeySessionWebkitKeyAdded = function (e) {
	        this.log.debug("onKeySessionWebkitKeyAdded()");
	    };
	    prototype.onKeySessionWebkitKeyError = function (e) {
	        this.log.debug("onKeySessionWebkitKeyError()");
	        this.errorRx.onNext(new PlayerError("onKeySessionWebkitKeyError", PlayerError.FATAL, e));
	    };
	    prototype.onKeySessionWebkitKeyMessage = function (event) {
	        this.log.debug("onKeySessionWebkitKeyMessage()");
	        var message = event.message;
	        var session = event.target;
	        this.fetchLicense(session, message);
	    };
	    prototype.concatInitDataIdAndCertificate = function (initData, id, certificate) {
	        var size = initData.byteLength + 4 + id.byteLength + 4 + certificate.byteLength;
	        var offset = 0;
	        var array = new Uint8Array(size);
	        var dataView = new DataView(array.buffer);
	        array.set(new Uint8Array(initData), offset);
	        offset += initData.byteLength;
	        dataView.setUint32(offset, id.byteLength, true);
	        offset += 4;
	        array.set(new Uint8Array(id), offset);
	        offset += id.byteLength;
	        dataView.setUint32(offset, certificate.byteLength, true);
	        offset += 4;
	        array.set(new Uint8Array(certificate), offset);
	        return array;
	    };
	    prototype.createKeySession = function (keySystem, initData) {
	        this.log.debug("createKeySession()");
	        if (this.video.webkitKeys == null) {
	            if (WebKitMediaKeys.isTypeSupported(keySystem, "video/mp4")) {
	                this.video.webkitSetMediaKeys(new WebKitMediaKeys(keySystem));
	            } else {
	                this.errorRx.onNext(new PlayerError("Key System not supported " + keySystem, PlayerError.FATAL));
	                return null;
	            }
	        }
	        if (this.video.webkitKeys == null) {
	            this.errorRx.onNext(new PlayerError("Could not create WebKitMediaKeys", PlayerError.FATAL));
	            return null;
	        }
	        var keySession = this.video.webkitKeys.createSession("video/mp4", initData);
	        if (keySession == null) {
	            this.errorRx.onNext(new PlayerError("Could not create key session", PlayerError.FATAL));
	            return null;
	        }
	        return keySession;
	    };
	    prototype.fetchCertificate = function () {
	        this.log.debug("fetchCertificate()");
	        return new Http(this.log).requestBinary(stjs.bind(this, function () {
	            return this.options.certUrl;
	        }), "", "GET", {}, true).doOnNext(stjs.bind(this, function (buf) {
	            return this.log.debug("cert len=" + buf.byteLength);
	        })).doOnError(stjs.bind(this, function (err) {
	            return this.errorRx.onNext(new PlayerError("error fetching certificate", PlayerError.FATAL));
	        }));
	    };
	    prototype.fetchLicense = function (session, message) {
	        this.log.debug("fetchLicense()");
	        var headers = { "Content-Type": "application/octet-stream" };
	        new Http(this.log).requestBinary(stjs.bind(this, function () {
	            return this.options.laUrl;
	        }), message, "POST", headers, true).subscribe(stjs.bind(this, function (response) {
	            this.log.debug("license fetched");
	            session.update(new Uint8Array(response));
	        }), stjs.bind(this, function (err) {
	            this.errorRx.onNext(new PlayerError("error fetching license", PlayerError.FATAL));
	        }));
	    };
	    prototype.autoDisposable = function (disposable) {
	        this.autoDisposables.add(disposable);
	    };
	    prototype.close = function () {
	        this.autoDisposables.dispose();
	        this.autoDisposables = null;
	    };
	}, { video: "Video", options: "PlayerOptions.DRMFairplayOptions", log: "Log", errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] }, certificate: "ArrayBuffer", autoDisposables: "Rx.CompositeDisposable" }, {});
	var DRM = function (drmOptions, drmInfo, log, errorRx) {
	    this.drmOptions = drmOptions;
	    this.drmInfo = drmInfo;
	    this.log = log;
	    this.errorRx = errorRx;
	    this.keySystemRx = new Rx.ReplaySubject(1);
	    this.http = new Http(log);
	    this.autoDisposables = new Rx.CompositeDisposable();
	    this.autoDisposable(Rx.Observable.from(drmInfo).map(function (i) {
	        return i.keySystem;
	    }).distinct().flatMap(stjs.bind(this, function (ks) {
	        var config = this.getConfigForKeySystem(ks);
	        return Rx.Observable.fromPromise(window.navigator.requestMediaKeySystemAccess(ks, [config])).flatMapObserver(function (k, i) {
	            return Rx.Observable.just(k);
	        }, function (err) {
	            if (!err.message.contains("Unsupported keySystem") && !err.message.contains("NotSupportedError")) {
	                errorRx.onNext(new PlayerError(err.message, PlayerError.FATAL, err));
	            }
	            return Rx.Observable.empty();
	        }, Rx.Observable.empty);
	    })).take(1).doOnNext(stjs.bind(this, function (keySystemAccess) {
	        log.info("using keysystem", keySystemAccess.keySystem);
	        this.keySystemRx.onNext(keySystemAccess);
	    })).subscribe());
	};
	DRM = stjs.extend(DRM, null, [], function (constructor, prototype) {
	    prototype.log = null;
	    prototype.errorRx = null;
	    prototype.drmOptions = null;
	    prototype.drmInfo = null;
	    prototype.autoDisposables = null;
	    prototype.keySystemRx = null;
	    prototype.http = null;
	    constructor.WIDEVINE = "com.widevine.alpha";
	    constructor.PLAYREADY = "com.microsoft.playready";
	    prototype.setHttp = function (http) {
	        this.http = http;
	    };
	    prototype.initVideo = function (video, streamIds) {
	        var mediaKeysReady = this.keySystemRx.flatMap(stjs.bind(this, function (keySystemAccess) {
	            return Rx.Observable.fromPromise(keySystemAccess.createMediaKeys().catch(stjs.bind(this, function (err) {
	                return this.errorRx.onNext(new PlayerError("Unable to create MediaKeys", PlayerError.FATAL, err));
	            }))).flatMap(stjs.bind(this, function (mediaKeys) {
	                return Rx.Observable.fromPromise(video.setMediaKeys(mediaKeys).catch(stjs.bind(this, function (err) {
	                    return this.errorRx.onNext(new PlayerError("Unable to set MediaKeys", PlayerError.FATAL, err));
	                }))).map(function (x) {
	                    return keySystemAccess.keySystem;
	                });
	            }));
	        }));
	        var fromMedia = new Rx.ReplaySubject();
	        this.autoDisposable(Rx.Observable.fromEvent(video, "encrypted").map(function (domEvent) {
	            var event = domEvent;
	            return new DRM.InitData(event.initDataType, event.initData);
	        }).filter(function (idata) {
	            return idata.initData != null;
	        }).doOnNext(stjs.bind(this, function (d) {
	            return this.log.debug("initData from encrypted event", d);
	        })).doOnNext(stjs.bind(fromMedia, "onNext")).subscribe());
	        this.autoDisposable(mediaKeysReady.flatMap(stjs.bind(this, function (keySystem) {
	            var fromMPD = Rx.Observable.from(streamIds).map(stjs.bind(this, function (streamId) {
	                var info = this.drmInfo.filter(function (inf, i, a) {
	                    return inf.streamId == streamId && inf.keySystem == keySystem;
	                })[0];
	                if (info == null) {
	                    this.errorRx.onNext(new PlayerError("unknown stream/keysystem combination " + streamId + " " + keySystem, PlayerError.FATAL));
	                    throw new RuntimeException();
	                }
	                return info;
	            })).filter(function (info) {
	                return info.initData != null;
	            }).map(function (info) {
	                var initDataBuf = Utils.base64ToArrayBuffer(info.initData);
	                return new DRM.InitData("cenc", initDataBuf);
	            }).doOnNext(stjs.bind(this, function (d) {
	                return this.log.debug("initData from mpd", d);
	            }));
	            return Rx.Observable.merge(fromMPD, fromMedia).distinct(function (d) {
	                return d;
	            }, stjs.bind("equals")).flatMap(stjs.bind(this, function (initData) {
	                return this.createSession(video, keySystem, initData);
	            }));
	        })).subscribe());
	    };
	    prototype.createSession = function (video, keySystem, initData) {
	        var mediaKeys = video.mediaKeys;
	        var session = mediaKeys.createSession();
	        var laUrl;
	        switch (keySystem) {
	            case DRM.WIDEVINE:
	                laUrl = this.drmOptions.widevine.laUrl;
	                break;
	            case DRM.PLAYREADY:
	                laUrl = this.drmOptions.playready.laUrl;
	                break;
	            default:
	                return Rx.Observable.throw("unsupported key system " + keySystem);
	        }
	        this.autoDisposable(Rx.Observable.fromEvent(session, "message").subscribe(stjs.bind(this, function (domEvent) {
	            var event = domEvent;
	            var headers = {};
	            var challenge;
	            if (keySystem == DRM.PLAYREADY) {
	                var stringMessage = Utils.fromCharCodes(new Uint16Array(event.message));
	                var keyMessageXml = new DOMParser().parseFromString(stringMessage, "application/xml");
	                var b64challenge = keyMessageXml.getElementsByTagName("Challenge")[0].childNodes[0].nodeValue;
	                challenge = window.atob(b64challenge);
	                var headerNames = keyMessageXml.getElementsByTagName("name");
	                var headerValues = keyMessageXml.getElementsByTagName("value");
	                for (var i = 0; i < headerNames.length; i++) {
	                    headers[headerNames[i].childNodes[0].nodeValue] = headerValues[i].childNodes[0].nodeValue;
	                }
	            } else {
	                challenge = event.message;
	            }
	            if (laUrl.indexOf("axtest.net") != -1) {
	                headers["X-AxDRM-Message"] = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ2ZXJzaW9uIjoxLCJjb21fa2V5X2lkIjoiNjllNTQwODgtZTllMC00NTMwLThjMWEtMWViNmRjZDBkMTRlIiwibWVzc2FnZSI6eyJ0eXBlIjoiZW50aXRsZW1lbnRfbWVzc2FnZSIsImtleXMiOlt7ImlkIjoiNmU1YTFkMjYtMjc1Ny00N2Q3LTgwNDYtZWFhNWQxZDM0YjVhIn1dfX0.yF7PflOPv9qHnu3ZWJNZ12jgkqTabmwXbDWk_47tLNE";
	            }
	            this.http.requestBinary(function () {
	                return laUrl;
	            }, challenge, "POST", headers, true).subscribe(stjs.bind(this, function (license) {
	                session.update(license).catch(stjs.bind(this, function (err) {
	                    return this.errorRx.onNext(new PlayerError("keySession.update() failed", PlayerError.FATAL, err));
	                }));
	            }), stjs.bind(this, function (err) {
	                this.errorRx.onNext(new PlayerError("failed to acquire license", PlayerError.FATAL, err));
	            }));
	        })));
	        return Rx.Observable.fromPromise(session.generateRequest(initData.initDataType, initData.initData).catch(stjs.bind(this, function (err) {
	            return this.errorRx.onNext(new PlayerError("cannot generate license request", PlayerError.FATAL, err));
	        })));
	    };
	    prototype.getConfigForKeySystem = function (keySystem) {
	        return this.drmInfo.filter(function (inf, i, a) {
	            return inf.keySystem == keySystem;
	        }).reduce(function (config, info, i, a) {
	            var isVideo = info.contentType.startsWith("video");
	            var caps = isVideo ? config.videoCapabilities : config.audioCapabilities;
	            if (caps == null) {
	                caps = [];
	            }
	            if (!caps.some(function (c, ii, aa) {
	                return c.contentType == info.contentType;
	            })) {
	                var capability = {};
	                capability.contentType = info.contentType;
	                capability.robustness = "";
	                caps.push(capability);
	                if (isVideo) {
	                    config.videoCapabilities = caps;
	                } else {
	                    config.audioCapabilities = caps;
	                }
	            }
	            return config;
	        }, {});
	    };
	    prototype.autoDisposable = function (disposable) {
	        this.autoDisposables.add(disposable);
	    };
	    prototype.close = function () {
	        this.autoDisposables.dispose();
	        this.autoDisposables = null;
	    };
	    constructor.InitData = function (initDataType, initData) {
	        this.initDataType = initDataType;
	        this.initData = initData;
	    };
	    constructor.InitData = stjs.extend(constructor.InitData, null, [], function (constructor, prototype) {
	        prototype.initDataType = null;
	        prototype.initData = null;
	        prototype.equals = function (obj) {
	            if (!stjs.isInstanceOf(obj.constructor, DRM.InitData)) return false;
	            var other = obj;
	            return this.initDataType == other.initDataType && Utils.buffersEqual(this.initData, other.initData);
	        };
	    }, { initData: "ArrayBuffer" }, {});
	}, { log: "Log", errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] }, drmOptions: "PlayerOptions.DRMOptions", drmInfo: { name: "Array", arguments: ["DRMInfo"] }, autoDisposables: "Rx.CompositeDisposable", keySystemRx: { name: "Rx.Subject", arguments: ["MediaKeySystemAccess"] }, http: "Http" }, {});
	var Mp3MixSegmentedAudioStream = function (http, serverUrl, proxyId, audioInfo) {
	    SegmentedAudioStream.call(this);
	    this.http = http;
	    this.serverUrl = serverUrl;
	    this.proxyId = proxyId;
	    this.audioInfo = audioInfo;
	    this.sampleRate = audioInfo.sampleRate;
	    this.totalSamples = audioInfo.totalSamples;
	    this.channelMuted = new Array(audioInfo.channelCount);
	    this.mimeType = "audio/mpeg";
	    this.BITRATE = 128;
	};
	Mp3MixSegmentedAudioStream = stjs.extend(Mp3MixSegmentedAudioStream, SegmentedAudioStream, [], function (constructor, prototype) {
	    prototype.BITRATE = 0;
	    prototype.http = null;
	    prototype.getDurationSec = function () {
	        return this.totalSamples / this.sampleRate;
	    };
	    prototype.getSegmentCount = function () {
	        var frameCount = Math.ceil(stjs.trunc(this.totalSamples / 1152));
	        return stjs.trunc(Math.ceil(frameCount / SegmentedAudioStream.FRAMES_PER_SEGMENT));
	    };
	    prototype.getSegmentDuration = function (idx) {
	        return SegmentedAudioStream.FRAMES_PER_SEGMENT * 1152 / this.sampleRate;
	    };
	    prototype.getSegmentIdxByTime = function (time) {
	        var sample = parseInt(time * this.sampleRate);
	        var frame = parseInt(stjs.trunc(sample / 1152));
	        return parseInt(stjs.trunc(frame / SegmentedAudioStream.FRAMES_PER_SEGMENT));
	    };
	    prototype.getSegmentStartTime = function (idx) {
	        var samplesPerSegment = SegmentedAudioStream.FRAMES_PER_SEGMENT * 1152;
	        return idx * samplesPerSegment / this.sampleRate;
	    };
	    prototype.loadSegment = function (segmentIdx, onDone, onError) {
	        var self = this;
	        var channels = "";
	        var allMuted = true;
	        for (var i = 0; i < this.channelMuted.length; i++) {
	            allMuted = allMuted && this.channelMuted[i];
	            channels += this.channelMuted[i] ? "0" : "1";
	        }
	        var totalFrames = Math.ceil(stjs.trunc(this.totalSamples / 1152));
	        var fromFrame = segmentIdx * SegmentedAudioStream.FRAMES_PER_SEGMENT;
	        var toFrame = (segmentIdx + 1) * SegmentedAudioStream.FRAMES_PER_SEGMENT;
	        if (!allMuted && fromFrame < totalFrames) {
	            var dataSrc = new HttpDataSrc(this.http, this.serverUrl + "/" + this.proxyId + "/" + channels + ".mp3");
	            var frameSize = Math.round(stjs.trunc(this.BITRATE * 1000 * 1152 / (this.sampleRate * 8)));
	            var from = fromFrame * frameSize;
	            var to = (toFrame + 1) * frameSize;
	            var onLoaded = function (buf) {
	                var mp3Frames = stjs.trunc(stjs.trunc(buf.byteLength / frameSize));
	                if (mp3Frames >= SegmentedAudioStream.FRAMES_PER_SEGMENT) {
	                    onDone(buf);
	                } else {
	                    var mp3 = new Int8Array(buf);
	                    var framesToAdd = SegmentedAudioStream.FRAMES_PER_SEGMENT - mp3Frames + 1;
	                    var mp3PlusSilence = new Int8Array(mp3.length + framesToAdd * Mp3MixSegmentedAudioStream.SILENCE_FRAME_48_128kb.length);
	                    mp3PlusSilence.set(mp3, 0);
	                    for (var i = 0, off = mp3.length; i < framesToAdd; i++) {
	                        mp3PlusSilence.set(Mp3MixSegmentedAudioStream.SILENCE_FRAME_48_128kb, off + i * Mp3MixSegmentedAudioStream.SILENCE_FRAME_48_128kb.length);
	                    }
	                    onDone(mp3PlusSilence.buffer);
	                }
	            };
	            return dataSrc.fetch(from, to, onLoaded, onError);
	        } else {
	            var n = toFrame - fromFrame + 2;
	            var encodedSilence = new Int8Array(n * Mp3MixSegmentedAudioStream.SILENCE_FRAME_48_128kb.length);
	            for (var j = 0; j < n; j++) {
	                encodedSilence.set(Mp3MixSegmentedAudioStream.SILENCE_FRAME_48_128kb, j * Mp3MixSegmentedAudioStream.SILENCE_FRAME_48_128kb.length);
	            }
	            var timeoutId = setTimeout(function () {
	                return onDone(encodedSilence.buffer);
	            }, 0);
	            var abort = function () {
	                return clearTimeout(timeoutId);
	            };
	            return abort;
	        }
	    };
	    constructor.SILENCE_FRAME_48_128kb = new Int8Array([-1, -5, -108, 4, 0, 15, -16, 0, 0, 105, 0, 0, 0, 8, 0, 0, 13, 32, 0, 0, 1, 0, 0, 1, -92, 0, 0, 0, 32, 0, 0, 52, -128, 0, 0, 4, 76, 65, 77, 69, 51, 46, 57, 57, 46, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
	    prototype.getDashInit = function (onDone, onError) {
	        onDone(null);
	    };
	    prototype.getDashDescriptor = function () {
	        throw new RuntimeException("TODO");
	    };
	    prototype.isDynamic = function () {
	        return false;
	    };
	    prototype.silenceAppended = function () {
	        return true;
	    };
	}, { http: "Http", SILENCE_FRAME_48_128kb: "Int8Array", channelMuted: { name: "Array", arguments: [null] }, audioInfo: "AudioInfo", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var PlayerView = function (container, log) {
	    CloseableView.call(this);
	    this.parentEl = container;
	    this.log = log;
	    this.autoDisposables = new Rx.CompositeDisposable();
	    this.initPlayerContainer();
	};
	PlayerView = stjs.extend(PlayerView, CloseableView, [], function (constructor, prototype) {
	    prototype.player = null;
	    prototype.parentEl = null;
	    prototype.log = null;
	    prototype.container = null;
	    prototype.video = null;
	    prototype.trickVideo = null;
	    prototype.hm = null;
	    prototype.playerContainer = null;
	    prototype.frozenCanvas = null;
	    prototype.fullscreenRx = null;
	    prototype.spinner = null;
	    prototype.autoDisposables = null;
	    prototype.stepInterval = 0;
	    constructor.DO_NOTHING = function (e) {};
	    constructor.PLAYER_TEMPLATE = "<style type=\"text/css\">\n   .vg_player { position: relative; }\n   .vg_player video { display: block; height: 100%; width: 100%; border: 0; }\n   .vg_player video + video { position: absolute; top: 0; left: 0; }\n   .vg_player_opacity_0 { opacity: 0; }\n</style>\n<div class=\"vg_embed-container\">\n    <div class=\"vg_player vg_background\">\n        <div class=\"vg_loading-spinner vg_invisible\"></div>\n        <video class=\"vg_player_opacity_0\" type=\"hires+audio\"></video>\n        <video type=\"lowres\"></video>\n    </div>\n    <div class=\"vg_allControls\"></div>\n</div>\n<div class=\"vg_proPanel vg_background\"></div>";
	    prototype.initPlayerContainer = function () {
	        this.container = window.document.createElement("div");
	        this.container.className = "vg_playerContainer";
	        this.container.classList.add("vg_noselect");
	        this.container.innerHTML = PlayerView.PLAYER_TEMPLATE;
	        this.parentEl.appendChild(this.container);
	        this.playerContainer = this.container.querySelector(".vg_player");
	        this.trickVideo = this.playerContainer.querySelector("video[type=\"lowres\"]");
	        this.video = this.playerContainer.querySelector("video[type=\"hires+audio\"]");
	        this.spinner = this.playerContainer.querySelector(".vg_loading-spinner");
	        this.fullscreenRx = this.createFullScreenRx();
	        this.showSpinner();
	    };
	    prototype.init = function (player) {
	        this.player = player;
	        this.autoDisposable(player.getVideoElement().getBusyRx().subscribe(stjs.bind(this, function (busy) {
	            if (busy) {
	                this.showSpinner();
	            } else {
	                this.hideSpinner();
	            }
	        })));
	        this.autoDisposable(this.fullscreenRx.subscribe(stjs.bind(this, function (isFullScreen) {
	            if (isFullScreen) {
	                this.player.container.classList.add("vg_fullscreenMode");
	            } else {
	                this.player.container.classList.remove("vg_fullscreenMode");
	            }
	        })));
	        this.initHotkeys();
	        if (player.options.hotkeys) {
	            player.enableHotKeys();
	        } else {
	            player.disableHotKeys();
	        }
	    };
	    prototype.showSpinner = function () {
	        this.spinner.classList.remove("vg_invisible");
	    };
	    prototype.hideSpinner = function () {
	        this.spinner.classList.add("vg_invisible");
	    };
	    prototype.freezeVideo = function () {
	        if (null == this.frozenCanvas) {
	            var c = window.document.createElement("div");
	            c.classList.add("vg_frozen_container");
	            this.frozenCanvas = window.document.createElement("canvas");
	            c.appendChild(this.frozenCanvas);
	            this.playerContainer.appendChild(c);
	        }
	        this.frozenCanvas.width = this.player.getVideoElement().getVideoWidth();
	        this.frozenCanvas.height = this.player.getVideoElement().getVideoHeight();
	        var fw = this.playerContainer.clientWidth / this.frozenCanvas.width;
	        var fh = this.playerContainer.clientHeight / this.frozenCanvas.height;
	        var f = Math.min(fw, fh);
	        var context = this.frozenCanvas.getContext("2d", null);
	        context.drawImage(this.video, 0, 0);
	        return this.frozenCanvas;
	    };
	    prototype.unfreezeVideo = function () {
	        if (this.frozenCanvas != null) {
	            var parentNode = this.frozenCanvas.parentNode;
	            parentNode.style.display = "none";
	        }
	    };
	    prototype.getFrozenCanvas = function () {
	        return this.frozenCanvas;
	    };
	    prototype.initHotkeys = function () {
	        this.hm = new HotkeyManager(this.log);
	        this.hm.enableHotKeysForWindow(window);
	        var p = this.player;
	        this.hm.addShortcut("space", stjs.bind(this, function (e) {
	            this.player.togglePlay();
	            e.preventDefault();
	        }), KeyOptions.gd("Player", "Play/Pause", true));
	        this.hm.addShortcut("shift-right", function (e) {
	            p.playFaster();
	        }, KeyOptions.gd("Player", "Play faster", false));
	        this.hm.addShortcut("shift-left", function (e) {
	            p.playFasterBackwards();
	        }, KeyOptions.gd("Player", "Play faster backwards", false));
	        this.hm.addShortcut("left", stjs.bind(this, function (e) {
	            this.player.previousFrame(this.stepInterval);
	        }), KeyOptions.gd("Player", "Previous frame", false));
	        this.hm.addShortcut("right", stjs.bind(this, function (e) {
	            this.player.nextFrame(this.stepInterval);
	        }), KeyOptions.gd("Player", "Next frame", false));
	        this.hm.addShortcut("esc", stjs.bind(this, function (e) {
	            if (Utils.isFullScreen()) {
	                this.exitFullscreen();
	            }
	        }), KeyOptions.gd("Player", "Exit fullscreen", false));
	        this.hm.addShortcut("k", stjs.bind(this, function (e) {
	            this.player.pause();
	        }), KeyOptions.gd("Player", "Pause", false));
	        this.hm.addShortcut("j", stjs.bind(this, function (e) {
	            this.player.playFasterBackwards();
	        }), KeyOptions.gd("Player", "Play backward, play backward faster", false));
	        this.hm.addShortcut("l", stjs.bind(this, function (e) {
	            this.player.playFaster();
	        }), KeyOptions.gd("Player", "Play forward, play forward faster", false));
	        this.hm.addShortcut("k-j", stjs.bind(this, function (e) {
	            this.player.previousFrame(1);
	        }), KeyOptions.gd("Player", "Previous frame", false));
	        this.hm.addShortcut("k-l", stjs.bind(this, function (e) {
	            this.player.nextFrame(1);
	        }), KeyOptions.gd("Player", "Next frame", false));
	        var videoEl = this.container.querySelector(".vg_player");
	        var clicks = new MutableInt(0);
	        videoEl.addEventListener("click", stjs.bind(this, function (e) {
	            clicks.value++;
	            if (clicks.value == 2) {
	                clicks.value = 0;
	                this.toggleFullscreen();
	            } else {
	                setTimeout(stjs.bind(this, function () {
	                    if (clicks.value == 1) {
	                        if (!this.container.classList.contains("noSource")) {
	                            this.player.togglePlay();
	                        }
	                        clicks.value = 0;
	                    }
	                }), 300);
	            }
	        }));
	    };
	    prototype.onFullScreen = function (e) {
	        if (Utils.isFullScreen()) {
	            if (Utils.fullScreenElement(this.parentEl.ownerDocument) == this.parentEl) {
	                this.fullscreenRx.onNext(true);
	            }
	        } else {
	            this.fullscreenRx.onNext(false);
	        }
	    };
	    prototype.createFullScreenRx = function () {
	        this.autoDisposable(Rx.Observable.fromEvent(window.document, "webkitfullscreenchange").subscribe(stjs.bind(this, "onFullScreen")));
	        this.autoDisposable(Rx.Observable.fromEvent(window.document, "mozfullscreenchange").subscribe(stjs.bind(this, "onFullScreen")));
	        this.autoDisposable(Rx.Observable.fromEvent(window.document, "fullscreenchange").subscribe(stjs.bind(this, "onFullScreen")));
	        this.autoDisposable(Rx.Observable.fromEvent(window.document, "MSFullscreenChange").subscribe(stjs.bind(this, "onFullScreen")));
	        return new Rx.Subject();
	    };
	    prototype.closeFullScreenRx = function () {
	        this.fullscreenRx.onCompleted();
	    };
	    prototype.toggleFullscreen = function () {
	        if (Utils.isFullScreen()) {
	            this.exitFullscreen();
	        } else {
	            this.enterFullscreen(this.parentEl);
	        }
	    };
	    prototype.enterFullscreen = function (elt) {
	        this.log.debug("enterFullscreen");
	        var el = elt || this.container;
	        if (el.requestFullScreen != null) {
	            el.requestFullScreen();
	        } else if (el.mozRequestFullScreen != null) {
	            el.mozRequestFullScreen();
	        } else if (el.webkitRequestFullScreen != null) {
	            el.webkitRequestFullScreen(1);
	            if (!window.document.isFullscreen) {
	                el.webkitRequestFullScreen(0);
	            }
	        } else if (el.webkitEnterFullScreen != null) {
	            el.webkitEnterFullScreen();
	        } else if (el != this.video) {
	            this.enterFullscreen(this.video);
	        }
	    };
	    prototype.exitFullscreen = function () {
	        this.log.debug("exitFullscreen");
	        if (window.document.cancelFullscreen != null) {
	            window.document.cancelFullscreen();
	        } else if (window.document.mozCancelFullScreen != null) {
	            window.document.mozCancelFullScreen();
	        } else if (window.document.webkitCancelFullScreen != null) {
	            window.document.webkitCancelFullScreen();
	        }
	    };
	    prototype.seekFrameAndCheckRange = function (frame) {};
	    prototype.getCaptionsContainer = function () {};
	    prototype.hideTrickVideo = function () {
	        this.trickVideo.classList.add(VideoElement.VG_PLAYER_OPACITY_0);
	        this.video.classList.remove(VideoElement.VG_PLAYER_OPACITY_0);
	    };
	    prototype.renderFatalError = function (err) {};
	    prototype.renderRange = function (fromFrame, toFrame) {};
	    prototype.renderWhole = function () {};
	    prototype.showAsAudioPlayer = function () {};
	    prototype.close = function () {
	        CloseableView.prototype.close.call(this);
	        var node = this.parentEl.querySelector(".vg_playerContainer");
	        if (node != null) this.parentEl.removeChild(node);
	        if (this.hm != null) this.hm.destruct();
	        this.closeFullScreenRx();
	        this.autoDisposables.dispose();
	        this.autoDisposables = new Rx.CompositeDisposable();
	    };
	    prototype.autoDisposable = function (disposable) {
	        this.autoDisposables.add(disposable);
	    };
	}, { player: "PlayerImpl", parentEl: "Element", log: "Log", container: "Element", video: "Video", trickVideo: "Video", hm: "HotkeyManager", playerContainer: "Element", frozenCanvas: "Canvas", fullscreenRx: { name: "Rx.Subject", arguments: [null] }, spinner: "Element", autoDisposables: "Rx.CompositeDisposable", DO_NOTHING: { name: "Callback1", arguments: ["DOMEvent"] }, children: { name: "Array", arguments: ["CloseableView"] } }, {});
	var DashTimeline = function (timeScale, avgFrameDuration, duration, segmentStartFrames, segmentStartTv, log) {
	    this.duration = duration;
	    this.seekableDurationSec = duration / timeScale;
	    this.timeScale = timeScale;
	    this.dropFrame = false;
	    var tapefps = avgFrameDuration != 0 ? stjs.trunc(Math.round(timeScale / avgFrameDuration)) : DashTimeline.DEFAULT_TAPE_FPS;
	    this.tapeTimecode = new TapeTimecode(this.dropFrame, 0, tapefps);
	    if (segmentStartFrames != null) {
	        this.packetCache = new OptimizedPacketCache(segmentStartFrames, segmentStartTv, log);
	    } else {
	        this.packetCache = new DefaultPacketCache(avgFrameDuration);
	    }
	    this.updateRx = new Rx.Subject();
	};
	DashTimeline = stjs.extend(DashTimeline, null, [Timeline], function (constructor, prototype) {
	    constructor.DEFAULT_TAPE_FPS = 24;
	    prototype.duration = 0;
	    prototype.timeScale = 0;
	    prototype.dropFrame = false;
	    prototype.tapeTimecode = null;
	    prototype.seekableDurationSec = 0.0;
	    prototype.packetCache = null;
	    prototype.updateRx = null;
	    prototype.startUTCTimestamp = null;
	    prototype.getTimeScale = function () {
	        return this.timeScale;
	    };
	    prototype.getFrameCount = function () {
	        return this.packetCache.getFrameCount(this.duration);
	    };
	    prototype.getTvBySec = function (sec) {
	        return stjs.trunc(this.timeScale * sec);
	    };
	    prototype.getLastFrame = function () {
	        return this.getFrameCount() - 1;
	    };
	    prototype.getLastTv = function () {
	        return this.getTvByFrame(this.getLastFrame());
	    };
	    prototype.getTvByTimecode = function (timecode) {
	        var fn = this.getTapeTimecode().getFrameByTimecode(timecode);
	        return this.getTvByFrame(fn);
	    };
	    prototype.getTvByFrame = function (fn) {
	        return this.packetCache.getTvByFrame(fn);
	    };
	    prototype.getFrameByTv = function (tv) {
	        return this.packetCache.getFrameByTv(tv);
	    };
	    prototype.getFrameBySec = function (sec) {
	        return this.getFrameByTv(this.floorTv(stjs.trunc(sec * this.timeScale + 4.2E-4)));
	    };
	    prototype.getFrameByTimecode = function (tc) {
	        return this.getTapeTimecode().getFrameByTimecode(tc);
	    };
	    prototype.getFrameByMillis = function (time) {
	        return this.getFrameBySec(time / 1000);
	    };
	    prototype.floorTv = function (tv) {
	        return this.packetCache.floorTv(tv);
	    };
	    prototype.boundsFn = function (fn) {
	        return Math.min(Math.max(fn, 0), this.getFrameCount() - 1);
	    };
	    prototype.getSecByFrame = function (fn) {
	        var tv = this.getTvByFrame(fn);
	        return tv / this.timeScale;
	    };
	    prototype.getSecByTv = function (tv) {
	        return tv / this.timeScale;
	    };
	    prototype.getMillisByTv = function (tv) {
	        return stjs.trunc(tv * 1000 / this.timeScale);
	    };
	    prototype.getTapeByTv = function (tv) {
	        return this.getTapeTimecode().getTimecodeAtFrame(this.getFrameByTv(tv));
	    };
	    prototype.getTapeByFrame = function (fn) {
	        return this.getTapeTimecode().getTimecodeAtFrame(fn);
	    };
	    prototype.getTapeBySec = function (time) {
	        return this.getTapeTimecode().getTimecodeAtFrame(this.getFrameBySec(time));
	    };
	    prototype.getTapeTimecode = function () {
	        return this.tapeTimecode;
	    };
	    prototype.getDurationSec = function () {
	        return this.duration / this.timeScale;
	    };
	    prototype.getSeekableDurationSec = function () {
	        return this.seekableDurationSec;
	    };
	    prototype.update = function (duration, segmentStartFrames, segmentStartTv) {
	        this.duration = duration;
	        this.packetCache.updateStartSegments(segmentStartFrames, segmentStartTv);
	        this.updateRx.onNext(this);
	    };
	    prototype.setSeekableDurationSec = function (durationSec) {
	        this.seekableDurationSec = durationSec;
	        this.updateRx.onNext(this);
	    };
	    prototype.updateTimePackets = function (segmentIdx, newPkts) {
	        this.packetCache.updateTimePackets(segmentIdx, newPkts);
	        var tapefps = stjs.trunc(Math.round(this.timeScale / this.packetCache.getAverageFrameDuration()));
	        this.tapeTimecode.setTapeFps(tapefps);
	        this.updateRx.onNext(this);
	    };
	    prototype.getUpdateRx = function () {
	        return this.updateRx;
	    };
	    prototype.getStartUTCTimestamp = function () {
	        return this.startUTCTimestamp;
	    };
	    prototype.setStartUTCTimestamp = function (timestamp) {
	        this.startUTCTimestamp = timestamp;
	    };
	    prototype.getUTCTimestampBySec = function (sec) {
	        var millis = Date.parse(this.startUTCTimestamp) + sec * 1000;
	        return new Date(millis).toISOString();
	    };
	}, { tapeTimecode: "TapeTimecode", packetCache: "PacketCache", updateRx: { name: "Rx.Subject", arguments: ["Timeline"] }, UNKNOWN: "Timeline" }, {});
	var SRTParser = function () {};
	SRTParser = stjs.extend(SRTParser, null, [], function (constructor, prototype) {
	    constructor.parse = function (string, timeline) {
	        var subtitles = new Subtitles();
	        subtitles.rows = [];
	        var lines = string.replaceAll("\r\n", "\n").split("\n");
	        var groups = RxUtil.split(Rx.Observable.from(lines), function (list, item) {
	            return "".equals(item);
	        });
	        groups = groups.map(function (group) {
	            if ("".equals(group[0])) {
	                return group.slice(1);
	            }
	            return group;
	        });
	        groups = groups.filter(function (group) {
	            var b = group.length >= 3;
	            var b2 = !isNaN(parseInt(group[0]));
	            return b && b2;
	        });
	        var subs = groups.map(function (group) {
	            var number = group.shift();
	            var time = group.shift();
	            var inOutTime = time.split(" ");
	            var inTime = inOutTime[0];
	            var outTime = inOutTime[2];
	            var startMsec = SubsUtils.parseTimestamp(inTime);
	            var endMsec = SubsUtils.parseTimestamp(outTime);
	            var sub = new SubtitleEntry();
	            sub.startMsec = startMsec;
	            sub.endMsec = endMsec;
	            sub.startTv = timeline.getTvBySec(startMsec / 1000.0);
	            sub.endTv = timeline.getTvBySec(endMsec / 1000.0);
	            sub.timeCodeIn = timeline.getTapeBySec(startMsec / 1000.0);
	            sub.timeCodeOut = timeline.getTapeBySec(endMsec / 1000.0);
	            var div = window.document.createElement("div");
	            div.innerHTML = group.join();
	            sub.notes = div.innerText;
	            return sub;
	        });
	        var subtitle = subs.reduce(function (all, sub) {
	            all.rows.push(sub);
	            return all;
	        }, subtitles);
	        return subtitle;
	    };
	}, {}, {});
	var AbstractVideoElement = function (video, timeline, log, errorRx) {
	    this.video = video;
	    this.timeline = timeline;
	    this.log = log;
	    this.errorRx = errorRx;
	    this.animationRequestId = 0;
	    this.rangeFromFrame = -1;
	    this.rangeToFrame = -1;
	    this.loop = false;
	    this.quickSeek = false;
	    this.metadataLoaded = false;
	    this.initialTime = 0;
	    this.playRateBeforeQuickSeek = 0;
	    this.playRateCurrent = 0;
	    this.resetPlayRateOnSeek = true;
	    this.busyRx = new Rx.Subject();
	    this.playBackwardsRx = new Rx.Subject();
	    this.autoDisposables = new Rx.CompositeDisposable();
	    var playRx = Rx.Observable.fromEvent(this.video, VideoElement.PLAYING);
	    var pauseRx = Rx.Observable.fromEvent(this.video, VideoElement.PAUSE);
	    var forwardPlayRx = Rx.Observable.merge(playRx, pauseRx).map(stjs.bind(this, function (x) {
	        return this.isPlaying();
	    }));
	    this.playRx = Rx.Observable.merge(this.playBackwardsRx, forwardPlayRx);
	    this.volumeChangeRx = Rx.Observable.fromEvent(this.video, VideoElement.VOLUMECHANGE, stjs.bind(this, function (e) {
	        return this.getVolume();
	    }));
	    this.timeUpdateSubject = new Rx.Subject();
	    this.progressSubject = new Rx.Subject();
	    this.autoDisposable(Rx.Observable.fromEvent(this.video, VideoElement.TIMEUPDATE).map(function (e) {
	        return video.currentTime;
	    }).subscribe(stjs.bind(this, function (e) {
	        this.checkUnbufferedPlayback();
	        this.timeUpdateSubject.onNext(e);
	    })));
	    this.autoDisposable(Rx.Observable.fromEvent(this.video, VideoElement.PROGRESS).subscribe(stjs.bind(this, function (e) {
	        this.progressSubject.onNext(this.getBuffered());
	    })));
	    this.autoDisposable(Rx.Observable.interval(1000).subscribe(stjs.bind(this, function (x) {
	        return this.checkUnbufferedPlayback();
	    })));
	    if (timeline == Timeline.UNKNOWN) {
	        var genericTime = GenericTimeline.newGenericTime(24000, 1001);
	        this.timeline = new BoundedTimeline(genericTime);
	        Rx.Observable.fromEvent(this.video, VideoElement.LOADEDMETADATA).take(1).subscribe(stjs.bind(this, function (e) {
	            log.debug(VideoElement.LOADEDMETADATA);
	            video.currentTime = this.initialTime;
	            genericTime.setDurationSec(video.duration);
	            this.timeUpdateSubject.onNext(video.currentTime);
	        }));
	    }
	    this.timeline.getUpdateRx().subscribe(stjs.bind(this, function (t) {
	        this.timeUpdateSubject.onNext(video.currentTime);
	        if (this.seekTarget != null && this.timeToSeekByFrame(this.seekTarget.frame) != this.seekTarget.time) {
	            this.seekFrame(this.seekTarget.frame);
	        }
	    }));
	    this.autoDisposable(Rx.Observable.fromEvent(this.video, VideoElement.SEEKED).subscribe(stjs.bind(this, function (e) {
	        return this.seekTarget = null;
	    })));
	};
	AbstractVideoElement = stjs.extend(AbstractVideoElement, null, [VideoElement], function (constructor, prototype) {
	    constructor.progressLog = false;
	    constructor.allEventsLog = false;
	    prototype.log = null;
	    prototype.errorRx = null;
	    prototype.timeline = null;
	    prototype.video = null;
	    prototype.quickSeek = false;
	    prototype.wasPlayingBeforeQuickSeek = false;
	    prototype.metadataLoaded = false;
	    prototype.initialTime = 0.0;
	    prototype.loop = false;
	    prototype.pauseOnLoop = false;
	    prototype.rangeFromFrame = 0;
	    prototype.rangeToFrame = 0;
	    prototype.rangeFromTime = 0.0;
	    prototype.rangeToTime = 0.0;
	    prototype.animationRequestId = 0;
	    prototype.playRateCurrent = 0.0;
	    prototype.playRateBeforeQuickSeek = 0.0;
	    prototype.resetPlayRateOnSeek = false;
	    prototype.unbufferedPause = false;
	    prototype.playRx = null;
	    prototype.playBackwardsRx = null;
	    prototype.volumeChangeRx = null;
	    prototype.timeUpdateSubject = null;
	    prototype.progressSubject = null;
	    prototype.busyRx = null;
	    prototype.autoDisposables = null;
	    prototype.__seekBackwardsInterval = null;
	    prototype.seekTarget = null;
	    prototype.backwardsPlaybackHackSeek = false;
	    constructor.HAVE_FUTURE_DATA = 3;
	    constructor.HAVE_ENOUGH_DATA = 4;
	    constructor.MIN_PREBUFFER_TIME = 1;
	    constructor.VIDEO_END_THRESHOLD = 0.5;
	    constructor.SeekTarget = function (frame, time) {
	        this.frame = frame;
	        this.time = time;
	    };
	    constructor.SeekTarget = stjs.extend(constructor.SeekTarget, null, [], function (constructor, prototype) {
	        prototype.frame = 0;
	        prototype.time = 0.0;
	    }, {}, {});
	    prototype.seek = function (time) {};
	    prototype.afterSeek = function (time) {
	        this.seekTarget = null;
	        if (this.resetPlayRateOnSeek && this.isPlaying() && this.playRateCurrent != this.direction(this.playRateCurrent) && !this.backwardsPlaybackHackSeek) {
	            this.playAtRate(this.direction(this.playRateCurrent));
	        }
	        this.checkUnbufferedPlayback();
	    };
	    prototype.playAtRate = function (r) {
	        this.stopBackwards();
	        if (r > 16) {
	            r = 16;
	        } else if (r < -16) {
	            r = -16;
	        }
	        if (r > 0 && !this.isPlaying()) {
	            if (this.hasRange()) {
	                var curFrame = this.getTimeline().getFrameBySec(this.getTimeSec());
	                if (curFrame >= this.rangeToFrame || this.getTimeSec() > this.getSeekableDuration() - AbstractVideoElement.VIDEO_END_THRESHOLD) {
	                    this.seekFrame(this.rangeFromFrame);
	                }
	            } else {
	                if (this.getTimeSec() > this.getSeekableDuration() - AbstractVideoElement.VIDEO_END_THRESHOLD) {
	                    this.seek(0);
	                }
	            }
	        }
	        if (this.playRateCurrent > 0 && r < 0 && this.isPlaying()) {
	            this.pause();
	        }
	        if (r == 0) {
	            this.pause();
	            this.playRateCurrent = 0;
	            return;
	        }
	        this.playRateCurrent = r;
	        this.implementationSpecificPlay();
	    };
	    prototype.implementationSpecificPlay = function () {};
	    prototype.stopBackwards = function () {
	        if (this.__seekBackwardsInterval != null) {
	            clearInterval(this.__seekBackwardsInterval);
	            this.playBackwardsRx.onNext(false);
	            this.__seekBackwardsInterval = null;
	        }
	    };
	    prototype.close = function () {
	        this.playBackwardsRx.onCompleted();
	        this.stopBackwards();
	        if (this.animationRequestId != 0) {
	            window.cancelAnimationFrame(this.animationRequestId);
	        }
	        this.autoDisposables.dispose();
	    };
	    prototype.pause = function () {};
	    prototype.isPlaying = function () {};
	    prototype.getFrame = function () {};
	    prototype.getVolume = function () {};
	    prototype.setVolume = function (v) {};
	    prototype.getTimeSec = function () {};
	    prototype.getVideoWidth = function () {};
	    prototype.getVideoHeight = function () {};
	    prototype.getTimeline = function () {
	        return this.timeline;
	    };
	    prototype.getVideoShownRx = function () {};
	    prototype.getTimeUpdateRx = function () {
	        return this.timeUpdateSubject;
	    };
	    prototype.getProgressRx = function () {
	        return this.progressSubject;
	    };
	    prototype.forwardSec = function (n) {
	        n = Math.max(n, 1);
	        var calcSec = this.getTimeSec() + n;
	        var sec = Math.min(calcSec, this.getSeekableDuration());
	        this.seek(sec);
	    };
	    prototype.forward1 = function (n) {
	        var _n = Math.max(n, 1);
	        var fn = this.getFrame();
	        var toFrame = this.getTimeline().boundsFn(fn + _n);
	        this.seekFrame(toFrame);
	    };
	    prototype.backward1 = function (n) {
	        var _n = Math.max(n, 1);
	        var fn = this.getFrame();
	        var toFrame = fn - _n;
	        if (toFrame < 0) {
	            toFrame = 0;
	        }
	        this.seekFrame(toFrame);
	    };
	    prototype.timeToSeekByFrame = function (fn) {
	        if (fn < 1) return 0;
	        var t = this.getTimeline().getSecByFrame(fn);
	        var nt = this.getTimeline().getSecByFrame(fn + 1);
	        var dt = (nt - t) / 10.0;
	        return t + dt;
	    };
	    prototype.seekFrame = function (fn) {
	        var timeToSeek = this.timeToSeekByFrame(fn);
	        this.seek(timeToSeek);
	        this.seekTarget = new AbstractVideoElement.SeekTarget(fn, timeToSeek);
	    };
	    prototype.backwardSec = function (n) {
	        n = Math.max(n, 1);
	        var calcSec = this.getTimeSec() - n;
	        var sec = Math.max(0, Math.min(calcSec, this.getSeekableDuration()));
	        this.seek(sec);
	    };
	    prototype.getPlayRate = function () {
	        return this.playRateCurrent;
	    };
	    prototype.getTimeValue = function () {
	        return this.getTimeline().getTvByFrame(this.getFrame());
	    };
	    prototype.playFaster = function () {
	        var r = this.playRateCurrent;
	        if (r >= 1) {
	            this.playAtRate(r * 2);
	        } else if (r < 1) {
	            this.playAtRate(1);
	        }
	    };
	    prototype.playFasterBackwards = function () {
	        var r = this.playRateCurrent;
	        if (r <= -1) {
	            this.playAtRate(r * 2);
	        } else if (r > -1) {
	            this.playAtRate(-1);
	        }
	    };
	    prototype.getDuration = function () {
	        return this.getTimeline().getDurationSec();
	    };
	    prototype.getSeekableDuration = function () {
	        return this.getTimeline().getSeekableDurationSec();
	    };
	    prototype.endQuickSeek = function () {
	        this.log.debug("quick seek ended");
	        this.quickSeek = false;
	        if (this.wasPlayingBeforeQuickSeek) {
	            this.playAtRate(this.resetPlayRateOnSeek ? this.direction(this.playRateBeforeQuickSeek) : this.playRateBeforeQuickSeek);
	        }
	    };
	    prototype.startQuickSeek = function () {
	        this.wasPlayingBeforeQuickSeek = this.isPlaying();
	        this.playRateBeforeQuickSeek = this.playRateCurrent;
	        this.quickSeek = true;
	        this.pause();
	        this.log.debug("quick seek started");
	    };
	    prototype.setInitialTime = function (initialTime) {
	        this.initialTime = initialTime;
	    };
	    prototype.setLoop = function (loop) {};
	    prototype.setPauseOnLoop = function (pauseOnLoop) {
	        this.pauseOnLoop = pauseOnLoop;
	    };
	    prototype.hasRange = function () {
	        return this.rangeFromFrame != -1;
	    };
	    prototype.inRange = function (fn) {
	        return fn >= this.rangeFromFrame && fn <= this.rangeToFrame;
	    };
	    prototype.setRange = function (fromFrame, toFrame) {
	        if (this.animationRequestId != 0) window.cancelAnimationFrame(this.animationRequestId);
	        this.seekFrame(fromFrame);
	        this.rangeFromFrame = fromFrame;
	        this.rangeToFrame = toFrame;
	        this.rangeFromTime = this.getTimeline().getSecByFrame(fromFrame);
	        this.rangeToTime = this.getTimeline().getSecByFrame(toFrame + 1);
	        this.animationRequestId = window.requestAnimationFrame(stjs.bind(this, "timeRangeControl"));
	    };
	    prototype.timeRangeControl = function () {
	        if (!this.hasRange()) {
	            return;
	        }
	        if (this.metadataLoaded) {
	            var time = this.getTimeSec();
	            if (time >= this.rangeToTime) {
	                if (this.loop) {
	                    this.seekFrame(this.rangeFromFrame);
	                    if (this.pauseOnLoop) this.pause();
	                } else {
	                    this.seekFrame(this.rangeToFrame);
	                    this.pause();
	                }
	            }
	            if (time < this.rangeFromTime) {
	                if (this.loop) {
	                    this.seekFrame(this.rangeToFrame);
	                    if (this.pauseOnLoop) this.pause();
	                } else {
	                    this.seekFrame(this.rangeFromFrame);
	                    this.pause();
	                }
	            }
	        }
	        this.animationRequestId = window.requestAnimationFrame(stjs.bind(this, "timeRangeControl"));
	    };
	    prototype.cancelRange = function () {
	        this.rangeFromFrame = -1;
	        this.rangeToFrame = -1;
	        this.loop = false;
	        if (this.animationRequestId != 0) window.cancelAnimationFrame(this.animationRequestId);
	    };
	    prototype.addPrintEvents = function (v) {
	        if (null == v) return;
	        var printEventType = stjs.bind(this, function (e) {
	            if (!AbstractVideoElement.allEventsLog) return;
	            var errorType = "";
	            if (e.type == "error") errorType = "(" + VideoElement.mediaErrors[v.error.code] + ") ";
	            var seekable = "";
	            for (var i = 0; i < v.seekable.length; i++) {
	                seekable += " " + v.seekable.start(i) + ".." + v.seekable.end(i);
	            }
	            var buffered = "";
	            for (var i = 0; i < v.buffered.length; i++) {
	                buffered += " " + v.buffered.start(i) + ".." + v.buffered.end(i);
	            }
	            var url = v.getAttribute("type");
	            var str = url + " " + e.type + " " + errorType + VideoElement.networkStates[v.networkState] + " " + VideoElement.readyStates[v.readyState] + " " + seekable + " " + buffered + "\n";
	            if (v.id != null) {
	                str = v.id + " " + str;
	            }
	            this.log.debug(str);
	        });
	        v.addEventListener("abort", printEventType);
	        v.addEventListener(VideoElement.CANPLAY, printEventType);
	        v.addEventListener("canplaythrough", printEventType);
	        v.addEventListener("durationchange", printEventType);
	        v.addEventListener("emptied", printEventType);
	        v.addEventListener("ended", printEventType);
	        v.addEventListener("error", printEventType);
	        v.addEventListener("loadeddata", printEventType);
	        v.addEventListener(VideoElement.LOADEDMETADATA, printEventType);
	        v.addEventListener("loadstart", printEventType);
	        v.addEventListener(VideoElement.PAUSE, printEventType);
	        v.addEventListener("play", printEventType);
	        v.addEventListener(VideoElement.PLAYING, printEventType);
	        if (AbstractVideoElement.progressLog) {
	            v.addEventListener(VideoElement.PROGRESS, printEventType);
	        }
	        v.addEventListener("ratechange", printEventType);
	        v.addEventListener("readystatechange", printEventType);
	        v.addEventListener("seeked", printEventType);
	        v.addEventListener(VideoElement.SEEKING, printEventType);
	        v.addEventListener("stalled", printEventType);
	        v.addEventListener("suspend", printEventType);
	        v.addEventListener(VideoElement.TIMEUPDATE, printEventType);
	        v.addEventListener(VideoElement.VOLUMECHANGE, printEventType);
	        v.addEventListener("waiting", printEventType);
	    };
	    prototype.getPlayRx = function () {
	        return this.playRx;
	    };
	    prototype.getVolumeChangeRx = function () {
	        return this.volumeChangeRx;
	    };
	    prototype.getBusyRx = function () {
	        return this.busyRx.distinctUntilChanged();
	    };
	    prototype.updateBusyStatus = function (video) {
	        if (video.ended) {
	            this.busyRx.onNext(false);
	        } else if (video.readyState < AbstractVideoElement.HAVE_FUTURE_DATA || !this.enoughBufferForPlayback(video)) {
	            if (Utils.isChrome && this.chromeCanPlayTime0(video)) {
	                this.log.debug("special case: chrome can play even if the beginning of the video is said to be unbuffered");
	                this.busyRx.onNext(false);
	            } else {
	                this.busyRx.onNext(true);
	            }
	        } else {
	            this.busyRx.onNext(false);
	        }
	    };
	    prototype.enoughBufferForPlayback = function (video) {
	        var time = video.currentTime;
	        for (var i = 0; i < video.buffered.length; i++) {
	            if (time >= video.buffered.start(i) && time <= video.buffered.end(i)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    prototype.isNotBuffered = function () {
	        var time = this.video.currentTime;
	        if (Utils.isChrome && this.chromeCanPlayTime0(this.video)) return false;
	        for (var i = 0; i < this.video.buffered.length; i++) {
	            if (time >= this.video.buffered.start(i) && time <= this.video.buffered.end(i)) return false;
	            if (time < this.video.buffered.start(i)) return true;
	        }
	        return true;
	    };
	    prototype.notInitialLoading = function () {
	        return this.video.buffered.length > 0;
	    };
	    prototype.chromeCanPlayTime0 = function (video) {
	        var threshold = 0.04;
	        return video.readyState == AbstractVideoElement.HAVE_ENOUGH_DATA && video.currentTime < threshold && video.buffered.length > 0 && video.buffered.start(0) <= threshold;
	    };
	    prototype.setCrossOrigin = function (type) {
	        this.video.setAttribute("crossorigin", type);
	    };
	    prototype.autoDisposable = function (disposable) {
	        this.autoDisposables.add(disposable);
	    };
	    prototype.setResetPlayRateOnSeek = function (reset) {
	        this.resetPlayRateOnSeek = reset;
	    };
	    prototype.getBuffered = function () {
	        var result = new Array();
	        for (var i = 0; i < this.video.buffered.length; i++) {
	            result.push(new TimeRange(this.video.buffered.start(i), this.video.buffered.end(i)));
	        }
	        return result;
	    };
	    prototype.direction = function (n) {
	        return n >= 0 ? 1 : -1;
	    };
	    prototype.allowUnbufferedPlayback = function () {
	        return this.video.src.indexOf("blob:") != 0 || Utils.isMobileSafari;
	    };
	    prototype.checkUnbufferedPlayback = function () {
	        if (!this.allowUnbufferedPlayback()) {
	            if (!this.video.paused && this.isNotBuffered() && this.notInitialLoading()) {
	                this.pauseUnbufferedPlayback();
	            } else if (this.unbufferedPause && !this.isNotBuffered()) {
	                this.unbufferedPause = false;
	                this.video.play();
	            }
	        }
	    };
	    prototype.pauseUnbufferedPlayback = function () {
	        this.log.debug("temp pause. video is unbuffered");
	        this.video.pause();
	        this.unbufferedPause = true;
	    };
	}, { log: "Log", errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] }, timeline: "Timeline", video: "Video", playRx: { name: "Rx.Observable", arguments: [null] }, playBackwardsRx: { name: "Rx.Subject", arguments: [null] }, volumeChangeRx: { name: "Rx.Observable", arguments: [null] }, timeUpdateSubject: { name: "Rx.Subject", arguments: [null] }, progressSubject: { name: "Rx.Subject", arguments: [{ name: "Array", arguments: ["TimeRange"] }] }, busyRx: { name: "Rx.Subject", arguments: [null] }, autoDisposables: "Rx.CompositeDisposable", __seekBackwardsInterval: "TimeoutHandler", seekTarget: "AbstractVideoElement.SeekTarget", mediaErrors: { name: "Array", arguments: [null] }, networkStates: { name: "Array", arguments: [null] }, readyStates: { name: "Array", arguments: [null] } }, {});
	var SimpleTimeline = function (timeScale, frameCount, frameDurationTv, tapeTimecode) {
	    GenericTimeline.call(this, timeScale, frameDurationTv, tapeTimecode);
	    this.frameCount = frameCount;
	    this.seekableDurationSec = this.getDurationSec();
	};
	SimpleTimeline = stjs.extend(SimpleTimeline, GenericTimeline, [], function (constructor, prototype) {
	    prototype.frameCount = 0;
	    constructor.newEndlessTime = function (timeline) {
	        var frameDurationTv = stjs.trunc(timeline.getTvByFrame(1) - timeline.getTvByFrame(0));
	        var frameCount = Integer.MAX_VALUE;
	        return SimpleTimeline.newSimpleTime(timeline.getTimeScale(), frameCount, frameDurationTv, timeline.getTapeByFrame(0));
	    };
	    constructor.newSimpleTime = function (timeScale, frameCount, frameDurationTv, tapeTimecode) {
	        var _tapeTimecode = TapeTimecode.timecodeFromString(tapeTimecode, stjs.trunc(Math.round(timeScale / frameDurationTv)));
	        return new BoundedTimeline(new SimpleTimeline(timeScale, frameCount, frameDurationTv, _tapeTimecode));
	    };
	    prototype.getDurationSec = function () {
	        return this.frameCount * this.frameDurationTv / this.timeScale;
	    };
	    prototype.getFrameCount = function () {
	        return stjs.trunc(this.frameCount);
	    };
	}, { updateRx: { name: "Rx.Subject", arguments: ["Timeline"] }, timecode: "TapeTimecode", UNKNOWN: "Timeline" }, {});
	var HLSTimeline = function (timeScale, frameDurationTv, tapeTimecode) {
	    GenericTimeline.call(this, timeScale, frameDurationTv, tapeTimecode);
	};
	HLSTimeline = stjs.extend(HLSTimeline, GenericTimeline, [], function (constructor, prototype) {
	    prototype.schedule = null;
	    prototype.updateInterval = null;
	    prototype.playlist = null;
	    prototype.live = false;
	    constructor.liveUpdateHLSTime = function (http, url, initial, log, errorRx) {
	        var t = new HLSTimeline(24000, 1001, new TapeTimecode(false, 0, 24));
	        t.setDurationSec(initial.getDurationSec());
	        t.live = true;
	        var updateTimeoutMillis = 2000;
	        t.schedule = Rx.Observable.create(function (observer) {
	            return function () {
	                return clearInterval(t.updateInterval);
	            };
	        });
	        t.updateInterval = setInterval(function () {
	            log.debug("liveUpdateHLSTime");
	            http.get(url).subscribe(function (str) {
	                var split = str.split("\n");
	                var playlist;
	                try {
	                    playlist = HLSPlaylist.parseM3U8(split, log);
	                } catch (e) {
	                    errorRx.onNext(new PlayerError(e.getMessage(), PlayerError.FATAL));
	                    return;
	                }
	                t.playlist = playlist;
	                if (t.getDurationSec() != playlist.getDurationSec()) {
	                    log.debug("liveUpdateHLSTime new duration", playlist.getDurationSec());
	                    t.setDurationSec(playlist.getDurationSec());
	                }
	                if (playlist.hasEndList()) {
	                    clearInterval(t.updateInterval);
	                    t.updateInterval = null;
	                    t.live = false;
	                }
	            }, function (req) {
	                errorRx.onNext(new PlayerError("error loading hls playlist " + req.status, PlayerError.FATAL));
	            });
	        }, updateTimeoutMillis);
	        return t;
	    };
	    prototype.isLive = function () {
	        return this.live;
	    };
	}, { schedule: { name: "Rx.Observable", arguments: [null] }, updateInterval: "TimeoutHandler", playlist: "HLSPlaylist", updateRx: { name: "Rx.Subject", arguments: ["Timeline"] }, timecode: "TapeTimecode", UNKNOWN: "Timeline" }, {});
	var FilmStripDrawer = function (http, log, errorRx) {
	    this.http = http;
	    this.log = log;
	    this.errorRx = errorRx;
	};
	FilmStripDrawer = stjs.extend(FilmStripDrawer, null, [], function (constructor, prototype) {
	    prototype.frameExtractor = null;
	    prototype.closed = false;
	    prototype.fd = null;
	    prototype.queueRx = null;
	    prototype.queueSubscription = null;
	    prototype.http = null;
	    prototype.log = null;
	    prototype.errorRx = null;
	    prototype.initWithUrl = function (url, onDone) {
	        this.frameExtractor = new FrameExtractor(url, this.http, this.log);
	        this.frameExtractor.init(stjs.bind(this, function (info) {
	            this.initPipeline();
	            if (onDone != null) onDone(info);
	        }));
	    };
	    prototype.initWithDashStream = function (segmentedStream, timeline, onDone) {
	        this.frameExtractor = new DashStreamFrameExtractor(segmentedStream, timeline, this.log, this.errorRx);
	        this.frameExtractor.init(stjs.bind(this, function (info) {
	            this.initPipeline();
	            if (onDone != null) onDone(info);
	        }));
	    };
	    prototype.initPipeline = function () {
	        this.fd = new FrameDrawer(this.frameExtractor);
	        this.queueRx = new Rx.Subject();
	        this.queueSubscription = this.queueRx.concatMap(stjs.bind(this, "processRequest")).subscribe();
	    };
	    prototype.processRequest = function (request) {
	        return Rx.Observable.create(stjs.bind(this, function (observer) {
	            if (!request.cancelled) {
	                var framesLoaded = Rx.Observable.from(request.frameNumbers).flatMap(stjs.bind(this, function (fn) {
	                    return this.frameExtractor.loadFrameData(fn).flatMapObserver(function (x, i) {
	                        return Rx.Observable.just(fn);
	                    }, stjs.bind(this, function (err) {
	                        this.log.error("can not load thumb frame " + fn + ". rendering black.");
	                        return Rx.Observable.just(fn);
	                    }), function () {
	                        return Rx.Observable.empty();
	                    });
	                }));
	                var framesSorted = RxUtil.sequential(framesLoaded, function (fn) {
	                    return fn;
	                }, request.frameNumbers);
	                var allFramesDrawn = this.drawThumbs(request.canvas, framesSorted);
	                request.disposable = allFramesDrawn.finally(function () {
	                    return observer.onCompleted();
	                }).subscribe(function (x) {
	                    return request.onDone();
	                }, function (err) {
	                    return request.onError(err);
	                });
	                return function () {
	                    return request.disposable.dispose();
	                };
	            } else {
	                observer.onCompleted();
	                return function () {};
	            }
	        }));
	    };
	    prototype.getInfo = function () {
	        return this.frameExtractor.getInfo();
	    };
	    prototype.drawThumbs = function (canvas, frames) {
	        var info = this.getInfo();
	        var aspect = info.width / info.height;
	        var frameHeight = canvas.height;
	        var frameWidth = stjs.trunc(frameHeight * aspect);
	        var ctx = canvas.getContext("2d", null);
	        return frames.concatMap(stjs.bind(this, function (fn) {
	            return this.fd.decodeFrame(fn);
	        })).reduce(function (b, decodedCanvas, idx, src) {
	            if (decodedCanvas != null) {
	                ctx.drawImage(decodedCanvas, 0, 0, info.width, info.height, idx * frameWidth, 0, frameWidth, frameHeight);
	            } else {
	                ctx.fillRect(idx * frameWidth, 0, frameWidth, frameHeight);
	            }
	            return true;
	        }, true);
	    };
	    prototype.drawFilmstrip = function (canvas, startFrame, endFrame, numberOfFrames, framePrecise, onDone, onError) {
	        if (this.closed) return null;
	        if (numberOfFrames < 1) {
	            this.log.error("numberOfFrames < 1");
	            onError("numberOfFrames < 1");
	            return null;
	        }
	        if (startFrame > endFrame) {
	            this.log.error("startFrame > endFrame");
	            onError("startFrame > endFrame");
	            return null;
	        }
	        var frameNumbers = this.frameNumbers(startFrame, endFrame, numberOfFrames);
	        if (!framePrecise && this.frameExtractor.iframes != null) {
	            var aligned = this.alignToIframes(frameNumbers);
	            if (!this.hasDuplicates(aligned)) {
	                frameNumbers = aligned;
	            }
	        }
	        var request = new FilmStripDrawer.DrawRequest(canvas, frameNumbers, onDone, onError);
	        this.queueRx.onNext(request);
	        return stjs.bind(request, "abort");
	    };
	    prototype.frameNumbers = function (startFn, endFn, count) {
	        var delta = (endFn - startFn) / (count - 1);
	        var frameNumbers = new Array(count);
	        for (var i = 0; i < count - 1; i++) {
	            frameNumbers[i] = parseInt(Math.round(startFn + i * delta));
	        }
	        frameNumbers[count - 1] = endFn;
	        frameNumbers[0] = startFn;
	        return frameNumbers;
	    };
	    prototype.alignToIframes = function (frameNumbers) {
	        var aligned = new Array();
	        aligned.push(frameNumbers[0]);
	        var framesTotal = this.frameExtractor.getInfo().framesTotal;
	        for (var i = 1; i < frameNumbers.length - 1; i++) {
	            var fn = frameNumbers[i];
	            if (fn < framesTotal) {
	                var prevIframe = this.frameExtractor.getPrevIframe(fn);
	                aligned.push(Math.max(prevIframe, aligned[i - 1]));
	            } else {
	                aligned.push(fn);
	            }
	        }
	        aligned.push(frameNumbers[frameNumbers.length - 1]);
	        return aligned;
	    };
	    prototype.hasDuplicates = function (array) {
	        for (var i = 1; i < array.length; i++) {
	            if (array[i - 1] == array[i]) return true;
	        }
	        return false;
	    };
	    prototype.close = function () {
	        this.closed = true;
	        this.queueSubscription.dispose();
	    };
	    constructor.DrawRequest = function (canvas, frameNumbers, onDone, onError) {
	        this.canvas = canvas;
	        this.frameNumbers = frameNumbers;
	        this.onDone = onDone;
	        this.onError = onError;
	    };
	    constructor.DrawRequest = stjs.extend(constructor.DrawRequest, null, [], function (constructor, prototype) {
	        prototype.canvas = null;
	        prototype.frameNumbers = null;
	        prototype.onDone = null;
	        prototype.onError = null;
	        prototype.disposable = null;
	        prototype.cancelled = false;
	        prototype.abort = function () {
	            this.cancelled = true;
	            if (this.disposable != null) this.disposable.dispose();
	        };
	    }, { canvas: "Canvas", frameNumbers: { name: "Array", arguments: [null] }, onDone: "Callback0", onError: { name: "Callback1", arguments: ["Object"] }, disposable: "Rx.Disposable" }, {});
	}, { frameExtractor: "AbstractFrameExtractor", fd: "FrameDrawer", queueRx: { name: "Rx.Subject", arguments: ["FilmStripDrawer.DrawRequest"] }, queueSubscription: "Rx.Disposable", http: "Http", log: "Log", errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] } }, {});
	var MPDXml = function (xml, defaultBaseURL, log) {
	    this.xml = xml;
	    this.defaultBaseURL = defaultBaseURL;
	    this.log = log;
	};
	MPDXml = stjs.extend(MPDXml, null, [], function (constructor, prototype) {
	    prototype.xml = null;
	    prototype.defaultBaseURL = null;
	    prototype.log = null;
	    prototype.getDashDescriptor = function (representationId) {
	        var repr = this.xml.querySelector("Representation[id='" + representationId + "']");
	        var segments = this.getSegmentTemplateOrList(representationId);
	        var segmentStartTv = this.getSegmentStartTv(representationId);
	        var baseTv = segmentStartTv[0];
	        var desc = new DashDescriptor();
	        desc.timecode = "00:00:00:00";
	        desc.timescale = Integer.parseInt(segments.getAttribute("timescale"));
	        desc.avgFrameDuration = this.getFrameDuration(representationId);
	        desc.segmentStartTv = segmentStartTv;
	        desc.baseTv = 0;
	        desc.segmentStartFrame = this.getSegmentStartFrame(representationId);
	        desc.duration = this.getDurationTv(representationId);
	        desc.mimeType = this.getMimeType(repr);
	        desc.codecs = repr.getAttribute("codecs");
	        desc.dynamic = this.isDynamic();
	        desc.width = Integer.parseInt(repr.getAttribute("width"));
	        desc.height = Integer.parseInt(repr.getAttribute("height"));
	        var aTime = this.mpdElement().getAttribute("availabilityStartTime");
	        if (aTime != null) {
	            desc.availabilityStartTime = aTime;
	        } else {
	            desc.availabilityStartTime = new Date().toISOString();
	        }
	        return desc;
	    };
	    prototype.getSegmentTemplate = function (representationId) {
	        var repr = this.xml.querySelector("Representation[id='" + representationId + "']");
	        return repr.querySelector("SegmentTemplate") || repr.parentElement.querySelector("SegmentTemplate");
	    };
	    prototype.getSegmentTemplateOrList = function (representationId) {
	        var repr = this.xml.querySelector("Representation[id='" + representationId + "']");
	        return repr.querySelector("SegmentTemplate") || repr.parentElement.querySelector("SegmentTemplate") || repr.querySelector("SegmentList");
	    };
	    prototype.getBaseURL = function () {
	        var baseUrlEl = this.xml.querySelector("BaseURL");
	        if (baseUrlEl != null && Utils.isNotBlank(baseUrlEl.innerHTML)) {
	            return baseUrlEl.innerHTML;
	        }
	        return this.defaultBaseURL;
	    };
	    prototype.getSegmentUrls = function (representationId) {
	        var segmentList = this.xml.querySelector("Representation[id='" + representationId + "'] SegmentList");
	        if (segmentList != null) {
	            var init = this.xml.querySelector("Representation[id='" + representationId + "'] SegmentList Initialization").getAttribute("sourceURL");
	            init = Utils.toAbsoluteUri(this.getBaseURL(), init);
	            var segments = this.xml.querySelectorAll("Representation[id='" + representationId + "'] SegmentList SegmentURL");
	            var urls = new Array();
	            for (var i = 0; i < segments.length; i++) {
	                var url = segments[i].getAttribute("media");
	                urls.push(Utils.toAbsoluteUri(this.getBaseURL(), url));
	            }
	            return new DashSegmentUrls(init, urls);
	        }
	        var segTemplate = this.getSegmentTemplate(representationId);
	        var init = segTemplate.getAttribute("initialization").replace("$RepresentationID$", representationId);
	        var mediaTemplate = segTemplate.getAttribute("media").replace("$RepresentationID$", representationId);
	        var startNumber = Integer.parseInt(segTemplate.getAttribute("startNumber"));
	        var segmentEls = this.getSegmentTemplateOrList(representationId).querySelectorAll("S");
	        var urls = new Array();
	        var count = 0;
	        if (segmentEls.length > 0) {
	            for (var i = 0; i < segmentEls.length; i++) {
	                var rStr = segmentEls[i].getAttribute("r");
	                var repeats = Utils.isNotEmpty(rStr) ? Integer.parseInt(rStr) : 0;
	                count += 1 + repeats;
	            }
	        } else {
	            var durationTv = this.getDurationTv(representationId);
	            var segmentDurationTv = Long.parseLong(segTemplate.getAttribute("duration"));
	            count = stjs.trunc(Math.ceil(durationTv / segmentDurationTv));
	        }
	        var segmentStartTv = this.getSegmentStartTv(representationId);
	        for (var i = 0; i < count; i++) {
	            var tv = segmentStartTv[i];
	            var url = this.getBaseURL() + this.format(i + startNumber, tv, mediaTemplate);
	            urls.push(url);
	        }
	        return new DashSegmentUrls(this.getBaseURL() + init, urls);
	    };
	    prototype.getSegmentStartTv = function (representationId) {
	        var segmentEls = this.getSegmentTemplateOrList(representationId).querySelectorAll("S");
	        var tvs = new Array();
	        if (segmentEls.length > 0) {
	            var tv = 0;
	            for (var i = 0; i < segmentEls.length; i++) {
	                var dur = Long.parseLong(segmentEls[i].getAttribute("d"));
	                var countStr = segmentEls[i].getAttribute("r");
	                var count = Utils.isNotEmpty(countStr) ? Integer.parseInt(countStr) + 1 : 1;
	                var tvStr = segmentEls[i].getAttribute("t");
	                if (Utils.isNotEmpty(tvStr)) tv = Long.parseLong(tvStr);
	                for (var j = 0; j < count; j++) {
	                    tvs.push(tv);
	                    tv += dur;
	                }
	            }
	            tvs.push(tv);
	        } else {
	            var durationTv = this.getDurationTv(representationId);
	            var segmentTemplate = this.getSegmentTemplate(representationId);
	            var segmentDurationTv = Long.parseLong(segmentTemplate.getAttribute("duration"));
	            var count = stjs.trunc(Math.ceil(durationTv / segmentDurationTv));
	            var tv = 0;
	            for (var i = 0; i < count; i++) {
	                tvs.push(tv);
	                tv += segmentDurationTv;
	            }
	            tvs.push(durationTv);
	        }
	        return tvs;
	    };
	    prototype.getSegmentStartFrame = function (representationId) {
	        var segmentEls = this.getSegmentTemplateOrList(representationId).querySelectorAll("S");
	        if (segmentEls.length == 0) {
	            return null;
	        }
	        var frames = new Array();
	        var frame = 0;
	        for (var i = 0; i < segmentEls.length; i++) {
	            var frameCountStr = segmentEls[i].getAttribute("f");
	            if (Utils.isEmpty(frameCountStr) || "0".equals(frameCountStr)) {
	                return null;
	            }
	            var segmentFrameCount = Integer.parseInt(frameCountStr);
	            var countStr = segmentEls[i].getAttribute("r");
	            var count = Utils.isNotEmpty(countStr) ? Integer.parseInt(countStr) + 1 : 1;
	            for (var j = 0; j < count; j++) {
	                frames.push(frame);
	                frame += segmentFrameCount;
	            }
	        }
	        frames.push(frame);
	        return frames;
	    };
	    prototype.getTimeScale = function (representationId) {
	        var segments = this.getSegmentTemplateOrList(representationId);
	        return segments != null ? Integer.parseInt(segments.getAttribute("timescale")) : -1;
	    };
	    prototype.getDurationTv = function (representationId) {
	        var segmentEls = this.getSegmentTemplateOrList(representationId).querySelectorAll("S");
	        if (segmentEls.length > 0) {
	            var duration = 0;
	            for (var i = 0; i < segmentEls.length; i++) {
	                var dur = Long.parseLong(segmentEls[i].getAttribute("d"));
	                var countStr = segmentEls[i].getAttribute("r");
	                var count = Utils.isNotEmpty(countStr) ? Integer.parseInt(countStr) + 1 : 1;
	                duration += dur * count;
	            }
	            return duration;
	        } else {
	            var xsDuration = this.xml.querySelector("MPD").getAttribute("mediaPresentationDuration");
	            var millis = Utils.parseXsDuration(xsDuration);
	            return Utils.convertTv(millis, 1000, this.getTimeScale(representationId));
	        }
	    };
	    prototype.isDynamic = function () {
	        return "dynamic".equals(this.mpdElement().getAttribute("type"));
	    };
	    prototype.mpdElement = function () {
	        return this.xml.querySelector("MPD");
	    };
	    prototype.getChannelConfiguration = function (representationId) {
	        var repr = this.xml.querySelector("Representation[id='" + representationId + "']");
	        var conf = repr.querySelector("AudioChannelConfiguration") || repr.parentElement.querySelector("AudioChannelConfiguration");
	        return Integer.parseInt(conf.getAttribute("value"));
	    };
	    prototype.getFrameDuration = function (representationId) {
	        var repr = this.xml.querySelector("Representation[id='" + representationId + "']");
	        var frameRateStr = repr.getAttribute("frameRate") || repr.parentElement.getAttribute("frameRate");
	        if (Utils.isNotBlank(frameRateStr)) {
	            var frameRate;
	            if (frameRateStr.contains("/")) {
	                var split = frameRateStr.split("/");
	                frameRate = Double.parseDouble(split[0]) / Double.parseDouble(split[1]);
	            } else {
	                frameRate = Double.parseDouble(frameRateStr);
	            }
	            return stjs.trunc(Math.round(this.getTimeScale(representationId) / frameRate));
	        } else {
	            var segmentStartFrame = this.getSegmentStartFrame(representationId);
	            if (segmentStartFrame != null && segmentStartFrame.length > 1) {
	                var segmentStartTv = this.getSegmentStartTv(representationId);
	                var segDuration = segmentStartTv[1] - segmentStartTv[0];
	                return stjs.trunc(segDuration / segmentStartFrame[1]);
	            } else {
	                return 0;
	            }
	        }
	    };
	    prototype.getAudioRepresentationIds = function () {
	        return this.getRepresentationIds("audio");
	    };
	    prototype.getVideoRepresentationIds = function () {
	        return this.getRepresentationIds("video");
	    };
	    prototype.getRepresentationIds = function (type) {
	        var ids = [];
	        var representations = this.xml.querySelectorAll("AdaptationSet[contentType='" + type + "'] Representation");
	        for (var i = 0; i < representations.length; i++) {
	            ids.push(representations[i].id);
	        }
	        representations = this.xml.querySelectorAll("AdaptationSet[mimeType^='" + type + "'] Representation");
	        for (var i = 0; i < representations.length; i++) {
	            var id = representations[i].id;
	            if (ids.indexOf(id) == -1) {
	                ids.push(id);
	            }
	        }
	        representations = this.xml.querySelectorAll("Representation[mimeType^='" + type + "']");
	        for (var i = 0; i < representations.length; i++) {
	            var id = representations[i].id;
	            if (ids.indexOf(id) == -1) {
	                ids.push(id);
	            }
	        }
	        return ids;
	    };
	    constructor.fromString = function (s, defaultBaseURL, log) {
	        var domParser = new DOMParser();
	        var parseFromString = domParser.parseFromString(s, "text/xml");
	        log.debug(parseFromString);
	        if (parseFromString.querySelector("parsererror") != null) {
	            var err = parseFromString.querySelector("parsererror div").textContent;
	            throw new MPDXml.MPDParseException(err);
	        }
	        return new MPDXml(parseFromString, defaultBaseURL, log);
	    };
	    prototype.getVgTotalDuration = function (timescale) {
	        var d = this.getVgTotalDurationSec();
	        if (d == null) {
	            return null;
	        }
	        return stjs.trunc(d * timescale);
	    };
	    prototype.getVgTotalDurationSec = function () {
	        var vgTotalDurationSec = this.mpdElement().getAttribute("vgTotalDurationSec");
	        if (vgTotalDurationSec == null) {
	            return null;
	        }
	        return Double.parseDouble(vgTotalDurationSec);
	    };
	    prototype.format = function (num, tv, mediaTemplate) {
	        return mediaTemplate.replace("$Number$", num + "").replace("$Number%04d$", Utils.zeroPad(num, 4)).replace("$Number%05d$", Utils.zeroPad(num, 5)).replace("$Time$", tv + "");
	    };
	    prototype.getDrmInfo = function () {
	        var infos = [];
	        Utils.arrayFrom(this.xml.querySelectorAll("Representation")).filter(stjs.bind(this, function (repr, i, a) {
	            var mt = this.getMimeType(repr);
	            return mt.startsWith("video") || mt.startsWith("audio");
	        })).filter(function (repr, i, a) {
	            return repr.parentElement.querySelector("ContentProtection[value='cenc']") != null;
	        }).forEach(stjs.bind(this, function (repr, i, a) {
	            var adaptation = repr.parentElement;
	            var contentType = this.getMimeType(repr) + "; codecs=\"" + repr.getAttribute("codecs") + "\"";
	            Utils.arrayFrom(adaptation.querySelectorAll("ContentProtection")).forEach(stjs.bind(this, function (contentProtection) {
	                var pssh = contentProtection.querySelector("pssh");
	                var psshContent = pssh != null ? pssh.textContent : null;
	                var pro = contentProtection.querySelector("pro");
	                var proContent = pro != null ? pro.textContent : null;
	                switch (contentProtection.getAttribute("schemeIdUri")) {
	                    case "urn:mpeg:dash:mp4protection:2011":
	                        break;
	                    case "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed":
	                        infos.push(new DRMInfo(repr.id, DRM.WIDEVINE, psshContent, contentType));
	                        break;
	                    case "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95":
	                        var initData = null;
	                        if (pssh != null) {
	                            initData = psshContent;
	                        } else if (pro != null) {
	                            initData = this.wrapProInPssh(proContent);
	                        }
	                        infos.push(new DRMInfo(repr.id, DRM.PLAYREADY, initData, contentType));
	                        break;
	                    default:
	                        this.log.warn("unsupported content protection for Representation.id=" + repr.id);
	                }
	            }));
	        }));
	        return infos;
	    };
	    prototype.getMimeType = function (representation) {
	        return (representation.getAttribute("mimeType") || representation.parentElement.getAttribute("mimeType")).toLowerCase();
	    };
	    prototype.wrapProInPssh = function (pro64) {
	        var pro = window.atob(pro64);
	        var psshBuf = new ArrayBuffer(32);
	        var view = new DataView(psshBuf);
	        view.setUint32(0, view.byteLength + pro.length, false);
	        view.setUint32(4, 1886614376, false);
	        view.setUint32(8, 0, false);
	        view.setUint32(12, -1710952327, false);
	        view.setUint16(16, 38976, false);
	        view.setUint16(18, 17030, false);
	        view.setUint16(20, 43922, false);
	        view.setUint16(22, 58971, false);
	        view.setUint32(24, -527933547, false);
	        view.setUint32(28, pro.length, false);
	        var pssh = "";
	        for (var i = 0; i < view.byteLength; i++) {
	            pssh += String.fromCharCode(view.getUint8(i));
	        }
	        pssh += pro;
	        return window.btoa(pssh);
	    };
	    prototype.getLocation = function () {
	        var location = this.xml.querySelector("Location");
	        return location != null ? location.innerHTML : null;
	    };
	    constructor.MPDParseException = function (message) {
	        Exception.call(this, message);
	    };
	    constructor.MPDParseException = stjs.extend(constructor.MPDParseException, Exception, [], null, {}, {});
	}, { xml: "Document", log: "Log" }, {});
	var SkinlessPlayerView = function (parentEl, log) {
	    PlayerView.call(this, parentEl, log);
	    this.parentEl = parentEl;
	};
	SkinlessPlayerView = stjs.extend(SkinlessPlayerView, PlayerView, [], function (constructor, prototype) {
	    prototype.parentEl = null;
	    prototype.enterFullscreen = function (elt) {};
	    prototype.exitFullscreen = function () {};
	    prototype.seekFrameAndCheckRange = function (frame) {};
	    prototype.getCaptionsContainer = function () {
	        return null;
	    };
	    prototype.renderFatalError = function (err) {};
	    prototype.renderRange = function (fromFrame, toFrame) {};
	    prototype.renderWhole = function () {};
	    prototype.showAsAudioPlayer = function () {};
	}, { parentEl: "Element", player: "PlayerImpl", parentEl: "Element", log: "Log", container: "Element", video: "Video", trickVideo: "Video", hm: "HotkeyManager", playerContainer: "Element", frozenCanvas: "Canvas", fullscreenRx: { name: "Rx.Subject", arguments: [null] }, spinner: "Element", autoDisposables: "Rx.CompositeDisposable", DO_NOTHING: { name: "Callback1", arguments: ["DOMEvent"] }, children: { name: "Array", arguments: ["CloseableView"] } }, {});
	var MPDSegmentedVideoStream = function (id, http, urls, desc, totalDuration, log) {
	    SegmentedVideoStream.call(this, http, urls, desc, -1);
	    this.id = id;
	    this.timeline = new BoundedTimeline(new DashTimeline(this.timescale, desc.avgFrameDuration, totalDuration, desc.segmentStartFrame, desc.segmentStartTv, log));
	    this.timeline.setStartUTCTimestamp(desc.availabilityStartTime);
	};
	MPDSegmentedVideoStream = stjs.extend(MPDSegmentedVideoStream, SegmentedVideoStream, [], function (constructor, prototype) {
	    prototype.timeline = null;
	    prototype.movieMp4Box = null;
	    prototype.getFrameCount = function () {
	        return this.timeline.getFrameCount();
	    };
	    prototype.getDashInit = function (onDone, onError) {
	        SegmentedVideoStream.prototype.getDashInit.call(this, stjs.bind(this, function (buf) {
	            this.movieMp4Box = Mp4Loader.parseMoov(buf);
	            onDone(buf);
	        }), onError);
	    };
	    prototype.loadSegment = function (segmentIdx, onDone, onError) {
	        return SegmentedVideoStream.prototype.loadSegment.call(this, segmentIdx, stjs.bind(this, function (buf) {
	            var segmentMp4Box = Mp4Loader.parseMoof(buf);
	            var pkts = MovDasher.parseTimePacketsInM4s(this.movieMp4Box, segmentMp4Box);
	            this.timeline.originalTimeline().updateTimePackets(segmentIdx, pkts);
	            onDone(buf);
	        }), onError);
	    };
	    prototype.getTimeline = function () {
	        return this.timeline;
	    };
	    prototype.updateFrom = function (stream) {
	        SegmentedVideoStream.prototype.updateFrom.call(this, stream);
	        this.timeline.originalTimeline().update(this.desc.duration, this.desc.segmentStartFrame, this.desc.segmentStartTv);
	        this.timeline.setSeekableDurationSec(stjs.trunc(this.desc.duration / this.desc.timescale));
	    };
	    prototype.getSegmentTimestampOffset = function (idx) {
	        if (this.desc.baseTv != 0) {
	            var segDurTv = this.getSegmentStartTv(idx + 1) - this.getSegmentStartTv(idx);
	            return -(this.desc.baseTv + segDurTv) / this.desc.timescale;
	        } else {
	            return 0;
	        }
	    };
	}, { timeline: { name: "BoundedTimeline", arguments: ["DashTimeline"] }, movieMp4Box: "MP4Box", http: "Http", urls: "DashSegmentUrls", desc: "DashDescriptor", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var MPDSegmentedAudioStream = function (id, http, urls, desc, log) {
	    SegmentedAudioStream.call(this);
	    this.id = id;
	    this.http = http;
	    this.urls = urls;
	    this.desc = desc;
	    this.populateFromDesc();
	    this.timeline = new BoundedTimeline(new DashTimeline(this.sampleRate, desc.avgFrameDuration, this.totalSamples, desc.segmentStartFrame, desc.segmentStartTv, log));
	    this.timeline.setStartUTCTimestamp(desc.availabilityStartTime);
	};
	MPDSegmentedAudioStream = stjs.extend(MPDSegmentedAudioStream, SegmentedAudioStream, [], function (constructor, prototype) {
	    prototype.http = null;
	    prototype.desc = null;
	    prototype.urls = null;
	    prototype.timeline = null;
	    prototype.populateFromDesc = function () {
	        this.sampleRate = this.desc.timescale;
	        this.totalSamples = this.desc.duration;
	        this.mimeType = this.desc.mimeType;
	        this.codecs = this.desc.codecs;
	    };
	    prototype.getDashDescriptor = function () {
	        return this.desc;
	    };
	    prototype.getDashInit = function (onDone, onError) {
	        this.http.getArrayBuffer(this.urls.getInitUrl()).subscribe(onDone, onError);
	    };
	    prototype.loadSegment = function (segmentIdx, onDone, onError) {
	        var sub = this.http.getArrayBuffer(this.urls.getSegmentUrl(segmentIdx)).retryWhen(RetryWithDelay.create(3, 3000)).subscribe(onDone, onError);
	        var abort = function () {
	            return sub.dispose();
	        };
	        return abort;
	    };
	    prototype.updateFrom = function (audio) {
	        this.urls = audio.urls;
	        this.desc = audio.desc;
	        this.populateFromDesc();
	        this.updateRx.onNext(this);
	    };
	    prototype.silenceAppended = function () {
	        return false;
	    };
	    prototype.getTimeline = function () {
	        return this.timeline;
	    };
	    prototype.getSegmentTimestampOffset = function (idx) {
	        if (this.desc.baseTv != 0) {
	            var segDurTv = this.getSegmentStartTv(idx + 1) - this.getSegmentStartTv(idx);
	            return -(this.desc.baseTv + segDurTv) / this.desc.timescale;
	        } else {
	            return 0;
	        }
	    };
	}, { http: "Http", desc: "DashDescriptor", urls: "DashSegmentUrls", timeline: "Timeline", channelMuted: { name: "Array", arguments: [null] }, audioInfo: "AudioInfo", updateRx: { name: "Rx.Subject", arguments: ["SegmentedStream"] } }, {});
	var DualVideoElement = function (video, timeline, trickVideo, log, errorRx) {
	    AbstractVideoElement.call(this, video, timeline, log, errorRx);
	    var self = this;
	    this.trickVideo = trickVideo;
	    this.videoShownRx = new Rx.Subject();
	    this.video.preload = "auto";
	    this.trickVideo.preload = "auto";
	    var playRx = Rx.Observable.fromEvent(this.trickVideo, VideoElement.PLAYING);
	    var pauseRx = Rx.Observable.fromEvent(this.trickVideo, VideoElement.PAUSE);
	    var trickPlayRx = Rx.Observable.merge(playRx, pauseRx).map(function (x) {
	        return self.isPlaying();
	    });
	    this.playRx = Rx.Observable.merge(AbstractVideoElement.prototype.getPlayRx.call(this), trickPlayRx);
	    this.playRx = this.playRx.debounce(10);
	    this.shownVideo = this.video;
	    this.addPrintEvents(this.video);
	    this.addPrintEvents(trickVideo);
	    this.video.autobuffer = true;
	    this.video.webkitPreservesPitch = false;
	    var metadatasToLoad = new MutableInt(2);
	    this.video.addEventListener(VideoElement.LOADEDMETADATA, function (e) {
	        log.debug("videoAudio loadedmetadata autoseek=" + self.initialTime);
	        if (self.initialTime != 0) self.video.currentTime = self.initialTime;
	        if (metadatasToLoad.decrementAndGet() == 0) self.metadataLoaded = true;
	    });
	    this.videoCanplayRx = Rx.Observable.fromEvent(video, VideoElement.CANPLAY, function (e) {
	        return true;
	    });
	    this.autoDisposable(this.videoCanplayRx.subscribe(stjs.bind(this, function (e) {
	        log.debug("videoAudio canplay");
	        if (!this.quickSeek && !this.isTrickRate(this.playRateCurrent)) {
	            this.autoDisposable(Rx.Observable.timer(100).subscribe(stjs.bind(this, function (x) {
	                log.debug("videoAudio canplay showVideoAudio");
	                self.showVideoAudio();
	                if (self.video.currentTime >= self.timeline.getSeekableDurationSec()) {
	                    log.debug("lastframe");
	                }
	                this.videoShownRx.onNext(this.video);
	            })));
	        }
	    })));
	    this.timeUpdateSubjectQTP = new Rx.Subject();
	    var trickVideoUpdate = Rx.Observable.fromEvent(self.trickVideo, VideoElement.TIMEUPDATE).map(function (e) {
	        return self.trickVideo.currentTime;
	    });
	    this.autoDisposable(AbstractVideoElement.prototype.getTimeUpdateRx.call(this).merge(trickVideoUpdate).subscribe(stjs.bind(this, function (t) {
	        return this.timeUpdateSubjectQTP.onNext(t);
	    })));
	    this.trickVideoCanplayRx = Rx.Observable.fromEvent(trickVideo, VideoElement.CANPLAY, function (e) {
	        return true;
	    });
	    this.autoDisposable(this.trickVideoCanplayRx.subscribe(function (e) {
	        log.debug("trickVideo canplay");
	        if (self.isBuffered(self.video, self.trickVideo.currentTime)) {
	            log.debug("current time " + self.trickVideo.currentTime + " is already buffered in videoAudio. do not show trickVideo");
	        } else {
	            log.debug("current time " + self.trickVideo.currentTime + " is NOT buffered in videoAudio");
	            self.showTrickVideo();
	        }
	    }));
	    this.trickVideo.addEventListener(VideoElement.LOADEDMETADATA, function (e) {
	        log.debug("trickVideo loadedmetadata autoseek=" + self.initialTime);
	        if (self.initialTime != 0) self.trickVideo.currentTime = self.initialTime;
	        if (metadatasToLoad.decrementAndGet() == 0) self.metadataLoaded = true;
	    });
	    this.timeUpdateSubjectQTP.subscribe(function (e) {
	        return self.onTimeUpdate(e);
	    });
	    this.busyCheckerInterval = setInterval(stjs.bind(this, function () {
	        var vid = this.isTrickMode() && this.isTrickRate(this.playRateCurrent) ? trickVideo : video;
	        this.updateBusyStatus(vid);
	    }), 500);
	    this.autoDisposable(Rx.Observable.fromEvent(this.trickVideo, VideoElement.SEEKED).subscribe(stjs.bind(this, function (e) {
	        return this.seekTarget = null;
	    })));
	};
	DualVideoElement = stjs.extend(DualVideoElement, AbstractVideoElement, [], function (constructor, prototype) {
	    prototype.videoShownRx = null;
	    prototype.shownVideo = null;
	    prototype.trickVideo = null;
	    prototype.trickVideoCanplayRx = null;
	    prototype.videoCanplayRx = null;
	    prototype.timeUpdateSubjectQTP = null;
	    prototype.playRx = null;
	    prototype.busyCheckerInterval = null;
	    prototype.visualDebugEnabled = false;
	    prototype.visualDebugTrick = null;
	    prototype.onTimeUpdate = function (time) {
	        if (time < 0) {
	            this.pause();
	        }
	        if (time > this.timeline.getSeekableDurationSec()) {
	            this.log.debug("time " + time + " > SeekableDuration " + this.timeline.getSeekableDurationSec() + ". autoseeking.");
	            this.pause();
	            this.seek(this.lastSeekableTime());
	        }
	    };
	    prototype.lastSeekableTime = function () {
	        var seekableDurationSec = Math.max(this.timeline.getSeekableDurationSec(), 0);
	        var lastSeekableFrame = this.timeline.getFrameBySec(seekableDurationSec);
	        return this.timeline.getSecByFrame(lastSeekableFrame);
	    };
	    prototype.startQuickSeek = function () {
	        AbstractVideoElement.prototype.startQuickSeek.call(this);
	        this.switchToTrickVideo(null);
	    };
	    prototype.endQuickSeek = function () {
	        if (!this.isTrickRate(this.playRateBeforeQuickSeek)) {
	            this.video.currentTime = this.trickVideo.currentTime;
	        }
	        AbstractVideoElement.prototype.endQuickSeek.call(this);
	    };
	    prototype.seek = function (time) {
	        time = Math.min(time + 4.2E-4, this.timeline.getSeekableDurationSec());
	        if (!this.metadataLoaded) {
	            this.initialTime = time;
	            return;
	        }
	        var targetVideo = this.video;
	        this.log.debug("seek. quickSeek=" + this.quickSeek + " playRateCurrent=" + this.playRateCurrent);
	        if (this.quickSeek || this.isTrickRate(this.playRateCurrent)) {
	            this.log.debug("seeking trickVideo only");
	            targetVideo = this.trickVideo;
	        } else {
	            this.log.debug("seeking both video and trickVideo");
	        }
	        try {
	            targetVideo.currentTime = Math.min(time, this.lastSeekableTime());
	            var fn = this.getTimeline().getFrameBySec(time);
	            var fnTime = this.timeToSeekByFrame(fn);
	            this.trickVideo.currentTime = Math.min(fnTime, this.lastSeekableTime());
	        } catch (e) {
	            var buffered = targetVideo.buffered.length > 0 ? targetVideo.buffered.end(0) : -1;
	            var seekable = targetVideo.seekable.length > 0 ? targetVideo.seekable.end(0) : -1;
	            this.log.debug(targetVideo.src, buffered, seekable);
	            this.errorRx.onNext(new PlayerError("error setting currentTime", PlayerError.NONFATAL, e));
	        }
	        this.afterSeek(time);
	    };
	    prototype.implementationSpecificPlay = function () {
	        var shouldPlayInLowRes = this.isTrickRate(this.playRateCurrent);
	        this.shownVideo.pause();
	        var r = Math.abs(this.playRateCurrent);
	        if (shouldPlayInLowRes && !this.isTrickMode()) {
	            this.trickVideo.currentTime = this.video.currentTime;
	            this.switchToTrickVideo(stjs.bind(this, function () {
	                this.trickVideo.playbackRate = r;
	                this.doPlay();
	            }));
	        } else if (!shouldPlayInLowRes && this.isTrickMode()) {
	            this.video.currentTime = this.trickVideo.currentTime;
	            this.switchToVideo(stjs.bind(this, function () {
	                this.video.playbackRate = r;
	                this.doPlay();
	            }));
	        } else {
	            this.shownVideo.playbackRate = r;
	            this.doPlay();
	        }
	    };
	    prototype.switchToVideo = function (onSwitched) {
	        var self = this;
	        this.canPlay().subscribe(function (e) {
	            self.showVideoAudio();
	            if (onSwitched != null) onSwitched();
	        });
	    };
	    prototype.canPlay = function () {
	        if (this.video.readyState >= AbstractVideoElement.HAVE_ENOUGH_DATA) {
	            return Rx.Observable.just(true);
	        } else {
	            return this.videoCanplayRx.take(1);
	        }
	    };
	    prototype.canPlayTrickVideo = function () {
	        if (this.trickVideo.readyState >= AbstractVideoElement.HAVE_FUTURE_DATA) {
	            return Rx.Observable.just(true);
	        } else {
	            return this.trickVideoCanplayRx.take(1);
	        }
	    };
	    prototype.switchToTrickVideo = function (onSwitched) {
	        var self = this;
	        this.canPlayTrickVideo().subscribe(function (e) {
	            self.showTrickVideo();
	            if (onSwitched != null) onSwitched();
	        });
	    };
	    prototype.doPlay = function () {
	        var r = this.playRateCurrent;
	        var interval = 500;
	        if (r < 0) {
	            if (this.__seekBackwardsInterval != null) {
	                clearInterval(this.__seekBackwardsInterval);
	            }
	            this.__seekBackwardsInterval = setInterval(stjs.bind(this, function () {
	                if (this.isTrickRate(r)) {
	                    this.showTrickVideo();
	                }
	                try {
	                    this.backwardsPlaybackHackSeek = true;
	                    this.seek(this.getTimeSec() + r * interval / 1000.0);
	                } finally {
	                    this.backwardsPlaybackHackSeek = false;
	                }
	                this.playBackwardsRx.onNext(true);
	                if (this.getFrame() <= 0) {
	                    this.shownVideo.currentTime = 0;
	                    this.pause();
	                }
	            }), interval);
	        } else {
	            if (!this.isTrickRate(r) && this.isNotBuffered() && this.notInitialLoading() && !this.allowUnbufferedPlayback()) {
	                this.pauseUnbufferedPlayback();
	            } else {
	                setTimeout(stjs.bind(this.shownVideo, "play"), 0);
	                this.shownVideo.play();
	            }
	        }
	    };
	    prototype.close = function () {
	        AbstractVideoElement.prototype.close.call(this);
	        this.video.pause();
	        this.trickVideo.pause();
	        clearInterval(this.busyCheckerInterval);
	        this.video = null;
	        this.trickVideo = null;
	    };
	    prototype.pause = function () {
	        this.log.debug("pause");
	        if (!this.metadataLoaded || !this.isPlaying()) return;
	        this.stopBackwards();
	        this.video.pause();
	        this.video.playbackRate = 1;
	        this.trickVideo.pause();
	        this.trickVideo.playbackRate = 1;
	        this.unbufferedPause = false;
	        this.playRateCurrent = 0;
	        if (!this.quickSeek) {
	            var currentTime = this.getTimeSec();
	            var ifn = this.getTimeline().getFrameBySec(currentTime);
	            var timeByFrame = this.getTimeline().getSecByFrame(ifn);
	            var fnFrac = currentTime - timeByFrame;
	            if (fnFrac > 0.2) {
	                this.log.debug("seeking to the next frame on pause");
	                this.seekFrame(ifn + 1);
	            } else {
	                this.seekFrame(ifn);
	            }
	            this.switchToVideo(null);
	        }
	    };
	    prototype.isPlaying = function () {
	        return !this.shownVideo.paused || this.__seekBackwardsInterval != null || this.unbufferedPause;
	    };
	    prototype.getFrame = function () {
	        var video = this.isTrickMode() ? this.trickVideo : this.video;
	        return this.getTimeline().getFrameBySec(video.currentTime);
	    };
	    prototype.isBuffered = function (video, time) {
	        for (var i = 0; i < video.buffered.length; i++) {
	            if (time >= video.buffered.start(i) && time <= video.buffered.end(i)) return true;
	        }
	        return false;
	    };
	    prototype.showTrickVideo = function () {
	        this.trickVideo.classList.remove(VideoElement.VG_PLAYER_OPACITY_0);
	        this.video.classList.add(VideoElement.VG_PLAYER_OPACITY_0);
	        this.shownVideo = this.trickVideo;
	        if (!this.isTrickRate(this.playRateCurrent) && !this.quickSeek) {
	            this.busyRx.onNext(true);
	        }
	        if (this.visualDebugEnabled) {
	            this.visualDebugTrick.style.display = "";
	        }
	    };
	    prototype.showVideoAudio = function () {
	        this.video.classList.remove(VideoElement.VG_PLAYER_OPACITY_0);
	        this.trickVideo.classList.add(VideoElement.VG_PLAYER_OPACITY_0);
	        this.shownVideo = this.video;
	        this.busyRx.onNext(false);
	        if (this.visualDebugEnabled) {
	            this.visualDebugTrick.style.display = "none";
	        }
	    };
	    prototype.getVolume = function () {
	        return this.video.volume;
	    };
	    prototype.setVolume = function (v) {
	        this.video.volume = Math.min(1, Math.max(0, v));
	    };
	    prototype.getTimeSec = function () {
	        var video = this.isTrickMode() ? this.trickVideo : this.video;
	        return video.currentTime;
	    };
	    prototype.isTrickRate = function (rate) {
	        return Math.abs(rate) > 2;
	    };
	    prototype.isTrickMode = function () {
	        return this.shownVideo == this.trickVideo || this.quickSeek;
	    };
	    prototype.setLoop = function (loop) {
	        this.video.loop = loop;
	        this.trickVideo.loop = loop;
	        this.loop = loop;
	    };
	    prototype.getVideoWidth = function () {
	        var video = this.isTrickMode() ? this.trickVideo : this.video;
	        return video.videoWidth;
	    };
	    prototype.getVideoHeight = function () {
	        var video = this.isTrickMode() ? this.trickVideo : this.video;
	        return video.videoHeight;
	    };
	    prototype.getVideoShownRx = function () {
	        return this.videoShownRx;
	    };
	    prototype.getTimeUpdateRx = function () {
	        return this.timeUpdateSubjectQTP;
	    };
	    prototype.getPlayRx = function () {
	        return this.playRx;
	    };
	    prototype.visualDebug = function () {
	        this.video.classList.add("vg_player_debug_opacity_05");
	        this.trickVideo.classList.add("vg_player_debug_opacity_05");
	        this.visualDebugTrick = window.document.createElement("div");
	        this.visualDebugTrick.classList.add("vg_player_debug_trick");
	        this.visualDebugTrick.innerHTML = "trick";
	        this.visualDebugTrick.style.display = this.isTrickMode() ? "" : "none";
	        this.video.parentElement.insertBefore(this.visualDebugTrick, this.video);
	        this.visualDebugEnabled = true;
	    };
	    prototype.checkUnbufferedPlayback = function () {
	        if (this.playRateCurrent > 0 && !this.isTrickRate(this.playRateCurrent)) AbstractVideoElement.prototype.checkUnbufferedPlayback.call(this);else this.unbufferedPause = false;
	    };
	}, { videoShownRx: { name: "Rx.Subject", arguments: ["Video"] }, shownVideo: "Video", trickVideo: "Video", trickVideoCanplayRx: { name: "Rx.Observable", arguments: [null] }, videoCanplayRx: { name: "Rx.Observable", arguments: [null] }, timeUpdateSubjectQTP: { name: "Rx.Subject", arguments: [null] }, playRx: { name: "Rx.Observable", arguments: [null] }, busyCheckerInterval: "TimeoutHandler", visualDebugTrick: "Element", log: "Log", errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] }, timeline: "Timeline", video: "Video", playRx: { name: "Rx.Observable", arguments: [null] }, playBackwardsRx: { name: "Rx.Subject", arguments: [null] }, volumeChangeRx: { name: "Rx.Observable", arguments: [null] }, timeUpdateSubject: { name: "Rx.Subject", arguments: [null] }, progressSubject: { name: "Rx.Subject", arguments: [{ name: "Array", arguments: ["TimeRange"] }] }, busyRx: { name: "Rx.Subject", arguments: [null] }, autoDisposables: "Rx.CompositeDisposable", __seekBackwardsInterval: "TimeoutHandler", seekTarget: "AbstractVideoElement.SeekTarget", mediaErrors: { name: "Array", arguments: [null] }, networkStates: { name: "Array", arguments: [null] }, readyStates: { name: "Array", arguments: [null] } }, {});
	var SimpleVideoElement = function (video, timeline, log, errorRx) {
	    AbstractVideoElement.call(this, video, timeline, log, errorRx);
	    this.video.addEventListener(VideoElement.LOADEDMETADATA, stjs.bind(this, function (e) {
	        log.debug("videoAudio loadedmetadata autoseek=" + this.initialTime);
	        if (this.initialTime != 0) video.currentTime = Math.min(this.initialTime, video.duration);
	        this.metadataLoaded = true;
	    }));
	    this.videoCanplayRx = Rx.Observable.fromEvent(video, VideoElement.CANPLAY, function (e) {
	        return true;
	    });
	    this.videoShownRx = new Rx.Subject();
	    this.videoCanplayRx.subscribe(stjs.bind(this, function (e) {
	        log.debug("videoAudio canplay");
	        this.busyRx.onNext(false);
	        this.autoDisposable(Rx.Observable.timer(100).subscribe(stjs.bind(this, function (x) {
	            log.debug("videoAudio canplay showVideoAudio");
	            if (video.currentTime == video.duration) {
	                log.debug("lastframe");
	            }
	            this.videoShownRx.onNext(this.video);
	        })));
	    }));
	    this.busyCheckerInterval = setInterval(stjs.bind(this, function () {
	        this.updateBusyStatus(video);
	    }), 500);
	};
	SimpleVideoElement = stjs.extend(SimpleVideoElement, AbstractVideoElement, [], function (constructor, prototype) {
	    prototype.videoCanplayRx = null;
	    prototype.videoShownRx = null;
	    prototype.__seekBackwardsInterval = null;
	    prototype.busyCheckerInterval = null;
	    prototype.seek = function (time) {
	        time += 4.2E-4;
	        if (!this.metadataLoaded) {
	            this.initialTime = time;
	            return;
	        }
	        time = Math.min(time, this.timeline.getSeekableDurationSec());
	        try {
	            this.video.currentTime = Math.min(time, this.video.duration);
	        } catch (e) {
	            var buffered = this.video.buffered.length > 0 ? this.video.buffered.end(0) : -1;
	            var seekable = this.video.seekable.length > 0 ? this.video.seekable.end(0) : -1;
	            this.log.debug(this.video.src, buffered, seekable);
	            this.errorRx.onNext(new PlayerError("error setting currentTime", PlayerError.NONFATAL, e));
	        }
	        this.afterSeek(time);
	    };
	    prototype.implementationSpecificPlay = function () {
	        var r = this.playRateCurrent;
	        this.video.playbackRate = Math.abs(r);
	        var interval = 500;
	        if (r < 0) {
	            if (this.__seekBackwardsInterval != null) {
	                clearInterval(this.__seekBackwardsInterval);
	            }
	            this.__seekBackwardsInterval = setInterval(stjs.bind(this, function () {
	                try {
	                    this.backwardsPlaybackHackSeek = true;
	                    this.seek(this.getTimeSec() + r * interval / 1000.0);
	                } finally {
	                    this.backwardsPlaybackHackSeek = false;
	                }
	                this.playBackwardsRx.onNext(true);
	                if (this.getFrame() <= 0) {
	                    this.video.currentTime = 0;
	                    this.pause();
	                }
	            }), interval);
	        } else {
	            if (this.isNotBuffered() && this.notInitialLoading() && !this.allowUnbufferedPlayback()) {
	                this.pauseUnbufferedPlayback();
	            } else {
	                setTimeout(stjs.bind(this.video, "play"), 0);
	                this.video.play();
	            }
	        }
	    };
	    prototype.close = function () {
	        AbstractVideoElement.prototype.close.call(this);
	        this.video.pause();
	        clearInterval(this.busyCheckerInterval);
	        this.video = null;
	    };
	    prototype.pause = function () {
	        if (!this.metadataLoaded || !this.isPlaying()) return;
	        this.stopBackwards();
	        this.video.pause();
	        this.video.playbackRate = 1;
	        this.playRateCurrent = 0;
	        this.unbufferedPause = false;
	        if (!this.quickSeek) {
	            var currentTime = this.getTimeSec();
	            var ifn = this.getTimeline().getFrameBySec(currentTime);
	            var timeByFrame = this.getTimeline().getSecByFrame(ifn);
	            var fnFrac = currentTime - timeByFrame;
	            if (fnFrac > 0.2) {
	                this.log.debug("seeking to the next frame on pause");
	                this.seekFrame(ifn + 1);
	            } else {
	                this.seekFrame(ifn);
	            }
	        }
	    };
	    prototype.isPlaying = function () {
	        return !this.video.paused || this.__seekBackwardsInterval != null || this.unbufferedPause;
	    };
	    prototype.getFrame = function () {
	        var video = this.video;
	        return this.getTimeline().getFrameBySec(video.currentTime);
	    };
	    prototype.getVolume = function () {
	        return this.video.volume;
	    };
	    prototype.setVolume = function (v) {
	        this.video.volume = Math.min(1, Math.max(0, v));
	    };
	    prototype.getTimeSec = function () {
	        return this.video.currentTime;
	    };
	    prototype.getVideoWidth = function () {
	        var video = this.video;
	        return video.videoWidth;
	    };
	    prototype.getVideoHeight = function () {
	        var video = this.video;
	        return video.videoHeight;
	    };
	    prototype.getTimeline = function () {
	        return this.timeline;
	    };
	    prototype.getVideoShownRx = function () {
	        return this.videoShownRx;
	    };
	    prototype.setLoop = function (loop) {
	        this.video.loop = loop;
	        this.loop = loop;
	    };
	}, { videoCanplayRx: { name: "Rx.Observable", arguments: [null] }, videoShownRx: { name: "Rx.Subject", arguments: ["Video"] }, __seekBackwardsInterval: "TimeoutHandler", busyCheckerInterval: "TimeoutHandler", log: "Log", errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] }, timeline: "Timeline", video: "Video", playRx: { name: "Rx.Observable", arguments: [null] }, playBackwardsRx: { name: "Rx.Subject", arguments: [null] }, volumeChangeRx: { name: "Rx.Observable", arguments: [null] }, timeUpdateSubject: { name: "Rx.Subject", arguments: [null] }, progressSubject: { name: "Rx.Subject", arguments: [{ name: "Array", arguments: ["TimeRange"] }] }, busyRx: { name: "Rx.Subject", arguments: [null] }, autoDisposables: "Rx.CompositeDisposable", __seekBackwardsInterval: "TimeoutHandler", seekTarget: "AbstractVideoElement.SeekTarget", mediaErrors: { name: "Array", arguments: [null] }, networkStates: { name: "Array", arguments: [null] }, readyStates: { name: "Array", arguments: [null] } }, {});
	var TimelineUtil = function () {};
	TimelineUtil = stjs.extend(TimelineUtil, null, [], function (constructor, prototype) {
	    constructor.defaultTimeline = function () {
	        return SimpleTimeline.newSimpleTime(24000, Integer.MAX_VALUE, 1001, "00:00:00:00");
	    };
	}, {}, {});
	var RangeVideoElement = function (e) {
	    this.e = e;
	};
	RangeVideoElement = stjs.extend(RangeVideoElement, null, [VideoElement], function (constructor, prototype) {
	    prototype.e = null;
	    prototype.fromSec = 0.0;
	    prototype.toSec = 0.0;
	    prototype.fromFrame = 0;
	    prototype.toFrame = 0;
	    prototype.rangeDurationSec = 0.0;
	    prototype.rangeTimeline = null;
	    prototype.seek = function (rangeTimeSec) {
	        this.e.seek(this.fromSec + rangeTimeSec);
	    };
	    prototype.getBusyRx = function () {
	        return this.e.getBusyRx();
	    };
	    prototype.playAtRate = function (r) {
	        this.e.playAtRate(r);
	    };
	    prototype.close = function () {
	        this.e.close();
	    };
	    prototype.pause = function () {
	        this.e.pause();
	    };
	    prototype.isPlaying = function () {
	        return this.e.isPlaying();
	    };
	    prototype.getFrame = function () {
	        return this.e.getFrame() - this.fromFrame;
	    };
	    prototype.getVolume = function () {
	        return this.e.getVolume();
	    };
	    prototype.setVolume = function (v) {
	        this.e.setVolume(v);
	    };
	    prototype.getTimeSec = function () {
	        return this.e.getTimeSec() - this.fromSec;
	    };
	    prototype.getVideoWidth = function () {
	        return this.e.getVideoWidth();
	    };
	    prototype.getVideoHeight = function () {
	        return this.e.getVideoHeight();
	    };
	    prototype.getTimeline = function () {
	        return this.rangeTimeline;
	    };
	    prototype.getVideoShownRx = function () {
	        return this.e.getVideoShownRx();
	    };
	    prototype.getTimeUpdateRx = function () {
	        return this.e.getTimeUpdateRx().map(stjs.bind(this, function (realTime) {
	            return realTime - this.fromSec;
	        }));
	    };
	    prototype.getProgressRx = function () {
	        return this.e.getProgressRx();
	    };
	    prototype.forwardSec = function (n) {
	        this.e.forwardSec(n);
	    };
	    prototype.forward1 = function (n) {
	        this.e.forward1(n);
	    };
	    prototype.backward1 = function (n) {
	        this.e.backward1(n);
	    };
	    prototype.seekFrame = function (rangeFn) {
	        this.e.seekFrame(this.fromFrame + rangeFn);
	    };
	    prototype.backwardSec = function (n) {
	        this.e.backwardSec(n);
	    };
	    prototype.getPlayRate = function () {
	        return this.e.getPlayRate();
	    };
	    prototype.getTimeValue = function () {
	        return this.getTimeline().getTvByFrame(this.getFrame());
	    };
	    prototype.playFaster = function () {
	        this.e.playFaster();
	    };
	    prototype.playFasterBackwards = function () {
	        this.e.playFasterBackwards();
	    };
	    prototype.getDuration = function () {
	        return this.rangeDurationSec;
	    };
	    prototype.getSeekableDuration = function () {
	        return this.rangeDurationSec;
	    };
	    prototype.endQuickSeek = function () {
	        this.e.endQuickSeek();
	    };
	    prototype.startQuickSeek = function () {
	        this.e.startQuickSeek();
	    };
	    prototype.setInitialTime = function (initialTime) {
	        this.e.setInitialTime(this.fromSec + initialTime);
	    };
	    prototype.setLoop = function (loop) {
	        this.e.setLoop(loop);
	    };
	    prototype.setPauseOnLoop = function (pauseOnLoop) {
	        this.e.setPauseOnLoop(pauseOnLoop);
	    };
	    prototype.hasRange = function () {
	        return this.e.hasRange();
	    };
	    prototype.inRange = function (fn) {
	        var totalFrames = this.toFrame - this.fromFrame;
	        return fn >= 0 && fn < totalFrames;
	    };
	    prototype.setRange = function (fromFrame, toFrame) {
	        this.fromFrame = fromFrame;
	        this.toFrame = toFrame;
	        this.fromSec = this.e.getTimeline().getSecByFrame(fromFrame);
	        this.toSec = this.e.getTimeline().getSecByFrame(toFrame);
	        this.rangeDurationSec = this.e.getTimeline().getSecByFrame(toFrame - fromFrame + 1);
	        var realTimeline = this.e.getTimeline();
	        var frameDurationTv = this.hackFrameDurationTv(realTimeline);
	        var rangeStartTimecode = realTimeline.getTapeByFrame(fromFrame);
	        var rangeTimeline = SimpleTimeline.newSimpleTime(realTimeline.getTimeScale(), toFrame - fromFrame + 1, frameDurationTv, rangeStartTimecode);
	        this.rangeTimeline = rangeTimeline;
	        this.e.setRange(fromFrame, toFrame);
	    };
	    prototype.hackFrameDurationTv = function (realTimeline) {
	        var tvByFrame0 = realTimeline.getTvByFrame(0);
	        var tvByFrame1 = realTimeline.getTvByFrame(1);
	        var frameDurationTv = stjs.trunc(tvByFrame1 - tvByFrame0);
	        return frameDurationTv;
	    };
	    prototype.cancelRange = function () {
	        this.e.cancelRange();
	    };
	    prototype.getPlayRx = function () {
	        return this.e.getPlayRx();
	    };
	    prototype.getVolumeChangeRx = function () {
	        return this.e.getVolumeChangeRx();
	    };
	    prototype.setCrossOrigin = function (type) {
	        this.e.setCrossOrigin(type);
	    };
	    prototype.setResetPlayRateOnSeek = function (reset) {
	        this.e.setResetPlayRateOnSeek(reset);
	    };
	    prototype.getBuffered = function () {
	        return this.e.getBuffered();
	    };
	}, { e: "VideoElement", rangeTimeline: "Timeline", mediaErrors: { name: "Array", arguments: [null] }, networkStates: { name: "Array", arguments: [null] }, readyStates: { name: "Array", arguments: [null] } }, {});
	var ProxyLoader = function (http, log) {
	    this.http = http;
	    this.log = log;
	};
	ProxyLoader = stjs.extend(ProxyLoader, null, [], function (constructor, prototype) {
	    prototype.http = null;
	    prototype.log = null;
	    constructor.AUDIOTYPE_WAVS = "wavs";
	    constructor.AUDIOTYPE_MP3 = "mp3";
	    constructor.AUDIOTYPE_MUXED = "muxed";
	    prototype.loadAudioRx = function (serverUrl, proxyId) {
	        return this.http.getJson(serverUrl + "/" + proxyId + "/audio.js", AudioInfo).flatMapObserver(stjs.bind(this, function (audioInfo, idx) {
	            var dashStream;
	            if (ProxyLoader.AUDIOTYPE_WAVS.equals(audioInfo.audioType)) {
	                dashStream = new Mp3MixSegmentedAudioStream(this.http, serverUrl, proxyId, audioInfo);
	            } else if (ProxyLoader.AUDIOTYPE_MP3.equals(audioInfo.audioType)) {
	                var dataSrc = new HttpDataSrc(this.http, serverUrl + "/" + proxyId + "/audio.mp3");
	                dashStream = new Mp3SegmentedAudioStream(proxyId, audioInfo.sampleRate, audioInfo.totalSamples, dataSrc);
	            } else {
	                return Rx.Observable.throw("unknown audioType " + audioInfo.audioType);
	            }
	            if (Utils.isFirefox || Utils.isSafari) {
	                dashStream = new M4SMp3SegmentedStream(dashStream);
	            }
	            dashStream.setAudioInfo(audioInfo);
	            return Rx.Observable.just(dashStream);
	        }), function (req) {
	            if (req.status == 404) {
	                return Rx.Observable.empty();
	            } else {
	                return Rx.Observable.throw(req);
	            }
	        }, function () {
	            return Rx.Observable.empty();
	        });
	    };
	    prototype.loadAudio = function (serverUrl, proxyId, callback) {
	        this.loadAudioRx(serverUrl, proxyId).subscribe(function (dash) {
	            return callback(null, dash);
	        }, function (err) {
	            return callback(err, null);
	        });
	    };
	    prototype.loadProxyRx = function (serverUrl, proxyId) {
	        var create = Rx.Observable.create(stjs.bind(this, function (observer) {
	            this.loadProxy(serverUrl, proxyId, function (err, proxy) {
	                if (err == null) {
	                    observer.onNext(proxy);
	                    observer.onCompleted();
	                } else {
	                    observer.onError(err);
	                }
	            });
	        }));
	        return create;
	    };
	    prototype.loadProxies = function (serverUrl, proxyIds) {
	        var proxies = {};
	        return Rx.Observable.from(proxyIds).flatMap(stjs.bind(this, function (proxyId) {
	            return this.loadProxyRx(serverUrl, proxyId);
	        })).reduce(function (accu, proxy) {
	            accu[proxy.proxyId] = proxy;
	            return accu;
	        }, proxies);
	    };
	    constructor.DASH_FULLRES = "stream-0";
	    constructor.DASH_LOWRES = "stream-1";
	    constructor.USE_JS_DASHIFY = true;
	    prototype.loadProxy = function (serverUrl, proxyId, callback) {
	        this.log.debug("loadProxy " + serverUrl, proxyId);
	        var results = {};
	        var video = this.dashifyFirstTrack(serverUrl + "/" + proxyId + "/video.mov").doOnNext(function (d) {
	            return results["video"] = d;
	        });
	        var thumbshq = this.dashifyFirstTrack(serverUrl + "/" + proxyId + "/thumbshq.mov").doOnNext(function (d) {
	            return results["thumbshq"] = d;
	        });
	        var audio = this.loadAudioRx(serverUrl, proxyId).doOnNext(function (d) {
	            return results["audio"] = d;
	        });
	        var merge = Rx.Observable.merge(video, thumbshq);
	        var gotProxyCallback = function () {
	            var proxy = new Proxy();
	            proxy.proxyId = proxyId;
	            proxy.video = results["video"];
	            proxy.thumbshq = results["thumbshq"];
	            var audioStream = results["audio"];
	            if (audioStream != null) {
	                proxy.audio = audioStream;
	                proxy.audioInfo = audioStream.audioInfo;
	            }
	            callback(null, proxy);
	        };
	        merge.subscribe(stjs.bind(this, function (onNext) {
	            this.log.debug("loaded", onNext);
	        }), stjs.bind(this, function (errorRequest) {
	            audio.subscribe(stjs.bind(this, function (o) {
	                this.log.debug("Got audio");
	            }), function (onError) {
	                callback(onError, null);
	            }, function () {
	                gotProxyCallback();
	            });
	        }), stjs.bind(this, function () {
	            audio.subscribe(stjs.bind(this, function (ok) {
	                this.log.debug("Got audio");
	            }), function (onError) {
	                gotProxyCallback();
	            }, function () {
	                gotProxyCallback();
	            });
	        }));
	    };
	    prototype.dashify = function (url, callback) {
	        this.dashifyFirstTrack(url).subscribe(function (DashStream) {
	            return callback(null, DashStream);
	        }, function (err) {
	            return callback(err, null);
	        });
	    };
	    prototype.createDashStreamFromMp4 = function (dataSrc, mp4Box, track) {
	        return Rx.Observable.create(stjs.bind(this, function (observer) {
	            var dashified = MovDasher.dashify(mp4Box, track, this.log);
	            var desc = new DashDescriptor();
	            desc.dynamic = false;
	            desc.timescale = dashified.timescale;
	            desc.codecs = dashified.codecs;
	            desc.mimeType = dashified.mimeType;
	            desc.duration = dashified.duration;
	            desc.segmentStartTv = dashified.segmentStartTv;
	            desc.channelConfig = dashified.channelConfig;
	            if (dashified.startTimecodeOffset == -1) {
	                desc.timecode = "00:00:00:00";
	                var stream = new DashifiedMp4SegmentedVideoStream(dashified.moovbuf, dashified.segments, dataSrc, desc, dashified.sampleDuration);
	                observer.onNext(stream);
	                observer.onCompleted();
	            } else {
	                dataSrc.fetch(dashified.startTimecodeOffset, dashified.startTimecodeOffset + 4, function (buf) {
	                    var dv = new DataView(buf);
	                    var tc = stjs.trunc(dv.getUint32(0, false));
	                    var rate = stjs.trunc(Math.round(desc.timescale / dashified.sampleDuration));
	                    desc.timecode = new TapeTimecode(dashified.dropFrame, tc, rate).getTimecodeAtFrame(0);
	                    var stream = new DashifiedMp4SegmentedVideoStream(dashified.moovbuf, dashified.segments, dataSrc, desc, dashified.sampleDuration);
	                    observer.onNext(stream);
	                    observer.onCompleted();
	                }, function (err) {
	                    observer.onError(new PlayerError("error loading start time code", PlayerError.FATAL, err, dataSrc));
	                });
	            }
	        }));
	    };
	    prototype.dashifyMp4 = function (url) {
	        return Rx.Observable.create(stjs.bind(this, function (observer) {
	            var streams = new Mp4Streams();
	            streams.audio = [];
	            var dataSrc = new HttpDataSrc(this.http, url);
	            Mp4Loader.loadMp4(dataSrc, stjs.bind(this, function (mp4Box) {
	                var trackRx = Rx.Observable.empty();
	                var videoTracks = mp4Box.getInfo().videoTracks;
	                if (videoTracks.length != 0) {
	                    if (MovDasher.hasBFrames(mp4Box, videoTracks[0].id)) {
	                        observer.onError(new ProxyLoader.BFramesException());
	                        return;
	                    }
	                    trackRx = Rx.Observable.merge(trackRx, Rx.Observable.create(stjs.bind(this, function (o) {
	                        this.createDashStreamFromMp4(dataSrc, mp4Box, videoTracks[0].id).subscribe(function (videoTrack) {
	                            streams.video = videoTrack;
	                            MovDasher.parseTimePackets(mp4Box, dataSrc, function (pkts) {
	                                streams.timeline = new BoundedTimeline(new MP4Timeline(pkts));
	                                o.onNext(videoTrack);
	                                o.onCompleted();
	                            }, stjs.bind(o, "onError"));
	                        });
	                    })));
	                }
	                var audioTracks = mp4Box.getInfo().audioTracks;
	                for (var i = 0; i < audioTracks.length; i++) {
	                    var audioTrackRx = this.createDashStreamFromMp4(dataSrc, mp4Box, audioTracks[i].id).map(function (stream) {
	                        return ProxyLoader.createAudioDashStream(stream, url);
	                    }).doOnNext(stjs.bind(streams.audio, "push"));
	                    trackRx = Rx.Observable.merge(trackRx, audioTrackRx);
	                }
	                trackRx.doOnCompleted(function () {
	                    observer.onNext(streams);
	                    observer.onCompleted();
	                }).doOnError(stjs.bind(observer, "onError")).subscribe();
	            }), function (err) {
	                observer.onError(new PlayerError("error converting mov", PlayerError.FATAL, err, url));
	            });
	        }));
	    };
	    prototype.dashifyFirstTrack = function (url) {
	        return Rx.Observable.create(stjs.bind(this, function (observer) {
	            var dataSrc = new HttpDataSrc(this.http, url);
	            Mp4Loader.loadMp4(dataSrc, stjs.bind(this, function (mp4Box) {
	                this.createDashStreamFromMp4(dataSrc, mp4Box, 1).subscribe(function (x) {
	                    observer.onNext(x);
	                    observer.onCompleted();
	                }, stjs.bind(observer, "onError"));
	            }), function (err) {
	                observer.onError(new PlayerError("error converting mov", PlayerError.FATAL, err, url));
	            });
	        }));
	    };
	    constructor.createAudioDashStream = function (dashStream, url) {
	        var stream = new M4ASegmentedStream(dashStream);
	        var audioInfo = new AudioInfo();
	        audioInfo.audioType = ProxyLoader.AUDIOTYPE_MUXED;
	        audioInfo.channelLabels = AudioInfo.AAC_CHANNEL_CONFIGS[stream.getChannelConfig()];
	        audioInfo.channelCount = audioInfo.channelLabels.length;
	        audioInfo.sampleRate = stream.sampleRate;
	        audioInfo.totalSamples = stream.totalSamples;
	        audioInfo.waveformPreviews = [];
	        stream.audioInfo = audioInfo;
	        stream.proxyId = url;
	        return stream;
	    };
	    prototype.loadAudioFromM4a = function (url) {
	        return this.dashifyFirstTrack(url).map(function (stream) {
	            return ProxyLoader.createAudioDashStream(stream, url);
	        });
	    };
	    prototype.mpdFromUrl = function (mpdUrl) {
	        var xml = this.xmlWithDynamicUpdates(mpdUrl);
	        return this.mpdFromXml(xml);
	    };
	    prototype.mpdFromXml = function (xml) {
	        var streams = this.streamsFromXml(xml);
	        return this.mpdFromStreams(streams);
	    };
	    prototype.mpdFromStreams = function (streams) {
	        var mpd = new MPDStreams();
	        var mpdStreamsObservable = RxUtil.doOnFirst(streams, function (_streams) {
	            mpd.video = _streams.video;
	            mpd.thumbshq = _streams.thumbshq;
	            mpd.thumbs = _streams.thumbs;
	            mpd.audio = _streams.audio;
	        }).doOnNext(function (_streams) {
	            if (mpd.video != null) {
	                mpd.video.updateFrom(_streams.video);
	            }
	            if (mpd.thumbshq != null) {
	                mpd.thumbshq.updateFrom(_streams.thumbshq);
	            }
	            if (mpd.thumbs != null) {
	                mpd.thumbs.updateFrom(_streams.thumbs);
	            }
	            if (mpd.audio != null) {
	                mpd.audio.updateFrom(_streams.audio);
	            }
	        });
	        return RxUtil.firstOutIgnoreNext(mpdStreamsObservable);
	    };
	    prototype.xmlWithDynamicUpdates = function (mpdUrl) {
	        var defaultBaseURL = mpdUrl.substring(0, mpdUrl.lastIndexOf("/") + 1);
	        var currentUrl = [mpdUrl];
	        var periodicReq = Rx.Observable.timer(0, 1000).concatMap(stjs.bind(this, function (_x) {
	            return this.http.getWithUrlFunc(function () {
	                return currentUrl[0] + "?time=" + Utils.currentTimeMillis();
	            });
	        })).flatMap(stjs.bind(this, function (xmlString) {
	            try {
	                return Rx.Observable.just(MPDXml.fromString(xmlString, defaultBaseURL, this.log));
	            } catch (e) {
	                return Rx.Observable.throw(new PlayerError("can not parse MPD", PlayerError.FATAL, e));
	            }
	        })).doOnNext(function (m) {
	            var newUrl = m.getLocation();
	            if (newUrl != null) {
	                currentUrl[0] = newUrl;
	            }
	        }).retryWhen(RetryWithDelay.create(5, 1000)).flatMapObserver(function (m, i) {
	            return Rx.Observable.just(m);
	        }, function (err) {
	            return Rx.Observable.throw(new PlayerError("can not load mpd", PlayerError.FATAL, err));
	        }, Rx.Observable.empty);
	        return RxUtil.takeWhileWithFinalValue(periodicReq, function (mpdXml) {
	            return mpdXml.isDynamic();
	        });
	    };
	    prototype.loadAudioFromMpd = function (mpdUrl) {
	        var audioStream = this.mpdFromUrl(mpdUrl).flatMap(function (_streams) {
	            if (_streams.audio == null) {
	                return Rx.Observable.throw("no audio representations found in " + mpdUrl);
	            }
	            return Rx.Observable.just(_streams.audio);
	        });
	        return audioStream;
	    };
	    prototype.streamsFromXml = function (mpdXmlObservable) {
	        return mpdXmlObservable.map(stjs.bind(this, function (xml) {
	            var videoRepIds = xml.getVideoRepresentationIds();
	            var audioRepIds = xml.getAudioRepresentationIds();
	            var thumbsIds = videoRepIds.filter(function (id, idx, arr) {
	                return xml.getDashDescriptor(id).height == 80;
	            });
	            var thumbsHqIds = videoRepIds.filter(function (id, idx, arr) {
	                return xml.getDashDescriptor(id).width == 512;
	            });
	            var hiResRepId = videoRepIds.sort(function (id1, id2) {
	                return xml.getDashDescriptor(id2).height - xml.getDashDescriptor(id1).height;
	            })[0];
	            var loResRepId = thumbsHqIds.length > 0 ? thumbsHqIds[0] : null;
	            var thumbsRepId = thumbsIds.length > 0 ? thumbsIds[0] : null;
	            var audioRepId = audioRepIds.length > 0 ? audioRepIds[0] : null;
	            var audioStream = this.audioStreamFromXml(xml, audioRepId);
	            var hiResStream = this.videoStreamFromXml(xml, hiResRepId);
	            var loResStream = this.videoStreamFromXml(xml, loResRepId);
	            var thumbsStream = this.videoStreamFromXml(xml, thumbsRepId);
	            var mpdStreams = new MPDStreams();
	            mpdStreams.video = hiResStream;
	            mpdStreams.thumbshq = loResStream;
	            mpdStreams.thumbs = thumbsStream;
	            mpdStreams.audio = audioStream;
	            var streamIds = [hiResRepId, loResRepId, thumbsRepId, audioRepId];
	            mpdStreams.drmInfo = xml.getDrmInfo().filter(function (d, i, a) {
	                return streamIds.indexOf(d.streamId) != -1;
	            });
	            return mpdStreams;
	        }));
	    };
	    prototype.videoStreamFromXml = function (xml, representationId) {
	        if (representationId == null) return null;
	        var segmentUrls = xml.getSegmentUrls(representationId);
	        var desc = xml.getDashDescriptor(representationId);
	        var vgTotalDuration = xml.getVgTotalDuration(desc.timescale);
	        if (vgTotalDuration == null) {
	            vgTotalDuration = desc.duration;
	        }
	        return new MPDSegmentedVideoStream(representationId, this.http, segmentUrls, desc, vgTotalDuration, this.log);
	    };
	    prototype.audioStreamFromXml = function (xml, representationId) {
	        if (representationId == null) return null;
	        var audioSegmentUrls;
	        var audioDesc;
	        var audioStream;
	        var audioInfo;
	        audioSegmentUrls = xml.getSegmentUrls(representationId);
	        audioDesc = xml.getDashDescriptor(representationId);
	        audioStream = new MPDSegmentedAudioStream(representationId, this.http, audioSegmentUrls, audioDesc, this.log);
	        audioInfo = new AudioInfo();
	        audioInfo.audioType = ProxyLoader.AUDIOTYPE_MUXED;
	        audioInfo.channelLabels = AudioInfo.AAC_CHANNEL_CONFIGS[xml.getChannelConfiguration(representationId)];
	        audioInfo.channelCount = audioInfo.channelLabels.length;
	        audioInfo.sampleRate = audioStream.sampleRate;
	        audioInfo.totalSamples = audioStream.totalSamples;
	        audioInfo.waveformPreviews = [];
	        audioStream.audioInfo = audioInfo;
	        return audioStream;
	    };
	    constructor.BFramesException = function () {
	        RuntimeException.call(this);
	    };
	    constructor.BFramesException = stjs.extend(constructor.BFramesException, RuntimeException, [], null, {}, {});
	}, { http: "Http", log: "Log" }, {});
	var Captions = function () {};
	Captions = stjs.extend(Captions, null, [], function (constructor, prototype) {
	    constructor.offsetCaptions = function (captions, offsetTv, timeline) {
	        var offsetMsec = timeline.getMillisByTv(offsetTv);
	        captions.rows.forEach(function (row) {
	            return Captions.offsetRow(offsetTv, timeline, offsetMsec, row);
	        });
	    };
	    constructor.offsetRow = function (offsetTv, timeline, offsetMsec, row) {
	        row.startTv = Math.max(0, row.startTv + offsetTv);
	        row.endTv = Math.max(0, row.endTv + offsetTv);
	        row.startMsec = Math.max(0, row.startMsec + offsetMsec);
	        row.endMsec = Math.max(0, row.endMsec + offsetMsec);
	        row.timeCodeIn = timeline.getTapeByTv(row.startTv);
	        row.timeCodeOut = timeline.getTapeByTv(row.endTv);
	    };
	    constructor.CODEC_C890 = "c890";
	    constructor.CODEC_DCSUBS = "dcsubs";
	    constructor.CODEC_EBU = "ebu";
	    constructor.CODEC_STL = "stl";
	    constructor.CODEC_SRT = "srt";
	    constructor.CODEC_WEBVTT = "webvtt";
	    constructor.guessSubtitleCodec = function (url) {
	        if (url.endsWith("stl")) {
	            return Captions.CODEC_STL;
	        } else if (url.endsWith("srt")) {
	            return Captions.CODEC_SRT;
	        } else if (url.endsWith("vtt")) {
	            return Captions.CODEC_WEBVTT;
	        } else if (url.endsWith("890")) {
	            return Captions.CODEC_C890;
	        } else if (url.endsWith("xml")) {
	            return Captions.CODEC_DCSUBS;
	        }
	        return "unknown";
	    };
	    constructor.parseSubs = function (time, url, codec, callback, logLevel) {
	        if (logLevel == null) logLevel = LogLevel.INFO;
	        var log = new Log(logLevel);
	        var http = new Http(log);
	        var timeline = time != null ? time : TimelineUtil.defaultTimeline();
	        var subtitles;
	        switch (codec) {
	            case Captions.CODEC_EBU:
	            case Captions.CODEC_STL:
	                subtitles = http.getArrayBuffer(url).map(function (subsBuf) {
	                    return EbuSubs.parse(subsBuf, timeline, log);
	                });
	                break;
	            case Captions.CODEC_DCSUBS:
	                subtitles = http.get(url).flatMap(function (str) {
	                    return DCSubs.parse(str, timeline);
	                });
	                break;
	            case Captions.CODEC_SRT:
	            case Captions.CODEC_WEBVTT:
	                subtitles = http.get(url).flatMap(function (str) {
	                    return SRTParser.parse(str, timeline);
	                });
	                break;
	            case Captions.CODEC_C890:
	                subtitles = http.getArrayBuffer(url).map(function (subsBuf) {
	                    return Cavena890.parse(subsBuf, timeline, log);
	                });
	                break;
	            default:
	                callback("unknown codec " + codec, null);
	                return;
	        }
	        subtitles.subscribe(function (subs) {
	            subs.title = url.split("/").pop();
	            callback(null, subs);
	        }, function (err) {
	            return callback(err, null);
	        });
	    };
	    constructor.probe = function (codec, data, logLevel) {
	        if (logLevel == null) logLevel = LogLevel.INFO;
	        var log = new Log(logLevel);
	        switch (codec) {
	            case Captions.CODEC_EBU:
	                return EbuSubs.probe(data, log);
	            case Captions.CODEC_DCSUBS:
	                return DCSubs.probe(data);
	            case Captions.CODEC_C890:
	                return Cavena890.probe(data);
	            default:
	                return -1;
	        }
	    };
	}, {}, {});
	var PlayerImpl = function (container, options) {
	    this.options = this.defaultOptions(options);
	    this.log = new Log(this.options.logLevel);
	    this.errorRx = new Rx.Subject();
	    this.errorRx.subscribe(stjs.bind(this.log, "error"));
	    this.container = container;
	    if (this.container.getAttribute("tabindex") == null) {
	        this.container.setAttribute("tabindex", "0");
	    }
	    this.view = this.createView();
	    this.eventListeners = {};
	    this.autoDisposables = new Rx.CompositeDisposable();
	    this.initialized = false;
	    this.initRx = new Rx.Subject();
	    this.http = new Http(this.log);
	    this.http.setWithCredentials(this.options.allowCrossSiteCredentials);
	    this.http.setQueryParams(this.options.queryParams);
	};
	PlayerImpl = stjs.extend(PlayerImpl, null, [VGPlayerPluginApi], function (constructor, prototype) {
	    constructor.FULL_RES = "fullres";
	    constructor.LOW_RES = "lowres";
	    constructor.RANGE_AUTO_CANCEL = false;
	    prototype.log = null;
	    prototype.container = null;
	    prototype.options = null;
	    prototype.http = null;
	    prototype.view = null;
	    prototype.videoSrcHiRes = null;
	    prototype.videoSrcLowRes = null;
	    prototype.videoSrcTrick = null;
	    prototype.cutList = null;
	    prototype.cutListLowRes = null;
	    prototype.captionsList = null;
	    prototype.videoElement = null;
	    prototype.originalVideoElement = null;
	    prototype.initialized = false;
	    prototype.audioTracksRx = null;
	    prototype.audioTracks = null;
	    prototype.captionListChangeRx = null;
	    prototype.pluginRx = null;
	    prototype.cutsRx = null;
	    prototype.currentVideoStream = null;
	    /**
	     *  WARN: only expose Observable, not Subject to outside classes
	     */
	    prototype.timeUpdateRx = null;
	    prototype.progressRx = null;
	    prototype.timelineRx = null;
	    prototype.timelineSubscription = null;
	    prototype.audioHandlerRx = null;
	    prototype.captionHandlerRx = null;
	    prototype.changingVideoSrc = false;
	    prototype.currentVideoSrc = null;
	    prototype.initRx = null;
	    prototype.seekableDurationUpdaterSubscription = null;
	    prototype.currentAudioTrack = null;
	    prototype.eventListeners = null;
	    prototype.filmStripDrawerRx = null;
	    prototype.autoDisposables = null;
	    prototype.playRateBeforePause = 1;
	    prototype.proxyType = null;
	    prototype.errorRx = null;
	    prototype.drm = null;
	    prototype.fairplay = null;
	    prototype.createView = function () {
	        return new SkinlessPlayerView(this.container, this.log);
	    };
	    prototype.getView = function () {
	        return this.view;
	    };
	    prototype.defaultOptions = function (opts) {
	        if (opts == null) opts = new PlayerOptions();
	        if (opts.plugins == null) opts.plugins = new Array();
	        if (opts.logLevel == null) opts.logLevel = LogLevel.INFO;
	        return opts;
	    };
	    prototype.getOptions = function () {
	        return this.options;
	    };
	    prototype.getHttp = function () {
	        return this.http;
	    };
	    prototype.getLog = function () {
	        return this.log;
	    };
	    prototype.setLogLevel = function (logLevel) {
	        this.log.setLevel(logLevel);
	    };
	    prototype.isLive = function () {
	        switch (this.proxyType) {
	            case ProxyType.DASH:
	                return this.currentVideoStream != null && this.currentVideoStream.isDynamic() || this.currentAudioTrack != null && this.currentAudioTrack.dashStream.isDynamic();
	            case ProxyType.HLS:
	                var tl = this.getTimeline().originalTimeline();
	                return tl.isLive();
	            default:
	                return false;
	        }
	    };
	    prototype.init = function () {
	        this.videoSrcHiRes = null;
	        this.videoSrcLowRes = null;
	        this.videoSrcTrick = null;
	        this.cutList = [];
	        this.cutListLowRes = [];
	        this.audioTracks = [];
	        this.captionsList = [];
	        this.videoElement = null;
	        this.timelineRx = new Rx.Subject();
	        this.timeUpdateRx = new Rx.Subject();
	        this.progressRx = new Rx.Subject();
	        this.audioTracksRx = new Rx.ReplaySubject();
	        this.audioHandlerRx = new Rx.Subject();
	        this.captionHandlerRx = new Rx.Subject();
	        this.cutsRx = new Rx.ReplaySubject();
	        this.pluginRx = new Rx.ReplaySubject();
	        this.captionListChangeRx = new Rx.ReplaySubject();
	        this.filmStripDrawerRx = new Rx.ReplaySubject(1);
	        this.drm = null;
	        this.fairplay = null;
	        this.initialized = true;
	    };
	    prototype.close = function () {
	        this.autoDisposables.dispose();
	        this.autoDisposables = new Rx.CompositeDisposable();
	        if (this.initialized) {
	            if (this.videoElement != null) this.videoElement.close();
	            if (this.videoSrcHiRes != null) this.videoSrcHiRes.detach();
	            if (this.videoSrcLowRes != null) this.videoSrcLowRes.detach();
	            if (this.videoSrcTrick != null) this.videoSrcTrick.detach();
	            if (this.drm != null) this.drm.close();
	            if (this.fairplay != null) this.fairplay.close();
	            this.timelineRx.onCompleted();
	            if (this.timelineSubscription != null) {
	                this.timelineSubscription.dispose();
	            }
	            this.timeUpdateRx.onCompleted();
	            this.progressRx.onCompleted();
	            this.audioTracksRx.onCompleted();
	            this.audioHandlerRx.onCompleted();
	            this.captionHandlerRx.onCompleted();
	            this.cutsRx.onCompleted();
	            this.pluginRx.onCompleted();
	            this.getCaptionListChangeRx().onCompleted();
	            this.removeAllEventListeners();
	            this.view.close();
	            this.view.initPlayerContainer();
	            this.initialized = false;
	        }
	    };
	    prototype.addCaptionsHandler = function (cb) {
	        this.captionHandlerRx.onNext(cb);
	    };
	    prototype.audioAddHandler = function (cb) {
	        this.audioHandlerRx.onNext(cb);
	    };
	    prototype.addCaptionsObject = function (captions) {
	        if (captions != null && captions.id == null) {
	            do {
	                captions.id = PlayerUtils.randomString();
	            } while (this.captionsList.some(function (c, i, a) {
	                return c.id == captions.id;
	            }));
	        }
	        this.captionsList.push(captions);
	        this.getCaptionListChangeRx().onNext(captions);
	    };
	    prototype.addCaptions = function (input) {
	        if (input != null) {
	            this.addCaptionsObject(input);
	        }
	    };
	    prototype.load = function (url, onDone) {
	        if (this.options.serverUrl == null || this.options.staticVideoSrc || this.isUrl(url)) {
	            this.loadUrl(url, function (err) {
	                return PlayerImpl.invoke1(onDone, err);
	            });
	        } else {
	            var cutList = new Array();
	            var split = url.split(",");
	            for (var i = 0; i < split.length; i++) {
	                cutList.push(PlayerCut.fromProxyId(split[i]));
	            }
	            this.loadCutList(cutList, onDone);
	        }
	    };
	    prototype.isUrl = function (url) {
	        return new RegExp("^(http|https|ftp|file)://", "i").test(url);
	    };
	    prototype.loadUrl = function (url, onDone) {
	        this.close();
	        this.init();
	        var sourceUpdates = this.determineMimeType(url).flatMapObserver(stjs.bind(this, function (mime, idx) {
	            this.log.debug(mime);
	            var o;
	            switch (mime.toLowerCase()) {
	                case "application/xml":
	                case "application/dash+xml":
	                    o = this.loadMPD(url);
	                    break;
	                case "application/x-mpegurl":
	                case "application/vnd.apple.mpegurl":
	                    o = this.loadHLS(url);
	                    break;
	                case "video/mp4":
	                case "video/quicktime":
	                case "audio/mp4":
	                case "audio/x-m4a":
	                    o = this.loadMp4WithAudio(url).flatMapObserver(function (b, idx1) {
	                        return Rx.Observable.just(b);
	                    }, stjs.bind(this, function (err) {
	                        if (stjs.isInstanceOf(err.constructor, ProxyLoader.BFramesException)) {
	                            this.log.warn("video contains B-frames. Trying loadMp4");
	                            return this.loadMp4(url);
	                        } else {
	                            this.log.warn("Failed loading mp4 (", err, "). Trying loadGeneric");
	                            return this.loadGeneric(url);
	                        }
	                    }), Rx.Observable.empty);
	                    break;
	                default:
	                    this.log.warn("unsupported mime type", mime);
	                    o = Rx.Observable.throw(new PlayerError("unsupported mime type " + mime, PlayerError.FATAL));
	            }
	            return o;
	        }), stjs.bind(this, function (err) {
	            if (err == 0) {
	                return this.loadGeneric(url);
	            } else {
	                return Rx.Observable.throw(new PlayerError("can not determine mime type. response code = " + err, PlayerError.FATAL));
	            }
	        }), Rx.Observable.empty);
	        var subscribe = RxUtil.doOnFirst(sourceUpdates, stjs.bind(this, function (x) {
	            if (onDone != null) {
	                try {
	                    onDone(null);
	                } catch (e) {
	                    this.log.error("error in user's callback " + e);
	                    this.errorRx.onNext(new PlayerError("error in user's event listener " + e, PlayerError.NONFATAL));
	                }
	            }
	        })).subscribe(function (x) {}, stjs.bind(this, function (err) {
	            this.errorRx.onNext(err);
	            if (onDone != null) {
	                onDone(err);
	            }
	        }));
	        this.autoDisposable(subscribe);
	    };
	    prototype.focus = function () {
	        this.container.focus();
	    };
	    prototype.determineMimeType = function (url) {
	        var mimeType = this.mimeTypeByExtension(url);
	        if (mimeType != null) {
	            return Rx.Observable.just(mimeType);
	        } else {
	            return Rx.Observable.create(function (observer) {
	                var http = new XMLHttpRequest();
	                http.open("GET", url, true);
	                http.setRequestHeader("Range", "bytes=0-0");
	                http.onreadystatechange = function () {
	                    if (http.readyState == 4) {
	                        if (http.status >= 200 && http.status < 400) {
	                            try {
	                                var contentType = http.getResponseHeader("Content-Type");
	                                observer.onNext(contentType.replaceAll("[\\s;]+.*", ""));
	                                observer.onCompleted();
	                            } catch (e) {
	                                observer.onError(http.status);
	                            }
	                        } else if (http.status >= 400) {
	                            observer.onError(http.status);
	                        } else {
	                            observer.onError(0);
	                        }
	                    }
	                };
	                http.send();
	                return stjs.bind(http, "abort");
	            });
	        }
	    };
	    prototype.mimeTypeByExtension = function (url) {
	        if (url.indexOf('?') != -1) {
	            url = url.substring(0, url.indexOf('?'));
	        }
	        if (url.indexOf('/') != -1) {
	            url = url.substring(url.lastIndexOf('/') + 1);
	        }
	        if (url.indexOf('.') != -1) {
	            var ext = url.substring(url.lastIndexOf('.'));
	            switch (ext.toLowerCase()) {
	                case ".mp4":
	                case ".mov":
	                    return "video/mp4";
	                case ".mpd":
	                    return "application/dash+xml";
	                case ".m3u8":
	                    return "application/x-mpegURL";
	            }
	        }
	        return null;
	    };
	    prototype.loadHLS = function (url) {
	        this.proxyType = ProxyType.HLS;
	        if (!Utils.isSafari) {
	            return Rx.Observable.throw(new PlayerError("HLS is not supported in this browser.", PlayerError.FATAL));
	        }
	        var m3u8 = this.loadHLSPlaylist(url).flatMap(stjs.bind(this, function (hls) {
	            var variants = hls.getVariantList();
	            if (hls.getMediaList().length == 0 && variants.length == 0) {
	                return Rx.Observable.throw(new PlayerError("Empty HLS. Neither media nor stream variants are present.", PlayerError.FATAL));
	            }
	            if (variants.length > 0) {
	                var variantUri = variants[0].uri;
	                variantUri = Utils.toAbsoluteUri(url, variantUri);
	                return this.loadHLSPlaylist(variantUri);
	            }
	            return Rx.Observable.just(hls);
	        }));
	        return m3u8.flatMap(stjs.bind(this, function (hls) {
	            if (this.options.drm != null && this.options.drm.fairplay != null) {
	                this.fairplay = new Fairplay(this.view.video, this.options.drm.fairplay, this.log, this.errorRx);
	            }
	            if (hls.hasEndList()) {
	                return this.loadGeneric(url);
	            } else {
	                this.log.info("load live hls timeupdates", hls.uri);
	                var timeline = HLSTimeline.liveUpdateHLSTime(this.http, hls.uri, hls, this.log, this.errorRx);
	                this.videoSrcHiRes = new StaticVideoSrc(url, this.errorRx);
	                var cut = new PlayerCut(null, 0, 0);
	                cut.audioInfo = new AudioInfo();
	                cut.audioInfo.audioType = ProxyLoader.AUDIOTYPE_MUXED;
	                cut.audioInfo.channelCount = 2;
	                cut.audioInfo.channelLabels = ["left", "right"];
	                cut.audioInfo.sampleRate = 44100;
	                cut.audioInfo.totalSamples = 0;
	                cut.audioInfo.waveformPreviews = [];
	                this.cutsRx.onNext(cut);
	                this.cutList.push(cut);
	                this.onLoadDefaultAudioTrack(PlayerAudioTrack.fromAudioInfo(hls.uri, hls.uri, cut.audioInfo, this.log));
	                return timeline.schedule.merge(this.initVideoElement(new BoundedTimeline(timeline))).doOnNext(stjs.bind(this, function (loaded) {
	                    return this.videoElement.setInitialTime(0.1);
	                }));
	            }
	        }));
	    };
	    prototype.loadHLSPlaylist = function (url) {
	        return this.http.get(url).flatMap(stjs.bind(this, function (str) {
	            try {
	                var parsed = HLSPlaylist.parseString(str, this.log);
	                parsed.uri = url;
	                return Rx.Observable.just(parsed);
	            } catch (e) {
	                return Rx.Observable.throw(new PlayerError(e.getMessage(), PlayerError.FATAL));
	            }
	        }));
	    };
	    prototype.onLoadDefaultAudioTrack = function (track) {
	        track.setChannelsMuted(false);
	        this.currentAudioTrack = track;
	        this._addToAudioTracks(track);
	    };
	    prototype.loadGeneric = function (url) {
	        this.log.info("loadGeneric", url);
	        this.proxyType = ProxyType.GENERIC;
	        if (url.toLowerCase().endsWith(".m3u8") && !Utils.isSafari) {
	            return Rx.Observable.throw(new PlayerError("HLS is not supported in this browser.", PlayerError.FATAL));
	        }
	        this.init();
	        var timeline = Timeline.UNKNOWN;
	        var staticVideoSrc = new StaticVideoSrc(url, this.errorRx);
	        this.videoSrcHiRes = staticVideoSrc;
	        var cut = new PlayerCut(null, 0, 0);
	        cut.audioInfo = new AudioInfo();
	        cut.audioInfo.audioType = ProxyLoader.AUDIOTYPE_MUXED;
	        cut.audioInfo.channelCount = 2;
	        cut.audioInfo.channelLabels = ["left", "right"];
	        cut.audioInfo.sampleRate = 44100;
	        cut.audioInfo.totalSamples = 0;
	        cut.audioInfo.waveformPreviews = [];
	        this.cutsRx.onNext(cut);
	        this.cutList.push(cut);
	        var track = PlayerAudioTrack.fromAudioInfo(url, url, cut.audioInfo, this.log);
	        this.onLoadDefaultAudioTrack(track);
	        var initDone = this.initVideoElement(timeline);
	        var loadingErrors = staticVideoSrc.getLoadingErrors().flatMap(function (e) {
	            return Rx.Observable.throw(e);
	        }).map(function (x) {
	            return true;
	        });
	        return initDone.merge(loadingErrors).take(1);
	    };
	    prototype.loadBlobUrl = function (timeScale, frameDurationTv, produceBlobSource, onDone) {
	        this.close();
	        this.init();
	        this.videoSrcHiRes = new StaticVideoSrc(produceBlobSource(this.view.video), this.errorRx);
	        var timeline = GenericTimeline.newGenericTime(timeScale, frameDurationTv);
	        var endlessTimeline = SimpleTimeline.newEndlessTime(timeline);
	        var booleanObservable = this.initVideoElement(endlessTimeline);
	        var okie = booleanObservable.subscribe(stjs.bind(this, function (aBoolean) {
	            return onDone(this);
	        }));
	        this.autoDisposable(okie);
	    };
	    prototype.loadMPD = function (url) {
	        this.proxyType = ProxyType.DASH;
	        this.log.info("loadMPD", url);
	        var mpdUpdates = new ProxyLoader(this.http, this.log).mpdFromUrl(url);
	        return this.initVideoFromMPDStream(url, mpdUpdates);
	    };
	    prototype.initVideoFromMPDStream = function (proxyId, mpdUpdates) {
	        return RxUtil.firstOutIgnoreNext(mpdUpdates).flatMap(stjs.bind(this, function (streams) {
	            this.videoSrcHiRes = new DynamicDash(streams.video, streams.audio, this.log, this.errorRx);
	            if (streams.thumbshq != null) {
	                this.videoSrcLowRes = new DynamicDash(streams.thumbshq, streams.audio, this.log, this.errorRx);
	                this.videoSrcTrick = new DynamicDash(streams.thumbshq, null, this.log, this.errorRx);
	            }
	            var proxy = new Proxy();
	            proxy.video = streams.video;
	            proxy.audio = streams.audio;
	            proxy.thumbshq = streams.thumbshq;
	            proxy.audioInfo = streams.audio != null ? streams.audio.audioInfo : null;
	            proxy.proxyId = proxyId;
	            var cut = new PlayerCut(proxy, 0, 0);
	            this.cutsRx.onNext(cut);
	            this.cutList.push(cut);
	            this.currentVideoStream = streams.video;
	            var track = PlayerAudioTrack.fromDashStream(proxyId, streams.audio, this.log);
	            this.onLoadDefaultAudioTrack(track);
	            var timeline;
	            if (streams.video != null) {
	                timeline = streams.video.getTimeline();
	            } else if (streams.audio != null) {
	                timeline = streams.audio.getTimeline();
	            } else {
	                return Rx.Observable.throw(new PlayerError("no audio or video found", PlayerError.FATAL));
	            }
	            this.subscribeSeekableDurationUpdater(streams.video, streams.audio, timeline);
	            if (streams.thumbs != null) {
	                var filmStripDrawer = new FilmStripDrawer(this.http, this.log, this.errorRx);
	                filmStripDrawer.initWithDashStream(streams.thumbs, timeline, stjs.bind(this, function (info) {
	                    return this.filmStripDrawerRx.onNext(filmStripDrawer);
	                }));
	            }
	            if (streams.drmInfo.length > 0) {
	                this.drm = new DRM(this.options.drm, streams.drmInfo, this.log, this.errorRx);
	                if (streams.thumbshq != null) {
	                    this.drm.initVideo(this.view.video, [streams.video.id, streams.thumbshq.id, streams.audio.id]);
	                    this.drm.initVideo(this.view.trickVideo, [streams.thumbshq.id]);
	                } else {
	                    this.drm.initVideo(this.view.video, [streams.video.id, streams.audio.id]);
	                }
	            }
	            return this.initVideoElement(timeline);
	        }));
	    };
	    prototype.loadMp4WithAudio = function (url) {
	        this.log.info("loadMp4WithAudio", url);
	        if (this.options.staticVideoSrc) {
	            return this.loadGeneric(url);
	        }
	        this.proxyType = ProxyType.MP4;
	        return new ProxyLoader(this.http, this.log).dashifyMp4(url).flatMap(stjs.bind(this, function (streams) {
	            var firstAudio = streams.audio[0];
	            var videoStream = streams.video;
	            this.videoSrcHiRes = new DynamicDash(videoStream, firstAudio, this.log, this.errorRx);
	            var cut = new PlayerCut(null, 0, streams.timeline.getFrameCount());
	            cut.audioInfo = firstAudio == null ? new AudioInfo() : firstAudio.audioInfo;
	            this.cutsRx.onNext(cut);
	            this.cutList.push(cut);
	            this.currentVideoStream = videoStream;
	            for (var i = 0; i < streams.audio.length; i++) {
	                var track = PlayerAudioTrack.fromDashStream("#" + i + "-" + url, streams.audio[i], this.log);
	                if (i == 0) {
	                    this.onLoadDefaultAudioTrack(track);
	                } else {
	                    this._addToAudioTracks(track);
	                }
	            }
	            var timeline = streams.timeline;
	            this.subscribeSeekableDurationUpdater(videoStream, firstAudio, timeline);
	            return this.initVideoElement(timeline).doOnNext(stjs.bind(this, function (x) {
	                if (videoStream == null) {
	                    this.view.showAsAudioPlayer();
	                }
	            }));
	        }));
	    };
	    prototype.loadMp4 = function (url) {
	        this.proxyType = ProxyType.MP4;
	        return Rx.Observable.create(stjs.bind(this, function (observer) {
	            var dataSrc = new HttpDataSrc(this.http, url);
	            Mp4Loader.loadMp4(dataSrc, stjs.bind(this, function (mp4box) {
	                MovDasher.parseTimePackets(mp4box, dataSrc, stjs.bind(this, function (pkts) {
	                    if (!this.initialized) return;
	                    var time = new BoundedTimeline(new MP4Timeline(pkts));
	                    this.videoSrcHiRes = new StaticVideoSrc(url, this.errorRx);
	                    var cut = new PlayerCut(null, 0, time.getFrameCount());
	                    cut.audioInfo = new AudioInfo();
	                    var audioTracks2 = mp4box.getInfo().audioTracks;
	                    var $length = audioTracks2.length;
	                    if ($length > 0) {
	                        var at = audioTracks2[0];
	                        cut.audioInfo.audioType = ProxyLoader.AUDIOTYPE_MUXED;
	                        cut.audioInfo.channelCount = at.audio.channel_count;
	                        cut.audioInfo.channelLabels = AudioInfo.AAC_CHANNEL_CONFIGS[at.audio.channel_count];
	                        cut.audioInfo.sampleRate = at.audio.sample_rate;
	                        cut.audioInfo.totalSamples = at.duration;
	                        cut.audioInfo.waveformPreviews = [];
	                    }
	                    this.cutsRx.onNext(cut);
	                    this.cutList.push(cut);
	                    var track = PlayerAudioTrack.fromAudioInfo(url, url, cut.audioInfo, this.log);
	                    this.onLoadDefaultAudioTrack(track);
	                    this.initVideoElement(time).doOnNext(stjs.bind(this, function (x) {
	                        if (mp4box.getInfo().videoTracks.length == 0) {
	                            this.view.showAsAudioPlayer();
	                        }
	                    })).subscribe(function (loaded) {
	                        observer.onNext(true);
	                        observer.onCompleted();
	                    }, stjs.bind(observer, "onError"));
	                }), stjs.bind(observer, "onError"));
	            }), stjs.bind(observer, "onError"));
	        }));
	    };
	    prototype.loadAudioTrack = function (url, displayName, onDone) {
	        var streamRx;
	        if (Utils.isNotBlank(this.options.serverUrl) && !this.isUrl(url)) {
	            streamRx = new ProxyLoader(this.http, this.log).loadAudioRx(this.options.serverUrl, url);
	        } else {
	            streamRx = this.determineMimeType(url).flatMap(stjs.bind(this, function (mime) {
	                this.log.debug(mime);
	                switch (mime.toLowerCase()) {
	                    case "application/xml":
	                    case "application/dash+xml":
	                        return new ProxyLoader(this.http, this.log).loadAudioFromMpd(url);
	                    case "video/mp4":
	                    case "audio/mp4":
	                    case "audio/x-m4a":
	                        return new ProxyLoader(this.http, this.log).loadAudioFromM4a(url);
	                    default:
	                        return Rx.Observable.throw(new PlayerError("unsupported mime type " + mime, PlayerError.FATAL));
	                }
	            }));
	        }
	        var subscription = streamRx.subscribe(stjs.bind(this, function (stream) {
	            var track = PlayerAudioTrack.fromDashStream(url, stream, this.log);
	            track.filename = displayName;
	            this._addToAudioTracks(track);
	            track.setChannelsMuted(true);
	            onDone(null);
	        }), onDone);
	        this.autoDisposable(subscription);
	    };
	    prototype.setAudioTrackUrl = function (trackId, url, onDone) {
	        var track = this.getAudioTrack(trackId);
	        if (track == null) {
	            PlayerImpl.invoke1(onDone, new Error("no track with id " + trackId));
	            return;
	        }
	        var subscription;
	        if (url.endsWith(".mpd")) {
	            subscription = new ProxyLoader(this.http, this.log).loadAudioFromMpd(url).subscribe(stjs.bind(this, function (audioStream) {
	                track.update(audioStream);
	                this.audioTracksRx.onNext(track);
	                track.setChannelsMuted(true);
	                PlayerImpl.invoke1(onDone, null);
	            }));
	        } else {
	            subscription = new ProxyLoader(this.http, this.log).loadAudioRx(this.options.serverUrl, url).subscribe(stjs.bind(this, function (audioStream) {
	                track.update(audioStream);
	                this.audioTracksRx.onNext(track);
	                track.setChannelsMuted(true);
	                PlayerImpl.invoke1(onDone, null);
	            }), function (err) {
	                return PlayerImpl.invoke1(onDone, err);
	            });
	        }
	        this.autoDisposable(subscription);
	    };
	    prototype.conformAudioTrack = function (trackId, offset) {
	        var track = this.getAudioTrack(trackId);
	        if (track == null) {
	            this.errorRx.onNext(new PlayerError("no track with id " + trackId, PlayerError.NONFATAL));
	            return;
	        }
	        if (track.dashStream == null) {
	            this.errorRx.onNext(new PlayerError("track " + trackId + " is not loaded", PlayerError.NONFATAL));
	            return;
	        }
	        if (track.id() == this.getCurrentAudioTrack().id()) {
	            this.errorRx.onNext(new PlayerError("changing offset of current track is not supported. id=" + trackId, PlayerError.NONFATAL));
	            return;
	        }
	        var offsetTv = Utils.secondsToTv(offset, track.dashStream.sampleRate);
	        var timelineDuration = stjs.trunc(this.getDurationSec() * track.dashStream.sampleRate);
	        var totalSamples = Math.max(offsetTv + track.dashStream.totalSamples, timelineDuration);
	        var conformed = new ConformedM4sAudioStream(track.dashStream, offsetTv, totalSamples, this.log);
	        track.update(conformed);
	        track.offset = offset;
	        this.audioTracksRx.onNext(track);
	    };
	    constructor.invoke1 = function (onDone, param) {
	        if (onDone != null) {
	            onDone(param);
	        }
	    };
	    prototype.getAudioTrack = function (id) {
	        var filter = this.audioTracks.filter(function (t, i, a) {
	            return t.proxyId == id;
	        });
	        if (filter.length > 0) {
	            return filter[0];
	        }
	        return null;
	    };
	    prototype.setCurrentAudioTrack = function (id) {
	        var track = this.getAudioTrack(id);
	        if (track == null) {
	            return;
	        }
	        if (PlayerOptions.STREAMING_FILE.equals(this.options.streaming)) {
	            return;
	        }
	        this.currentAudioTrack = track;
	        if (this.videoSrcHiRes.canSetAudioWithoutReattach(track.dashStream)) {
	            this.doChangeCurrentAudioTrack(track);
	        } else {
	            this.reattachCurrentVideoSrc(stjs.bind(this, function () {
	                return this.doChangeCurrentAudioTrack(track);
	            }));
	        }
	    };
	    prototype.doChangeCurrentAudioTrack = function (track) {
	        var cut = this.cutList[0];
	        cut.setAudio(track.dashStream);
	        this.videoSrcHiRes.setAudio(track.dashStream);
	        if (this.videoSrcLowRes != null) {
	            this.videoSrcLowRes.setAudio(track.dashStream);
	        }
	        var lowResCut = this.cutListLowRes[0];
	        if (lowResCut != null) {
	            lowResCut.setAudio(track.dashStream);
	            this.videoSrcLowRes.setAudio(track.dashStream);
	        }
	        this.audioTracks.forEach(function (t) {
	            return t.setChannelsMuted(t != track);
	        });
	        if (cut.audioDashFile != null) {
	            cut.audioDashFile.channelMuted = track.channelMuted;
	        }
	        this.subscribeSeekableDurationUpdater(this.currentVideoStream, track.dashStream, this.getTimeline());
	        this.audioTracksRx.onNext(track);
	    };
	    constructor.parseStartEnd = function (t) {
	        if (Utils.isNumber(t)) {
	            return Utils.toInt(t);
	        } else if (Utils.isString(t)) {
	            return 0;
	        } else {
	            return -1;
	        }
	    };
	    prototype.loadCutList = function (cuts, onDone) {
	        this.close();
	        this.init();
	        this.proxyType = ProxyType.VG;
	        var proxyCache = {};
	        var proxyIds = new Array();
	        for (var i = 0; i < cuts.length; i++) {
	            var proxyId = cuts[i].proxyId;
	            if (proxyIds.indexOf(proxyId) == -1 && null == proxyCache[proxyId]) proxyIds.push(proxyId);
	        }
	        var subscription = new ProxyLoader(this.http, this.log).loadProxies(this.options.serverUrl, proxyIds).doOnError(stjs.bind(this, function (err) {
	            this.errorRx.onNext(new PlayerError(err, PlayerError.FATAL));
	            PlayerImpl.invoke1(onDone, err);
	        })).flatMap(stjs.bind(this, function (proxies) {
	            for (var i = 0; i < proxyIds.length; i++) {
	                var _id = proxyIds[i];
	                var _proxy = proxies[_id];
	                proxyCache[_id] = _proxy;
	            }
	            return this.onAllProxiesLoaded(proxyCache, cuts);
	        })).subscribe(function (loaded) {
	            setTimeout(function () {
	                return PlayerImpl.invoke1(onDone, null);
	            }, 0);
	        });
	        this.autoDisposable(subscription);
	    };
	    prototype.onAllProxiesLoaded = function (proxyCache, cuts) {
	        var self = this;
	        for (var i = 0; i < cuts.length; i++) {
	            var proxy = proxyCache[cuts[i].proxyId];
	            var cutStartFrame = PlayerImpl.parseStartEnd(cuts[i].start);
	            var cutEndFrame;
	            if (proxy.video != null) {
	                cutEndFrame = PlayerImpl.parseStartEnd(cuts[i].end) || proxy.video.getFrameCount();
	            } else {
	                var s = stjs.trunc(proxy.audio.getDurationSec()) * 48000;
	                cutEndFrame = PlayerImpl.parseStartEnd(cuts[i].end) || s;
	            }
	            var cut = new PlayerCut(proxy, cutStartFrame, cutEndFrame);
	            self.cutsRx.onNext(cut);
	            self.cutList.push(cut);
	            self.cutListLowRes.push(PlayerCut.LowRes(proxy, cutStartFrame, cutEndFrame));
	            this.currentVideoStream = cut.videoDashFile;
	            var audioStream = proxy.audio;
	            if (audioStream != null) {
	                var track = PlayerAudioTrack.fromDashStream(cuts[i].proxyId, audioStream, this.log);
	                this.onLoadDefaultAudioTrack(track);
	            }
	        }
	        if (self.options.streaming == PlayerOptions.STREAMING_VFILE) {
	            self.videoSrcHiRes = new FileStreaming(self.cutList[0], true, true, self.options.serverUrl);
	            self.videoSrcLowRes = new FileStreaming(self.cutListLowRes[0], false, true, self.options.serverUrl);
	            self.videoSrcTrick = new FileStreaming(self.cutListLowRes[0], false, false, self.options.serverUrl);
	        } else if (self.options.streaming == PlayerOptions.STREAMING_CUTLIST) {
	            self.videoSrcHiRes = new CutListStreaming(self.cutList, VideoSrc.VIDEO_AUDIO, self.options.serverUrl);
	            self.videoSrcLowRes = new CutListStreaming(self.cutList, VideoSrc.VIDEO_AUDIO, self.options.serverUrl);
	            self.videoSrcTrick = new CutListStreaming(self.cutList, VideoSrc.VIDEO_ONLY, self.options.serverUrl);
	        } else if (self.cutList.length == 1) {
	            self.videoSrcHiRes = new DynamicDash(this.cutList[0].videoDashFile, this.cutList[0].audioDashFile, this.log, this.errorRx);
	            if (self.cutListLowRes[0].videoDashFile != null) {
	                self.videoSrcLowRes = new DynamicDash(this.cutListLowRes[0].videoDashFile, this.cutList[0].audioDashFile, this.log, this.errorRx);
	                self.videoSrcTrick = new DynamicDash(self.cutListLowRes[0].videoDashFile, null, this.log, this.errorRx);
	            }
	        } else {
	            self.videoSrcHiRes = new DashCutListStreaming(self.cutList, true, VideoSrc.VIDEO_AUDIO, self.options.serverUrl);
	            self.videoSrcLowRes = new DashCutListStreaming(self.cutListLowRes, false, VideoSrc.VIDEO_AUDIO, self.options.serverUrl);
	            self.videoSrcTrick = new DashCutListStreaming(self.cutListLowRes, false, VideoSrc.VIDEO_ONLY, self.options.serverUrl);
	        }
	        var timeline;
	        var videoDashFile = self.cutList[0].videoDashFile;
	        if (videoDashFile != null) {
	            var timeScale = 0;
	            var frameCount = 0;
	            var frameDurationTv = 0;
	            for (var i = 0; i < self.cutList.length; i++) {
	                var cut = self.cutList[i];
	                var frames = cut.endFrame - cut.startFrame;
	                frameCount += frames;
	                timeScale += cut.videoDashFile.timescale * frames;
	                frameDurationTv += cut.videoDashFile.sampleDuration * frames;
	            }
	            var tapeTimecode = videoDashFile.timecode;
	            timeline = SimpleTimeline.newSimpleTime(Math.round(stjs.trunc(timeScale / frameCount)), frameCount, Math.round(stjs.trunc(frameDurationTv / frameCount)), tapeTimecode);
	        } else {
	            var audioDashFile = self.cutList[0].audioDashFile;
	            timeline = SimpleTimeline.newSimpleTime(audioDashFile.sampleRate, audioDashFile.totalSamples, 1, "00:00:00:00");
	        }
	        var filmStripDrawer = new FilmStripDrawer(this.http, this.log, this.errorRx);
	        filmStripDrawer.initWithUrl(this.options.serverUrl + "/" + cuts[0].proxyId + "/thumbs.mov", stjs.bind(this, function (info) {
	            return this.filmStripDrawerRx.onNext(filmStripDrawer);
	        }));
	        return this.initVideoElement(timeline).doOnNext(stjs.bind(this, function (b) {
	            if (videoDashFile == null) {
	                this.view.showAsAudioPlayer();
	            }
	        }));
	    };
	    prototype.initVideoElement = function (timeline) {
	        this.videoSrcHiRes.attach(this.view.video);
	        this.currentVideoSrc = this.videoSrcHiRes;
	        if (this.videoSrcTrick != null) {
	            this.videoSrcTrick.attach(this.view.trickVideo);
	            this.videoElement = new DualVideoElement(this.view.video, timeline, this.view.trickVideo, this.log, this.errorRx);
	        } else {
	            this.view.hideTrickVideo();
	            this.videoElement = new SimpleVideoElement(this.view.video, timeline, this.log, this.errorRx);
	        }
	        this.videoElement.getVideoShownRx().subscribe(stjs.bind(this, function (v) {
	            this.changingVideoSrc = false;
	            this.view.unfreezeVideo();
	        }));
	        this.autoDisposable(this.videoElement.getTimeUpdateRx().map(stjs.bind(this, function (x) {
	            return this.getTimeSample();
	        })).subscribe(stjs.bind(this.timeUpdateRx, "onNext")));
	        this.autoDisposable(this.videoElement.getProgressRx().subscribe(stjs.bind(this.progressRx, "onNext")));
	        if (this.options.enableCORS) {
	            this.videoElement.setCrossOrigin("anonymous");
	        }
	        this.videoElement.setResetPlayRateOnSeek(!this.options.preservePlaybackRate);
	        this.resubscribeTimeRx();
	        this.view.init(this);
	        if (Utils.isSomething(this.options.plugins)) {
	            this.initPlugins(this.options.plugins);
	        }
	        var initDone;
	        if (timeline == Timeline.UNKNOWN) initDone = this.timelineRx.take(1).map(function (t) {
	            return true;
	        });else initDone = Rx.Observable.just(true);
	        return initDone.doOnNext(stjs.bind(this, function (aBoolean) {
	            this.log.info("video element initialized");
	            this.initRx.onNext(this);
	        }));
	    };
	    prototype._addToAudioTracks = function (audiotrack) {
	        this.audioTracks.push(audiotrack);
	        this.audioTracksRx.onNext(audiotrack);
	        return audiotrack;
	    };
	    prototype.addAudioTrack = function (displayName, channelNames) {
	        return this.addAudioTrackWithId(PlayerUtils.randomString(), displayName, channelNames);
	    };
	    prototype.addAudioTrackWithId = function (id, displayName, channelNames) {
	        var audiotrack = PlayerAudioTrack.fromChannelLabels(id, displayName, channelNames, this.log);
	        audiotrack.setChannelsMuted(true);
	        return this._addToAudioTracks(audiotrack).proxyId;
	    };
	    prototype.muteAudioTrack = function (id) {
	        var track = this.getAudioTrack(id);
	        if (track != null) {
	            track.setChannelsMuted(true);
	        }
	    };
	    prototype.togglePlay = function () {
	        if (this.isPlaying()) {
	            this.pause();
	        } else {
	            this.videoElement.playAtRate(this.options.preservePlaybackRate ? this.playRateBeforePause : 1);
	        }
	    };
	    prototype.play = function () {
	        this.videoElement.playAtRate(this.options.preservePlaybackRate ? this.playRateBeforePause : 1);
	    };
	    prototype.pause = function () {
	        if (!this.isPlaying()) return;
	        var rate = this.videoElement.getPlayRate();
	        if (rate != 0) {
	            this.playRateBeforePause = rate;
	        }
	        this.videoElement.pause();
	    };
	    prototype.getTimeline = function () {
	        return this.videoElement.getTimeline();
	    };
	    prototype.getTimelineRx = function () {
	        return this.timelineRx.debounce(1);
	    };
	    prototype.getCurrentTapeTimecode = function () {
	        var fn = this.videoElement.getFrame();
	        return this.videoElement.getTimeline().getTapeByFrame(fn);
	    };
	    prototype.getCurrentStandardTimecode = function () {
	        var ms = stjs.trunc(this.videoElement.getTimeSec() * 1000);
	        return Utils.hhmmssms(ms);
	    };
	    prototype.getCurrentFrame = function () {
	        return this.videoElement.getFrame();
	    };
	    prototype.getCurrentTime = function () {
	        return this.videoElement.getTimeSec();
	    };
	    prototype.getCurrentTimeValue = function () {
	        return this.videoElement.getTimeValue();
	    };
	    prototype.getCurrentUTCTimestamp = function () {
	        return this.getTimeline().getUTCTimestampBySec(this.videoElement.getTimeSec());
	    };
	    prototype.seekSec = function (time) {
	        this.videoElement.seek(time);
	    };
	    prototype.seekUTCTimestamp = function (timestamp) {
	        var millis = Date.parse(timestamp) - Date.parse(this.getStartUTCTimestamp());
	        this.videoElement.seek(millis / 1000);
	    };
	    prototype.seek = function (anything) {
	        var fn = -1;
	        var time = -1;
	        if (Utils.isNumber(anything)) {
	            fn = stjs.trunc(anything);
	        } else if (Utils.isString("string")) {
	            var str = anything;
	            if (TapeTimecode.isTimecode(str)) {
	                fn = this.videoElement.getTimeline().getFrameByTimecode(str);
	            } else if (Utils.HHmmSSmsecToTimestamp(str) != -1) {
	                time = stjs.trunc(Utils.HHmmSSmsecToTimestamp(str) / 1000);
	            } else if (new RegExp("^\\d+$").test(str)) {
	                fn = Integer.parseInt(str);
	            }
	        }
	        if (fn == -1 && time == -1) {
	            this.errorRx.onNext(new PlayerError("provided value is neither timecode nor frame number: " + anything, PlayerError.NONFATAL));
	        } else {
	            if (fn != -1) {
	                this.videoElement.seekFrame(fn);
	            } else {
	                this.videoElement.seek(time);
	            }
	        }
	    };
	    prototype.seekFrame = function (fn) {
	        this.videoElement.seekFrame(fn);
	    };
	    prototype.nextFrame = function (n) {
	        this.videoElement.pause();
	        this.videoElement.forward1(n);
	    };
	    prototype.previousFrame = function (n) {
	        this.videoElement.pause();
	        this.videoElement.backward1(n);
	    };
	    prototype.nextSec = function (n) {
	        this.videoElement.pause();
	        this.videoElement.forwardSec(n);
	    };
	    prototype.previousSec = function (n) {
	        this.videoElement.pause();
	        this.videoElement.backwardSec(n);
	    };
	    prototype.enterFullscreen = function () {
	        this.view.enterFullscreen(null);
	    };
	    prototype.exitFullscreen = function () {
	        this.view.exitFullscreen();
	    };
	    prototype.setRange = function (fromTimecode, toTimecode) {
	        var fromFrame = PlayerImpl.guessFrame(this.videoElement.getTimeline(), fromTimecode);
	        var toFrame = PlayerImpl.guessFrame(this.videoElement.getTimeline(), toTimecode);
	        if (fromFrame != -1 && toFrame != -1) {
	            this.originalVideoElement = this.videoElement;
	            this.videoElement = new RangeVideoElement(this.videoElement);
	            this.videoElement.setRange(fromFrame, toFrame);
	            this.resubscribeTimeRx();
	        } else {
	            this.errorRx.onNext(new PlayerError("provided values are neither timecodes nor frame numbers: " + fromTimecode + " " + toTimecode, PlayerError.NONFATAL));
	        }
	        this.view.renderRange(fromFrame, toFrame);
	    };
	    prototype.resubscribeTimeRx = function () {
	        if (this.timelineSubscription != null) {
	            this.timelineSubscription.dispose();
	        }
	        this.timelineSubscription = this.videoElement.getTimeline().getUpdateRx().subscribe(stjs.bind(this.timelineRx, "onNext"));
	        this.timelineRx.onNext(this.videoElement.getTimeline());
	    };
	    prototype.cancelRange = function () {
	        this.videoElement.cancelRange();
	        if (this.originalVideoElement != null) {
	            this.videoElement = this.originalVideoElement;
	            this.originalVideoElement = null;
	            this.resubscribeTimeRx();
	            this.timeUpdateRx.onNext(this.getTimeSample());
	        }
	        this.view.renderWhole();
	    };
	    prototype.hasRange = function () {
	        return this.videoElement.hasRange();
	    };
	    prototype.playAtRate = function (rate) {
	        this.videoElement.playAtRate(rate);
	    };
	    prototype.playFasterBackwards = function () {
	        this.videoElement.playFasterBackwards();
	    };
	    prototype.playFaster = function () {
	        this.videoElement.playFaster();
	    };
	    prototype.setLoop = function (loop) {
	        this.videoElement.setLoop(loop);
	    };
	    prototype.setPauseOnLoop = function (pauseOnLoop) {
	        this.videoElement.setPauseOnLoop(pauseOnLoop);
	    };
	    prototype.isPlaying = function () {
	        return this.videoElement.isPlaying();
	    };
	    prototype.getPlaybackRate = function () {
	        return this.videoElement.getPlayRate();
	    };
	    prototype.getCutsInfo = function () {
	        var cuts = this.cutList;
	        var result = new Array();
	        var countedFrames = 0;
	        for (var i = 0; i < cuts.length; i++) {
	            var playerCut = cuts[i];
	            var cutListFrameCount = playerCut.endFrame - playerCut.startFrame;
	            var cutInfo = new CutInfo(playerCut.startFrame, playerCut.endFrame, playerCut.proxyId, countedFrames, countedFrames + cutListFrameCount, playerCut.audioDashFile, playerCut.audioInfo);
	            cutInfo.frameCount = cutInfo.end - cutInfo.start;
	            cutInfo.cutListFrameCount = cutListFrameCount;
	            result.push(cutInfo);
	            countedFrames += cutListFrameCount;
	        }
	        return result;
	    };
	    prototype.getCurrentCut = function () {
	        var currentFrame = this.videoElement.getFrame();
	        var cutsInfo = this.getCutsInfo();
	        var currentCut = cutsInfo[0];
	        for (var i = 0; i < cutsInfo.length; i++) {
	            var cut = cutsInfo[i];
	            if (currentFrame >= cut.cutListFrameStart && currentFrame < cut.cutListFrameEnd) {
	                currentCut = cut;
	                currentCut.cutId = i;
	            }
	        }
	        return currentCut;
	    };
	    prototype.getCurrentAudioTrack = function () {
	        return this.currentAudioTrack;
	    };
	    prototype.initPlugins = function (plugins) {};
	    prototype.isAudioMutable = function () {
	        var self = this;
	        for (var i = 0; i < self.cutList.length; i++) {
	            var audioInfo = self.cutList[i].audioInfo;
	            if (audioInfo != null && ProxyLoader.AUDIOTYPE_MP3.equals(audioInfo.audioType)) {
	                return false;
	            }
	        }
	        return true;
	    };
	    prototype.isAllMuted = function () {
	        return this.audioTracks.every(function (t, i, a) {
	            return t.isMuted();
	        });
	    };
	    prototype.setVolume = function (val) {
	        this.videoElement.setVolume(val);
	    };
	    prototype.getVolume = function () {
	        return this.videoElement.getVolume();
	    };
	    prototype.isChangingVideoSrc = function () {
	        return this.changingVideoSrc;
	    };
	    prototype.applyAudioChanges = function () {
	        this.currentVideoSrc.clearAudioBuffer();
	    };
	    prototype.changeVideoSrc = function (newSrc) {
	        this.reattachCurrentVideoSrc(stjs.bind(this, function () {
	            return this.currentVideoSrc = newSrc;
	        }));
	    };
	    prototype.reattachCurrentVideoSrc = function (doBeforeAttach) {
	        this.log.debug("reattaching");
	        this.changingVideoSrc = true;
	        var playRate = this.videoElement.getPlayRate();
	        this.videoElement.pause();
	        this.videoElement.setInitialTime(this.videoElement.getTimeSec());
	        this.view.freezeVideo();
	        setTimeout(stjs.bind(this, function () {
	            this.currentVideoSrc.detach();
	            if (doBeforeAttach != null) {
	                doBeforeAttach();
	            }
	            this.currentVideoSrc.attach(this.view.video);
	            if (playRate != 0) {
	                this.videoElement.playAtRate(playRate);
	            }
	        }), 100);
	    };
	    prototype.checkRangeAndSeek = function (frame) {
	        if (PlayerImpl.RANGE_AUTO_CANCEL) {
	            if (this.videoElement.hasRange() && !this.videoElement.inRange(frame)) this.videoElement.cancelRange();
	        }
	        this.videoElement.seekFrame(frame);
	    };
	    prototype.checkRangeAndSeekSec = function (sec) {
	        var frame = this.getTimeline().getFrameBySec(sec);
	        if (PlayerImpl.RANGE_AUTO_CANCEL) {
	            if (this.videoElement.hasRange() && !this.videoElement.inRange(frame)) this.videoElement.cancelRange();
	        }
	        this.videoElement.seek(sec);
	    };
	    prototype.getSeekableDurationSec = function () {
	        return this.videoElement.getSeekableDuration();
	    };
	    prototype.getDurationSec = function () {
	        return this.videoElement.getDuration();
	    };
	    prototype.getTimeSample = function () {
	        var _tv = this.getCurrentTimeValue();
	        var _frame = this.getCurrentFrame();
	        var _sec = this.getCurrentTime();
	        return new TimeSample(_tv, _frame, _sec);
	    };
	    prototype.setVideoQuality = function (res) {
	        if (this.videoSrcLowRes != null) {
	            if (PlayerImpl.FULL_RES.equals(res)) {
	                this.changeVideoSrc(this.videoSrcHiRes);
	            } else {
	                this.changeVideoSrc(this.videoSrcLowRes);
	            }
	        }
	    };
	    constructor.guessFrame = function (timeline, anything) {
	        var fn = 0;
	        if (Utils.isNumber(anything)) {
	            fn = Utils.toInt(anything);
	        } else if (Utils.isString(anything)) {
	            var str = anything;
	            if (TapeTimecode.isTimecode(str)) {
	                fn = timeline.getFrameByTimecode(str);
	            } else if (Utils.HHmmSSmsecToTimestamp(str) != -1) {
	                fn = timeline.getFrameByMillis(Utils.HHmmSSmsecToTimestamp(str));
	            } else if (Utils.isDigit(str)) {
	                fn = Integer.parseInt(str);
	            }
	        }
	        return fn;
	    };
	    prototype.getPlayRx = function () {
	        return this.videoElement.getPlayRx();
	    };
	    prototype.getVolumeChangeRx = function () {
	        return this.videoElement.getVolumeChangeRx();
	    };
	    prototype.getTimeUpdateRx = function () {
	        return this.timeUpdateRx;
	    };
	    prototype.setStartTapeTimecode = function (tapeTimecode) {
	        var tt = this.getTimeline().getTapeTimecode();
	        var newStartTimecode = TapeTimecode.parseTimecode(tapeTimecode, tt.getTapeFps(), tt.isDropFrame());
	        tt.setStartTimecode(newStartTimecode);
	        this.timelineRx.onNext(this.getTimeline());
	        this.timeUpdateRx.onNext(this.getTimeSample());
	    };
	    prototype.getStartTapeTimecode = function () {
	        return this.getTimeline().getTapeTimecode().getTimecodeAtFrame(0);
	    };
	    prototype.getCaptionsList = function () {
	        return this.captionsList;
	    };
	    prototype.getAudioTracks = function () {
	        return this.audioTracks;
	    };
	    prototype.getAudioHandlerRx = function () {
	        return this.audioHandlerRx;
	    };
	    prototype.getCaptionHandlerRx = function () {
	        return this.captionHandlerRx;
	    };
	    prototype.disableHotKeys = function () {
	        if (this.view.hm != null) {
	            this.view.hm.setDisable(true);
	        }
	        this.options.hotkeys = false;
	    };
	    prototype.enableHotKeys = function () {
	        if (this.view.hm != null) {
	            this.view.hm.setDisable(false);
	        }
	        this.options.hotkeys = true;
	    };
	    prototype.getVideoElement = function () {
	        return this.videoElement;
	    };
	    prototype.enableHotKeysForDocument = function (doc) {
	        this.view.hm.enableHotKeysForDocument(doc);
	    };
	    prototype.addEventListener = function (type_, handler) {
	        var observable = null;
	        var type = type_.toLowerCase();
	        switch (type) {
	            case PlayerEvents.FULLSCREEN_EVENT:
	                observable = this.view.fullscreenRx;
	                break;
	            case PlayerEvents.TIMEUPDATE_EVENT:
	                observable = this.timeUpdateRx;
	                break;
	            case PlayerEvents.LOAD_EVENT:
	                observable = this.initRx;
	                break;
	            case PlayerEvents.PLAY_EVENT:
	                observable = this.getPlayRx();
	                break;
	            case PlayerEvents.INIT_EVENT:
	                observable = this.initRx;
	                break;
	            case PlayerEvents.TIMELINE_EVENT:
	                observable = this.getTimelineRx();
	                break;
	            case PlayerEvents.ERROR_EVENT:
	                observable = this.errorRx;
	                break;
	            case PlayerEvents.VOLUME_CHANGED:
	                observable = this.getVolumeChangeRx();
	                break;
	            case PlayerEvents.PROGRESS:
	                observable = this.progressRx;
	        }
	        if (observable != null) {
	            var handle = stjs.bind(this, function (x) {
	                try {
	                    handler(x);
	                } catch (e) {
	                    this.log.error("error in user's event listener \"" + type + "\"", e);
	                    if (type != PlayerEvents.ERROR_EVENT) {
	                        this.errorRx.onNext(new PlayerError("error in user's event listener \"" + type + "\"", PlayerError.NONFATAL, e));
	                    }
	                }
	            });
	            var disposable = observable.subscribe(handle);
	            if (this.eventListeners[type] == null) {
	                this.eventListeners[type] = [];
	            }
	            this.eventListeners[type].push(new PlayerImpl.PlayerEventListener(handler, disposable));
	        }
	    };
	    prototype.removeEventListener = function (type, handler) {
	        var arr = this.eventListeners[type];
	        if (arr != null) {
	            for (var i = 0; i < arr.length; i++) {
	                var l = arr[i];
	                if (l.handler == handler) {
	                    l.disposable.dispose();
	                    arr.splice(i, 1);
	                }
	            }
	        }
	    };
	    prototype.removeAllEventListeners = function () {
	        Utils.mapValues(this.eventListeners).forEach(function (arr) {
	            return arr.forEach(function (l) {
	                return l.disposable.dispose();
	            });
	        });
	        this.eventListeners = {};
	    };
	    prototype.loadFromMpd = function (proxyId, mpd, onLoad) {
	        this.close();
	        this.init();
	        this.autoDisposable(this.initVideoFromMPDStream(proxyId, mpd).doOnError(stjs.bind(this, function (err) {
	            return this.errorRx.onNext(new PlayerError("can not load MPD", PlayerError.FATAL, err));
	        })).subscribe(function (aBoolean) {
	            return onLoad();
	        }));
	    };
	    constructor.PlayerEventListener = function (handler, disposable) {
	        this.handler = handler;
	        this.disposable = disposable;
	    };
	    constructor.PlayerEventListener = stjs.extend(constructor.PlayerEventListener, null, [], function (constructor, prototype) {
	        prototype.handler = null;
	        prototype.disposable = null;
	    }, { handler: "Callback1", disposable: "Rx.Disposable" }, {});
	    prototype.subscribeSeekableDurationUpdater = function (video, audio, timeline) {
	        if (this.seekableDurationUpdaterSubscription != null) {
	            this.seekableDurationUpdaterSubscription.dispose();
	            this.seekableDurationUpdaterSubscription = null;
	        }
	        if (video != null && audio != null) {
	            timeline.setSeekableDurationSec(Math.min(audio.getDurationSec(), video.getDurationSec()));
	            this.seekableDurationUpdaterSubscription = Rx.Observable.merge(audio.getUpdateRx(), video.getUpdateRx()).subscribe(function (s) {
	                timeline.setSeekableDurationSec(Math.min(video.getDurationSec(), audio.getDurationSec()));
	            });
	        } else if (video != null && audio == null) {
	            timeline.setSeekableDurationSec(video.getDurationSec());
	            this.seekableDurationUpdaterSubscription = video.getUpdateRx().subscribe(function (s) {
	                timeline.setSeekableDurationSec(video.getDurationSec());
	            });
	        } else if (video == null && audio != null) {
	            timeline.setSeekableDurationSec(audio.getDurationSec());
	            this.seekableDurationUpdaterSubscription = audio.getUpdateRx().subscribe(function (s) {
	                timeline.setSeekableDurationSec(audio.getDurationSec());
	            });
	        } else {
	            this.errorRx.onNext(new PlayerError("invalid call. no video and audio", PlayerError.FATAL));
	        }
	    };
	    prototype.getStaticFilmStripDrawer = function (url, cb) {
	        var filmStripDrawer = new FilmStripDrawer(this.http, this.log, this.errorRx);
	        filmStripDrawer.initWithUrl(url, function (info) {
	            return PlayerImpl.invoke1(cb, filmStripDrawer);
	        });
	    };
	    prototype.getFilmStripDrawer = function (callback) {
	        this.filmStripDrawerRx.subscribe(function (drawer) {
	            return PlayerImpl.invoke1(callback, drawer);
	        });
	    };
	    prototype.autoDisposable = function (disposable) {
	        this.autoDisposables.add(disposable);
	    };
	    prototype.registerPlugin = function (plugin) {
	        plugin.setAPI(this);
	    };
	    prototype.getCaptionListChangeRx = function () {
	        return this.captionListChangeRx;
	    };
	    prototype.getBuffered = function () {
	        return this.videoElement.getBuffered();
	    };
	    prototype.getErrorRx = function () {
	        return this.errorRx;
	    };
	    prototype.setStartUTCTimestamp = function (timestamp) {
	        this.getTimeline().setStartUTCTimestamp(timestamp);
	    };
	    prototype.getStartUTCTimestamp = function () {
	        return this.getTimeline().getStartUTCTimestamp();
	    };
	}, { log: "Log", container: "Element", options: "PlayerOptions", http: "Http", view: "PlayerView", videoSrcHiRes: "VideoSrc", videoSrcLowRes: "VideoSrc", videoSrcTrick: "VideoSrc", cutList: { name: "Array", arguments: ["PlayerCut"] }, cutListLowRes: { name: "Array", arguments: ["PlayerCut"] }, captionsList: { name: "Array", arguments: ["Subtitles"] }, videoElement: "VideoElement", originalVideoElement: "VideoElement", audioTracksRx: { name: "Rx.ReplaySubject", arguments: ["PlayerAudioTrack"] }, audioTracks: { name: "Array", arguments: ["PlayerAudioTrack"] }, captionListChangeRx: { name: "Rx.ReplaySubject", arguments: ["Subtitles"] }, pluginRx: { name: "Rx.ReplaySubject", arguments: ["VGPlugins"] }, cutsRx: { name: "Rx.ReplaySubject", arguments: ["PlayerCut"] }, currentVideoStream: "SegmentedStream", timeUpdateRx: { name: "Rx.Subject", arguments: ["TimeSample"] }, progressRx: { name: "Rx.Subject", arguments: [{ name: "Array", arguments: ["TimeRange"] }] }, timelineRx: { name: "Rx.Subject", arguments: ["Timeline"] }, timelineSubscription: "Rx.Disposable", audioHandlerRx: { name: "Rx.Subject", arguments: ["Callback0"] }, captionHandlerRx: { name: "Rx.Subject", arguments: ["Callback0"] }, currentVideoSrc: "VideoSrc", initRx: { name: "Rx.Subject", arguments: ["PlayerImpl"] }, seekableDurationUpdaterSubscription: "Rx.Disposable", currentAudioTrack: "PlayerAudioTrack", eventListeners: { name: "Map", arguments: [null, { name: "Array", arguments: ["PlayerImpl.PlayerEventListener"] }] }, filmStripDrawerRx: { name: "Rx.Subject", arguments: ["FilmStripDrawer"] }, autoDisposables: "Rx.CompositeDisposable", proxyType: { name: "Enum", arguments: ["ProxyType"] }, errorRx: { name: "Rx.Subject", arguments: ["PlayerError"] }, drm: "DRM", fairplay: "Fairplay" }, {});
	var CoreDev = function () {};
	CoreDev = stjs.extend(CoreDev, null, [], function (constructor, prototype) {
	    constructor.chugai = function () {
	        window.onload = function (xxx) {
	            var container = window.document.getElementById("playerContainer");
	            var player = new PlayerImpl(container, { logLevel: LogLevel.DEBUG, drm: { widevine: { laUrl: "https://drm-widevine-licensing.axtest.net/AcquireLicense" }, playready: { laUrl: "https://drm-playready-licensing.axtest.net/AcquireLicense" }, fairplay: { laUrl: "https://drm.ideanovatech.com/InplayMultiDrmProxy?type=FPS&WVCustomUserToken=34241&WVCustomProductId=1234", certUrl: "https://drm.ideanovatech.com/InplayMultiDrmProxy?FairPlayCert=true" } } });
	            player.load("http://kote.videogorillas.com/vmir/maleficent/file.mpd", function (err) {
	                if (err != null) {
	                    console.error("load error", err);
	                } else {
	                    console.log("load ok");
	                    console.log("live=" + player.isLive());
	                }
	                player.getFilmStripDrawer(function (fsd) {
	                    var canvas = window.document.getElementById("canv");
	                    fsd.drawFilmstrip(canvas, 100, 150, 5, false, function () {
	                        return console.log("filmstrip ok");
	                    }, function (err1) {
	                        return console.log("filmstrip error", err1);
	                    });
	                });
	            });
	            player.addEventListener(PlayerEvents.ERROR_EVENT, function (err) {
	                console.log("OMG! error event", err);
	            });
	            window["player"] = player;
	        };
	    };
	    constructor.andrew = function () {
	        window.onload = function (xxx) {
	            var container = window.document.getElementById("playerContainer");
	            var player = new PlayerImpl(container, { serverUrl: "http://localhost/player/core/tests" });
	            player.load("http://localhost/player/core/tests/pete30/file.mpd", function (err) {
	                if (err != null) {
	                    console.error(err);
	                } else {
	                    console.log("Player loaded");
	                }
	            });
	            window["player"] = player;
	        };
	    };
	}, {}, {});
	;
	
	window.PlayerImpl = PlayerImpl;
	window.Captions = Captions;
	window.TapeTimecode = TapeTimecode;
	// this is evil:
	window.CloseableView = CloseableView;
	window.VGView = VGView;
	window.VGPlayerPluginApi = VGPlayerPluginApi;
	window.ObjectEvents = ObjectEvents;
	window.DataSrc = DataSrc;
	window.VGPlugin = VGPlugin;
	window.VGPlugins = VGPlugins;
	window.PlayerView = PlayerView;
	window.VGPlayerPublicApi = VGPlayerPublicApi;
	window.Http = Http;
	window.PlayerOptions = PlayerOptions;
	window.Utils = Utils;
	window.Subtitles = Subtitles;
	window.SubtitleEntry = SubtitleEntry;
	window.MutableBoolean = MutableBoolean;
	window.PlayerEvents = PlayerEvents;
	window.KeyOptions = KeyOptions;
	window.HotkeyManager = HotkeyManager;
	window.Timeline = Timeline;
	window.TimeSample = TimeSample;
	window.DynamicDash = DynamicDash;
	window.AbstractVideoElement = AbstractVideoElement;
	window.LogLevel = LogLevel;
	window.PlayerError = PlayerError;
	//# sourceMappingURL=vgplayer4web.js.map

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;/* WEBPACK VAR INJECTION */(function(process, __dirname) {if (true) {
	    var _require = require;
	    require = undefined;
	}
	// universal module definition
	(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like environments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.Decoder = factory();
	    }
	})(this, function () {
	    "use strict";
	
	    var global;
	
	    function initglobal() {
	        global = this;
	        if (!global) {
	            if (typeof window != "undefined") {
	                global = window;
	            } else if (self != "undefined") {
	                global = self;
	            };
	        };
	    };
	    initglobal();
	
	    function error(message) {
	        console.error(message);
	        console.trace();
	    };
	
	    function assert(condition, message) {
	        if (!condition) {
	            error(message);
	        };
	    };
	
	    var getModule = function (_broadwayOnHeadersDecoded, _broadwayOnPictureDecoded) {
	
	        var windowBak;
	        if (typeof window != 'undefined') {
	            windowBak = window;
	        };
	        var window = {
	            _broadwayOnHeadersDecoded: _broadwayOnHeadersDecoded,
	            _broadwayOnPictureDecoded: _broadwayOnPictureDecoded
	        };
	
	        /*
	          The reason why this is all packed into one file is that this file can also function as worker.
	         you can integrate the file into your build system and provide the original file to be loaded into a worker.
	          */
	
	        function d(a) {
	            throw a;
	        }var g = void 0,
	            i = !0,
	            k = null,
	            m = !1;function n() {
	            return function () {};
	        }var p;p || (p = eval("(function() { try { return Module || {} } catch(e) { return {} } })()"));var aa = {},
	            r;for (r in p) p.hasOwnProperty(r) && (aa[r] = p[r]);var t = "object" === typeof process && "function" === typeof require,
	            ba = "object" === typeof window,
	            ca = "function" === typeof importScripts,
	            da = !ba && !t && !ca;
	        if (t) {
	            p.print || (p.print = function (a) {
	                process.stdout.write(a + "\n");
	            });p.printErr || (p.printErr = function (a) {
	                process.stderr.write(a + "\n");
	            });var fa = require("fs"),
	                ga = require("path");p.read = function (a, b) {
	                var a = ga.normalize(a),
	                    c = fa.readFileSync(a);!c && a != ga.resolve(a) && (a = path.join(__dirname, "..", "src", a), c = fa.readFileSync(a));c && !b && (c = c.toString());return c;
	            };p.readBinary = function (a) {
	                return p.read(a, i);
	            };p.load = function (a) {
	                ha(read(a));
	            };p.thisProgram = 1 < process.argv.length ? process.argv[1].replace(/\\/g, "/") : "unknown-program";p.arguments = process.argv.slice(2);"undefined" !== typeof module && (module.exports = p);process.on("uncaughtException", function (a) {
	                a instanceof ia || d(a);
	            });
	        } else da ? (p.print || (p.print = print), "undefined" != typeof printErr && (p.printErr = printErr), p.read = "undefined" != typeof read ? read : function () {
	            d("no read() available (jsc?)");
	        }, p.readBinary = function (a) {
	            if ("function" === typeof readbuffer) return new Uint8Array(readbuffer(a));a = read(a, "binary");w("object" === typeof a);return a;
	        }, "undefined" != typeof scriptArgs ? p.arguments = scriptArgs : "undefined" != typeof arguments && (p.arguments = arguments), this.Module = p, eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined")) : ba || ca ? (p.read = function (a) {
	            var b = new XMLHttpRequest();b.open("GET", a, m);b.send(k);return b.responseText;
	        }, "undefined" != typeof arguments && (p.arguments = arguments), "undefined" !== typeof console ? (p.print || (p.print = function (a) {
	            console.log(a);
	        }), p.printErr || (p.printErr = function (a) {
	            console.log(a);
	        })) : p.print || (p.print = n()), ba ? window.Module = p : p.load = importScripts) : d("Unknown runtime environment. Where are we?");function ha(a) {
	            eval.call(k, a);
	        }!p.load && p.read && (p.load = function (a) {
	            ha(p.read(a));
	        });p.print || (p.print = n());p.printErr || (p.printErr = p.print);p.arguments || (p.arguments = []);p.thisProgram || (p.thisProgram = "./this.program");p.print = p.print;p.fa = p.printErr;p.preRun = [];p.postRun = [];for (r in aa) aa.hasOwnProperty(r) && (p[r] = aa[r]);
	        var z = { Yd: function (a) {
	                ja = a;
	            }, xd: function () {
	                return ja;
	            }, Tb: function () {
	                return y;
	            }, Sb: function (a) {
	                y = a;
	            }, oc: function (a) {
	                switch (a) {case "i1":case "i8":
	                        return 1;case "i16":
	                        return 2;case "i32":
	                        return 4;case "i64":
	                        return 8;case "float":
	                        return 4;case "double":
	                        return 8;default:
	                        return "*" === a[a.length - 1] ? z.ia : "i" === a[0] ? (a = parseInt(a.substr(1)), w(0 === a % 8), a / 8) : 0;}
	            }, vd: function (a) {
	                return Math.max(z.oc(a), z.ia);
	            }, Qf: 16, ng: function (a, b, c) {
	                return !c && ("i64" == a || "double" == a) ? 8 : !a ? Math.min(b, 8) : Math.min(b || (a ? z.vd(a) : 0), z.ia);
	            }, Fa: function (a, b, c) {
	                return c && c.length ? (c.splice || (c = Array.prototype.slice.call(c)), c.splice(0, 0, b), p["dynCall_" + a].apply(k, c)) : p["dynCall_" + a].call(k, b);
	            }, eb: [], Vc: function (a) {
	                for (var b = 0; b < z.eb.length; b++) if (!z.eb[b]) return z.eb[b] = a, 2 * (1 + b);d("Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.");
	            }, Sd: function (a) {
	                z.eb[(a - 2) / 2] = k;
	            }, og: function (a, b) {
	                z.wb || (z.wb = {});var c = z.wb[a];if (c) return c;for (var c = [], e = 0; e < b; e++) c.push(String.fromCharCode(36) + e);
	                e = ka(a);'"' === e[0] && (e.indexOf('"', 1) === e.length - 1 ? e = e.substr(1, e.length - 2) : A("invalid EM_ASM input |" + e + "|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)"));try {
	                    var f = eval("(function(Module, FS) { return function(" + c.join(",") + "){ " + e + " } })")(p, "undefined" !== typeof B ? B : k);
	                } catch (h) {
	                    p.fa("error in executing inline EM_ASM code: " + h + " on: \n\n" + e + "\n\nwith args |" + c + "| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)"), d(h);
	                }return z.wb[a] = f;
	            }, Aa: function (a) {
	                z.Aa.Rb || (z.Aa.Rb = {});z.Aa.Rb[a] || (z.Aa.Rb[a] = 1, p.fa(a));
	            }, Cb: {}, rg: function (a, b) {
	                w(b);z.Cb[b] || (z.Cb[b] = {});var c = z.Cb[b];c[a] || (c[a] = function () {
	                    return z.Fa(b, a, arguments);
	                });return c[a];
	            }, Da: function () {
	                var a = [],
	                    b = 0;this.nb = function (c) {
	                    c &= 255;if (0 == a.length) {
	                        if (0 == (c & 128)) return String.fromCharCode(c);a.push(c);b = 192 == (c & 224) ? 1 : 224 == (c & 240) ? 2 : 3;return "";
	                    }if (b && (a.push(c), b--, 0 < b)) return "";var c = a[0],
	                        e = a[1],
	                        f = a[2],
	                        h = a[3];2 == a.length ? c = String.fromCharCode((c & 31) << 6 | e & 63) : 3 == a.length ? c = String.fromCharCode((c & 15) << 12 | (e & 63) << 6 | f & 63) : (c = (c & 7) << 18 | (e & 63) << 12 | (f & 63) << 6 | h & 63, c = String.fromCharCode(((c - 65536) / 1024 | 0) + 55296, (c - 65536) % 1024 + 56320));a.length = 0;return c;
	                };this.Ac = function (a) {
	                    for (var a = unescape(encodeURIComponent(a)), b = [], f = 0; f < a.length; f++) b.push(a.charCodeAt(f));return b;
	                };
	            }, pg: function () {
	                d("You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work");
	            }, pb: function (a) {
	                var b = y;y = y + a | 0;y = y + 15 & -16;return b;
	            }, Ec: function (a) {
	                var b = D;D = D + a | 0;D = D + 15 & -16;return b;
	            }, bb: function (a) {
	                var b = E;E = E + a | 0;E = E + 15 & -16;E >= F && A("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value " + F + ", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.");return b;
	            }, ub: function (a, b) {
	                return Math.ceil(a / (b ? b : 16)) * (b ? b : 16);
	            }, Fg: function (a, b, c) {
	                return c ? +(a >>> 0) + 4294967296 * +(b >>> 0) : +(a >>> 0) + 4294967296 * +(b | 0);
	            }, Pc: 8, ia: 4, Rf: 0 };p.Runtime = z;z.addFunction = z.Vc;z.removeFunction = z.Sd;var H = m,
	            la,
	            ma,
	            ja;function w(a, b) {
	            a || A("Assertion failed: " + b);
	        }function na(a) {
	            var b = p["_" + a];if (!b) try {
	                b = eval("_" + a);
	            } catch (c) {}w(b, "Cannot call unknown function " + a + " (perhaps LLVM optimizations or closure removed it?)");return b;
	        }var oa, pa;
	        (function () {
	            function a(a) {
	                a = a.toString().match(e).slice(1);return { arguments: a[0], body: a[1], returnValue: a[2] };
	            }var b = { stackSave: function () {
	                    z.Tb();
	                }, stackRestore: function () {
	                    z.Sb();
	                }, arrayToC: function (a) {
	                    var b = z.pb(a.length);qa(a, b);return b;
	                }, stringToC: function (a) {
	                    var b = 0;a !== k && a !== g && 0 !== a && (b = z.pb((a.length << 2) + 1), ra(a, b));return b;
	                } },
	                c = { string: b.stringToC, array: b.arrayToC };pa = function (a, b, e, f) {
	                var h = na(a),
	                    s = [],
	                    a = 0;if (f) for (var v = 0; v < f.length; v++) {
	                    var G = c[e[v]];G ? (0 === a && (a = z.Tb()), s[v] = G(f[v])) : s[v] = f[v];
	                }e = h.apply(k, s);"string" === b && (e = ka(e));0 !== a && z.Sb(a);return e;
	            };var e = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/,
	                f = {},
	                h;for (h in b) b.hasOwnProperty(h) && (f[h] = a(b[h]));oa = function (b, c, e) {
	                var e = e || [],
	                    h = na(b),
	                    b = e.every(function (a) {
	                    return "number" === a;
	                }),
	                    x = "string" !== c;if (x && b) return h;var s = e.map(function (a, b) {
	                    return "$" + b;
	                }),
	                    c = "(function(" + s.join(",") + ") {",
	                    v = e.length;if (!b) for (var c = c + ("var stack = " + f.stackSave.body + ";"), G = 0; G < v; G++) {
	                    var ua = s[G],
	                        ea = e[G];"number" !== ea && (ea = f[ea + "ToC"], c += "var " + ea.arguments + " = " + ua + ";", c += ea.body + ";", c += ua + "=" + ea.returnValue + ";");
	                }e = a(function () {
	                    return h;
	                }).returnValue;c += "var ret = " + e + "(" + s.join(",") + ");";x || (e = a(function () {
	                    return ka;
	                }).returnValue, c += "ret = " + e + "(ret);");b || (c += f.stackRestore.body.replace("()", "(stack)") + ";");return eval(c + "return ret})");
	            };
	        })();p.cwrap = oa;p.ccall = pa;
	        function sa(a, b, c) {
	            c = c || "i8";"*" === c.charAt(c.length - 1) && (c = "i32");switch (c) {case "i1":
	                    I[a >> 0] = b;break;case "i8":
	                    I[a >> 0] = b;break;case "i16":
	                    J[a >> 1] = b;break;case "i32":
	                    K[a >> 2] = b;break;case "i64":
	                    ma = [b >>> 0, (la = b, 1 <= +ta(la) ? 0 < la ? (va(+wa(la / 4294967296), 4294967295) | 0) >>> 0 : ~~+xa((la - +(~~la >>> 0)) / 4294967296) >>> 0 : 0)];K[a >> 2] = ma[0];K[a + 4 >> 2] = ma[1];break;case "float":
	                    ya[a >> 2] = b;break;case "double":
	                    za[a >> 3] = b;break;default:
	                    A("invalid type for setValue: " + c);}
	        }p.setValue = sa;
	        function Aa(a, b) {
	            b = b || "i8";"*" === b.charAt(b.length - 1) && (b = "i32");switch (b) {case "i1":
	                    return I[a >> 0];case "i8":
	                    return I[a >> 0];case "i16":
	                    return J[a >> 1];case "i32":
	                    return K[a >> 2];case "i64":
	                    return K[a >> 2];case "float":
	                    return ya[a >> 2];case "double":
	                    return za[a >> 3];default:
	                    A("invalid type for setValue: " + b);}return k;
	        }p.getValue = Aa;var L = 2,
	            Ba = 4;p.ALLOC_NORMAL = 0;p.ALLOC_STACK = 1;p.ALLOC_STATIC = L;p.ALLOC_DYNAMIC = 3;p.ALLOC_NONE = Ba;
	        function M(a, b, c, e) {
	            var f, h;"number" === typeof a ? (f = i, h = a) : (f = m, h = a.length);var j = "string" === typeof b ? b : k,
	                c = c == Ba ? e : [Ca, z.pb, z.Ec, z.bb][c === g ? L : c](Math.max(h, j ? 1 : b.length));if (f) {
	                e = c;w(0 == (c & 3));for (a = c + (h & -4); e < a; e += 4) K[e >> 2] = 0;for (a = c + h; e < a;) I[e++ >> 0] = 0;return c;
	            }if ("i8" === j) return a.subarray || a.slice ? N.set(a, c) : N.set(new Uint8Array(a), c), c;for (var e = 0, l, u; e < h;) {
	                var q = a[e];"function" === typeof q && (q = z.sg(q));f = j || b[e];0 === f ? e++ : ("i64" == f && (f = "i32"), sa(c + e, q, f), u !== f && (l = z.oc(f), u = f), e += l);
	            }return c;
	        }
	        p.allocate = M;function ka(a, b) {
	            if (0 === b || !a) return "";for (var c = m, e, f = 0;;) {
	                e = N[a + f >> 0];if (128 <= e) c = i;else if (0 == e && !b) break;f++;if (b && f == b) break;
	            }b || (b = f);var h = "";if (!c) {
	                for (; 0 < b;) e = String.fromCharCode.apply(String, N.subarray(a, a + Math.min(b, 1024))), h = h ? h + e : e, a += 1024, b -= 1024;return h;
	            }c = new z.Da();for (f = 0; f < b; f++) e = N[a + f >> 0], h += c.nb(e);return h;
	        }p.Pointer_stringify = ka;p.UTF16ToString = function (a) {
	            for (var b = 0, c = "";;) {
	                var e = J[a + 2 * b >> 1];if (0 == e) return c;++b;c += String.fromCharCode(e);
	            }
	        };
	        p.stringToUTF16 = function (a, b) {
	            for (var c = 0; c < a.length; ++c) J[b + 2 * c >> 1] = a.charCodeAt(c);J[b + 2 * a.length >> 1] = 0;
	        };p.UTF32ToString = function (a) {
	            for (var b = 0, c = "";;) {
	                var e = K[a + 4 * b >> 2];if (0 == e) return c;++b;65536 <= e ? (e -= 65536, c += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : c += String.fromCharCode(e);
	            }
	        };p.stringToUTF32 = function (a, b) {
	            for (var c = 0, e = 0; e < a.length; ++e) {
	                var f = a.charCodeAt(e);if (55296 <= f && 57343 >= f) var h = a.charCodeAt(++e),
	                    f = 65536 + ((f & 1023) << 10) | h & 1023;K[b + 4 * c >> 2] = f;++c;
	            }K[b + 4 * c >> 2] = 0;
	        };
	        function Da(a) {
	            function b(c, e, f) {
	                var e = e || Infinity,
	                    h = "",
	                    j = [],
	                    s;if ("N" === a[l]) {
	                    l++;"K" === a[l] && l++;for (s = []; "E" !== a[l];) if ("S" === a[l]) {
	                        l++;var C = a.indexOf("_", l);s.push(q[a.substring(l, C) || 0] || "?");l = C + 1;
	                    } else if ("C" === a[l]) s.push(s[s.length - 1]), l += 2;else {
	                        var C = parseInt(a.substr(l)),
	                            P = C.toString().length;if (!C || !P) {
	                            l--;break;
	                        }var sb = a.substr(l + P, C);s.push(sb);q.push(sb);l += P + C;
	                    }l++;s = s.join("::");e--;if (0 === e) return c ? [s] : s;
	                } else if (("K" === a[l] || x && "L" === a[l]) && l++, C = parseInt(a.substr(l))) P = C.toString().length, s = a.substr(l + P, C), l += P + C;x = m;"I" === a[l] ? (l++, C = b(i), P = b(i, 1, i), h += P[0] + " " + s + "<" + C.join(", ") + ">") : h = s;a: for (; l < a.length && 0 < e--;) if (s = a[l++], s in u) j.push(u[s]);else switch (s) {case "P":
	                        j.push(b(i, 1, i)[0] + "*");break;case "R":
	                        j.push(b(i, 1, i)[0] + "&");break;case "L":
	                        l++;C = a.indexOf("E", l) - l;j.push(a.substr(l, C));l += C + 2;break;case "A":
	                        C = parseInt(a.substr(l));l += C.toString().length;"_" !== a[l] && d("?");l++;j.push(b(i, 1, i)[0] + " [" + C + "]");break;case "E":
	                        break a;default:
	                        h += "?" + s;break a;}!f && 1 === j.length && "void" === j[0] && (j = []);return c ? (h && j.push(h + "?"), j) : h + ("(" + j.join(", ") + ")");
	            }var c = !!p.___cxa_demangle;if (c) try {
	                var e = Ca(a.length);ra(a.substr(1), e);var f = Ca(4),
	                    h = p.___cxa_demangle(e, 0, 0, f);if (0 === Aa(f, "i32") && h) return ka(h);
	            } catch (j) {} finally {
	                e && Ea(e), f && Ea(f), h && Ea(h);
	            }var l = 3,
	                u = { v: "void", b: "bool", c: "char", s: "short", i: "int", l: "long", f: "float", d: "double", w: "wchar_t", a: "signed char", h: "unsigned char", t: "unsigned short", j: "unsigned int", m: "unsigned long", x: "long long", y: "unsigned long long", z: "..." },
	                q = [],
	                x = i,
	                e = a;try {
	                if ("Object._main" == a || "_main" == a) return "main()";"number" === typeof a && (a = ka(a));if ("_" !== a[0] || "_" !== a[1] || "Z" !== a[2]) return a;switch (a[3]) {case "n":
	                        return "operator new()";case "d":
	                        return "operator delete()";}e = b();
	            } catch (s) {
	                e += "?";
	            }0 <= e.indexOf("?") && !c && z.Aa("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return e;
	        }
	        function Fa() {
	            var a;a: {
	                a = Error();if (!a.stack) {
	                    try {
	                        d(Error(0));
	                    } catch (b) {
	                        a = b;
	                    }if (!a.stack) {
	                        a = "(no stack trace available)";break a;
	                    }
	                }a = a.stack.toString();
	            }return a.replace(/__Z[\w\d_]+/g, function (a) {
	                var b = Da(a);return a === b ? a : a + " [" + b + "]";
	            });
	        }p.stackTrace = function () {
	            return Fa();
	        };for (var I, N, J, Ga, K, Ha, ya, za, Ia = 0, D = 0, Ja = 0, y = 0, Ka = 0, La = 0, E = 0, Ma = p.TOTAL_STACK || 5242880, F = p.TOTAL_MEMORY || 52428800, O = 65536; O < F || O < 2 * Ma;) O = 16777216 > O ? 2 * O : O + 16777216;
	        O !== F && (p.fa("increasing TOTAL_MEMORY to " + O + " to be compliant with the asm.js spec"), F = O);w("undefined" !== typeof Int32Array && "undefined" !== typeof Float64Array && !!new Int32Array(1).subarray && !!new Int32Array(1).set, "JS engine does not provide full typed array support");var Q = new ArrayBuffer(F);I = new Int8Array(Q);J = new Int16Array(Q);K = new Int32Array(Q);N = new Uint8Array(Q);Ga = new Uint16Array(Q);Ha = new Uint32Array(Q);ya = new Float32Array(Q);za = new Float64Array(Q);K[0] = 255;w(255 === N[0] && 0 === N[3], "Typed arrays 2 must be run on a little-endian system");
	        p.HEAP = g;p.buffer = Q;p.HEAP8 = I;p.HEAP16 = J;p.HEAP32 = K;p.HEAPU8 = N;p.HEAPU16 = Ga;p.HEAPU32 = Ha;p.HEAPF32 = ya;p.HEAPF64 = za;function Na(a) {
	            for (; 0 < a.length;) {
	                var b = a.shift();if ("function" == typeof b) b();else {
	                    var c = b.ja;"number" === typeof c ? b.Xa === g ? z.Fa("v", c) : z.Fa("vi", c, [b.Xa]) : c(b.Xa === g ? k : b.Xa);
	                }
	            }
	        }var Oa = [],
	            R = [],
	            Pa = [],
	            Qa = [],
	            Ra = [],
	            Sa = m;function Ta(a) {
	            Oa.unshift(a);
	        }p.addOnPreRun = p.Xf = Ta;p.addOnInit = p.Uf = function (a) {
	            R.unshift(a);
	        };p.addOnPreMain = p.Wf = function (a) {
	            Pa.unshift(a);
	        };p.addOnExit = p.Tf = function (a) {
	            Qa.unshift(a);
	        };
	        function Ua(a) {
	            Ra.unshift(a);
	        }p.addOnPostRun = p.Vf = Ua;function Va(a, b, c) {
	            a = new z.Da().Ac(a);c && (a.length = c);b || a.push(0);return a;
	        }p.intArrayFromString = Va;p.intArrayToString = function (a) {
	            for (var b = [], c = 0; c < a.length; c++) {
	                var e = a[c];255 < e && (e &= 255);b.push(String.fromCharCode(e));
	            }return b.join("");
	        };function ra(a, b, c) {
	            a = Va(a, c);for (c = 0; c < a.length;) I[b + c >> 0] = a[c], c += 1;
	        }p.writeStringToMemory = ra;function qa(a, b) {
	            for (var c = 0; c < a.length; c++) I[b + c >> 0] = a[c];
	        }p.writeArrayToMemory = qa;
	        p.writeAsciiToMemory = function (a, b, c) {
	            for (var e = 0; e < a.length; e++) I[b + e >> 0] = a.charCodeAt(e);c || (I[b + a.length >> 0] = 0);
	        };if (!Math.imul || -5 !== Math.imul(4294967295, 5)) Math.imul = function (a, b) {
	            var c = a & 65535,
	                e = b & 65535;return c * e + ((a >>> 16) * e + c * (b >>> 16) << 16) | 0;
	        };Math.vg = Math.imul;var ta = Math.abs,
	            xa = Math.ceil,
	            wa = Math.floor,
	            va = Math.min,
	            S = 0,
	            Wa = k,
	            Xa = k;function Ya() {
	            S++;p.monitorRunDependencies && p.monitorRunDependencies(S);
	        }p.addRunDependency = Ya;
	        function Za() {
	            S--;p.monitorRunDependencies && p.monitorRunDependencies(S);if (0 == S && (Wa !== k && (clearInterval(Wa), Wa = k), Xa)) {
	                var a = Xa;Xa = k;a();
	            }
	        }p.removeRunDependency = Za;p.preloadedImages = {};p.preloadedAudios = {};var T = k,
	            Ia = 8,
	            D = Ia + 7808;R.push();
	        M([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 0, 0, 0, 10, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 47, 31, 15, 0, 23, 27, 29, 30, 7, 11, 13, 14, 39, 43, 45, 46, 16, 3, 5, 10, 12, 19, 21, 26, 28, 35, 37, 42, 44, 1, 2, 4, 8, 17, 18, 20, 24, 6, 9, 22, 25, 32, 33, 34, 36, 40, 38, 41, 0, 16, 1, 2, 4, 8, 32, 3, 5, 10, 12, 15, 47, 7, 11, 13, 14, 6, 9, 31, 35, 37, 42, 44, 33, 34, 36, 40, 39, 43, 45, 46, 17, 18, 20, 24, 19, 21, 26, 28, 23, 27, 29, 30, 22, 25, 38, 41, 17, 1, 0, 0, 0, 0, 0, 0, 34, 18, 1, 1, 0, 0, 0, 0, 50, 34, 18, 2, 0, 0, 0, 0, 67, 51, 34, 34, 18, 18, 2, 2, 83, 67, 51, 35, 18, 18, 2, 2, 19, 35, 67, 51, 99, 83, 2, 2, 0, 0, 101, 85, 68, 68, 52, 52, 35, 35, 35, 35, 19, 19, 19, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 249, 233, 217, 200, 200, 184, 184, 167, 167, 167, 167, 151, 151, 151, 151, 134, 134, 134, 134, 134, 134, 134, 134, 118, 118, 118, 118, 118, 118, 118, 118, 230, 214, 198, 182, 165, 165, 149, 149, 132, 132, 132, 132, 116, 116, 116, 116, 100, 100, 100, 100, 84, 84, 84, 84, 67, 67, 67, 67, 67, 67, 67, 67, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 19, 19, 19, 19, 19, 19, 19, 19, 3, 3, 3, 3, 3, 3, 3, 3, 214, 182, 197, 197, 165, 165, 149, 149, 132, 132, 132, 132, 84, 84, 84, 84, 68, 68, 68, 68, 4, 4, 4, 4, 115, 115, 115, 115, 115, 115, 115, 115, 99, 99, 99, 99, 99, 99, 99, 99, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 19, 19, 19, 19, 19, 19, 19, 19, 197, 181, 165, 5, 148, 148, 116, 116, 52, 52, 36, 36, 131, 131, 131, 131, 99, 99, 99, 99, 83, 83, 83, 83, 67, 67, 67, 67, 19, 19, 19, 19, 181, 149, 164, 164, 132, 132, 36, 36, 20, 20, 4, 4, 115, 115, 115, 115, 99, 99, 99, 99, 83, 83, 83, 83, 67, 67, 67, 67, 51, 51, 51, 51, 166, 6, 21, 21, 132, 132, 132, 132, 147, 147, 147, 147, 147, 147, 147, 147, 115, 115, 115, 115, 115, 115, 115, 115, 99, 99, 99, 99, 99, 99, 99, 99, 83, 83, 83, 83, 83, 83, 83, 83, 67, 67, 67, 67, 67, 67, 67, 67, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 150, 6, 21, 21, 116, 116, 116, 116, 131, 131, 131, 131, 131, 131, 131, 131, 99, 99, 99, 99, 99, 99, 99, 99, 67, 67, 67, 67, 67, 67, 67, 67, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 134, 6, 37, 37, 20, 20, 20, 20, 115, 115, 115, 115, 115, 115, 115, 115, 99, 99, 99, 99, 99, 99, 99, 99, 51, 51, 51, 51, 51, 51, 51, 51, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 22, 6, 117, 117, 36, 36, 36, 36, 83, 83, 83, 83, 83, 83, 83, 83, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 21, 5, 100, 100, 35, 35, 35, 35, 82, 82, 82, 82, 82, 82, 82, 82, 66, 66, 66, 66, 66, 66, 66, 66, 50, 50, 50, 50, 50, 50, 50, 50, 4, 20, 35, 35, 51, 51, 83, 83, 65, 65, 65, 65, 65, 65, 65, 65, 4, 20, 67, 67, 34, 34, 34, 34, 49, 49, 49, 49, 49, 49, 49, 49, 3, 19, 50, 50, 33, 33, 33, 33, 2, 18, 33, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 32, 38, 16, 6, 8, 101, 24, 101, 24, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 0, 0, 0, 0, 0, 0, 0, 0, 106, 64, 74, 48, 42, 40, 10, 32, 105, 56, 105, 56, 73, 40, 73, 40, 41, 32, 41, 32, 9, 24, 9, 24, 104, 48, 104, 48, 104, 48, 104, 48, 72, 32, 72, 32, 72, 32, 72, 32, 40, 24, 40, 24, 40, 24, 40, 24, 8, 16, 8, 16, 8, 16, 8, 16, 103, 40, 103, 40, 103, 40, 103, 40, 103, 40, 103, 40, 103, 40, 103, 40, 71, 24, 71, 24, 71, 24, 71, 24, 71, 24, 71, 24, 71, 24, 71, 24, 110, 96, 78, 88, 46, 80, 14, 80, 110, 88, 78, 80, 46, 72, 14, 72, 13, 64, 13, 64, 77, 72, 77, 72, 45, 64, 45, 64, 13, 56, 13, 56, 109, 80, 109, 80, 77, 64, 77, 64, 45, 56, 45, 56, 13, 48, 13, 48, 107, 72, 107, 72, 107, 72, 107, 72, 107, 72, 107, 72, 107, 72, 107, 72, 75, 56, 75, 56, 75, 56, 75, 56, 75, 56, 75, 56, 75, 56, 75, 56, 43, 48, 43, 48, 43, 48, 43, 48, 43, 48, 43, 48, 43, 48, 43, 48, 11, 40, 11, 40, 11, 40, 11, 40, 11, 40, 11, 40, 11, 40, 11, 40, 0, 0, 0, 0, 47, 104, 47, 104, 16, 128, 80, 128, 48, 128, 16, 120, 112, 128, 80, 120, 48, 120, 16, 112, 112, 120, 80, 112, 48, 112, 16, 104, 111, 112, 111, 112, 79, 104, 79, 104, 47, 96, 47, 96, 15, 96, 15, 96, 111, 104, 111, 104, 79, 96, 79, 96, 47, 88, 47, 88, 15, 88, 15, 88, 0, 0, 0, 0, 0, 0, 0, 0, 102, 56, 70, 32, 38, 32, 6, 16, 102, 48, 70, 24, 38, 24, 6, 8, 101, 40, 101, 40, 37, 16, 37, 16, 100, 32, 100, 32, 100, 32, 100, 32, 100, 24, 100, 24, 100, 24, 100, 24, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 0, 0, 0, 0, 0, 0, 0, 0, 105, 72, 73, 56, 41, 56, 9, 48, 8, 40, 8, 40, 72, 48, 72, 48, 40, 48, 40, 48, 8, 32, 8, 32, 103, 64, 103, 64, 103, 64, 103, 64, 71, 40, 71, 40, 71, 40, 71, 40, 39, 40, 39, 40, 39, 40, 39, 40, 7, 24, 7, 24, 7, 24, 7, 24, 0, 0, 0, 0, 109, 120, 109, 120, 110, 128, 78, 128, 46, 128, 14, 128, 46, 120, 14, 120, 78, 120, 46, 112, 77, 112, 77, 112, 13, 112, 13, 112, 109, 112, 109, 112, 77, 104, 77, 104, 45, 104, 45, 104, 13, 104, 13, 104, 109, 104, 109, 104, 77, 96, 77, 96, 45, 96, 45, 96, 13, 96, 13, 96, 12, 88, 12, 88, 12, 88, 12, 88, 76, 88, 76, 88, 76, 88, 76, 88, 44, 88, 44, 88, 44, 88, 44, 88, 12, 80, 12, 80, 12, 80, 12, 80, 108, 96, 108, 96, 108, 96, 108, 96, 76, 80, 76, 80, 76, 80, 76, 80, 44, 80, 44, 80, 44, 80, 44, 80, 12, 72, 12, 72, 12, 72, 12, 72, 107, 88, 107, 88, 107, 88, 107, 88, 107, 88, 107, 88, 107, 88, 107, 88, 75, 72, 75, 72, 75, 72, 75, 72, 75, 72, 75, 72, 75, 72, 75, 72, 43, 72, 43, 72, 43, 72, 43, 72, 43, 72, 43, 72, 43, 72, 43, 72, 11, 64, 11, 64, 11, 64, 11, 64, 11, 64, 11, 64, 11, 64, 11, 64, 107, 80, 107, 80, 107, 80, 107, 80, 107, 80, 107, 80, 107, 80, 107, 80, 75, 64, 75, 64, 75, 64, 75, 64, 75, 64, 75, 64, 75, 64, 75, 64, 43, 64, 43, 64, 43, 64, 43, 64, 43, 64, 43, 64, 43, 64, 43, 64, 11, 56, 11, 56, 11, 56, 11, 56, 11, 56, 11, 56, 11, 56, 11, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 24, 70, 56, 38, 56, 6, 16, 102, 72, 70, 48, 38, 48, 6, 8, 37, 40, 37, 40, 69, 40, 69, 40, 37, 32, 37, 32, 69, 32, 69, 32, 37, 24, 37, 24, 101, 64, 101, 64, 69, 24, 69, 24, 37, 16, 37, 16, 100, 56, 100, 56, 100, 56, 100, 56, 100, 48, 100, 48, 100, 48, 100, 48, 100, 40, 100, 40, 100, 40, 100, 40, 100, 32, 100, 32, 100, 32, 100, 32, 100, 24, 100, 24, 100, 24, 100, 24, 68, 16, 68, 16, 68, 16, 68, 16, 36, 8, 36, 8, 36, 8, 36, 8, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 10, 128, 106, 128, 74, 128, 42, 128, 10, 120, 106, 120, 74, 120, 42, 120, 10, 112, 106, 112, 74, 112, 42, 112, 10, 104, 41, 104, 41, 104, 9, 96, 9, 96, 73, 104, 73, 104, 41, 96, 41, 96, 9, 88, 9, 88, 105, 104, 105, 104, 73, 96, 73, 96, 41, 88, 41, 88, 9, 80, 9, 80, 104, 96, 104, 96, 104, 96, 104, 96, 72, 88, 72, 88, 72, 88, 72, 88, 40, 80, 40, 80, 40, 80, 40, 80, 8, 72, 8, 72, 8, 72, 8, 72, 104, 88, 104, 88, 104, 88, 104, 88, 72, 80, 72, 80, 72, 80, 72, 80, 40, 72, 40, 72, 40, 72, 40, 72, 8, 64, 8, 64, 8, 64, 8, 64, 7, 56, 7, 56, 7, 56, 7, 56, 7, 56, 7, 56, 7, 56, 7, 56, 7, 48, 7, 48, 7, 48, 7, 48, 7, 48, 7, 48, 7, 48, 7, 48, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 7, 40, 7, 40, 7, 40, 7, 40, 7, 40, 7, 40, 7, 40, 7, 40, 103, 80, 103, 80, 103, 80, 103, 80, 103, 80, 103, 80, 103, 80, 103, 80, 71, 64, 71, 64, 71, 64, 71, 64, 71, 64, 71, 64, 71, 64, 71, 64, 39, 64, 39, 64, 39, 64, 39, 64, 39, 64, 39, 64, 39, 64, 39, 64, 7, 32, 7, 32, 7, 32, 7, 32, 7, 32, 7, 32, 7, 32, 7, 32, 6, 8, 38, 8, 0, 0, 6, 0, 6, 16, 38, 16, 70, 16, 0, 0, 6, 24, 38, 24, 70, 24, 102, 24, 6, 32, 38, 32, 70, 32, 102, 32, 6, 40, 38, 40, 70, 40, 102, 40, 6, 48, 38, 48, 70, 48, 102, 48, 6, 56, 38, 56, 70, 56, 102, 56, 6, 64, 38, 64, 70, 64, 102, 64, 6, 72, 38, 72, 70, 72, 102, 72, 6, 80, 38, 80, 70, 80, 102, 80, 6, 88, 38, 88, 70, 88, 102, 88, 6, 96, 38, 96, 70, 96, 102, 96, 6, 104, 38, 104, 70, 104, 102, 104, 6, 112, 38, 112, 70, 112, 102, 112, 6, 120, 38, 120, 70, 120, 102, 120, 6, 128, 38, 128, 70, 128, 102, 128, 0, 0, 67, 16, 2, 0, 2, 0, 33, 8, 33, 8, 33, 8, 33, 8, 103, 32, 103, 32, 72, 32, 40, 32, 71, 24, 71, 24, 39, 24, 39, 24, 6, 32, 6, 32, 6, 32, 6, 32, 6, 24, 6, 24, 6, 24, 6, 24, 6, 16, 6, 16, 6, 16, 6, 16, 102, 24, 102, 24, 102, 24, 102, 24, 38, 16, 38, 16, 38, 16, 38, 16, 6, 8, 6, 8, 6, 8, 6, 8, 3, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 3, 0, 0, 0, 19, 0, 0, 0, 1, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 23, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 255, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 255, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 255, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 2, 0, 0, 0, 18, 0, 0, 0, 4, 0, 0, 0, 17, 0, 0, 0, 255, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 2, 0, 0, 0, 22, 0, 0, 0, 4, 0, 0, 0, 21, 0, 0, 0, 255, 0, 0, 0, 20, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 18, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 4, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 4, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 0, 0, 0, 15, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 4, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 255, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 12, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 255, 0, 0, 0, 12, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 8, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 255, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 11, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 20, 22, 25, 28, 32, 36, 40, 45, 50, 56, 63, 71, 80, 90, 101, 113, 127, 144, 162, 182, 203, 226, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 3, 1, 2, 3, 2, 2, 3, 2, 2, 4, 2, 3, 4, 2, 3, 4, 3, 3, 5, 3, 4, 6, 3, 4, 6, 4, 5, 7, 4, 5, 8, 4, 6, 9, 5, 7, 10, 6, 8, 11, 6, 8, 13, 7, 10, 14, 8, 11, 16, 9, 12, 18, 10, 13, 20, 11, 15, 23, 13, 17, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 69, 67, 79, 68, 69, 82, 32, 73, 78, 73, 84, 73, 65, 76, 73, 90, 65, 84, 73, 79, 78, 32, 70, 65, 73, 76, 69, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", Ba, z.Pc);var $a = z.ub(M(12, "i8", L), 8);w(0 == $a % 8);
	        var U = { O: 1, Q: 2, Ef: 3, De: 4, ha: 5, Zb: 6, be: 7, $e: 8, V: 9, oe: 10, Ca: 11, Of: 11, Mc: 12, qb: 13, ye: 14, mf: 15, ga: 16, Xb: 17, Oc: 18, Qa: 19, Sa: 20, pa: 21, B: 22, Ve: 23, Lc: 24, Nc: 25, Lf: 26, ze: 27, hf: 28, Ua: 29, Bf: 30, Oe: 31, uf: 32, ve: 33, yf: 34, df: 42, Be: 43, pe: 44, Fe: 45, Ge: 46, He: 47, Ne: 48, Mf: 49, Ye: 50, Ee: 51, te: 35, af: 37, ge: 52, je: 53, Pf: 54, We: 55, ke: 56, le: 57, ue: 35, me: 59, kf: 60, Ze: 61, If: 62, jf: 63, ef: 64, ff: 65, Af: 66, bf: 67, ee: 68, Ff: 69, qe: 70, vf: 71, Qe: 72, we: 73, ie: 74, qf: 76, he: 77, zf: 78, Ie: 79, Je: 80, Me: 81, Le: 82, Ke: 83, lf: 38, sb: 39, Re: 36, rb: 40, Ta: 95, tf: 96, se: 104,
	            Xe: 105, fe: 97, xf: 91, of: 88, gf: 92, Cf: 108, Wb: 111, ce: 98, re: 103, Ue: 101, Se: 100, Jf: 110, Ae: 112, Yb: 113, Jc: 115, Hc: 114, Ic: 89, Pe: 90, wf: 93, Df: 94, de: 99, Te: 102, Kc: 106, Ra: 107, Kf: 109, Nf: 87, xe: 122, Gf: 116, pf: 95, cf: 123, Ce: 84, rf: 75, ne: 125, nf: 131, sf: 130, Hf: 86 },
	            ab = { "0": "Success", 1: "Not super-user", 2: "No such file or directory", 3: "No such process", 4: "Interrupted system call", 5: "I/O error", 6: "No such device or address", 7: "Arg list too long", 8: "Exec format error", 9: "Bad file number", 10: "No children", 11: "No more processes",
	            12: "Not enough core", 13: "Permission denied", 14: "Bad address", 15: "Block device required", 16: "Mount device busy", 17: "File exists", 18: "Cross-device link", 19: "No such device", 20: "Not a directory", 21: "Is a directory", 22: "Invalid argument", 23: "Too many open files in system", 24: "Too many open files", 25: "Not a typewriter", 26: "Text file busy", 27: "File too large", 28: "No space left on device", 29: "Illegal seek", 30: "Read only file system", 31: "Too many links", 32: "Broken pipe", 33: "Math arg out of domain of func",
	            34: "Math result not representable", 35: "File locking deadlock error", 36: "File or path name too long", 37: "No record locks available", 38: "Function not implemented", 39: "Directory not empty", 40: "Too many symbolic links", 42: "No message of desired type", 43: "Identifier removed", 44: "Channel number out of range", 45: "Level 2 not synchronized", 46: "Level 3 halted", 47: "Level 3 reset", 48: "Link number out of range", 49: "Protocol driver not attached", 50: "No CSI structure available", 51: "Level 2 halted", 52: "Invalid exchange",
	            53: "Invalid request descriptor", 54: "Exchange full", 55: "No anode", 56: "Invalid request code", 57: "Invalid slot", 59: "Bad font file fmt", 60: "Device not a stream", 61: "No data (for no delay io)", 62: "Timer expired", 63: "Out of streams resources", 64: "Machine is not on the network", 65: "Package not installed", 66: "The object is remote", 67: "The link has been severed", 68: "Advertise error", 69: "Srmount error", 70: "Communication error on send", 71: "Protocol error", 72: "Multihop attempted", 73: "Cross mount point (not really error)",
	            74: "Trying to read unreadable message", 75: "Value too large for defined data type", 76: "Given log. name not unique", 77: "f.d. invalid for this operation", 78: "Remote address changed", 79: "Can   access a needed shared lib", 80: "Accessing a corrupted shared lib", 81: ".lib section in a.out corrupted", 82: "Attempting to link in too many libs", 83: "Attempting to exec a shared library", 84: "Illegal byte sequence", 86: "Streams pipe error", 87: "Too many users", 88: "Socket operation on non-socket", 89: "Destination address required",
	            90: "Message too long", 91: "Protocol wrong type for socket", 92: "Protocol not available", 93: "Unknown protocol", 94: "Socket type not supported", 95: "Not supported", 96: "Protocol family not supported", 97: "Address family not supported by protocol family", 98: "Address already in use", 99: "Address not available", 100: "Network interface is not configured", 101: "Network is unreachable", 102: "Connection reset by network", 103: "Connection aborted", 104: "Connection reset by peer", 105: "No buffer space available", 106: "Socket is already connected",
	            107: "Socket is not connected", 108: "Can't send after socket shutdown", 109: "Too many references", 110: "Connection timed out", 111: "Connection refused", 112: "Host is down", 113: "Host is unreachable", 114: "Socket already connected", 115: "Connection already in progress", 116: "Stale file handle", 122: "Quota exceeded", 123: "No medium (in tape drive)", 125: "Operation canceled", 130: "Previous owner died", 131: "State not recoverable" },
	            bb = 0;function V(a) {
	            return K[bb >> 2] = a;
	        }
	        function cb(a, b) {
	            for (var c = 0, e = a.length - 1; 0 <= e; e--) {
	                var f = a[e];"." === f ? a.splice(e, 1) : ".." === f ? (a.splice(e, 1), c++) : c && (a.splice(e, 1), c--);
	            }if (b) for (; c--; c) a.unshift("..");return a;
	        }function db(a) {
	            var b = "/" === a.charAt(0),
	                c = "/" === a.substr(-1),
	                a = cb(a.split("/").filter(function (a) {
	                return !!a;
	            }), !b).join("/");!a && !b && (a = ".");a && c && (a += "/");return (b ? "/" : "") + a;
	        }
	        function eb(a) {
	            var b = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1),
	                a = b[0],
	                b = b[1];if (!a && !b) return ".";b && (b = b.substr(0, b.length - 1));return a + b;
	        }function W(a) {
	            if ("/" === a) return "/";var b = a.lastIndexOf("/");return -1 === b ? a : a.substr(b + 1);
	        }function fb() {
	            var a = Array.prototype.slice.call(arguments, 0);return db(a.join("/"));
	        }function X(a, b) {
	            return db(a + "/" + b);
	        }
	        function gb() {
	            for (var a = "", b = m, c = arguments.length - 1; -1 <= c && !b; c--) {
	                b = 0 <= c ? arguments[c] : B.yb();"string" !== typeof b && d(new TypeError("Arguments to path.resolve must be strings"));if (!b) return "";a = b + "/" + a;b = "/" === b.charAt(0);
	            }a = cb(a.split("/").filter(function (a) {
	                return !!a;
	            }), !b).join("/");return (b ? "/" : "") + a || ".";
	        }
	        function hb(a, b) {
	            function c(a) {
	                for (var b = 0; b < a.length && "" === a[b]; b++);for (var c = a.length - 1; 0 <= c && "" === a[c]; c--);return b > c ? [] : a.slice(b, c - b + 1);
	            }for (var a = gb(a).substr(1), b = gb(b).substr(1), e = c(a.split("/")), f = c(b.split("/")), h = Math.min(e.length, f.length), j = h, l = 0; l < h; l++) if (e[l] !== f[l]) {
	                j = l;break;
	            }h = [];for (l = j; l < e.length; l++) h.push("..");h = h.concat(f.slice(j));return h.join("/");
	        }var ib = [];function jb(a, b) {
	            ib[a] = { input: [], K: [], sa: b };B.Ob(a, kb);
	        }
	        var kb = { open: function (a) {
	                var b = ib[a.g.ob];b || d(new B.e(U.Qa));a.N = b;a.seekable = m;
	            }, close: function (a) {
	                a.N.sa.flush(a.N);
	            }, flush: function (a) {
	                a.N.sa.flush(a.N);
	            }, M: function (a, b, c, e) {
	                (!a.N || !a.N.sa.rc) && d(new B.e(U.Zb));for (var f = 0, h = 0; h < e; h++) {
	                    var j;try {
	                        j = a.N.sa.rc(a.N);
	                    } catch (l) {
	                        d(new B.e(U.ha));
	                    }j === g && 0 === f && d(new B.e(U.Ca));if (j === k || j === g) break;f++;b[c + h] = j;
	                }f && (a.g.timestamp = Date.now());return f;
	            }, write: function (a, b, c, e) {
	                (!a.N || !a.N.sa.Lb) && d(new B.e(U.Zb));for (var f = 0; f < e; f++) try {
	                    a.N.sa.Lb(a.N, b[c + f]);
	                } catch (h) {
	                    d(new B.e(U.ha));
	                }e && (a.g.timestamp = Date.now());return f;
	            } },
	            mb = { rc: function (a) {
	                if (!a.input.length) {
	                    var b = k;if (t) {
	                        if (b = process.stdin.read(), !b) {
	                            if (process.stdin._readableState && process.stdin._readableState.ended) return k;return;
	                        }
	                    } else "undefined" != typeof window && "function" == typeof window.prompt ? (b = window.prompt("Input: "), b !== k && (b += "\n")) : "function" == typeof readline && (b = readline(), b !== k && (b += "\n"));if (!b) return k;a.input = Va(b, i);
	                }return a.input.shift();
	            }, flush: function (a) {
	                a.K && 0 < a.K.length && (p.print(a.K.join("")), a.K = []);
	            },
	            Lb: function (a, b) {
	                b === k || 10 === b ? (p.print(a.K.join("")), a.K = []) : a.K.push(lb.nb(b));
	            } },
	            nb = { Lb: function (a, b) {
	                b === k || 10 === b ? (p.printErr(a.K.join("")), a.K = []) : a.K.push(lb.nb(b));
	            }, flush: function (a) {
	                a.K && 0 < a.K.length && (p.printErr(a.K.join("")), a.K = []);
	            } },
	            Y = { U: k, F: function () {
	                return Y.createNode(k, "/", 16895, 0);
	            }, createNode: function (a, b, c, e) {
	                (B.Bd(c) || B.Cd(c)) && d(new B.e(U.O));Y.U || (Y.U = { dir: { g: { S: Y.n.S, I: Y.n.I, ra: Y.n.ra, ba: Y.n.ba, rename: Y.n.rename, za: Y.n.za, Oa: Y.n.Oa, Na: Y.n.Na, ca: Y.n.ca }, A: { $: Y.p.$ } }, file: { g: { S: Y.n.S,
	                            I: Y.n.I }, A: { $: Y.p.$, M: Y.p.M, write: Y.p.write, Ea: Y.p.Ea, Ja: Y.p.Ja } }, link: { g: { S: Y.n.S, I: Y.n.I, ta: Y.n.ta }, A: {} }, ec: { g: { S: Y.n.S, I: Y.n.I }, A: B.bd } });c = B.createNode(a, b, c, e);B.J(c.mode) ? (c.n = Y.U.dir.g, c.p = Y.U.dir.A, c.k = {}) : B.isFile(c.mode) ? (c.n = Y.U.file.g, c.p = Y.U.file.A, c.q = 0, c.k = k) : B.Ia(c.mode) ? (c.n = Y.U.link.g, c.p = Y.U.link.A) : B.ib(c.mode) && (c.n = Y.U.ec.g, c.p = Y.U.ec.A);c.timestamp = Date.now();a && (a.k[b] = c);return c;
	            }, ud: function (a) {
	                if (a.k && a.k.subarray) {
	                    for (var b = [], c = 0; c < a.q; ++c) b.push(a.k[c]);return b;
	                }return a.k;
	            },
	            qg: function (a) {
	                return !a.k ? new Uint8Array() : a.k.subarray ? a.k.subarray(0, a.q) : new Uint8Array(a.k);
	            }, lc: function (a, b) {
	                a.k && a.k.subarray && b > a.k.length && (a.k = Y.ud(a), a.q = a.k.length);if (!a.k || a.k.subarray) {
	                    var c = a.k ? a.k.buffer.byteLength : 0;c >= b || (b = Math.max(b, c * (1048576 > c ? 2 : 1.125) | 0), 0 != c && (b = Math.max(b, 256)), c = a.k, a.k = new Uint8Array(b), 0 < a.q && a.k.set(c.subarray(0, a.q), 0));
	                } else {
	                    !a.k && 0 < b && (a.k = []);for (; a.k.length < b;) a.k.push(0);
	                }
	            }, Ud: function (a, b) {
	                if (a.q != b) if (0 == b) a.k = k, a.q = 0;else {
	                    if (!a.k || a.k.subarray) {
	                        var c = a.k;a.k = new Uint8Array(new ArrayBuffer(b));c && a.k.set(c.subarray(0, Math.min(b, a.q)));
	                    } else if (a.k || (a.k = []), a.k.length > b) a.k.length = b;else for (; a.k.length < b;) a.k.push(0);a.q = b;
	                }
	            }, n: { S: function (a) {
	                    var b = {};b.gg = B.ib(a.mode) ? a.id : 1;b.wg = a.id;b.mode = a.mode;b.Ig = 1;b.uid = 0;b.ug = 0;b.ob = a.ob;b.size = B.J(a.mode) ? 4096 : B.isFile(a.mode) ? a.q : B.Ia(a.mode) ? a.link.length : 0;b.Zf = new Date(a.timestamp);b.Hg = new Date(a.timestamp);b.eg = new Date(a.timestamp);b.Zc = 4096;b.$f = Math.ceil(b.size / b.Zc);return b;
	                }, I: function (a, b) {
	                    b.mode !== g && (a.mode = b.mode);b.timestamp !== g && (a.timestamp = b.timestamp);b.size !== g && Y.Ud(a, b.size);
	                }, ra: function () {
	                    d(B.Db[U.Q]);
	                }, ba: function (a, b, c, e) {
	                    return Y.createNode(a, b, c, e);
	                }, rename: function (a, b, c) {
	                    if (B.J(a.mode)) {
	                        var e;try {
	                            e = B.aa(b, c);
	                        } catch (f) {}if (e) for (var h in e.k) d(new B.e(U.sb));
	                    }delete a.parent.k[a.name];a.name = c;b.k[c] = a;a.parent = b;
	                }, za: function (a, b) {
	                    delete a.k[b];
	                }, Oa: function (a, b) {
	                    var c = B.aa(a, b),
	                        e;for (e in c.k) d(new B.e(U.sb));delete a.k[b];
	                }, Na: function (a) {
	                    var b = [".", ".."],
	                        c;for (c in a.k) a.k.hasOwnProperty(c) && b.push(c);return b;
	                }, ca: function (a, b, c) {
	                    a = Y.createNode(a, b, 41471, 0);a.link = c;return a;
	                }, ta: function (a) {
	                    B.Ia(a.mode) || d(new B.e(U.B));return a.link;
	                } }, p: { M: function (a, b, c, e, f) {
	                    var h = a.g.k;if (f >= a.g.q) return 0;a = Math.min(a.g.q - f, e);w(0 <= a);if (8 < a && h.subarray) b.set(h.subarray(f, f + a), c);else for (e = 0; e < a; e++) b[c + e] = h[f + e];return a;
	                }, write: function (a, b, c, e, f, h) {
	                    if (!e) return 0;a = a.g;a.timestamp = Date.now();if (b.subarray && (!a.k || a.k.subarray)) {
	                        if (h) return a.k = b.subarray(c, c + e), a.q = e;if (0 === a.q && 0 === f) return a.k = new Uint8Array(b.subarray(c, c + e)), a.q = e;if (f + e <= a.q) return a.k.set(b.subarray(c, c + e), f), e;
	                    }Y.lc(a, f + e);if (a.k.subarray && b.subarray) a.k.set(b.subarray(c, c + e), f);else for (h = 0; h < e; h++) a.k[f + h] = b[c + h];a.q = Math.max(a.q, f + e);return e;
	                }, $: function (a, b, c) {
	                    1 === c ? b += a.position : 2 === c && B.isFile(a.g.mode) && (b += a.g.q);0 > b && d(new B.e(U.B));return b;
	                }, Ea: function (a, b, c) {
	                    Y.lc(a.g, b + c);a.g.q = Math.max(a.g.q, b + c);
	                }, Ja: function (a, b, c, e, f, h, j) {
	                    B.isFile(a.g.mode) || d(new B.e(U.Qa));c = a.g.k;if (!(j & 2) && (c.buffer === b || c.buffer === b.buffer)) a = m, e = c.byteOffset;else {
	                        if (0 < f || f + e < a.g.q) c = c.subarray ? c.subarray(f, f + e) : Array.prototype.slice.call(c, f, f + e);a = i;(e = Ca(e)) || d(new B.e(U.Mc));b.set(c, e);
	                    }return { Lg: e, Yf: a };
	                } } },
	            ob = M(1, "i32*", L),
	            pb = M(1, "i32*", L),
	            qb = M(1, "i32*", L),
	            B = { root: k, La: [], ic: [k], oa: [], Jd: 1, T: k, hc: "/", hb: m, vc: i, H: {}, Gc: { yc: { Rc: 1, Sc: 2 } }, e: k, Db: {}, sc: function (a) {
	                a instanceof B.e || d(a + " : " + Fa());return V(a.cb);
	            }, u: function (a, b) {
	                a = gb(B.yb(), a);b = b || {};if (!a) return { path: "", g: k };var c = { Bb: i, Nb: 0 },
	                    e;for (e in c) b[e] === g && (b[e] = c[e]);8 < b.Nb && d(new B.e(U.rb));var c = cb(a.split("/").filter(function (a) {
	                    return !!a;
	                }), m),
	                    f = B.root;e = "/";for (var h = 0; h < c.length; h++) {
	                    var j = h === c.length - 1;if (j && b.parent) break;f = B.aa(f, c[h]);e = X(e, c[h]);if (B.ka(f) && (!j || j && b.Bb)) f = f.Ka.root;if (!j || b.R) for (j = 0; B.Ia(f.mode);) f = B.ta(e), e = gb(eb(e), f), f = B.u(e, { Nb: b.Nb }).g, 40 < j++ && d(new B.e(U.rb));
	                }return { path: e, g: f };
	            }, da: function (a) {
	                for (var b;;) {
	                    if (B.jb(a)) return a = a.F.Id, !b ? a : "/" !== a[a.length - 1] ? a + "/" + b : a + b;b = b ? a.name + "/" + b : a.name;a = a.parent;
	                }
	            }, Fb: function (a, b) {
	                for (var c = 0, e = 0; e < b.length; e++) c = (c << 5) - c + b.charCodeAt(e) | 0;return (a + c >>> 0) % B.T.length;
	            }, tc: function (a) {
	                var b = B.Fb(a.parent.id, a.name);a.ma = B.T[b];B.T[b] = a;
	            }, uc: function (a) {
	                var b = B.Fb(a.parent.id, a.name);if (B.T[b] === a) B.T[b] = a.ma;else for (b = B.T[b]; b;) {
	                    if (b.ma === a) {
	                        b.ma = a.ma;break;
	                    }b = b.ma;
	                }
	            }, aa: function (a, b) {
	                var c = B.Gd(a);c && d(new B.e(c, a));for (c = B.T[B.Fb(a.id, b)]; c; c = c.ma) {
	                    var e = c.name;if (c.parent.id === a.id && e === b) return c;
	                }return B.ra(a, b);
	            }, createNode: function (a, b, c, e) {
	                B.Va || (B.Va = function (a, b, c, e) {
	                    a || (a = this);this.parent = a;this.F = a.F;this.Ka = k;this.id = B.Jd++;this.name = b;this.mode = c;this.n = {};this.p = {};this.ob = e;
	                }, B.Va.prototype = {}, Object.defineProperties(B.Va.prototype, { M: { get: function () {
	                            return 365 === (this.mode & 365);
	                        }, set: function (a) {
	                            a ? this.mode |= 365 : this.mode &= -366;
	                        } }, write: { get: function () {
	                            return 146 === (this.mode & 146);
	                        }, set: function (a) {
	                            a ? this.mode |= 146 : this.mode &= -147;
	                        } }, Dd: { get: function () {
	                            return B.J(this.mode);
	                        } }, Gb: { get: function () {
	                            return B.ib(this.mode);
	                        } } }));a = new B.Va(a, b, c, e);B.tc(a);return a;
	            },
	            zb: function (a) {
	                B.uc(a);
	            }, jb: function (a) {
	                return a === a.parent;
	            }, ka: function (a) {
	                return !!a.Ka;
	            }, isFile: function (a) {
	                return 32768 === (a & 61440);
	            }, J: function (a) {
	                return 16384 === (a & 61440);
	            }, Ia: function (a) {
	                return 40960 === (a & 61440);
	            }, ib: function (a) {
	                return 8192 === (a & 61440);
	            }, Bd: function (a) {
	                return 24576 === (a & 61440);
	            }, Cd: function (a) {
	                return 4096 === (a & 61440);
	            }, Ed: function (a) {
	                return 49152 === (a & 49152);
	            }, rd: { r: 0, rs: 1052672, "r+": 2, w: 577, wx: 705, xw: 705, "w+": 578, "wx+": 706, "xw+": 706, a: 1089, ax: 1217, xa: 1217, "a+": 1090, "ax+": 1218, "xa+": 1218 },
	            wc: function (a) {
	                var b = B.rd[a];"undefined" === typeof b && d(Error("Unknown file open mode: " + a));return b;
	            }, sd: function (a) {
	                var b = ["r", "w", "rw"][a & 2097155];a & 512 && (b += "w");return b;
	            }, na: function (a, b) {
	                return B.vc ? 0 : -1 !== b.indexOf("r") && !(a.mode & 292) || -1 !== b.indexOf("w") && !(a.mode & 146) || -1 !== b.indexOf("x") && !(a.mode & 73) ? U.qb : 0;
	            }, Gd: function (a) {
	                var b = B.na(a, "x");return b ? b : !a.n.ra ? U.qb : 0;
	            }, Jb: function (a, b) {
	                try {
	                    return B.aa(a, b), U.Xb;
	                } catch (c) {}return B.na(a, "wx");
	            }, kb: function (a, b, c) {
	                var e;try {
	                    e = B.aa(a, b);
	                } catch (f) {
	                    return f.cb;
	                }if (a = B.na(a, "wx")) return a;if (c) {
	                    if (!B.J(e.mode)) return U.Sa;if (B.jb(e) || B.da(e) === B.yb()) return U.ga;
	                } else if (B.J(e.mode)) return U.pa;return 0;
	            }, Hd: function (a, b) {
	                return !a ? U.Q : B.Ia(a.mode) ? U.rb : B.J(a.mode) && (0 !== (b & 2097155) || b & 512) ? U.pa : B.na(a, B.sd(b));
	            }, Qc: 4096, Kd: function (a, b) {
	                for (var b = b || B.Qc, c = a || 0; c <= b; c++) if (!B.oa[c]) return c;d(new B.e(U.Lc));
	            }, qa: function (a) {
	                return B.oa[a];
	            }, fc: function (a, b, c) {
	                B.Wa || (B.Wa = n(), B.Wa.prototype = {}, Object.defineProperties(B.Wa.prototype, { object: { get: function () {
	                            return this.g;
	                        },
	                        set: function (a) {
	                            this.g = a;
	                        } }, yg: { get: function () {
	                            return 1 !== (this.D & 2097155);
	                        } }, zg: { get: function () {
	                            return 0 !== (this.D & 2097155);
	                        } }, xg: { get: function () {
	                            return this.D & 1024;
	                        } } }));var e = new B.Wa(),
	                    f;for (f in a) e[f] = a[f];a = e;b = B.Kd(b, c);a.C = b;return B.oa[b] = a;
	            }, dd: function (a) {
	                B.oa[a] = k;
	            }, pc: function (a) {
	                return B.oa[a - 1];
	            }, Eb: function (a) {
	                return a ? a.C + 1 : 0;
	            }, bd: { open: function (a) {
	                    a.p = B.td(a.g.ob).p;a.p.open && a.p.open(a);
	                }, $: function () {
	                    d(new B.e(U.Ua));
	                } }, Ib: function (a) {
	                return a >> 8;
	            }, Gg: function (a) {
	                return a & 255;
	            }, la: function (a, b) {
	                return a << 8 | b;
	            }, Ob: function (a, b) {
	                B.ic[a] = { p: b };
	            }, td: function (a) {
	                return B.ic[a];
	            }, nc: function (a) {
	                for (var b = [], a = [a]; a.length;) {
	                    var c = a.pop();b.push(c);a.push.apply(a, c.La);
	                }return b;
	            }, Fc: function (a, b) {
	                function c(a) {
	                    if (a) {
	                        if (!c.pd) return c.pd = i, b(a);
	                    } else ++f >= e.length && b(k);
	                }"function" === typeof a && (b = a, a = m);var e = B.nc(B.root.F),
	                    f = 0;e.forEach(function (b) {
	                    if (!b.type.Fc) return c(k);b.type.Fc(b, a, c);
	                });
	            }, F: function (a, b, c) {
	                var e = "/" === c,
	                    f = !c,
	                    h;e && B.root && d(new B.e(U.ga));!e && !f && (h = B.u(c, { Bb: m }), c = h.path, h = h.g, B.ka(h) && d(new B.e(U.ga)), B.J(h.mode) || d(new B.e(U.Sa)));b = { type: a, Kg: b, Id: c, La: [] };a = a.F(b);a.F = b;b.root = a;e ? B.root = a : h && (h.Ka = b, h.F && h.F.La.push(b));return a;
	            }, Qg: function (a) {
	                a = B.u(a, { Bb: m });B.ka(a.g) || d(new B.e(U.B));var a = a.g,
	                    b = a.Ka,
	                    c = B.nc(b);Object.keys(B.T).forEach(function (a) {
	                    for (a = B.T[a]; a;) {
	                        var b = a.ma;-1 !== c.indexOf(a.F) && B.zb(a);a = b;
	                    }
	                });a.Ka = k;b = a.F.La.indexOf(b);w(-1 !== b);a.F.La.splice(b, 1);
	            }, ra: function (a, b) {
	                return a.n.ra(a, b);
	            }, ba: function (a, b, c) {
	                var e = B.u(a, { parent: i }).g,
	                    a = W(a);(!a || "." === a || ".." === a) && d(new B.e(U.B));var f = B.Jb(e, a);f && d(new B.e(f));e.n.ba || d(new B.e(U.O));return e.n.ba(e, a, b, c);
	            }, create: function (a, b) {
	                b = (b !== g ? b : 438) & 4095;b |= 32768;return B.ba(a, b, 0);
	            }, ea: function (a, b) {
	                b = (b !== g ? b : 511) & 1023;b |= 16384;return B.ba(a, b, 0);
	            }, lb: function (a, b, c) {
	                "undefined" === typeof c && (c = b, b = 438);return B.ba(a, b | 8192, c);
	            }, ca: function (a, b) {
	                gb(a) || d(new B.e(U.Q));var c = B.u(b, { parent: i }).g;c || d(new B.e(U.Q));var e = W(b),
	                    f = B.Jb(c, e);f && d(new B.e(f));c.n.ca || d(new B.e(U.O));return c.n.ca(c, e, a);
	            }, rename: function (a, b) {
	                var c = eb(a),
	                    e = eb(b),
	                    f = W(a),
	                    h = W(b),
	                    j,
	                    l,
	                    u;try {
	                    j = B.u(a, { parent: i }), l = j.g, j = B.u(b, { parent: i }), u = j.g;
	                } catch (q) {
	                    d(new B.e(U.ga));
	                }(!l || !u) && d(new B.e(U.Q));l.F !== u.F && d(new B.e(U.Oc));j = B.aa(l, f);e = hb(a, e);"." !== e.charAt(0) && d(new B.e(U.B));e = hb(b, c);"." !== e.charAt(0) && d(new B.e(U.sb));var x;try {
	                    x = B.aa(u, h);
	                } catch (s) {}if (j !== x) {
	                    c = B.J(j.mode);(f = B.kb(l, f, c)) && d(new B.e(f));(f = x ? B.kb(u, h, c) : B.Jb(u, h)) && d(new B.e(f));l.n.rename || d(new B.e(U.O));(B.ka(j) || x && B.ka(x)) && d(new B.e(U.ga));u !== l && (f = B.na(l, "w")) && d(new B.e(f));try {
	                        B.H.willMovePath && B.H.willMovePath(a, b);
	                    } catch (v) {
	                        console.log("FS.trackingDelegate['willMovePath']('" + a + "', '" + b + "') threw an exception: " + v.message);
	                    }B.uc(j);try {
	                        l.n.rename(j, u, h);
	                    } catch (G) {
	                        d(G);
	                    } finally {
	                        B.tc(j);
	                    }try {
	                        if (B.H.onMovePath) B.H.onMovePath(a, b);
	                    } catch (ua) {
	                        console.log("FS.trackingDelegate['onMovePath']('" + a + "', '" + b + "') threw an exception: " + ua.message);
	                    }
	                }
	            }, Oa: function (a) {
	                var b = B.u(a, { parent: i }).g,
	                    c = W(a),
	                    e = B.aa(b, c),
	                    f = B.kb(b, c, i);f && d(new B.e(f));b.n.Oa || d(new B.e(U.O));B.ka(e) && d(new B.e(U.ga));try {
	                    B.H.willDeletePath && B.H.willDeletePath(a);
	                } catch (h) {
	                    console.log("FS.trackingDelegate['willDeletePath']('" + a + "') threw an exception: " + h.message);
	                }b.n.Oa(b, c);B.zb(e);try {
	                    if (B.H.onDeletePath) B.H.onDeletePath(a);
	                } catch (j) {
	                    console.log("FS.trackingDelegate['onDeletePath']('" + a + "') threw an exception: " + j.message);
	                }
	            }, Na: function (a) {
	                a = B.u(a, { R: i }).g;a.n.Na || d(new B.e(U.Sa));return a.n.Na(a);
	            }, za: function (a) {
	                var b = B.u(a, { parent: i }).g,
	                    c = W(a),
	                    e = B.aa(b, c),
	                    f = B.kb(b, c, m);f && (f === U.pa && (f = U.O), d(new B.e(f)));b.n.za || d(new B.e(U.O));B.ka(e) && d(new B.e(U.ga));try {
	                    B.H.willDeletePath && B.H.willDeletePath(a);
	                } catch (h) {
	                    console.log("FS.trackingDelegate['willDeletePath']('" + a + "') threw an exception: " + h.message);
	                }b.n.za(b, c);B.zb(e);try {
	                    if (B.H.onDeletePath) B.H.onDeletePath(a);
	                } catch (j) {
	                    console.log("FS.trackingDelegate['onDeletePath']('" + a + "') threw an exception: " + j.message);
	                }
	            }, ta: function (a) {
	                (a = B.u(a).g) || d(new B.e(U.Q));a.n.ta || d(new B.e(U.B));return a.n.ta(a);
	            }, Dc: function (a, b) {
	                var c = B.u(a, { R: !b }).g;
	                c || d(new B.e(U.Q));c.n.S || d(new B.e(U.O));return c.n.S(c);
	            }, Eg: function (a) {
	                return B.Dc(a, i);
	            }, Ya: function (a, b, c) {
	                a = "string" === typeof a ? B.u(a, { R: !c }).g : a;a.n.I || d(new B.e(U.O));a.n.I(a, { mode: b & 4095 | a.mode & -4096, timestamp: Date.now() });
	            }, Bg: function (a, b) {
	                B.Ya(a, b, i);
	            }, jg: function (a, b) {
	                var c = B.qa(a);c || d(new B.e(U.V));B.Ya(c.g, b);
	            }, dc: function (a, b, c, e) {
	                a = "string" === typeof a ? B.u(a, { R: !e }).g : a;a.n.I || d(new B.e(U.O));a.n.I(a, { timestamp: Date.now() });
	            }, Cg: function (a, b, c) {
	                B.dc(a, b, c, i);
	            }, kg: function (a, b, c) {
	                (a = B.qa(a)) || d(new B.e(U.V));B.dc(a.g, b, c);
	            }, truncate: function (a, b) {
	                0 > b && d(new B.e(U.B));var c;c = "string" === typeof a ? B.u(a, { R: i }).g : a;c.n.I || d(new B.e(U.O));B.J(c.mode) && d(new B.e(U.pa));B.isFile(c.mode) || d(new B.e(U.B));var e = B.na(c, "w");e && d(new B.e(e));c.n.I(c, { size: b, timestamp: Date.now() });
	            }, mg: function (a, b) {
	                var c = B.qa(a);c || d(new B.e(U.V));0 === (c.D & 2097155) && d(new B.e(U.B));B.truncate(c.g, b);
	            }, Rg: function (a, b, c) {
	                a = B.u(a, { R: i }).g;a.n.I(a, { timestamp: Math.max(b, c) });
	            }, open: function (a, b, c, e, f) {
	                "" === a && d(new B.e(U.Q));
	                var b = "string" === typeof b ? B.wc(b) : b,
	                    c = b & 64 ? ("undefined" === typeof c ? 438 : c) & 4095 | 32768 : 0,
	                    h;if ("object" === typeof a) h = a;else {
	                    a = db(a);try {
	                        h = B.u(a, { R: !(b & 131072) }).g;
	                    } catch (j) {}
	                }var l = m;b & 64 && (h ? b & 128 && d(new B.e(U.Xb)) : (h = B.ba(a, c, 0), l = i));h || d(new B.e(U.Q));B.ib(h.mode) && (b &= -513);l || (c = B.Hd(h, b)) && d(new B.e(c));b & 512 && B.truncate(h, 0);b &= -641;e = B.fc({ g: h, path: B.da(h), D: b, seekable: i, position: 0, p: h.p, $d: [], error: m }, e, f);e.p.open && e.p.open(e);p.logReadFiles && !(b & 1) && (B.Mb || (B.Mb = {}), a in B.Mb || (B.Mb[a] = 1, p.printErr("read file: " + a)));try {
	                    B.H.onOpenFile && (f = 0, 1 !== (b & 2097155) && (f |= B.Gc.yc.Rc), 0 !== (b & 2097155) && (f |= B.Gc.yc.Sc), B.H.onOpenFile(a, f));
	                } catch (u) {
	                    console.log("FS.trackingDelegate['onOpenFile']('" + a + "', flags) threw an exception: " + u.message);
	                }return e;
	            }, close: function (a) {
	                try {
	                    a.p.close && a.p.close(a);
	                } catch (b) {
	                    d(b);
	                } finally {
	                    B.dd(a.C);
	                }
	            }, $: function (a, b, c) {
	                (!a.seekable || !a.p.$) && d(new B.e(U.Ua));a.position = a.p.$(a, b, c);a.$d = [];return a.position;
	            }, M: function (a, b, c, e, f) {
	                (0 > e || 0 > f) && d(new B.e(U.B));1 === (a.D & 2097155) && d(new B.e(U.V));B.J(a.g.mode) && d(new B.e(U.pa));a.p.M || d(new B.e(U.B));var h = i;"undefined" === typeof f ? (f = a.position, h = m) : a.seekable || d(new B.e(U.Ua));b = a.p.M(a, b, c, e, f);h || (a.position += b);return b;
	            }, write: function (a, b, c, e, f, h) {
	                (0 > e || 0 > f) && d(new B.e(U.B));0 === (a.D & 2097155) && d(new B.e(U.V));B.J(a.g.mode) && d(new B.e(U.pa));a.p.write || d(new B.e(U.B));a.D & 1024 && B.$(a, 0, 2);var j = i;"undefined" === typeof f ? (f = a.position, j = m) : a.seekable || d(new B.e(U.Ua));b = a.p.write(a, b, c, e, f, h);j || (a.position += b);
	                try {
	                    if (a.path && B.H.onWriteToFile) B.H.onWriteToFile(a.path);
	                } catch (l) {
	                    console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + l.message);
	                }return b;
	            }, Ea: function (a, b, c) {
	                (0 > b || 0 >= c) && d(new B.e(U.B));0 === (a.D & 2097155) && d(new B.e(U.V));!B.isFile(a.g.mode) && !B.J(node.mode) && d(new B.e(U.Qa));a.p.Ea || d(new B.e(U.Ta));a.p.Ea(a, b, c);
	            }, Ja: function (a, b, c, e, f, h, j) {
	                1 === (a.D & 2097155) && d(new B.e(U.qb));a.p.Ja || d(new B.e(U.Qa));return a.p.Ja(a, b, c, e, f, h, j);
	            }, Ha: function (a, b, c) {
	                a.p.Ha || d(new B.e(U.Nc));
	                return a.p.Ha(a, b, c);
	            }, Mg: function (a, b) {
	                b = b || {};b.D = b.D || "r";b.encoding = b.encoding || "binary";"utf8" !== b.encoding && "binary" !== b.encoding && d(Error('Invalid encoding type "' + b.encoding + '"'));var c,
	                    e = B.open(a, b.D),
	                    f = B.Dc(a).size,
	                    h = new Uint8Array(f);B.M(e, h, 0, f, 0);if ("utf8" === b.encoding) {
	                    c = "";for (var j = new z.Da(), l = 0; l < f; l++) c += j.nb(h[l]);
	                } else "binary" === b.encoding && (c = h);B.close(e);return c;
	            }, Sg: function (a, b, c) {
	                c = c || {};c.D = c.D || "w";c.encoding = c.encoding || "utf8";"utf8" !== c.encoding && "binary" !== c.encoding && d(Error('Invalid encoding type "' + c.encoding + '"'));a = B.open(a, c.D, c.mode);"utf8" === c.encoding ? (b = new Uint8Array(new z.Da().Ac(b)), B.write(a, b, 0, b.length, 0, c.ad)) : "binary" === c.encoding && B.write(a, b, 0, b.length, 0, c.ad);B.close(a);
	            }, yb: function () {
	                return B.hc;
	            }, bg: function (a) {
	                a = B.u(a, { R: i });B.J(a.g.mode) || d(new B.e(U.Sa));var b = B.na(a.g, "x");b && d(new B.e(b));B.hc = a.path;
	            }, fd: function () {
	                B.ea("/tmp");B.ea("/home");B.ea("/home/web_user");
	            }, ed: function () {
	                B.ea("/dev");B.Ob(B.la(1, 3), { M: function () {
	                        return 0;
	                    }, write: function () {
	                        return 0;
	                    } });
	                B.lb("/dev/null", B.la(1, 3));jb(B.la(5, 0), mb);jb(B.la(6, 0), nb);B.lb("/dev/tty", B.la(5, 0));B.lb("/dev/tty1", B.la(6, 0));var a;if ("undefined" !== typeof crypto) {
	                    var b = new Uint8Array(1);a = function () {
	                        crypto.getRandomValues(b);return b[0];
	                    };
	                } else a = t ? function () {
	                    return require("crypto").randomBytes(1)[0];
	                } : function () {
	                    return 256 * Math.random() | 0;
	                };B.X("/dev", "random", a);B.X("/dev", "urandom", a);B.ea("/dev/shm");B.ea("/dev/shm/tmp");
	            }, od: function () {
	                p.stdin ? B.X("/dev", "stdin", p.stdin) : B.ca("/dev/tty", "/dev/stdin");p.stdout ? B.X("/dev", "stdout", k, p.stdout) : B.ca("/dev/tty", "/dev/stdout");p.stderr ? B.X("/dev", "stderr", k, p.stderr) : B.ca("/dev/tty1", "/dev/stderr");var a = B.open("/dev/stdin", "r");K[ob >> 2] = B.Eb(a);w(0 === a.C, "invalid handle for stdin (" + a.C + ")");a = B.open("/dev/stdout", "w");K[pb >> 2] = B.Eb(a);w(1 === a.C, "invalid handle for stdout (" + a.C + ")");a = B.open("/dev/stderr", "w");K[qb >> 2] = B.Eb(a);w(2 === a.C, "invalid handle for stderr (" + a.C + ")");
	            }, jc: function () {
	                B.e || (B.e = function (a, b) {
	                    this.g = b;this.Xd = function (a) {
	                        this.cb = a;for (var b in U) if (U[b] === a) {
	                            this.code = b;break;
	                        }
	                    };this.Xd(a);this.message = ab[a];
	                }, B.e.prototype = Error(), [U.Q].forEach(function (a) {
	                    B.Db[a] = new B.e(a);B.Db[a].stack = "<generic error, no stack>";
	                }));
	            }, Zd: function () {
	                B.jc();B.T = Array(4096);B.F(Y, {}, "/");B.fd();B.ed();
	            }, Ga: function (a, b, c) {
	                w(!B.Ga.hb, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");B.Ga.hb = i;B.jc();p.stdin = a || p.stdin;p.stdout = b || p.stdout;p.stderr = c || p.stderr;B.od();
	            }, Qd: function () {
	                B.Ga.hb = m;for (var a = 0; a < B.oa.length; a++) {
	                    var b = B.oa[a];b && B.close(b);
	                }
	            }, fb: function (a, b) {
	                var c = 0;a && (c |= 365);b && (c |= 146);return c;
	            }, Ag: function (a, b) {
	                var c = fb.apply(k, a);b && "/" == c[0] && (c = c.substr(1));return c;
	            }, Sf: function (a, b) {
	                return gb(b, a);
	            }, Pg: function (a) {
	                return db(a);
	            }, lg: function (a, b) {
	                var c = B.vb(a, b);if (c.Ab) return c.object;V(c.error);return k;
	            }, vb: function (a, b) {
	                try {
	                    var c = B.u(a, { R: !b }),
	                        a = c.path;
	                } catch (e) {}var f = { jb: m, Ab: m, error: 0, name: k, path: k, object: k, Md: m, Od: k, Nd: k };
	                try {
	                    c = B.u(a, { parent: i }), f.Md = i, f.Od = c.path, f.Nd = c.g, f.name = W(a), c = B.u(a, { R: !b }), f.Ab = i, f.path = c.path, f.object = c.g, f.name = c.g.name, f.jb = "/" === c.path;
	                } catch (h) {
	                    f.error = h.cb;
	                }return f;
	            }, hd: function (a, b, c, e) {
	                a = X("string" === typeof a ? a : B.da(a), b);return B.ea(a, B.fb(c, e));
	            }, ld: function (a, b) {
	                for (var a = "string" === typeof a ? a : B.da(a), c = b.split("/").reverse(); c.length;) {
	                    var e = c.pop();if (e) {
	                        var f = X(a, e);try {
	                            B.ea(f);
	                        } catch (h) {}a = f;
	                    }
	                }return f;
	            }, gd: function (a, b, c, e, f) {
	                a = X("string" === typeof a ? a : B.da(a), b);return B.create(a, B.fb(e, f));
	            }, xb: function (a, b, c, e, f, h) {
	                a = b ? X("string" === typeof a ? a : B.da(a), b) : a;e = B.fb(e, f);f = B.create(a, e);if (c) {
	                    if ("string" === typeof c) {
	                        for (var a = Array(c.length), b = 0, j = c.length; b < j; ++b) a[b] = c.charCodeAt(b);c = a;
	                    }B.Ya(f, e | 146);a = B.open(f, "w");B.write(a, c, 0, c.length, 0, h);B.close(a);B.Ya(f, e);
	                }return f;
	            }, X: function (a, b, c, e) {
	                a = X("string" === typeof a ? a : B.da(a), b);b = B.fb(!!c, !!e);B.X.Ib || (B.X.Ib = 64);var f = B.la(B.X.Ib++, 0);B.Ob(f, { open: function (a) {
	                        a.seekable = m;
	                    }, close: function () {
	                        e && e.buffer && e.buffer.length && e(10);
	                    }, M: function (a, b, e, f) {
	                        for (var q = 0, x = 0; x < f; x++) {
	                            var s;try {
	                                s = c();
	                            } catch (v) {
	                                d(new B.e(U.ha));
	                            }s === g && 0 === q && d(new B.e(U.Ca));if (s === k || s === g) break;q++;b[e + x] = s;
	                        }q && (a.g.timestamp = Date.now());return q;
	                    }, write: function (a, b, c, f) {
	                        for (var q = 0; q < f; q++) try {
	                            e(b[c + q]);
	                        } catch (x) {
	                            d(new B.e(U.ha));
	                        }f && (a.g.timestamp = Date.now());return q;
	                    } });return B.lb(a, b, f);
	            }, kd: function (a, b, c) {
	                a = X("string" === typeof a ? a : B.da(a), b);return B.ca(c, a);
	            }, mc: function (a) {
	                if (a.Gb || a.Dd || a.link || a.k) return i;var b = i;"undefined" !== typeof XMLHttpRequest && d(Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."));if (p.read) try {
	                    a.k = Va(p.read(a.url), i), a.q = a.k.length;
	                } catch (c) {
	                    b = m;
	                } else d(Error("Cannot load without read() or XMLHttpRequest."));b || V(U.ha);return b;
	            }, jd: function (a, b, c, e, f) {
	                function h() {
	                    this.Hb = m;this.Za = [];
	                }h.prototype.get = function (a) {
	                    if (!(a > this.length - 1 || 0 > a)) {
	                        var b = a % this.cd;return this.yd(a / this.cd | 0)[b];
	                    }
	                };h.prototype.Wd = function (a) {
	                    this.yd = a;
	                };h.prototype.bc = function () {
	                    var a = new XMLHttpRequest();a.open("HEAD", c, m);a.send(k);200 <= a.status && 300 > a.status || 304 === a.status || d(Error("Couldn't load " + c + ". Status: " + a.status));var b = Number(a.getResponseHeader("Content-length")),
	                        e,
	                        f = 1048576;if (!((e = a.getResponseHeader("Accept-Ranges")) && "bytes" === e)) f = b;var h = this;h.Wd(function (a) {
	                        var e = a * f,
	                            j = (a + 1) * f - 1,
	                            j = Math.min(j, b - 1);if ("undefined" === typeof h.Za[a]) {
	                            var l = h.Za;e > j && d(Error("invalid range (" + e + ", " + j + ") or no bytes requested!"));j > b - 1 && d(Error("only " + b + " bytes available! programmer error!"));var q = new XMLHttpRequest();q.open("GET", c, m);b !== f && q.setRequestHeader("Range", "bytes=" + e + "-" + j);"undefined" != typeof Uint8Array && (q.responseType = "arraybuffer");q.overrideMimeType && q.overrideMimeType("text/plain; charset=x-user-defined");q.send(k);200 <= q.status && 300 > q.status || 304 === q.status || d(Error("Couldn't load " + c + ". Status: " + q.status));e = q.response !== g ? new Uint8Array(q.response || []) : Va(q.responseText || "", i);l[a] = e;
	                        }"undefined" === typeof h.Za[a] && d(Error("doXHR failed!"));return h.Za[a];
	                    });this.Uc = b;this.Tc = f;this.Hb = i;
	                };if ("undefined" !== typeof XMLHttpRequest) {
	                    ca || d("Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc");var j = new h();Object.defineProperty(j, "length", { get: function () {
	                            this.Hb || this.bc();return this.Uc;
	                        } });Object.defineProperty(j, "chunkSize", { get: function () {
	                            this.Hb || this.bc();return this.Tc;
	                        } });j = { Gb: m, k: j };
	                } else j = { Gb: m, url: c };
	                var l = B.gd(a, b, j, e, f);j.k ? l.k = j.k : j.url && (l.k = k, l.url = j.url);Object.defineProperty(l, "usedBytes", { get: function () {
	                        return this.k.length;
	                    } });var u = {};Object.keys(l.p).forEach(function (a) {
	                    var b = l.p[a];u[a] = function () {
	                        B.mc(l) || d(new B.e(U.ha));return b.apply(k, arguments);
	                    };
	                });u.M = function (a, b, c, e, f) {
	                    B.mc(l) || d(new B.e(U.ha));a = a.g.k;if (f >= a.length) return 0;e = Math.min(a.length - f, e);w(0 <= e);if (a.slice) for (var h = 0; h < e; h++) b[c + h] = a[f + h];else for (h = 0; h < e; h++) b[c + h] = a.get(f + h);return e;
	                };l.p = u;return l;
	            }, md: function (a, b, c, e, f, h, j, l, u) {
	                function q() {
	                    rb = document.pointerLockElement === v || document.mozPointerLockElement === v || document.webkitPointerLockElement === v || document.msPointerLockElement === v;
	                }function x(c) {
	                    function q(c) {
	                        l || B.xb(a, b, c, e, f, u);h && h();Za();
	                    }var s = m;p.preloadPlugins.forEach(function (a) {
	                        !s && a.canHandle(G) && (a.handle(c, G, q, function () {
	                            j && j();Za();
	                        }), s = i);
	                    });s || q(c);
	                }p.preloadPlugins || (p.preloadPlugins = []);if (!tb) {
	                    tb = i;try {
	                        new Blob(), ub = i;
	                    } catch (s) {
	                        ub = m, console.log("warning: no blob constructor, cannot create blobs with mimetypes");
	                    }vb = "undefined" != typeof MozBlobBuilder ? MozBlobBuilder : "undefined" != typeof WebKitBlobBuilder ? WebKitBlobBuilder : !ub ? console.log("warning: no BlobBuilder") : k;wb = "undefined" != typeof window ? window.URL ? window.URL : window.webkitURL : g;!p.xc && "undefined" === typeof wb && (console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available."), p.xc = i);p.preloadPlugins.push({ canHandle: function (a) {
	                            return !p.xc && /\.(jpg|jpeg|png|bmp)$/i.test(a);
	                        }, handle: function (a, b, c, e) {
	                            var f = k;if (ub) try {
	                                f = new Blob([a], { type: xb(b) }), f.size !== a.length && (f = new Blob([new Uint8Array(a).buffer], { type: xb(b) }));
	                            } catch (h) {
	                                z.Aa("Blob constructor present but fails: " + h + "; falling back to blob builder");
	                            }f || (f = new vb(), f.append(new Uint8Array(a).buffer), f = f.getBlob());var j = wb.createObjectURL(f),
	                                l = new Image();l.onload = function () {
	                                w(l.complete, "Image " + b + " could not be decoded");var e = document.createElement("canvas");e.width = l.width;e.height = l.height;e.getContext("2d").drawImage(l, 0, 0);p.preloadedImages[b] = e;wb.revokeObjectURL(j);c && c(a);
	                            };l.onerror = function () {
	                                console.log("Image " + j + " could not be decoded");e && e();
	                            };l.src = j;
	                        } });p.preloadPlugins.push({ canHandle: function (a) {
	                            return !p.Jg && a.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 };
	                        }, handle: function (a, b, c, e) {
	                            function f(e) {
	                                j || (j = i, p.preloadedAudios[b] = e, c && c(a));
	                            }function h() {
	                                j || (j = i, p.preloadedAudios[b] = new Audio(), e && e());
	                            }var j = m;if (ub) {
	                                try {
	                                    var l = new Blob([a], { type: xb(b) });
	                                } catch (q) {
	                                    return h();
	                                }var l = wb.createObjectURL(l),
	                                    s = new Audio();s.addEventListener("canplaythrough", function () {
	                                    f(s);
	                                }, m);s.onerror = function () {
	                                    if (!j) {
	                                        console.log("warning: browser could not fully decode audio " + b + ", trying slower base64 approach");for (var c = "", e = 0, h = 0, l = 0; l < a.length; l++) {
	                                            e = e << 8 | a[l];for (h += 8; 6 <= h;) var q = e >> h - 6 & 63, h = h - 6, c = c + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[q];
	                                        }2 == h ? (c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(e & 3) << 4], c += "==") : 4 == h && (c += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(e & 15) << 2], c += "=");
	                                        s.src = "data:audio/x-" + b.substr(-3) + ";base64," + c;f(s);
	                                    }
	                                };s.src = l;p.noExitRuntime = i;setTimeout(function () {
	                                    H || f(s);
	                                }, 1E4);
	                            } else return h();
	                        } });var v = p.canvas;v && (v.Pb = v.requestPointerLock || v.mozRequestPointerLock || v.webkitRequestPointerLock || v.msRequestPointerLock || n(), v.kc = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock || document.msExitPointerLock || n(), v.kc = v.kc.bind(document), document.addEventListener("pointerlockchange", q, m), document.addEventListener("mozpointerlockchange", q, m), document.addEventListener("webkitpointerlockchange", q, m), document.addEventListener("mspointerlockchange", q, m), p.elementPointerLock && v.addEventListener("click", function (a) {
	                        !rb && v.Pb && (v.Pb(), a.preventDefault());
	                    }, m));
	                }var G = b ? gb(X(a, b)) : a;Ya();"string" == typeof c ? yb(c, function (a) {
	                    x(a);
	                }, j) : x(c);
	            }, indexedDB: function () {
	                return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
	            }, Ub: function () {
	                return "EM_FS_" + window.location.pathname;
	            }, Vb: 20, Ba: "FILE_DATA", Og: function (a, b, c) {
	                var b = b || n(),
	                    c = c || n(),
	                    e = B.indexedDB();try {
	                    var f = e.open(B.Ub(), B.Vb);
	                } catch (h) {
	                    return c(h);
	                }f.Ld = function () {
	                    console.log("creating db");f.result.createObjectStore(B.Ba);
	                };f.onsuccess = function () {
	                    var e = f.result.transaction([B.Ba], "readwrite"),
	                        h = e.objectStore(B.Ba),
	                        u = 0,
	                        q = 0,
	                        x = a.length;a.forEach(function (a) {
	                        a = h.put(B.vb(a).object.k, a);a.onsuccess = function () {
	                            u++;u + q == x && (0 == q ? b() : c());
	                        };a.onerror = function () {
	                            q++;u + q == x && (0 == q ? b() : c());
	                        };
	                    });e.onerror = c;
	                };f.onerror = c;
	            }, Dg: function (a, b, c) {
	                var b = b || n(),
	                    c = c || n(),
	                    e = B.indexedDB();
	                try {
	                    var f = e.open(B.Ub(), B.Vb);
	                } catch (h) {
	                    return c(h);
	                }f.Ld = c;f.onsuccess = function () {
	                    var e = f.result;try {
	                        var h = e.transaction([B.Ba], "readonly");
	                    } catch (u) {
	                        c(u);return;
	                    }var q = h.objectStore(B.Ba),
	                        x = 0,
	                        s = 0,
	                        v = a.length;a.forEach(function (a) {
	                        var e = q.get(a);e.onsuccess = function () {
	                            B.vb(a).Ab && B.za(a);B.xb(eb(a), W(a), e.result, i, i, i);x++;x + s == v && (0 == s ? b() : c());
	                        };e.onerror = function () {
	                            s++;x + s == v && (0 == s ? b() : c());
	                        };
	                    });h.onerror = c;
	                };f.onerror = c;
	            } };function zb() {
	            d("TODO");
	        }
	        var Z = { F: function () {
	                p.websocket = p.websocket && "object" === typeof p.websocket ? p.websocket : {};p.websocket.tb = {};p.websocket.on = function (a, b) {
	                    "function" === typeof b && (this.tb[a] = b);return this;
	                };p.websocket.P = function (a, b) {
	                    "function" === typeof this.tb[a] && this.tb[a].call(this, b);
	                };return B.createNode(k, "/", 16895, 0);
	            }, nd: function (a, b, c) {
	                c && w(1 == b == (6 == c));a = { qd: a, type: b, protocol: c, G: k, error: k, Ma: {}, Kb: [], ua: [], wa: Z.L };b = Z.mb();c = B.createNode(Z.root, b, 49152, 0);c.va = a;b = B.fc({ path: b, g: c, D: B.wc("r+"), seekable: m,
	                    p: Z.p });a.A = b;return a;
	            }, wd: function (a) {
	                a = B.qa(a);return !a || !B.Ed(a.g.mode) ? k : a.g.va;
	            }, p: { zc: function (a) {
	                    a = a.g.va;return a.wa.zc(a);
	                }, Ha: function (a, b, c) {
	                    a = a.g.va;return a.wa.Ha(a, b, c);
	                }, M: function (a, b, c, e) {
	                    a = a.g.va;e = a.wa.Rd(a, e);if (!e) return 0;b.set(e.buffer, c);return e.buffer.length;
	                }, write: function (a, b, c, e) {
	                    a = a.g.va;return a.wa.Vd(a, b, c, e);
	                }, close: function (a) {
	                    a = a.g.va;a.wa.close(a);
	                } }, mb: function () {
	                Z.mb.gc || (Z.mb.gc = 0);return "socket[" + Z.mb.gc++ + "]";
	            }, L: { $a: function (a, b, c) {
	                    var e;"object" === typeof b && (e = b, c = b = k);if (e) e._socket ? (b = e._socket.remoteAddress, c = e._socket.remotePort) : ((c = /ws[s]?:\/\/([^:]+):(\d+)/.exec(e.url)) || d(Error("WebSocket URL must be in the format ws(s)://address:port")), b = c[1], c = parseInt(c[2], 10));else try {
	                        var f = p.websocket && "object" === typeof p.websocket,
	                            h = "ws:#".replace("#", "//");f && "string" === typeof p.websocket.url && (h = p.websocket.url);if ("ws://" === h || "wss://" === h) var j = b.split("/"),
	                            h = h + j[0] + ":" + c + "/" + j.slice(1).join("/");j = "binary";f && "string" === typeof p.websocket.subprotocol && (j = p.websocket.subprotocol);var j = j.replace(/^ +| +$/g, "").split(/ *, */),
	                            l = t ? { protocol: j.toString() } : j;e = new (t ? require("ws") : window.WebSocket)(h, l);e.binaryType = "arraybuffer";
	                    } catch (u) {
	                        d(new B.e(U.Yb));
	                    }b = { W: b, port: c, o: e, ab: [] };Z.L.$b(a, b);Z.L.zd(a, b);2 === a.type && "undefined" !== typeof a.ya && b.ab.push(new Uint8Array([255, 255, 255, 255, 112, 111, 114, 116, (a.ya & 65280) >> 8, a.ya & 255]));return b;
	                }, gb: function (a, b, c) {
	                    return a.Ma[b + ":" + c];
	                }, $b: function (a, b) {
	                    a.Ma[b.W + ":" + b.port] = b;
	                }, Bc: function (a, b) {
	                    delete a.Ma[b.W + ":" + b.port];
	                }, zd: function (a, b) {
	                    function c() {
	                        p.websocket.P("open", a.A.C);try {
	                            for (var c = b.ab.shift(); c;) b.o.send(c), c = b.ab.shift();
	                        } catch (e) {
	                            b.o.close();
	                        }
	                    }function e(c) {
	                        w("string" !== typeof c && c.byteLength !== g);var c = new Uint8Array(c),
	                            e = f;f = m;e && 10 === c.length && 255 === c[0] && 255 === c[1] && 255 === c[2] && 255 === c[3] && 112 === c[4] && 111 === c[5] && 114 === c[6] && 116 === c[7] ? (c = c[8] << 8 | c[9], Z.L.Bc(a, b), b.port = c, Z.L.$b(a, b)) : (a.ua.push({ W: b.W, port: b.port, data: c }), p.websocket.P("message", a.A.C));
	                    }var f = i;t ? (b.o.on("open", c), b.o.on("message", function (a, b) {
	                        b.binary && e(new Uint8Array(a).buffer);
	                    }), b.o.on("close", function () {
	                        p.websocket.P("close", a.A.C);
	                    }), b.o.on("error", function () {
	                        a.error = U.Wb;p.websocket.P("error", [a.A.C, a.error, "ECONNREFUSED: Connection refused"]);
	                    })) : (b.o.onopen = c, b.o.onclose = function () {
	                        p.websocket.P("close", a.A.C);
	                    }, b.o.onmessage = function (a) {
	                        e(a.data);
	                    }, b.o.onerror = function () {
	                        a.error = U.Wb;p.websocket.P("error", [a.A.C, a.error, "ECONNREFUSED: Connection refused"]);
	                    });
	                }, zc: function (a) {
	                    if (1 === a.type && a.G) return a.Kb.length ? 65 : 0;var b = 0,
	                        c = 1 === a.type ? Z.L.gb(a, a.Y, a.Z) : k;if (a.ua.length || !c || c && c.o.readyState === c.o.Pa || c && c.o.readyState === c.o.CLOSED) b |= 65;if (!c || c && c.o.readyState === c.o.OPEN) b |= 4;if (c && c.o.readyState === c.o.Pa || c && c.o.readyState === c.o.CLOSED) b |= 16;return b;
	                }, Ha: function (a, b, c) {
	                    switch (b) {case 21531:
	                            return b = 0, a.ua.length && (b = a.ua[0].data.length), K[c >> 2] = b, 0;default:
	                            return U.B;}
	                }, close: function (a) {
	                    if (a.G) {
	                        try {
	                            a.G.close();
	                        } catch (b) {}a.G = k;
	                    }for (var c = Object.keys(a.Ma), e = 0; e < c.length; e++) {
	                        var f = a.Ma[c[e]];try {
	                            f.o.close();
	                        } catch (h) {}Z.L.Bc(a, f);
	                    }return 0;
	                }, bind: function (a, b, c) {
	                    ("undefined" !== typeof a.Qb || "undefined" !== typeof a.ya) && d(new B.e(U.B));a.Qb = b;a.ya = c || zb();if (2 === a.type) {
	                        a.G && (a.G.close(), a.G = k);try {
	                            a.wa.Fd(a, 0);
	                        } catch (e) {
	                            e instanceof B.e || d(e), e.cb !== U.Ta && d(e);
	                        }
	                    }
	                }, cg: function (a, b, c) {
	                    a.G && d(new B.e(U.Ta));if ("undefined" !== typeof a.Y && "undefined" !== typeof a.Z) {
	                        var e = Z.L.gb(a, a.Y, a.Z);e && (e.o.readyState === e.o.CONNECTING && d(new B.e(U.Hc)), d(new B.e(U.Kc)));
	                    }b = Z.L.$a(a, b, c);a.Y = b.W;a.Z = b.port;d(new B.e(U.Jc));
	                }, Fd: function (a) {
	                    t || d(new B.e(U.Ta));
	                    a.G && d(new B.e(U.B));var b = require("ws").Server;a.G = new b({ host: a.Qb, port: a.ya });p.websocket.P("listen", a.A.C);a.G.on("connection", function (b) {
	                        if (1 === a.type) {
	                            var e = Z.nd(a.qd, a.type, a.protocol),
	                                b = Z.L.$a(e, b);e.Y = b.W;e.Z = b.port;a.Kb.push(e);p.websocket.P("connection", e.A.C);
	                        } else Z.L.$a(a, b), p.websocket.P("connection", a.A.C);
	                    });a.G.on("closed", function () {
	                        p.websocket.P("close", a.A.C);a.G = k;
	                    });a.G.on("error", function () {
	                        a.error = U.Yb;p.websocket.P("error", [a.A.C, a.error, "EHOSTUNREACH: Host is unreachable"]);
	                    });
	                },
	                accept: function (a) {
	                    a.G || d(new B.e(U.B));var b = a.Kb.shift();b.A.D = a.A.D;return b;
	                }, tg: function (a, b) {
	                    var c, e;b ? ((a.Y === g || a.Z === g) && d(new B.e(U.Ra)), c = a.Y, e = a.Z) : (c = a.Qb || 0, e = a.ya || 0);return { W: c, port: e };
	                }, Vd: function (a, b, c, e, f, h) {
	                    if (2 === a.type) {
	                        if (f === g || h === g) f = a.Y, h = a.Z;(f === g || h === g) && d(new B.e(U.Ic));
	                    } else f = a.Y, h = a.Z;var j = Z.L.gb(a, f, h);1 === a.type && ((!j || j.o.readyState === j.o.Pa || j.o.readyState === j.o.CLOSED) && d(new B.e(U.Ra)), j.o.readyState === j.o.CONNECTING && d(new B.e(U.Ca)));b = b instanceof Array || b instanceof ArrayBuffer ? b.slice(c, c + e) : b.buffer.slice(b.byteOffset + c, b.byteOffset + c + e);if (2 === a.type && (!j || j.o.readyState !== j.o.OPEN)) {
	                        if (!j || j.o.readyState === j.o.Pa || j.o.readyState === j.o.CLOSED) j = Z.L.$a(a, f, h);j.ab.push(b);return e;
	                    }try {
	                        return j.o.send(b), e;
	                    } catch (l) {
	                        d(new B.e(U.B));
	                    }
	                }, Rd: function (a, b) {
	                    1 === a.type && a.G && d(new B.e(U.Ra));var c = a.ua.shift();if (!c) {
	                        if (1 === a.type) {
	                            var e = Z.L.gb(a, a.Y, a.Z);if (e) {
	                                if (e.o.readyState === e.o.Pa || e.o.readyState === e.o.CLOSED) return k;d(new B.e(U.Ca));
	                            }d(new B.e(U.Ra));
	                        }d(new B.e(U.Ca));
	                    }var e = c.data.byteLength || c.data.length,
	                        f = c.data.byteOffset || 0,
	                        h = c.data.buffer || c.data,
	                        j = Math.min(b, e),
	                        l = { buffer: new Uint8Array(h, f, j), W: c.W, port: c.port };1 === a.type && j < e && (c.data = new Uint8Array(h, f + j, e - j), a.ua.unshift(c));return l;
	                } } };function Ab(a, b, c) {
	            a = B.qa(a);if (!a) return V(U.V), -1;try {
	                return B.write(a, I, b, c);
	            } catch (e) {
	                return B.sc(e), -1;
	            }
	        }p._strlen = Bb;function Cb(a) {
	            a = B.pc(a);return !a ? -1 : a.C;
	        }function Db(a, b) {
	            return Ab(Cb(b), a, Bb(a));
	        }
	        function Eb(a, b) {
	            var c;c = a & 255;c = 0 <= c ? c : Math.pow(2, g) + c;I[Eb.Cc >> 0] = c;if (-1 == Ab(Cb(b), Eb.Cc, 1)) {
	                if (c = B.pc(b)) c.error = i;return -1;
	            }return c;
	        }function Fb(a) {
	            Fb.$c || (E = E + 4095 & -4096, Fb.$c = i, w(z.bb), Fb.Wc = z.bb, z.bb = function () {
	                A("cannot dynamically allocate, sbrk now has control");
	            });var b = E;0 != a && Fb.Wc(a);return b;
	        }p._memset = Gb;function Hb(a, b, c) {
	            window._broadwayOnPictureDecoded(a, b, c);
	        }p._broadwayOnPictureDecoded = Hb;function Ib() {
	            window._broadwayOnHeadersDecoded();
	        }p._broadwayOnHeadersDecoded = Ib;
	        function Jb(a, b) {
	            Kb = a;Lb = b;if (!Mb) return 1;0 == a ? (Nb = function () {
	                setTimeout(Ob, b);
	            }, Pb = "timeout") : 1 == a && (Nb = function () {
	                Qb(Ob);
	            }, Pb = "rAF");return 0;
	        }
	        function Rb(a, b, c, e) {
	            p.noExitRuntime = i;w(!Mb, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");Mb = a;Sb = e;var f = Tb;Ob = function () {
	                if (!H) if (0 < Ub.length) {
	                    var b = Date.now(),
	                        c = Ub.shift();c.ja(c.Xa);if (Vb) {
	                        var l = Vb,
	                            u = 0 == l % 1 ? l - 1 : Math.floor(l);Vb = c.dg ? u : (8 * l + (u + 0.5)) / 9;
	                    }console.log('main loop blocker "' + c.name + '" took ' + (Date.now() - b) + " ms");p.setStatus && (b = p.statusMessage || "Please wait...", c = Vb, l = Wb.ig, c ? c < l ? p.setStatus(b + " (" + (l - c) + "/" + l + ")") : p.setStatus(b) : p.setStatus(""));setTimeout(Ob, 0);
	                } else if (!(f < Tb)) if (Xb = Xb + 1 | 0, 1 == Kb && 1 < Lb && 0 != Xb % Lb) Nb();else {
	                    "timeout" === Pb && p.fg && (p.fa("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!"), Pb = "");a: if (!H && !(p.preMainLoop && p.preMainLoop() === m)) {
	                        try {
	                            "undefined" !== typeof e ? z.Fa("vi", a, [e]) : z.Fa("v", a);
	                        } catch (q) {
	                            if (q instanceof ia) break a;q && "object" === typeof q && q.stack && p.fa("exception thrown: " + [q, q.stack]);d(q);
	                        }p.postMainLoop && p.postMainLoop();
	                    }f < Tb || ("object" === typeof SDL && SDL.ac && SDL.ac.Pd && SDL.ac.Pd(), Nb());
	                }
	            };b && 0 < b ? Jb(0, 1E3 / b) : Jb(1, 1);Nb();c && d("SimulateInfiniteLoop");
	        }var Nb = k,
	            Pb = "",
	            Tb = 0,
	            Mb = k,
	            Sb = 0,
	            Kb = 0,
	            Lb = 0,
	            Xb = 0,
	            Ub = [],
	            Wb = {},
	            Ob,
	            Vb,
	            Yb = m,
	            rb = m,
	            Zb = m,
	            $b = g,
	            ac = g,
	            bc = 0;
	        function cc(a) {
	            var b = Date.now();if (0 === bc) bc = b + 1E3 / 60;else for (; b + 2 >= bc;) bc += 1E3 / 60;b = Math.max(bc - b, 0);setTimeout(a, b);
	        }function Qb(a) {
	            "undefined" === typeof window ? cc(a) : (window.requestAnimationFrame || (window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || cc), window.requestAnimationFrame(a));
	        }
	        function xb(a) {
	            return { jpg: "image/jpeg", jpeg: "image/jpeg", png: "image/png", bmp: "image/bmp", ogg: "audio/ogg", wav: "audio/wav", mp3: "audio/mpeg" }[a.substr(a.lastIndexOf(".") + 1)];
	        }
	        function yb(a, b, c) {
	            function e() {
	                c ? c() : d('Loading data file "' + a + '" failed.');
	            }var f = new XMLHttpRequest();f.open("GET", a, i);f.responseType = "arraybuffer";f.onload = function () {
	                if (200 == f.status || 0 == f.status && f.response) {
	                    var c = f.response;w(c, 'Loading data file "' + a + '" failed (no arrayBuffer).');b(new Uint8Array(c));Za();
	                } else e();
	            };f.onerror = e;f.send(k);Ya();
	        }var dc = [];function ec() {
	            var a = p.canvas;dc.forEach(function (b) {
	                b(a.width, a.height);
	            });
	        }
	        function fc(a, b, c) {
	            b && c ? (a.ae = b, a.Ad = c) : (b = a.ae, c = a.Ad);var e = b,
	                f = c;p.forcedAspectRatio && 0 < p.forcedAspectRatio && (e / f < p.forcedAspectRatio ? e = Math.round(f * p.forcedAspectRatio) : f = Math.round(e / p.forcedAspectRatio));if ((document.webkitFullScreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.mozFullscreenElement || document.fullScreenElement || document.fullscreenElement || document.msFullScreenElement || document.msFullscreenElement || document.webkitCurrentFullScreenElement) === a.parentNode && "undefined" != typeof screen) var h = Math.min(screen.width / e, screen.height / f),
	                e = Math.round(e * h),
	                f = Math.round(f * h);ac ? (a.width != e && (a.width = e), a.height != f && (a.height = f), "undefined" != typeof a.style && (a.style.removeProperty("width"), a.style.removeProperty("height"))) : (a.width != b && (a.width = b), a.height != c && (a.height = c), "undefined" != typeof a.style && (e != b || f != c ? (a.style.setProperty("width", e + "px", "important"), a.style.setProperty("height", f + "px", "important")) : (a.style.removeProperty("width"), a.style.removeProperty("height"))));
	        }
	        var tb, ub, vb, wb;p._memcpy = gc;B.Zd();R.unshift({ ja: function () {
	                !p.noFSInit && !B.Ga.hb && B.Ga();
	            } });Pa.push({ ja: function () {
	                B.vc = m;
	            } });Qa.push({ ja: function () {
	                B.Qd();
	            } });p.FS_createFolder = B.hd;p.FS_createPath = B.ld;p.FS_createDataFile = B.xb;p.FS_createPreloadedFile = B.md;p.FS_createLazyFile = B.jd;p.FS_createLink = B.kd;p.FS_createDevice = B.X;bb = z.Ec(4);K[bb >> 2] = 0;R.unshift({ ja: n() });Qa.push({ ja: n() });var lb = new z.Da();t && (require("fs"), process.platform.match(/^win/));R.push({ ja: function () {
	                Z.root = B.F(Z, {}, k);
	            } });
	        Eb.Cc = M([0], "i8", L);
	        p.requestFullScreen = function (a, b) {
	            function c() {
	                Yb = m;var a = e.parentNode;(document.webkitFullScreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.mozFullscreenElement || document.fullScreenElement || document.fullscreenElement || document.msFullScreenElement || document.msFullscreenElement || document.webkitCurrentFullScreenElement) === a ? (e.cc = document.cancelFullScreen || document.mozCancelFullScreen || document.webkitCancelFullScreen || document.msExitFullscreen || document.exitFullscreen || n(), e.cc = e.cc.bind(document), $b && e.Pb(), Yb = i, ac && ("undefined" != typeof SDL && (a = Ha[SDL.screen + 0 * z.ia >> 2], K[SDL.screen + 0 * z.ia >> 2] = a | 8388608), ec())) : (a.parentNode.insertBefore(e, a), a.parentNode.removeChild(a), ac && ("undefined" != typeof SDL && (a = Ha[SDL.screen + 0 * z.ia >> 2], K[SDL.screen + 0 * z.ia >> 2] = a & -8388609), ec()));if (p.onFullScreen) p.onFullScreen(Yb);fc(e);
	            }$b = a;ac = b;"undefined" === typeof $b && ($b = i);"undefined" === typeof ac && (ac = m);var e = p.canvas;Zb || (Zb = i, document.addEventListener("fullscreenchange", c, m), document.addEventListener("mozfullscreenchange", c, m), document.addEventListener("webkitfullscreenchange", c, m), document.addEventListener("MSFullscreenChange", c, m));var f = document.createElement("div");e.parentNode.insertBefore(f, e);f.appendChild(e);f.Td = f.requestFullScreen || f.mozRequestFullScreen || f.msRequestFullscreen || (f.webkitRequestFullScreen ? function () {
	                f.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
	            } : k);f.Td();
	        };p.requestAnimationFrame = function (a) {
	            Qb(a);
	        };p.setCanvasSize = function (a, b, c) {
	            fc(p.canvas, a, b);c || ec();
	        };
	        p.pauseMainLoop = function () {
	            Nb = k;Tb++;
	        };p.resumeMainLoop = function () {
	            Tb++;var a = Kb,
	                b = Lb,
	                c = Mb;Mb = k;Rb(c, 0, m, Sb);Jb(a, b);
	        };p.getUserMedia = function () {
	            window.qc || (window.qc = navigator.getUserMedia || navigator.mozGetUserMedia);window.qc(g);
	        };Ja = y = z.ub(D);Ka = Ja + Ma;La = E = z.ub(Ka);w(La < F, "TOTAL_MEMORY not big enough for stack");p.Xc = { Math: Math, Int8Array: Int8Array, Int16Array: Int16Array, Int32Array: Int32Array, Uint8Array: Uint8Array, Uint16Array: Uint16Array, Uint32Array: Uint32Array, Float32Array: Float32Array, Float64Array: Float64Array };
	        p.Yc = { abort: A, assert: w, min: va, invoke_viiiii: function (a, b, c, e, f, h) {
	                try {
	                    p.dynCall_viiiii(a, b, c, e, f, h);
	                } catch (j) {
	                    "number" !== typeof j && "longjmp" !== j && d(j), $.setThrew(1, 0);
	                }
	            }, _broadwayOnPictureDecoded: Hb, _puts: function (a) {
	                var b = K[pb >> 2],
	                    a = Db(a, b);return 0 > a ? a : 0 > Eb(10, b) ? -1 : a + 1;
	            }, _fflush: n(), _fputc: Eb, _send: function (a, b, c) {
	                return !Z.wd(a) ? (V(U.V), -1) : Ab(a, b, c);
	            }, _pwrite: function (a, b, c, e) {
	                a = B.qa(a);if (!a) return V(U.V), -1;try {
	                    return B.write(a, I, b, c, e);
	                } catch (f) {
	                    return B.sc(f), -1;
	                }
	            }, _fputs: Db, _emscripten_set_main_loop: Rb,
	            _abort: function () {
	                p.abort();
	            }, ___setErrNo: V, _sbrk: Fb, _mkport: zb, _emscripten_set_main_loop_timing: Jb, _emscripten_memcpy_big: function (a, b, c) {
	                N.set(N.subarray(b, b + c), a);return a;
	            }, _fileno: Cb, _broadwayOnHeadersDecoded: Ib, _write: Ab, _time: function (a) {
	                var b = Date.now() / 1E3 | 0;a && (K[a >> 2] = b);return b;
	            }, _sysconf: function (a) {
	                switch (a) {case 30:
	                        return 4096;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 79:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:
	                        return 200809;
	                    case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:
	                        return -1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:
	                        return 1;case 74:case 60:case 69:case 70:case 4:
	                        return 1024;case 31:case 42:case 72:
	                        return 32;
	                    case 87:case 26:case 33:
	                        return 2147483647;case 34:case 1:
	                        return 47839;case 38:case 36:
	                        return 99;case 43:case 37:
	                        return 2048;case 0:
	                        return 2097152;case 3:
	                        return 65536;case 28:
	                        return 32768;case 44:
	                        return 32767;case 75:
	                        return 16384;case 39:
	                        return 1E3;case 89:
	                        return 700;case 71:
	                        return 256;case 40:
	                        return 255;case 2:
	                        return 100;case 180:
	                        return 64;case 25:
	                        return 20;case 5:
	                        return 16;case 6:
	                        return 6;case 73:
	                        return 4;case 84:
	                        return "object" === typeof navigator ? navigator.hardwareConcurrency || 1 : 1;}V(U.B);return -1;
	            },
	            ___errno_location: function () {
	                return bb;
	            }, STACKTOP: y, STACK_MAX: Ka, tempDoublePtr: $a, ABORT: H, NaN: NaN, Infinity: Infinity }; // EMSCRIPTEN_START_ASM
	        var $ = function (global, env, buffer) {
	            "use asm";
	            var a = new global.Int8Array(buffer);var b = new global.Int16Array(buffer);var c = new global.Int32Array(buffer);var d = new global.Uint8Array(buffer);var e = new global.Uint16Array(buffer);var f = new global.Uint32Array(buffer);var g = new global.Float32Array(buffer);var h = new global.Float64Array(buffer);var i = env.STACKTOP | 0;var j = env.STACK_MAX | 0;var k = env.tempDoublePtr | 0;var l = env.ABORT | 0;var m = 0;var n = 0;var o = 0;var p = 0;var q = +env.NaN,
	                r = +env.Infinity;var s = 0,
	                t = 0,
	                u = 0,
	                v = 0,
	                w = 0.0,
	                x = 0,
	                y = 0,
	                z = 0,
	                A = 0.0;var B = 0;var C = 0;var D = 0;var E = 0;var F = 0;var G = 0;var H = 0;var I = 0;var J = 0;var K = 0;var L = global.Math.floor;var M = global.Math.abs;var N = global.Math.sqrt;var O = global.Math.pow;var P = global.Math.cos;var Q = global.Math.sin;var R = global.Math.tan;var S = global.Math.acos;var T = global.Math.asin;var U = global.Math.atan;var V = global.Math.atan2;var W = global.Math.exp;var X = global.Math.log;var Y = global.Math.ceil;var Z = global.Math.imul;var _ = env.abort;var $ = env.assert;var aa = env.min;var ba = env.invoke_viiiii;var ca = env._broadwayOnPictureDecoded;var da = env._puts;var ea = env._fflush;var fa = env._fputc;var ga = env._send;var ha = env._pwrite;var ia = env._fputs;var ja = env._emscripten_set_main_loop;var ka = env._abort;var la = env.___setErrNo;var ma = env._sbrk;var na = env._mkport;var oa = env._emscripten_set_main_loop_timing;var pa = env._emscripten_memcpy_big;var qa = env._fileno;var ra = env._broadwayOnHeadersDecoded;var sa = env._write;var ta = env._time;var ua = env._sysconf;var va = env.___errno_location;var wa = 0.0;
	            // EMSCRIPTEN_START_FUNCS
	            function Sb(a, f, g, h, j, k) {
	                a = a | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;var l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0,
	                    G = 0,
	                    H = 0,
	                    I = 0,
	                    J = 0,
	                    K = 0,
	                    L = 0,
	                    M = 0,
	                    N = 0,
	                    O = 0,
	                    P = 0,
	                    Q = 0,
	                    R = 0,
	                    S = 0,
	                    T = 0,
	                    U = 0,
	                    V = 0,
	                    W = 0,
	                    X = 0;X = i;i = i + 32 | 0;W = X;p = c[j + 4 >> 2] | 0;V = (h >>> 0) / (p >>> 0) | 0;U = V << 4;V = h - (Z(V, p) | 0) << 4;c[W + 4 >> 2] = p;c[W + 8 >> 2] = c[j + 8 >> 2];p = c[a >> 2] | 0;do if ((p | 0) == 2) {
	                    z = b[f + 160 >> 1] | 0;A = b[f + 162 >> 1] | 0;C = c[f + 144 >> 2] | 0;B = a + 4 | 0;o = c[a + 204 >> 2] | 0;if ((o | 0) != 0 ? (c[o + 4 >> 2] | 0) == (c[B >> 2] | 0) : 0) {
	                        if ((c[o >> 2] | 0) >>> 0 < 6) {
	                            w = o + 172 | 0;w = e[w >> 1] | e[w + 2 >> 1] << 16;m = 1;o = c[o + 108 >> 2] | 0;r = w & 65535;w = w >>> 16 & 65535;
	                        } else {
	                            m = 1;o = -1;r = 0;w = 0;
	                        }
	                    } else {
	                        m = 0;o = -1;r = 0;w = 0;
	                    }a: do if ((o | 0) == (C | 0)) {
	                        n = r;o = w;
	                    } else {
	                        n = c[a + 200 >> 2] | 0;if ((n | 0) != 0 ? (c[n + 4 >> 2] | 0) == (c[B >> 2] | 0) : 0) {
	                            if ((c[n >> 2] | 0) >>> 0 < 6) {
	                                o = n + 152 | 0;o = e[o >> 1] | e[o + 2 >> 1] << 16;q = 1;s = o & 65535;o = o >>> 16 & 65535;p = c[n + 104 >> 2] | 0;
	                            } else {
	                                q = 1;s = 0;o = 0;p = -1;
	                            }
	                        } else {
	                            q = 0;s = 0;o = 0;p = -1;
	                        }n = c[a + 208 >> 2] | 0;if ((n | 0) != 0 ? (c[n + 4 >> 2] | 0) == (c[B >> 2] | 0) : 0) {
	                            if ((c[n >> 2] | 0) >>> 0 < 6) {
	                                t = n + 172 | 0;n = c[n + 108 >> 2] | 0;t = e[t >> 1] | e[t + 2 >> 1] << 16;
	                            } else {
	                                n = -1;t = 0;
	                            }
	                        } else T = 54;do if ((T | 0) == 54) {
	                            n = c[a + 212 >> 2] | 0;if ((n | 0) != 0 ? (c[n + 4 >> 2] | 0) == (c[B >> 2] | 0) : 0) {
	                                if ((c[n >> 2] | 0) >>> 0 >= 6) {
	                                    n = -1;t = 0;break;
	                                }t = n + 192 | 0;n = c[n + 112 >> 2] | 0;t = e[t >> 1] | e[t + 2 >> 1] << 16;break;
	                            }if ((q | 0) == 0 | (m | 0) != 0) {
	                                n = -1;t = 0;
	                            } else {
	                                n = s;break a;
	                            }
	                        } while (0);m = (p | 0) == (C | 0);if ((((n | 0) == (C | 0) & 1) + (m & 1) | 0) == 1) {
	                            if (m) {
	                                n = m ? s : r;o = m ? o : w;break;
	                            }n = t & 65535;o = t >>> 16 & 65535;break;
	                        }n = s << 16 >> 16;l = r << 16 >> 16;p = t << 16 >> 16;if (r << 16 >> 16 > s << 16 >> 16) m = l;else {
	                            m = n;n = (l | 0) < (n | 0) ? l : n;
	                        }if ((m | 0) < (p | 0)) q = m;else q = (n | 0) > (p | 0) ? n : p;n = o << 16 >> 16;m = w << 16 >> 16;l = t >> 16;if (w << 16 >> 16 > o << 16 >> 16) o = m;else {
	                            o = n;n = (m | 0) < (n | 0) ? m : n;
	                        }if ((o | 0) >= (l | 0)) o = (n | 0) > (l | 0) ? n : l;n = q & 65535;o = o & 65535;
	                    } while (0);n = (n & 65535) + (z & 65535) | 0;o = (o & 65535) + (A & 65535) | 0;if (((n << 16 >> 16) + 8192 | 0) >>> 0 > 16383) {
	                        G = 1;i = X;return G | 0;
	                    }if (((o << 16 >> 16) + 2048 | 0) >>> 0 > 4095) {
	                        G = 1;i = X;return G | 0;
	                    }m = ic(g, C) | 0;if (!m) {
	                        G = 1;i = X;return G | 0;
	                    }A = a + 132 | 0;x = a + 136 | 0;y = a + 140 | 0;z = a + 144 | 0;q = a + 148 | 0;p = a + 152 | 0;G = a + 156 | 0;v = a + 160 | 0;b[a + 160 >> 1] = n;b[a + 162 >> 1] = o;v = e[v >> 1] | e[v + 2 >> 1] << 16;b[G >> 1] = v;b[G + 2 >> 1] = v >>> 16;b[p >> 1] = v;b[p + 2 >> 1] = v >>> 16;b[q >> 1] = v;b[q + 2 >> 1] = v >>> 16;b[z >> 1] = v;b[z + 2 >> 1] = v >>> 16;b[y >> 1] = v;b[y + 2 >> 1] = v >>> 16;b[x >> 1] = v;b[x + 2 >> 1] = v >>> 16;b[A >> 1] = v;b[A + 2 >> 1] = v >>> 16;c[a + 100 >> 2] = C;c[a + 104 >> 2] = C;A = a + 116 | 0;c[A >> 2] = m;c[a + 120 >> 2] = m;x = b[f + 164 >> 1] | 0;y = b[f + 166 >> 1] | 0;z = c[f + 148 >> 2] | 0;q = c[a + 200 >> 2] | 0;p = (q | 0) == 0;if ((!p ? (c[q + 4 >> 2] | 0) == (c[B >> 2] | 0) : 0) ? (c[q >> 2] | 0) >>> 0 < 6 : 0) {
	                        w = q + 184 | 0;w = e[w >> 1] | e[w + 2 >> 1] << 16;r = w & 65535;w = w >>> 16 & 65535;o = c[q + 112 >> 2] | 0;
	                    } else {
	                        r = 0;w = 0;o = -1;
	                    }do if ((o | 0) != (z | 0)) {
	                        s = v & 65535;n = v >>> 16;u = n & 65535;if ((!p ? (c[q + 4 >> 2] | 0) == (c[B >> 2] | 0) : 0) ? (c[q >> 2] | 0) >>> 0 < 6 : 0) {
	                            t = q + 160 | 0;p = c[q + 104 >> 2] | 0;t = e[t >> 1] | e[t + 2 >> 1] << 16;
	                        } else {
	                            p = -1;t = 0;
	                        }o = (C | 0) == (z | 0);if ((((p | 0) == (z | 0) & 1) + (o & 1) | 0) == 1) {
	                            m = o ? v : t;o = o ? n : t >>> 16;break;
	                        }o = r << 16 >> 16;p = v << 16 >> 16;q = t << 16 >> 16;if (s << 16 >> 16 > r << 16 >> 16) m = p;else {
	                            m = o;o = (p | 0) < (o | 0) ? p : o;
	                        }if ((m | 0) >= (q | 0)) m = (o | 0) > (q | 0) ? o : q;n = w << 16 >> 16;l = v >> 16;p = t >> 16;if (u << 16 >> 16 > w << 16 >> 16) o = l;else {
	                            o = n;n = (l | 0) < (n | 0) ? l : n;
	                        }if ((o | 0) >= (p | 0)) o = (n | 0) > (p | 0) ? n : p;
	                    } else {
	                        o = w & 65535;m = o << 16 | r & 65535;
	                    } while (0);m = (m & 65535) + (x & 65535) | 0;n = (o & 65535) + (y & 65535) | 0;if (((m << 16 >> 16) + 8192 | 0) >>> 0 > 16383) {
	                        G = 1;i = X;return G | 0;
	                    }if (((n << 16 >> 16) + 2048 | 0) >>> 0 > 4095) {
	                        G = 1;i = X;return G | 0;
	                    }o = ic(g, z) | 0;if (!o) {
	                        G = 1;i = X;return G | 0;
	                    } else {
	                        G = a + 164 | 0;E = a + 168 | 0;D = a + 172 | 0;C = a + 176 | 0;B = a + 180 | 0;y = a + 184 | 0;x = a + 188 | 0;F = a + 192 | 0;b[a + 192 >> 1] = m;b[a + 194 >> 1] = n;F = e[F >> 1] | e[F + 2 >> 1] << 16;b[x >> 1] = F;b[x + 2 >> 1] = F >>> 16;b[y >> 1] = F;b[y + 2 >> 1] = F >>> 16;b[B >> 1] = F;b[B + 2 >> 1] = F >>> 16;b[C >> 1] = F;b[C + 2 >> 1] = F >>> 16;b[D >> 1] = F;b[D + 2 >> 1] = F >>> 16;b[E >> 1] = F;b[E + 2 >> 1] = F >>> 16;b[G >> 1] = F;b[G + 2 >> 1] = F >>> 16;c[a + 108 >> 2] = z;c[a + 112 >> 2] = z;F = a + 124 | 0;c[F >> 2] = o;c[a + 128 >> 2] = o;c[W >> 2] = c[A >> 2];dc(k, a + 132 | 0, W, V, U, 0, 0, 16, 8);c[W >> 2] = c[F >> 2];dc(k, G, W, V, U, 0, 8, 16, 8);break;
	                    }
	                } else if ((p | 0) == 1 | (p | 0) == 0) {
	                    A = c[f + 144 >> 2] | 0;l = a + 4 | 0;n = c[a + 200 >> 2] | 0;if ((n | 0) != 0 ? (c[n + 4 >> 2] | 0) == (c[l >> 2] | 0) : 0) {
	                        if ((c[n >> 2] | 0) >>> 0 < 6) {
	                            o = n + 152 | 0;o = e[o >> 1] | e[o + 2 >> 1] << 16;m = 1;v = o & 65535;o = o >>> 16 & 65535;s = c[n + 104 >> 2] | 0;
	                        } else {
	                            m = 1;v = 0;o = 0;s = -1;
	                        }
	                    } else {
	                        m = 0;v = 0;o = 0;s = -1;
	                    }n = c[a + 204 >> 2] | 0;if ((n | 0) != 0 ? (c[n + 4 >> 2] | 0) == (c[l >> 2] | 0) : 0) {
	                        if ((c[n >> 2] | 0) >>> 0 < 6) {
	                            w = n + 172 | 0;w = e[w >> 1] | e[w + 2 >> 1] << 16;u = w & 65535;q = 1;r = c[n + 108 >> 2] | 0;w = w >>> 16 & 65535;
	                        } else {
	                            u = 0;q = 1;r = -1;w = 0;
	                        }
	                    } else {
	                        u = 0;q = 0;r = -1;w = 0;
	                    }do if (!p) {
	                        if (!((m | 0) == 0 | (q | 0) == 0)) {
	                            if ((s | 0) == 0 ? ((o & 65535) << 16 | v & 65535 | 0) == 0 : 0) {
	                                n = 0;o = 0;break;
	                            }if ((r | 0) == 0 ? ((w & 65535) << 16 | u & 65535 | 0) == 0 : 0) {
	                                n = 0;o = 0;
	                            } else T = 16;
	                        } else {
	                            n = 0;o = 0;
	                        }
	                    } else T = 16; while (0);if ((T | 0) == 16) {
	                        y = b[f + 160 >> 1] | 0;z = b[f + 162 >> 1] | 0;n = c[a + 208 >> 2] | 0;if ((n | 0) != 0 ? (c[n + 4 >> 2] | 0) == (c[l >> 2] | 0) : 0) {
	                            if ((c[n >> 2] | 0) >>> 0 < 6) {
	                                t = n + 172 | 0;p = c[n + 108 >> 2] | 0;t = e[t >> 1] | e[t + 2 >> 1] << 16;T = 25;
	                            } else {
	                                p = -1;t = 0;T = 25;
	                            }
	                        } else T = 20;do if ((T | 0) == 20) {
	                            p = c[a + 212 >> 2] | 0;if ((p | 0) != 0 ? (c[p + 4 >> 2] | 0) == (c[l >> 2] | 0) : 0) {
	                                if ((c[p >> 2] | 0) >>> 0 >= 6) {
	                                    p = -1;t = 0;T = 25;break;
	                                }t = p + 192 | 0;p = c[p + 112 >> 2] | 0;t = e[t >> 1] | e[t + 2 >> 1] << 16;T = 25;break;
	                            }if ((m | 0) == 0 | (q | 0) != 0) {
	                                p = -1;t = 0;T = 25;
	                            } else n = v;
	                        } while (0);do if ((T | 0) == 25) {
	                            m = (s | 0) == (A | 0);n = (r | 0) == (A | 0);if (((n & 1) + (m & 1) + ((p | 0) == (A | 0) & 1) | 0) == 1) {
	                                if (m | n) {
	                                    n = m ? v : u;o = m ? o : w;break;
	                                }n = t & 65535;o = t >>> 16 & 65535;break;
	                            }n = v << 16 >> 16;l = u << 16 >> 16;p = t << 16 >> 16;if (u << 16 >> 16 > v << 16 >> 16) m = l;else {
	                                m = n;n = (l | 0) < (n | 0) ? l : n;
	                            }if ((m | 0) < (p | 0)) p = m;else p = (n | 0) > (p | 0) ? n : p;n = o << 16 >> 16;m = w << 16 >> 16;l = t >> 16;if (w << 16 >> 16 > o << 16 >> 16) o = m;else {
	                                o = n;n = (m | 0) < (n | 0) ? m : n;
	                            }if ((o | 0) >= (l | 0)) o = (n | 0) > (l | 0) ? n : l;n = p & 65535;o = o & 65535;
	                        } while (0);n = (n & 65535) + (y & 65535) | 0;o = (o & 65535) + (z & 65535) | 0;if (((n << 16 >> 16) + 8192 | 0) >>> 0 > 16383) {
	                            G = 1;i = X;return G | 0;
	                        }if (((o << 16 >> 16) + 2048 | 0) >>> 0 > 4095) {
	                            G = 1;i = X;return G | 0;
	                        } else {
	                            n = n & 65535;o = o & 65535;
	                        }
	                    }l = ic(g, A) | 0;if (!l) {
	                        G = 1;i = X;return G | 0;
	                    } else {
	                        G = a + 132 | 0;E = a + 136 | 0;D = a + 140 | 0;C = a + 144 | 0;B = a + 148 | 0;z = a + 152 | 0;y = a + 156 | 0;x = a + 160 | 0;w = a + 164 | 0;v = a + 168 | 0;m = a + 172 | 0;p = a + 176 | 0;q = a + 180 | 0;r = a + 184 | 0;s = a + 188 | 0;F = a + 192 | 0;b[a + 192 >> 1] = n;b[a + 194 >> 1] = o;F = e[F >> 1] | e[F + 2 >> 1] << 16;b[s >> 1] = F;b[s + 2 >> 1] = F >>> 16;b[r >> 1] = F;b[r + 2 >> 1] = F >>> 16;b[q >> 1] = F;b[q + 2 >> 1] = F >>> 16;b[p >> 1] = F;b[p + 2 >> 1] = F >>> 16;b[m >> 1] = F;b[m + 2 >> 1] = F >>> 16;b[v >> 1] = F;b[v + 2 >> 1] = F >>> 16;b[w >> 1] = F;b[w + 2 >> 1] = F >>> 16;b[x >> 1] = F;b[x + 2 >> 1] = F >>> 16;b[y >> 1] = F;b[y + 2 >> 1] = F >>> 16;b[z >> 1] = F;b[z + 2 >> 1] = F >>> 16;b[B >> 1] = F;b[B + 2 >> 1] = F >>> 16;b[C >> 1] = F;b[C + 2 >> 1] = F >>> 16;b[D >> 1] = F;b[D + 2 >> 1] = F >>> 16;b[E >> 1] = F;b[E + 2 >> 1] = F >>> 16;b[G >> 1] = F;b[G + 2 >> 1] = F >>> 16;c[a + 100 >> 2] = A;c[a + 104 >> 2] = A;c[a + 108 >> 2] = A;c[a + 112 >> 2] = A;c[a + 116 >> 2] = l;c[a + 120 >> 2] = l;c[a + 124 >> 2] = l;c[a + 128 >> 2] = l;c[W >> 2] = l;dc(k, a + 132 | 0, W, V, U, 0, 0, 16, 16);break;
	                    }
	                } else if ((p | 0) == 3) {
	                    x = b[f + 160 >> 1] | 0;y = b[f + 162 >> 1] | 0;C = c[f + 144 >> 2] | 0;u = a + 4 | 0;o = c[a + 200 >> 2] | 0;if ((o | 0) != 0 ? (c[o + 4 >> 2] | 0) == (c[u >> 2] | 0) : 0) {
	                        if ((c[o >> 2] | 0) >>> 0 < 6) {
	                            w = o + 152 | 0;w = e[w >> 1] | e[w + 2 >> 1] << 16;n = 1;s = w & 65535;w = w >>> 16 & 65535;o = c[o + 104 >> 2] | 0;
	                        } else {
	                            n = 1;s = 0;w = 0;o = -1;
	                        }
	                    } else {
	                        n = 0;s = 0;w = 0;o = -1;
	                    }b: do if ((o | 0) == (C | 0)) {
	                        n = s;o = w;
	                    } else {
	                        o = c[a + 204 >> 2] | 0;if ((o | 0) != 0 ? (c[o + 4 >> 2] | 0) == (c[u >> 2] | 0) : 0) {
	                            if ((c[o >> 2] | 0) >>> 0 < 6) {
	                                G = o + 172 | 0;G = e[G >> 1] | e[G + 2 >> 1] << 16;t = o + 188 | 0;p = c[o + 108 >> 2] | 0;l = c[o + 112 >> 2] | 0;n = G & 65535;o = G >>> 16 & 65535;t = e[t >> 1] | e[t + 2 >> 1] << 16;
	                            } else {
	                                p = -1;l = -1;n = 0;o = 0;t = 0;
	                            }
	                        } else T = 107;do if ((T | 0) == 107) {
	                            o = c[a + 212 >> 2] | 0;if ((o | 0) != 0 ? (c[o + 4 >> 2] | 0) == (c[u >> 2] | 0) : 0) {
	                                if ((c[o >> 2] | 0) >>> 0 >= 6) {
	                                    p = -1;l = -1;n = 0;o = 0;t = 0;break;
	                                }t = o + 192 | 0;p = -1;l = c[o + 112 >> 2] | 0;n = 0;o = 0;t = e[t >> 1] | e[t + 2 >> 1] << 16;break;
	                            }if (!n) {
	                                p = -1;l = -1;n = 0;o = 0;t = 0;
	                            } else {
	                                n = s;o = w;break b;
	                            }
	                        } while (0);m = (p | 0) == (C | 0);if (((m & 1) + ((l | 0) == (C | 0) & 1) | 0) == 1) {
	                            if (m) break;n = t & 65535;o = t >>> 16 & 65535;break;
	                        }l = s << 16 >> 16;p = n << 16 >> 16;q = t << 16 >> 16;if (n << 16 >> 16 > s << 16 >> 16) {
	                            m = p;n = l;
	                        } else {
	                            m = l;n = (p | 0) < (l | 0) ? p : l;
	                        }if ((m | 0) < (q | 0)) q = m;else q = (n | 0) > (q | 0) ? n : q;n = w << 16 >> 16;m = o << 16 >> 16;l = t >> 16;if (o << 16 >> 16 > w << 16 >> 16) o = m;else {
	                            o = n;n = (m | 0) < (n | 0) ? m : n;
	                        }if ((o | 0) >= (l | 0)) o = (n | 0) > (l | 0) ? n : l;n = q & 65535;o = o & 65535;
	                    } while (0);n = (n & 65535) + (x & 65535) | 0;o = (o & 65535) + (y & 65535) | 0;if (((n << 16 >> 16) + 8192 | 0) >>> 0 > 16383) {
	                        G = 1;i = X;return G | 0;
	                    }if (((o << 16 >> 16) + 2048 | 0) >>> 0 > 4095) {
	                        G = 1;i = X;return G | 0;
	                    }m = ic(g, C) | 0;if (!m) {
	                        G = 1;i = X;return G | 0;
	                    }x = a + 132 | 0;z = a + 136 | 0;A = a + 140 | 0;y = a + 144 | 0;G = a + 164 | 0;F = a + 168 | 0;E = a + 172 | 0;w = a + 176 | 0;b[a + 176 >> 1] = n;b[a + 178 >> 1] = o;w = e[w >> 1] | e[w + 2 >> 1] << 16;b[E >> 1] = w;b[E + 2 >> 1] = w >>> 16;b[F >> 1] = w;b[F + 2 >> 1] = w >>> 16;b[G >> 1] = w;b[G + 2 >> 1] = w >>> 16;b[y >> 1] = w;b[y + 2 >> 1] = w >>> 16;b[A >> 1] = w;b[A + 2 >> 1] = w >>> 16;b[z >> 1] = w;b[z + 2 >> 1] = w >>> 16;b[x >> 1] = w;b[x + 2 >> 1] = w >>> 16;c[a + 100 >> 2] = C;c[a + 108 >> 2] = C;x = a + 116 | 0;c[x >> 2] = m;c[a + 124 >> 2] = m;z = b[f + 164 >> 1] | 0;A = b[f + 166 >> 1] | 0;y = c[f + 148 >> 2] | 0;o = c[a + 208 >> 2] | 0;if ((o | 0) != 0 ? (c[o + 4 >> 2] | 0) == (c[u >> 2] | 0) : 0) {
	                        if ((c[o >> 2] | 0) >>> 0 < 6) {
	                            r = o + 172 | 0;o = c[o + 108 >> 2] | 0;p = 1;r = e[r >> 1] | e[r + 2 >> 1] << 16;
	                        } else {
	                            o = -1;p = 1;r = 0;
	                        }
	                    } else {
	                        o = c[a + 204 >> 2] | 0;if ((o | 0) != 0 ? (c[o + 4 >> 2] | 0) == (c[u >> 2] | 0) : 0) {
	                            if ((c[o >> 2] | 0) >>> 0 < 6) {
	                                r = o + 176 | 0;o = c[o + 108 >> 2] | 0;p = 1;r = e[r >> 1] | e[r + 2 >> 1] << 16;
	                            } else {
	                                o = -1;p = 1;r = 0;
	                            }
	                        } else {
	                            o = -1;p = 0;r = 0;
	                        }
	                    }do if ((o | 0) != (y | 0)) {
	                        s = w & 65535;o = w >>> 16;v = o & 65535;n = c[a + 204 >> 2] | 0;if ((n | 0) != 0 ? (c[n + 4 >> 2] | 0) == (c[u >> 2] | 0) : 0) {
	                            if ((c[n >> 2] | 0) >>> 0 < 6) {
	                                u = n + 188 | 0;u = e[u >> 1] | e[u + 2 >> 1] << 16;p = c[n + 112 >> 2] | 0;l = u & 65535;u = u >>> 16 & 65535;
	                            } else {
	                                p = -1;l = 0;u = 0;
	                            }
	                        } else if (!p) {
	                            m = w;break;
	                        } else {
	                            p = -1;l = 0;u = 0;
	                        }m = (C | 0) == (y | 0);n = (p | 0) == (y | 0);if (((n & 1) + (m & 1) | 0) == 1) {
	                            if (m) {
	                                m = w;break;
	                            }if (n) {
	                                o = u & 65535;m = o << 16 | l & 65535;break;
	                            } else {
	                                m = r;o = r >>> 16;break;
	                            }
	                        }o = w << 16 >> 16;p = l << 16 >> 16;q = r << 16 >> 16;if (l << 16 >> 16 > s << 16 >> 16) m = p;else {
	                            m = o;o = (p | 0) < (o | 0) ? p : o;
	                        }if ((m | 0) >= (q | 0)) m = (o | 0) > (q | 0) ? o : q;n = w >> 16;l = u << 16 >> 16;p = r >> 16;if (u << 16 >> 16 > v << 16 >> 16) o = l;else {
	                            o = n;n = (l | 0) < (n | 0) ? l : n;
	                        }if ((o | 0) >= (p | 0)) o = (n | 0) > (p | 0) ? n : p;
	                    } else {
	                        m = r;o = r >>> 16;
	                    } while (0);m = (m & 65535) + (z & 65535) | 0;n = (o & 65535) + (A & 65535) | 0;if (((m << 16 >> 16) + 8192 | 0) >>> 0 > 16383) {
	                        G = 1;i = X;return G | 0;
	                    }if (((n << 16 >> 16) + 2048 | 0) >>> 0 > 4095) {
	                        G = 1;i = X;return G | 0;
	                    }o = ic(g, y) | 0;if (!o) {
	                        G = 1;i = X;return G | 0;
	                    } else {
	                        G = a + 148 | 0;E = a + 152 | 0;D = a + 156 | 0;C = a + 160 | 0;B = a + 180 | 0;A = a + 184 | 0;z = a + 188 | 0;F = a + 192 | 0;b[a + 192 >> 1] = m;b[a + 194 >> 1] = n;F = e[F >> 1] | e[F + 2 >> 1] << 16;b[z >> 1] = F;b[z + 2 >> 1] = F >>> 16;b[A >> 1] = F;b[A + 2 >> 1] = F >>> 16;b[B >> 1] = F;b[B + 2 >> 1] = F >>> 16;b[C >> 1] = F;b[C + 2 >> 1] = F >>> 16;b[D >> 1] = F;b[D + 2 >> 1] = F >>> 16;b[E >> 1] = F;b[E + 2 >> 1] = F >>> 16;b[G >> 1] = F;b[G + 2 >> 1] = F >>> 16;c[a + 104 >> 2] = y;c[a + 112 >> 2] = y;F = a + 120 | 0;c[F >> 2] = o;c[a + 128 >> 2] = o;c[W >> 2] = c[x >> 2];dc(k, a + 132 | 0, W, V, U, 0, 0, 8, 16);c[W >> 2] = c[F >> 2];dc(k, G, W, V, U, 8, 0, 8, 16);break;
	                    }
	                } else {
	                    S = a + 4 | 0;H = 0;c: while (1) {
	                        D = f + (H << 2) + 176 | 0;G = eb(c[D >> 2] | 0) | 0;E = f + (H << 2) + 192 | 0;c[a + (H << 2) + 100 >> 2] = c[E >> 2];F = ic(g, c[E >> 2] | 0) | 0;c[a + (H << 2) + 116 >> 2] = F;if (!F) {
	                            l = 1;T = 212;break;
	                        }if (G) {
	                            J = H << 2;K = a + (J << 2) + 132 | 0;O = a + (J << 2) + 134 | 0;P = J | 1;L = a + (P << 2) + 132 | 0;P = a + (P << 2) + 134 | 0;Q = J | 2;M = a + (Q << 2) + 132 | 0;Q = a + (Q << 2) + 134 | 0;R = J | 3;N = a + (R << 2) + 132 | 0;R = a + (R << 2) + 134 | 0;I = 0;do {
	                                C = b[f + (H << 4) + (I << 2) + 208 >> 1] | 0;B = b[f + (H << 4) + (I << 2) + 210 >> 1] | 0;F = hb(c[D >> 2] | 0) | 0;n = c[E >> 2] | 0;s = ub(a, c[6288 + (H << 7) + (F << 5) + (I << 3) >> 2] | 0) | 0;r = d[6288 + (H << 7) + (F << 5) + (I << 3) + 4 >> 0] | 0;if ((s | 0) != 0 ? (c[s + 4 >> 2] | 0) == (c[S >> 2] | 0) : 0) {
	                                    if ((c[s >> 2] | 0) >>> 0 < 6) {
	                                        q = s + (r << 2) + 132 | 0;q = e[q >> 1] | e[q + 2 >> 1] << 16;A = c[s + (r >>> 2 << 2) + 100 >> 2] | 0;o = q & 65535;z = 1;q = q >>> 16 & 65535;
	                                    } else {
	                                        A = -1;o = 0;z = 1;q = 0;
	                                    }
	                                } else {
	                                    A = -1;o = 0;z = 0;q = 0;
	                                }v = ub(a, c[5776 + (H << 7) + (F << 5) + (I << 3) >> 2] | 0) | 0;l = d[5776 + (H << 7) + (F << 5) + (I << 3) + 4 >> 0] | 0;if ((v | 0) != 0 ? (c[v + 4 >> 2] | 0) == (c[S >> 2] | 0) : 0) {
	                                    if ((c[v >> 2] | 0) >>> 0 < 6) {
	                                        p = v + (l << 2) + 132 | 0;p = e[p >> 1] | e[p + 2 >> 1] << 16;y = 1;x = c[v + (l >>> 2 << 2) + 100 >> 2] | 0;m = p & 65535;p = p >>> 16 & 65535;
	                                    } else {
	                                        y = 1;x = -1;m = 0;p = 0;
	                                    }
	                                } else {
	                                    y = 0;x = -1;m = 0;p = 0;
	                                }w = ub(a, c[5264 + (H << 7) + (F << 5) + (I << 3) >> 2] | 0) | 0;v = d[5264 + (H << 7) + (F << 5) + (I << 3) + 4 >> 0] | 0;if ((w | 0) != 0 ? (c[w + 4 >> 2] | 0) == (c[S >> 2] | 0) : 0) {
	                                    if ((c[w >> 2] | 0) >>> 0 < 6) {
	                                        z = w + (v << 2) + 132 | 0;z = e[z >> 1] | e[z + 2 >> 1] << 16;v = c[w + (v >>> 2 << 2) + 100 >> 2] | 0;T = 180;
	                                    } else {
	                                        z = 0;v = -1;T = 180;
	                                    }
	                                } else T = 175;do if ((T | 0) == 175) {
	                                    T = 0;w = ub(a, c[4752 + (H << 7) + (F << 5) + (I << 3) >> 2] | 0) | 0;v = d[4752 + (H << 7) + (F << 5) + (I << 3) + 4 >> 0] | 0;if ((w | 0) != 0 ? (c[w + 4 >> 2] | 0) == (c[S >> 2] | 0) : 0) {
	                                        if ((c[w >> 2] | 0) >>> 0 >= 6) {
	                                            z = 0;v = -1;T = 180;break;
	                                        }z = w + (v << 2) + 132 | 0;z = e[z >> 1] | e[z + 2 >> 1] << 16;v = c[w + (v >>> 2 << 2) + 100 >> 2] | 0;T = 180;break;
	                                    }if ((z | 0) == 0 | (y | 0) != 0) {
	                                        z = 0;v = -1;T = 180;
	                                    } else {
	                                        v = o;t = q;
	                                    }
	                                } while (0);do if ((T | 0) == 180) {
	                                    l = (A | 0) == (n | 0);w = (x | 0) == (n | 0);if (((w & 1) + (l & 1) + ((v | 0) == (n | 0) & 1) | 0) == 1) {
	                                        if (l | w) {
	                                            v = l ? o : m;t = l ? q : p;break;
	                                        }v = z & 65535;t = z >>> 16 & 65535;break;
	                                    }u = o << 16 >> 16;w = m << 16 >> 16;l = z << 16 >> 16;if (m << 16 >> 16 > o << 16 >> 16) v = w;else {
	                                        v = u;u = (w | 0) < (u | 0) ? w : u;
	                                    }if ((v | 0) < (l | 0)) w = v;else w = (u | 0) > (l | 0) ? u : l;t = q << 16 >> 16;v = p << 16 >> 16;l = z >> 16;if (p << 16 >> 16 > q << 16 >> 16) s = v;else {
	                                        s = t;t = (v | 0) < (t | 0) ? v : t;
	                                    }if ((s | 0) >= (l | 0)) s = (t | 0) > (l | 0) ? t : l;v = w & 65535;t = s & 65535;
	                                } while (0);C = (v & 65535) + (C & 65535) | 0;q = C & 65535;s = (t & 65535) + (B & 65535) | 0;r = s & 65535;if (((C << 16 >> 16) + 8192 | 0) >>> 0 > 16383) {
	                                    l = 1;T = 212;break c;
	                                }if (((s << 16 >> 16) + 2048 | 0) >>> 0 > 4095) {
	                                    l = 1;T = 212;break c;
	                                }if ((F | 0) == 1) {
	                                    F = (I << 1) + J | 0;b[a + (F << 2) + 132 >> 1] = q;b[a + (F << 2) + 134 >> 1] = r;F = F | 1;b[a + (F << 2) + 132 >> 1] = q;b[a + (F << 2) + 134 >> 1] = r;
	                                } else if ((F | 0) == 2) {
	                                    F = I + J | 0;b[a + (F << 2) + 132 >> 1] = q;b[a + (F << 2) + 134 >> 1] = r;F = F + 2 | 0;b[a + (F << 2) + 132 >> 1] = q;b[a + (F << 2) + 134 >> 1] = r;
	                                } else if ((F | 0) == 3) {
	                                    F = I + J | 0;b[a + (F << 2) + 132 >> 1] = q;b[a + (F << 2) + 134 >> 1] = r;
	                                } else if (!F) {
	                                    b[K >> 1] = q;b[O >> 1] = r;b[L >> 1] = q;b[P >> 1] = r;b[M >> 1] = q;b[Q >> 1] = r;b[N >> 1] = q;b[R >> 1] = r;
	                                }I = I + 1 | 0;
	                            } while (I >>> 0 < G >>> 0);
	                        }H = H + 1 | 0;if (H >>> 0 >= 4) {
	                            T = 201;break;
	                        }
	                    }if ((T | 0) == 201) {
	                        o = 0;do {
	                            c[W >> 2] = c[a + (o << 2) + 116 >> 2];m = hb(c[f + (o << 2) + 176 >> 2] | 0) | 0;l = o << 3 & 8;n = o >>> 0 < 2 ? 0 : 8;if (!m) dc(k, a + (o << 2 << 2) + 132 | 0, W, V, U, l, n, 8, 8);else if ((m | 0) == 1) {
	                                G = o << 2;dc(k, a + (G << 2) + 132 | 0, W, V, U, l, n, 8, 4);dc(k, a + ((G | 2) << 2) + 132 | 0, W, V, U, l, n | 4, 8, 4);
	                            } else if ((m | 0) == 2) {
	                                G = o << 2;dc(k, a + (G << 2) + 132 | 0, W, V, U, l, n, 4, 8);dc(k, a + ((G | 1) << 2) + 132 | 0, W, V, U, l | 4, n, 4, 8);
	                            } else {
	                                E = o << 2;dc(k, a + (E << 2) + 132 | 0, W, V, U, l, n, 4, 4);F = l | 4;dc(k, a + ((E | 1) << 2) + 132 | 0, W, V, U, F, n, 4, 4);G = n | 4;dc(k, a + ((E | 2) << 2) + 132 | 0, W, V, U, l, G, 4, 4);dc(k, a + ((E | 3) << 2) + 132 | 0, W, V, U, F, G, 4, 4);
	                            }o = o + 1 | 0;
	                        } while ((o | 0) != 4);
	                    } else if ((T | 0) == 212) {
	                        i = X;return l | 0;
	                    }
	                } while (0);if ((c[a + 196 >> 2] | 0) >>> 0 > 1) {
	                    G = 0;i = X;return G | 0;
	                }if (!(c[a >> 2] | 0)) {
	                    sc(j, k);G = 0;i = X;return G | 0;
	                } else {
	                    tc(j, h, k, f + 328 | 0);G = 0;i = X;return G | 0;
	                }return 0;
	            }function Tb(b, c, e, f, g, h, j, k, l) {
	                b = b | 0;c = c | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;var m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0;B = i;i = i + 144 | 0;m = B;if ((e | 0) >= 0 ? !((e + 1 + k | 0) >>> 0 > g >>> 0 | (f | 0) < 0 | (l + f | 0) >>> 0 > h >>> 0) : 0) m = b;else {
	                    A = k + 1 | 0;Ub(b, m, e, f, g, h, A, l, A);Ub(b + (Z(h, g) | 0) | 0, m + (Z(A, l) | 0) | 0, e, f, g, h, A, l, A);h = l;g = A;e = 0;f = 0;
	                }A = 8 - j | 0;v = l >>> 1;z = (v | 0) == 0;w = k >>> 1;y = (w | 0) == 0;x = 16 - k | 0;u = (g << 1) - k | 0;s = g + 1 | 0;t = g + 2 | 0;p = w << 1;r = 0;do {
	                    l = m + ((Z((Z(r, h) | 0) + f | 0, g) | 0) + e) | 0;if (!(z | y)) {
	                        q = c + (r << 6) | 0;o = v;while (1) {
	                            k = q;b = l;n = w;while (1) {
	                                D = d[b >> 0] | 0;E = d[b + s >> 0] | 0;F = b;b = b + 2 | 0;C = d[F + 1 >> 0] | 0;a[k + 8 >> 0] = (((Z(E, j) | 0) + (Z(d[F + g >> 0] | 0, A) | 0) << 3) + 32 | 0) >>> 6;a[k >> 0] = (((Z(C, j) | 0) + (Z(D, A) | 0) << 3) + 32 | 0) >>> 6;D = d[b >> 0] | 0;a[k + 9 >> 0] = (((Z(d[F + t >> 0] | 0, j) | 0) + (Z(E, A) | 0) << 3) + 32 | 0) >>> 6;a[k + 1 >> 0] = (((Z(D, j) | 0) + (Z(C, A) | 0) << 3) + 32 | 0) >>> 6;n = n + -1 | 0;if (!n) break;else k = k + 2 | 0;
	                            }o = o + -1 | 0;if (!o) break;else {
	                                q = q + (p + x) | 0;l = l + (p + u) | 0;
	                            }
	                        }
	                    }r = r + 1 | 0;
	                } while ((r | 0) != 2);i = B;return;
	            }function Ub(a, b, c, d, e, f, g, h, j) {
	                a = a | 0;b = b | 0;c = c | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;var k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0;t = i;k = g + c | 0;o = h + d | 0;s = (c | 0) < 0 | (k | 0) > (e | 0) ? 2 : 1;m = (o | 0) < 0 ? 0 - h | 0 : d;d = (k | 0) < 0 ? 0 - g | 0 : c;m = (m | 0) > (f | 0) ? f : m;d = (d | 0) > (e | 0) ? e : d;k = d + g | 0;l = m + h | 0;if ((d | 0) > 0) a = a + d | 0;if ((m | 0) > 0) a = a + (Z(m, e) | 0) | 0;r = (d | 0) < 0 ? 0 - d | 0 : 0;q = (k | 0) > (e | 0) ? k - e | 0 : 0;p = g - r - q | 0;g = 0 - m | 0;m = (m | 0) < 0 ? g : 0;c = l - f | 0;n = (l | 0) > (f | 0) ? c : 0;k = h - m | 0;d = k - n | 0;if (m) {
	                    m = h + -1 - ((o | 0) > 0 ? o : 0) | 0;l = ~f;l = (m | 0) > (l | 0) ? m : l;m = ~l;m = Z(l + ((m | 0) > 0 ? m : 0) + 1 | 0, j) | 0;l = b;while (1) {
	                        xa[s & 3](a, l, r, p, q);g = g + -1 | 0;if (!g) break;else l = l + j | 0;
	                    }b = b + m | 0;
	                }if ((k | 0) != (n | 0)) {
	                    l = h + -1 | 0;g = l - ((o | 0) > 0 ? o : 0) | 0;k = ~f;k = (g | 0) > (k | 0) ? g : k;l = l - k | 0;g = ~k;g = h + f + -1 - ((l | 0) < (f | 0) ? f : l) - k - ((g | 0) > 0 ? g : 0) | 0;k = Z(g, j) | 0;g = Z(g, e) | 0;l = b;m = a;while (1) {
	                        xa[s & 3](m, l, r, p, q);d = d + -1 | 0;if (!d) break;else {
	                            l = l + j | 0;m = m + e | 0;
	                        }
	                    }b = b + k | 0;a = a + g | 0;
	                }a = a + (0 - e) | 0;if (!n) {
	                    i = t;return;
	                }while (1) {
	                    xa[s & 3](a, b, r, p, q);c = c + -1 | 0;if (!c) break;else b = b + j | 0;
	                }i = t;return;
	            }function Vb(b, c, e, f, g, h, j, k, l) {
	                b = b | 0;c = c | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;var m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0;C = i;i = i + 144 | 0;m = C;if (((e | 0) >= 0 ? !((k + e | 0) >>> 0 > g >>> 0 | (f | 0) < 0) : 0) ? (f + 1 + l | 0) >>> 0 <= h >>> 0 : 0) m = b;else {
	                    A = l + 1 | 0;Ub(b, m, e, f, g, h, k, A, k);Ub(b + (Z(h, g) | 0) | 0, m + (Z(A, k) | 0) | 0, e, f, g, h, k, A, k);h = A;g = k;e = 0;f = 0;
	                }B = 8 - j | 0;w = l >>> 1;A = (w | 0) == 0;x = k >>> 1;z = (x | 0) == 0;y = 16 - k | 0;v = g << 1;u = v - k | 0;t = v | 1;s = g + 1 | 0;p = x << 1;r = 0;do {
	                    l = m + ((Z((Z(r, h) | 0) + f | 0, g) | 0) + e) | 0;if (!(A | z)) {
	                        q = c + (r << 6) | 0;o = w;while (1) {
	                            k = q;b = l;n = x;while (1) {
	                                D = d[b + g >> 0] | 0;E = d[b >> 0] | 0;a[k + 8 >> 0] = (((Z(D, B) | 0) + (Z(d[b + v >> 0] | 0, j) | 0) << 3) + 32 | 0) >>> 6;a[k >> 0] = (((Z(E, B) | 0) + (Z(D, j) | 0) << 3) + 32 | 0) >>> 6;D = d[b + s >> 0] | 0;E = d[b + 1 >> 0] | 0;a[k + 9 >> 0] = (((Z(D, B) | 0) + (Z(d[b + t >> 0] | 0, j) | 0) << 3) + 32 | 0) >>> 6;a[k + 1 >> 0] = (((Z(E, B) | 0) + (Z(D, j) | 0) << 3) + 32 | 0) >>> 6;n = n + -1 | 0;if (!n) break;else {
	                                    k = k + 2 | 0;b = b + 2 | 0;
	                                }
	                            }o = o + -1 | 0;if (!o) break;else {
	                                q = q + (p + y) | 0;l = l + (p + u) | 0;
	                            }
	                        }
	                    }r = r + 1 | 0;
	                } while ((r | 0) != 2);i = C;return;
	            }function Wb(b, c, e, f, g, h, j, k, l, m) {
	                b = b | 0;c = c | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;m = m | 0;var n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0,
	                    G = 0,
	                    H = 0,
	                    I = 0,
	                    J = 0,
	                    K = 0,
	                    L = 0,
	                    M = 0;I = i;i = i + 176 | 0;n = I;if (((e | 0) >= 0 ? !((e + 1 + l | 0) >>> 0 > g >>> 0 | (f | 0) < 0) : 0) ? (f + 1 + m | 0) >>> 0 <= h >>> 0 : 0) n = b;else {
	                    B = l + 1 | 0;A = m + 1 | 0;Ub(b, n, e, f, g, h, B, A, B);Ub(b + (Z(h, g) | 0) | 0, n + (Z(A, B) | 0) | 0, e, f, g, h, B, A, B);h = A;g = B;e = 0;f = 0;
	                }G = 8 - j | 0;H = 8 - k | 0;B = m >>> 1;E = (B | 0) == 0;A = g << 1;C = l >>> 1;F = (C | 0) == 0;D = 16 - l | 0;z = A - l | 0;v = g + 1 | 0;w = A | 1;x = g + 2 | 0;y = A + 2 | 0;s = C << 1;u = 0;do {
	                    l = n + ((Z((Z(u, h) | 0) + f | 0, g) | 0) + e) | 0;if (!(E | F)) {
	                        t = c + (u << 6) | 0;r = B;while (1) {
	                            p = d[l + g >> 0] | 0;m = t;b = l;o = (Z(p, k) | 0) + (Z(d[l >> 0] | 0, H) | 0) | 0;p = (Z(d[l + A >> 0] | 0, k) | 0) + (Z(p, H) | 0) | 0;q = C;while (1) {
	                                K = d[b + v >> 0] | 0;J = (Z(K, k) | 0) + (Z(d[b + 1 >> 0] | 0, H) | 0) | 0;K = (Z(d[b + w >> 0] | 0, k) | 0) + (Z(K, H) | 0) | 0;M = ((Z(o, G) | 0) + 32 + (Z(J, j) | 0) | 0) >>> 6;a[m + 8 >> 0] = ((Z(p, G) | 0) + 32 + (Z(K, j) | 0) | 0) >>> 6;a[m >> 0] = M;M = b;b = b + 2 | 0;L = d[M + x >> 0] | 0;o = (Z(L, k) | 0) + (Z(d[b >> 0] | 0, H) | 0) | 0;p = (Z(d[M + y >> 0] | 0, k) | 0) + (Z(L, H) | 0) | 0;J = ((Z(J, G) | 0) + 32 + (Z(o, j) | 0) | 0) >>> 6;a[m + 9 >> 0] = ((Z(K, G) | 0) + 32 + (Z(p, j) | 0) | 0) >>> 6;a[m + 1 >> 0] = J;q = q + -1 | 0;if (!q) break;else m = m + 2 | 0;
	                            }r = r + -1 | 0;if (!r) break;else {
	                                t = t + (s + D) | 0;l = l + (s + z) | 0;
	                            }
	                        }
	                    }u = u + 1 | 0;
	                } while ((u | 0) != 2);i = I;return;
	            }function Xb(b, c, e, f, g, h, j, k) {
	                b = b | 0;c = c | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;var l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0;r = i;i = i + 448 | 0;l = r;if (((e | 0) >= 0 ? !((j + e | 0) >>> 0 > g >>> 0 | (f | 0) < 0) : 0) ? (f + 5 + k | 0) >>> 0 <= h >>> 0 : 0) l = b;else {
	                    Ub(b, l, e, f, g, h, j, k + 5 | 0, j);g = j;e = 0;f = 0;
	                }h = e + g + (Z(f, g) | 0) | 0;b = k >>> 2;if (!b) {
	                    i = r;return;
	                }n = g << 2;q = 0 - g | 0;o = q << 1;p = g << 1;if (!j) {
	                    i = r;return;
	                } else {
	                    m = l + h | 0;e = l + (h + (g * 5 | 0)) | 0;
	                }while (1) {
	                    l = j;h = c;k = m;f = e;while (1) {
	                        u = d[f + o >> 0] | 0;v = d[f + q >> 0] | 0;w = d[f + g >> 0] | 0;y = d[f >> 0] | 0;x = w + u | 0;s = d[k + p >> 0] | 0;a[h + 48 >> 0] = a[((d[f + p >> 0] | 0) + 16 - x - (x << 2) + s + ((y + v | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;x = s + y | 0;t = d[k + g >> 0] | 0;a[h + 32 >> 0] = a[(w + 16 - x - (x << 2) + t + ((v + u | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;x = t + v | 0;w = d[k >> 0] | 0;a[h + 16 >> 0] = a[(y + 16 - x - (x << 2) + w + ((s + u | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;u = w + u | 0;a[h >> 0] = a[(v + 16 - u - (u << 2) + (d[k + q >> 0] | 0) + ((t + s | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;l = l + -1 | 0;if (!l) break;else {
	                            h = h + 1 | 0;k = k + 1 | 0;f = f + 1 | 0;
	                        }
	                    }b = b + -1 | 0;if (!b) break;else {
	                        c = c + 64 | 0;m = m + n | 0;e = e + n | 0;
	                    }
	                }i = r;return;
	            }function Yb(b, c, e, f, g, h, j, k, l) {
	                b = b | 0;c = c | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;var m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0;v = i;i = i + 448 | 0;m = v;if (((e | 0) >= 0 ? !((j + e | 0) >>> 0 > g >>> 0 | (f | 0) < 0) : 0) ? (f + 5 + k | 0) >>> 0 <= h >>> 0 : 0) m = b;else {
	                    Ub(b, m, e, f, g, h, j, k + 5 | 0, j);g = j;e = 0;f = 0;
	                }h = e + g + (Z(f, g) | 0) | 0;b = k >>> 2;if (!b) {
	                    i = v;return;
	                }u = (j | 0) == 0;s = (g << 2) - j | 0;t = 64 - j | 0;r = 0 - g | 0;p = r << 1;q = g << 1;e = m + h | 0;f = m + (h + (Z(g, l + 2 | 0) | 0)) | 0;m = m + (h + (g * 5 | 0)) | 0;while (1) {
	                    if (u) {
	                        h = c;k = f;
	                    } else {
	                        k = f + j | 0;h = c + j | 0;l = j;o = e;n = m;while (1) {
	                            y = d[n + p >> 0] | 0;z = d[n + r >> 0] | 0;A = d[n + g >> 0] | 0;C = d[n >> 0] | 0;B = A + y | 0;w = d[o + q >> 0] | 0;a[c + 48 >> 0] = ((d[((d[n + q >> 0] | 0) + 16 - B - (B << 2) + w + ((C + z | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) + 1 + (d[f + q >> 0] | 0) | 0) >>> 1;B = w + C | 0;x = d[o + g >> 0] | 0;a[c + 32 >> 0] = ((d[(A + 16 - B - (B << 2) + x + ((z + y | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) + 1 + (d[f + g >> 0] | 0) | 0) >>> 1;B = x + z | 0;A = d[o >> 0] | 0;a[c + 16 >> 0] = ((d[(C + 16 - B - (B << 2) + A + ((w + y | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) + 1 + (d[f >> 0] | 0) | 0) >>> 1;y = A + y | 0;a[c >> 0] = ((d[(z + 16 - y - (y << 2) + (d[o + r >> 0] | 0) + ((x + w | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) + 1 + (d[f + r >> 0] | 0) | 0) >>> 1;l = l + -1 | 0;if (!l) break;else {
	                                c = c + 1 | 0;o = o + 1 | 0;f = f + 1 | 0;n = n + 1 | 0;
	                            }
	                        }e = e + j | 0;m = m + j | 0;
	                    }b = b + -1 | 0;if (!b) break;else {
	                        c = h + t | 0;e = e + s | 0;f = k + s | 0;m = m + s | 0;
	                    }
	                }i = v;return;
	            }function Zb(b, c, e, f, g, h, j, k) {
	                b = b | 0;c = c | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;var l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0;u = i;i = i + 448 | 0;l = u;if ((e | 0) >= 0 ? !((e + 5 + j | 0) >>> 0 > g >>> 0 | (f | 0) < 0 | (k + f | 0) >>> 0 > h >>> 0) : 0) l = b;else {
	                    n = j + 5 | 0;Ub(b, l, e, f, g, h, n, k, n);g = n;e = 0;f = 0;
	                }if (!k) {
	                    i = u;return;
	                }r = j >>> 2;t = (r | 0) == 0;s = g - j | 0;q = 16 - j | 0;p = r << 2;b = c;l = l + (e + 5 + (Z(f, g) | 0)) | 0;o = k;while (1) {
	                    if (t) h = b;else {
	                        h = b + p | 0;e = l;g = d[l + -1 >> 0] | 0;k = d[l + -2 >> 0] | 0;m = d[l + -3 >> 0] | 0;n = d[l + -4 >> 0] | 0;j = d[l + -5 >> 0] | 0;c = r;while (1) {
	                            f = n + g | 0;v = n;n = d[e >> 0] | 0;a[b >> 0] = a[(j + 16 - f - (f << 2) + n + ((m + k | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;j = n + m | 0;f = m;m = d[e + 1 >> 0] | 0;a[b + 1 >> 0] = a[(v + 16 - j - (j << 2) + m + ((k + g | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;j = m + k | 0;v = k;k = d[e + 2 >> 0] | 0;a[b + 2 >> 0] = a[(f + 16 - j - (j << 2) + k + ((n + g | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;j = k + g | 0;f = d[e + 3 >> 0] | 0;a[b + 3 >> 0] = a[(v + 16 - j - (j << 2) + f + ((m + n | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;c = c + -1 | 0;if (!c) break;else {
	                                j = g;b = b + 4 | 0;e = e + 4 | 0;g = f;
	                            }
	                        }l = l + p | 0;
	                    }o = o + -1 | 0;if (!o) break;else {
	                        b = h + q | 0;l = l + s | 0;
	                    }
	                }i = u;return;
	            }function _b(b, c, e, f, g, h, j, k, l) {
	                b = b | 0;c = c | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;var m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0;v = i;i = i + 448 | 0;m = v;if ((e | 0) >= 0 ? !((e + 5 + j | 0) >>> 0 > g >>> 0 | (f | 0) < 0 | (k + f | 0) >>> 0 > h >>> 0) : 0) m = b;else {
	                    o = j + 5 | 0;Ub(b, m, e, f, g, h, o, k, o);g = o;e = 0;f = 0;
	                }if (!k) {
	                    i = v;return;
	                }s = j >>> 2;u = (s | 0) == 0;t = g - j | 0;r = 16 - j | 0;q = (l | 0) != 0;p = s << 2;b = c;m = m + (e + 5 + (Z(f, g) | 0)) | 0;while (1) {
	                    if (u) h = b;else {
	                        h = b + p | 0;l = m;e = d[m + -1 >> 0] | 0;g = d[m + -2 >> 0] | 0;n = d[m + -3 >> 0] | 0;o = d[m + -4 >> 0] | 0;j = d[m + -5 >> 0] | 0;c = s;while (1) {
	                            f = o + e | 0;w = o;o = d[l >> 0] | 0;a[b >> 0] = ((q ? g : n) + 1 + (d[(j + 16 - f - (f << 2) + o + ((n + g | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) | 0) >>> 1;j = o + n | 0;f = n;n = d[l + 1 >> 0] | 0;a[b + 1 >> 0] = ((q ? e : g) + 1 + (d[(w + 16 - j - (j << 2) + n + ((g + e | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) | 0) >>> 1;j = n + g | 0;w = g;g = d[l + 2 >> 0] | 0;a[b + 2 >> 0] = ((q ? o : e) + 1 + (d[(f + 16 - j - (j << 2) + g + ((o + e | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) | 0) >>> 1;j = g + e | 0;f = d[l + 3 >> 0] | 0;a[b + 3 >> 0] = ((q ? n : o) + 1 + (d[(w + 16 - j - (j << 2) + f + ((n + o | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) | 0) >>> 1;c = c + -1 | 0;if (!c) break;else {
	                                j = e;b = b + 4 | 0;l = l + 4 | 0;e = f;
	                            }
	                        }m = m + p | 0;
	                    }k = k + -1 | 0;if (!k) break;else {
	                        b = h + r | 0;m = m + t | 0;
	                    }
	                }i = v;return;
	            }function $b(b, c, e, f, g, h, j, k, l) {
	                b = b | 0;c = c | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;var m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0;z = i;i = i + 448 | 0;m = z;if (((e | 0) >= 0 ? !((e + 5 + j | 0) >>> 0 > g >>> 0 | (f | 0) < 0) : 0) ? (f + 5 + k | 0) >>> 0 <= h >>> 0 : 0) m = b;else {
	                    y = j + 5 | 0;Ub(b, m, e, f, g, h, y, k + 5 | 0, y);g = y;e = 0;f = 0;
	                }b = (Z(f, g) | 0) + e | 0;y = (l & 1 | 2) + g + b | 0;n = m + y | 0;if (!k) {
	                    i = z;return;
	                }u = j >>> 2;w = (u | 0) == 0;v = g - j | 0;x = 16 - j | 0;t = u << 2;b = m + ((Z(g, l >>> 1 & 1 | 2) | 0) + 5 + b) | 0;s = k;while (1) {
	                    if (!w) {
	                        r = c + t | 0;h = b;e = d[b + -1 >> 0] | 0;f = d[b + -2 >> 0] | 0;o = d[b + -3 >> 0] | 0;p = d[b + -4 >> 0] | 0;l = d[b + -5 >> 0] | 0;q = u;while (1) {
	                            A = p + e | 0;B = p;p = d[h >> 0] | 0;a[c >> 0] = a[(l + 16 - A - (A << 2) + p + ((o + f | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;A = p + o | 0;l = o;o = d[h + 1 >> 0] | 0;a[c + 1 >> 0] = a[(B + 16 - A - (A << 2) + o + ((f + e | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;A = o + f | 0;B = f;f = d[h + 2 >> 0] | 0;a[c + 2 >> 0] = a[(l + 16 - A - (A << 2) + f + ((p + e | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;A = f + e | 0;l = d[h + 3 >> 0] | 0;a[c + 3 >> 0] = a[(B + 16 - A - (A << 2) + l + ((o + p | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0;q = q + -1 | 0;if (!q) break;else {
	                                A = e;c = c + 4 | 0;h = h + 4 | 0;e = l;l = A;
	                            }
	                        }c = r;b = b + t | 0;
	                    }s = s + -1 | 0;if (!s) break;else {
	                        c = c + x | 0;b = b + v | 0;
	                    }
	                }b = k >>> 2;if (!b) {
	                    i = z;return;
	                }t = (j | 0) == 0;p = (g << 2) - j | 0;o = 64 - j | 0;q = 0 - g | 0;s = q << 1;r = g << 1;c = c + (x - (k << 4)) | 0;h = m + (y + (g * 5 | 0)) | 0;l = b;while (1) {
	                    if (t) {
	                        b = c;m = n;
	                    } else {
	                        b = c + j | 0;m = c;e = n;f = h;c = j;while (1) {
	                            x = d[f + s >> 0] | 0;w = d[f + q >> 0] | 0;u = d[f + g >> 0] | 0;B = d[f >> 0] | 0;y = u + x | 0;k = d[e + r >> 0] | 0;A = m + 48 | 0;a[A >> 0] = ((d[((d[f + r >> 0] | 0) + 16 - y - (y << 2) + k + ((B + w | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) + 1 + (d[A >> 0] | 0) | 0) >>> 1;A = k + B | 0;y = d[e + g >> 0] | 0;v = m + 32 | 0;a[v >> 0] = ((d[(u + 16 - A - (A << 2) + y + ((w + x | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) + 1 + (d[v >> 0] | 0) | 0) >>> 1;v = d[e >> 0] | 0;A = y + w | 0;u = m + 16 | 0;a[u >> 0] = ((d[(B + 16 - A - (A << 2) + v + ((k + x | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) + 1 + (d[u >> 0] | 0) | 0) >>> 1;x = v + x | 0;a[m >> 0] = ((d[(w + 16 - x - (x << 2) + (d[e + q >> 0] | 0) + ((y + k | 0) * 20 | 0) >> 5) + 3984 >> 0] | 0) + 1 + (d[m >> 0] | 0) | 0) >>> 1;c = c + -1 | 0;if (!c) break;else {
	                                m = m + 1 | 0;e = e + 1 | 0;f = f + 1 | 0;
	                            }
	                        }m = n + j | 0;h = h + j | 0;
	                    }l = l + -1 | 0;if (!l) break;else {
	                        c = b + o | 0;n = m + p | 0;h = h + p | 0;
	                    }
	                }i = z;return;
	            }function ac(b, e, f, g, h, j, k, l) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;var m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0;x = i;i = i + 1792 | 0;m = x + 1344 | 0;w = x;if (((f | 0) >= 0 ? !((f + 5 + k | 0) >>> 0 > h >>> 0 | (g | 0) < 0) : 0) ? (g + 5 + l | 0) >>> 0 <= j >>> 0 : 0) {
	                    o = l + 5 | 0;m = b;n = f + 5 | 0;
	                } else {
	                    n = k + 5 | 0;o = l + 5 | 0;Ub(b, m, f, g, h, j, n, o, n);h = n;n = 5;g = 0;
	                }if (o) {
	                    t = k >>> 2;v = (t | 0) == 0;s = h - k | 0;u = t << 2;f = w;m = m + (n + (Z(g, h) | 0)) | 0;while (1) {
	                        if (v) b = f;else {
	                            b = f + (u << 2) | 0;g = m;h = d[m + -1 >> 0] | 0;j = d[m + -2 >> 0] | 0;p = d[m + -3 >> 0] | 0;q = d[m + -4 >> 0] | 0;n = d[m + -5 >> 0] | 0;r = t;while (1) {
	                                y = q + h | 0;z = q;q = d[g >> 0] | 0;c[f >> 2] = n - y - (y << 2) + q + ((p + j | 0) * 20 | 0);y = q + p | 0;n = p;p = d[g + 1 >> 0] | 0;c[f + 4 >> 2] = z - y + p - (y << 2) + ((j + h | 0) * 20 | 0);y = p + j | 0;z = j;j = d[g + 2 >> 0] | 0;c[f + 8 >> 2] = n - y + j - (y << 2) + ((q + h | 0) * 20 | 0);y = j + h | 0;n = d[g + 3 >> 0] | 0;c[f + 12 >> 2] = z - y + n - (y << 2) + ((p + q | 0) * 20 | 0);r = r + -1 | 0;if (!r) break;else {
	                                    y = h;f = f + 16 | 0;g = g + 4 | 0;h = n;n = y;
	                                }
	                            }m = m + u | 0;
	                        }o = o + -1 | 0;if (!o) break;else {
	                            f = b;m = m + s | 0;
	                        }
	                    }
	                }h = l >>> 2;if (!h) {
	                    i = x;return;
	                }u = (k | 0) == 0;s = 64 - k | 0;p = k * 3 | 0;t = 0 - k | 0;q = t << 1;r = k << 1;g = e;b = w + (k << 2) | 0;m = w + (k * 6 << 2) | 0;o = h;while (1) {
	                    if (u) h = g;else {
	                        h = g + k | 0;f = b;j = m;n = k;while (1) {
	                            e = c[j + (q << 2) >> 2] | 0;w = c[j + (t << 2) >> 2] | 0;z = c[j + (k << 2) >> 2] | 0;A = c[j >> 2] | 0;y = z + e | 0;v = c[f + (r << 2) >> 2] | 0;a[g + 48 >> 0] = a[((c[j + (r << 2) >> 2] | 0) + 512 - y - (y << 2) + v + ((A + w | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0;y = v + A | 0;l = c[f + (k << 2) >> 2] | 0;a[g + 32 >> 0] = a[(z + 512 - y - (y << 2) + l + ((w + e | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0;y = c[f >> 2] | 0;z = l + w | 0;a[g + 16 >> 0] = a[(A + 512 - z - (z << 2) + y + ((v + e | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0;e = y + e | 0;a[g >> 0] = a[(w + 512 - e - (e << 2) + (c[f + (t << 2) >> 2] | 0) + ((l + v | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0;n = n + -1 | 0;if (!n) break;else {
	                                g = g + 1 | 0;f = f + 4 | 0;j = j + 4 | 0;
	                            }
	                        }b = b + (k << 2) | 0;m = m + (k << 2) | 0;
	                    }o = o + -1 | 0;if (!o) break;else {
	                        g = h + s | 0;b = b + (p << 2) | 0;m = m + (p << 2) | 0;
	                    }
	                }i = x;return;
	            }function bc(b, e, f, g, h, j, k, l, m) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;m = m | 0;var n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0;y = i;i = i + 1792 | 0;n = y + 1344 | 0;x = y;if (((f | 0) >= 0 ? !((f + 5 + k | 0) >>> 0 > h >>> 0 | (g | 0) < 0) : 0) ? (g + 5 + l | 0) >>> 0 <= j >>> 0 : 0) {
	                    o = l + 5 | 0;n = b;f = f + 5 | 0;
	                } else {
	                    q = k + 5 | 0;o = l + 5 | 0;Ub(b, n, f, g, h, j, q, o, q);h = q;f = 5;g = 0;
	                }if (o) {
	                    v = k >>> 2;t = (v | 0) == 0;u = h - k | 0;w = v << 2;p = x;n = n + (f + (Z(g, h) | 0)) | 0;s = o;while (1) {
	                        if (t) b = p;else {
	                            b = p + (w << 2) | 0;g = n;f = d[n + -1 >> 0] | 0;h = d[n + -2 >> 0] | 0;j = d[n + -3 >> 0] | 0;q = d[n + -4 >> 0] | 0;o = d[n + -5 >> 0] | 0;r = v;while (1) {
	                                z = q + f | 0;A = q;q = d[g >> 0] | 0;c[p >> 2] = o - z - (z << 2) + q + ((j + h | 0) * 20 | 0);z = q + j | 0;o = j;j = d[g + 1 >> 0] | 0;c[p + 4 >> 2] = A - z + j - (z << 2) + ((h + f | 0) * 20 | 0);z = j + h | 0;A = h;h = d[g + 2 >> 0] | 0;c[p + 8 >> 2] = o - z + h - (z << 2) + ((q + f | 0) * 20 | 0);z = h + f | 0;o = d[g + 3 >> 0] | 0;c[p + 12 >> 2] = A - z + o - (z << 2) + ((j + q | 0) * 20 | 0);r = r + -1 | 0;if (!r) break;else {
	                                    z = f;p = p + 16 | 0;g = g + 4 | 0;f = o;o = z;
	                                }
	                            }n = n + w | 0;
	                        }s = s + -1 | 0;if (!s) break;else {
	                            p = b;n = n + u | 0;
	                        }
	                    }
	                }f = l >>> 2;if (!f) {
	                    i = y;return;
	                }w = (k | 0) == 0;u = 64 - k | 0;q = k * 3 | 0;v = 0 - k | 0;t = v << 1;s = k << 1;b = x + (k << 2) | 0;n = x + ((Z(m + 2 | 0, k) | 0) + k << 2) | 0;h = x + (k * 6 << 2) | 0;r = f;while (1) {
	                    if (w) {
	                        g = e;f = n;
	                    } else {
	                        f = n + (k << 2) | 0;g = e + k | 0;p = b;j = h;o = k;while (1) {
	                            m = c[j + (t << 2) >> 2] | 0;l = c[j + (v << 2) >> 2] | 0;B = c[j + (k << 2) >> 2] | 0;C = c[j >> 2] | 0;A = B + m | 0;z = c[p + (s << 2) >> 2] | 0;a[e + 48 >> 0] = ((d[((c[j + (s << 2) >> 2] | 0) + 512 - A - (A << 2) + z + ((C + l | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0) + 1 + (d[((c[n + (s << 2) >> 2] | 0) + 16 >> 5) + 3984 >> 0] | 0) | 0) >>> 1;A = z + C | 0;x = c[p + (k << 2) >> 2] | 0;a[e + 32 >> 0] = ((d[(B + 512 - A - (A << 2) + x + ((l + m | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0) + 1 + (d[((c[n + (k << 2) >> 2] | 0) + 16 >> 5) + 3984 >> 0] | 0) | 0) >>> 1;A = c[p >> 2] | 0;B = x + l | 0;a[e + 16 >> 0] = ((d[(C + 512 - B - (B << 2) + A + ((z + m | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0) + 1 + (d[((c[n >> 2] | 0) + 16 >> 5) + 3984 >> 0] | 0) | 0) >>> 1;m = A + m | 0;a[e >> 0] = ((d[(l + 512 - m - (m << 2) + (c[p + (v << 2) >> 2] | 0) + ((x + z | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0) + 1 + (d[((c[n + (v << 2) >> 2] | 0) + 16 >> 5) + 3984 >> 0] | 0) | 0) >>> 1;o = o + -1 | 0;if (!o) break;else {
	                                e = e + 1 | 0;p = p + 4 | 0;n = n + 4 | 0;j = j + 4 | 0;
	                            }
	                        }b = b + (k << 2) | 0;h = h + (k << 2) | 0;
	                    }r = r + -1 | 0;if (!r) break;else {
	                        e = g + u | 0;b = b + (q << 2) | 0;n = f + (q << 2) | 0;h = h + (q << 2) | 0;
	                    }
	                }i = y;return;
	            }function cc(b, e, f, g, h, j, k, l, m) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;m = m | 0;var n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0,
	                    G = 0,
	                    H = 0,
	                    I = 0;B = i;i = i + 1792 | 0;n = B + 1344 | 0;A = B;z = k + 5 | 0;if (((f | 0) >= 0 ? !((f + 5 + k | 0) >>> 0 > h >>> 0 | (g | 0) < 0) : 0) ? (g + 5 + l | 0) >>> 0 <= j >>> 0 : 0) n = b;else {
	                    Ub(b, n, f, g, h, j, z, l + 5 | 0, z);h = z;f = 0;g = 0;
	                }s = f + h + (Z(g, h) | 0) | 0;g = l >>> 2;if (g) {
	                    y = (z | 0) == 0;x = (h << 2) - k + -5 | 0;t = z * 3 | 0;p = 0 - h | 0;w = p << 1;v = h << 1;u = z << 1;q = -5 - k | 0;j = A + (z << 2) | 0;r = n + s | 0;f = n + (s + (h * 5 | 0)) | 0;while (1) {
	                        if (y) s = j;else {
	                            s = j + (z << 2) | 0;n = r;b = f;o = z;while (1) {
	                                E = d[b + w >> 0] | 0;F = d[b + p >> 0] | 0;H = d[b + h >> 0] | 0;I = d[b >> 0] | 0;G = H + E | 0;C = d[n + v >> 0] | 0;c[j + (u << 2) >> 2] = (d[b + v >> 0] | 0) - G - (G << 2) + C + ((I + F | 0) * 20 | 0);G = C + I | 0;D = d[n + h >> 0] | 0;c[j + (z << 2) >> 2] = H - G + D - (G << 2) + ((F + E | 0) * 20 | 0);G = d[n >> 0] | 0;H = D + F | 0;c[j >> 2] = I - H + G - (H << 2) + ((C + E | 0) * 20 | 0);E = G + E | 0;c[j + (q << 2) >> 2] = F - E + (d[n + p >> 0] | 0) - (E << 2) + ((D + C | 0) * 20 | 0);o = o + -1 | 0;if (!o) break;else {
	                                    j = j + 4 | 0;n = n + 1 | 0;b = b + 1 | 0;
	                                }
	                            }r = r + z | 0;f = f + z | 0;
	                        }g = g + -1 | 0;if (!g) break;else {
	                            j = s + (t << 2) | 0;r = r + x | 0;f = f + x | 0;
	                        }
	                    }
	                }if (!l) {
	                    i = B;return;
	                }v = k >>> 2;w = (v | 0) == 0;u = 16 - k | 0;t = v << 2;h = A + (m + 2 << 2) | 0;g = A + 20 | 0;while (1) {
	                    if (w) f = h;else {
	                        f = h + (t << 2) | 0;s = e;n = g;j = c[g + -4 >> 2] | 0;o = c[g + -8 >> 2] | 0;p = c[g + -12 >> 2] | 0;q = c[g + -16 >> 2] | 0;b = c[g + -20 >> 2] | 0;r = v;while (1) {
	                            m = q + j | 0;k = q;q = c[n >> 2] | 0;a[s >> 0] = ((d[(b + 512 - m - (m << 2) + q + ((p + o | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0) + 1 + (d[((c[h >> 2] | 0) + 16 >> 5) + 3984 >> 0] | 0) | 0) >>> 1;m = q + p | 0;b = p;p = c[n + 4 >> 2] | 0;a[s + 1 >> 0] = ((d[(k + 512 - m - (m << 2) + p + ((o + j | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0) + 1 + (d[((c[h + 4 >> 2] | 0) + 16 >> 5) + 3984 >> 0] | 0) | 0) >>> 1;m = p + o | 0;k = o;o = c[n + 8 >> 2] | 0;a[s + 2 >> 0] = ((d[(b + 512 - m - (m << 2) + o + ((q + j | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0) + 1 + (d[((c[h + 8 >> 2] | 0) + 16 >> 5) + 3984 >> 0] | 0) | 0) >>> 1;m = o + j | 0;b = c[n + 12 >> 2] | 0;a[s + 3 >> 0] = ((d[(k + 512 - m - (m << 2) + b + ((p + q | 0) * 20 | 0) >> 10) + 3984 >> 0] | 0) + 1 + (d[((c[h + 12 >> 2] | 0) + 16 >> 5) + 3984 >> 0] | 0) | 0) >>> 1;r = r + -1 | 0;if (!r) break;else {
	                                m = j;s = s + 4 | 0;h = h + 16 | 0;n = n + 16 | 0;j = b;b = m;
	                            }
	                        }e = e + t | 0;g = g + (t << 2) | 0;
	                    }l = l + -1 | 0;if (!l) break;else {
	                        e = e + u | 0;h = f + 20 | 0;g = g + 20 | 0;
	                    }
	                }i = B;return;
	            }function dc(a, d, e, f, g, h, j, k, l) {
	                a = a | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;var m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0;x = i;q = a + ((j << 4) + h) | 0;u = b[d >> 1] | 0;w = d + 2 | 0;t = b[w >> 1] | 0;s = e + 4 | 0;p = c[s >> 2] << 4;r = e + 8 | 0;o = c[r >> 2] << 4;f = h + f | 0;m = f + (u >> 2) | 0;g = j + g | 0;n = g + (t >> 2) | 0;do switch (c[6800 + ((u & 3) << 4) + ((t & 3) << 2) >> 2] | 0) {case 10:
	                        {
	                            ac(c[e >> 2] | 0, q, m + -2 | 0, n + -2 | 0, p, o, k, l);break;
	                        }case 12:
	                        {
	                            _b(c[e >> 2] | 0, q, m + -2 | 0, n, p, o, k, l, 1);break;
	                        }case 5:
	                        {
	                            $b(c[e >> 2] | 0, q, m + -2 | 0, n + -2 | 0, p, o, k, l, 0);break;
	                        }case 7:
	                        {
	                            $b(c[e >> 2] | 0, q, m + -2 | 0, n + -2 | 0, p, o, k, l, 2);break;
	                        }case 9:
	                        {
	                            bc(c[e >> 2] | 0, q, m + -2 | 0, n + -2 | 0, p, o, k, l, 0);break;
	                        }case 0:
	                        {
	                            Ub(c[e >> 2] | 0, q, m, n, p, o, k, l, 16);break;
	                        }case 4:
	                        {
	                            _b(c[e >> 2] | 0, q, m + -2 | 0, n, p, o, k, l, 0);break;
	                        }case 1:
	                        {
	                            Yb(c[e >> 2] | 0, q, m, n + -2 | 0, p, o, k, l, 0);break;
	                        }case 14:
	                        {
	                            cc(c[e >> 2] | 0, q, m + -2 | 0, n + -2 | 0, p, o, k, l, 1);break;
	                        }case 3:
	                        {
	                            Yb(c[e >> 2] | 0, q, m, n + -2 | 0, p, o, k, l, 1);break;
	                        }case 8:
	                        {
	                            Zb(c[e >> 2] | 0, q, m + -2 | 0, n, p, o, k, l);break;
	                        }case 2:
	                        {
	                            Xb(c[e >> 2] | 0, q, m, n + -2 | 0, p, o, k, l);break;
	                        }case 6:
	                        {
	                            cc(c[e >> 2] | 0, q, m + -2 | 0, n + -2 | 0, p, o, k, l, 0);break;
	                        }case 11:
	                        {
	                            bc(c[e >> 2] | 0, q, m + -2 | 0, n + -2 | 0, p, o, k, l, 1);break;
	                        }case 13:
	                        {
	                            $b(c[e >> 2] | 0, q, m + -2 | 0, n + -2 | 0, p, o, k, l, 1);break;
	                        }default:
	                        $b(c[e >> 2] | 0, q, m + -2 | 0, n + -2 | 0, p, o, k, l, 3);} while (0);u = (h >>> 1) + 256 + (j >>> 1 << 3) | 0;v = a + u | 0;t = c[e >> 2] | 0;m = c[s >> 2] | 0;j = c[r >> 2] | 0;r = m << 3;s = j << 3;p = b[d >> 1] | 0;e = (p >> 3) + (f >>> 1) | 0;q = b[w >> 1] | 0;o = (q >> 3) + (g >>> 1) | 0;p = p & 7;q = q & 7;g = k >>> 1;h = l >>> 1;j = Z(m << 8, j) | 0;f = t + j | 0;m = (p | 0) != 0;n = (q | 0) != 0;if (m & n) {
	                    Wb(f, v, e, o, r, s, p, q, g, h);i = x;return;
	                }if (m) {
	                    Tb(f, v, e, o, r, s, p, g, h);i = x;return;
	                }if (n) {
	                    Vb(f, v, e, o, r, s, q, g, h);i = x;return;
	                } else {
	                    Ub(f, v, e, o, r, s, g, h, 8);Ub(t + ((Z(s, r) | 0) + j) | 0, a + (u + 64) | 0, e, o, r, s, g, h, 8);i = x;return;
	                }
	            }function ec(b, c, d, e, f) {
	                b = b | 0;c = c | 0;d = d | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0;j = i;if (d) {
	                    nd(c | 0, a[b >> 0] | 0, d | 0) | 0;c = c + d | 0;
	                }if (e) {
	                    h = c + e | 0;g = e;d = b;while (1) {
	                        a[c >> 0] = a[d >> 0] | 0;g = g + -1 | 0;if (!g) break;else {
	                            c = c + 1 | 0;d = d + 1 | 0;
	                        }
	                    }c = h;b = b + e | 0;
	                }if (!f) {
	                    i = j;return;
	                }nd(c | 0, a[b + -1 >> 0] | 0, f | 0) | 0;i = j;return;
	            }function fc(a, b, c, d, e) {
	                a = a | 0;b = b | 0;c = c | 0;d = d | 0;e = e | 0;c = i;hd(b, a, d);i = c;return;
	            }function gc(a, b, d, e) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0;q = i;f = c[a + 40 >> 2] | 0;if (f) {
	                    h = c[a >> 2] | 0;k = a + 32 | 0;j = 0;do {
	                        if (((c[h + (j * 40 | 0) + 20 >> 2] | 0) + -1 | 0) >>> 0 < 2) {
	                            g = c[h + (j * 40 | 0) + 12 >> 2] | 0;if (g >>> 0 > d >>> 0) g = g - (c[k >> 2] | 0) | 0;c[h + (j * 40 | 0) + 8 >> 2] = g;
	                        }j = j + 1 | 0;
	                    } while ((j | 0) != (f | 0));
	                }if (!(c[b >> 2] | 0)) {
	                    p = 0;i = q;return p | 0;
	                }g = c[b + 4 >> 2] | 0;if (g >>> 0 >= 3) {
	                    p = 0;i = q;return p | 0;
	                }o = a + 32 | 0;p = a + 24 | 0;n = a + 4 | 0;f = d;m = 0;a: while (1) {
	                    b: do if (g >>> 0 < 2) {
	                        k = c[b + (m * 12 | 0) + 8 >> 2] | 0;if (!g) {
	                            g = f - k | 0;if ((g | 0) < 0) g = (c[o >> 2] | 0) + g | 0;
	                        } else {
	                            l = k + f | 0;g = c[o >> 2] | 0;g = l - ((l | 0) < (g | 0) ? 0 : g) | 0;
	                        }if (g >>> 0 > d >>> 0) f = g - (c[o >> 2] | 0) | 0;else f = g;j = c[p >> 2] | 0;if (!j) {
	                            f = 1;g = 37;break a;
	                        }k = c[a >> 2] | 0;l = 0;while (1) {
	                            h = c[k + (l * 40 | 0) + 20 >> 2] | 0;if ((h + -1 | 0) >>> 0 < 2 ? (c[k + (l * 40 | 0) + 8 >> 2] | 0) == (f | 0) : 0) {
	                                f = g;break b;
	                            }l = l + 1 | 0;if (l >>> 0 >= j >>> 0) {
	                                f = 1;g = 37;break a;
	                            }
	                        }
	                    } else {
	                        j = c[b + (m * 12 | 0) + 12 >> 2] | 0;h = c[p >> 2] | 0;if (!h) {
	                            f = 1;g = 37;break a;
	                        }k = c[a >> 2] | 0;g = 0;while (1) {
	                            if ((c[k + (g * 40 | 0) + 20 >> 2] | 0) == 3 ? (c[k + (g * 40 | 0) + 8 >> 2] | 0) == (j | 0) : 0) {
	                                h = 3;l = g;break b;
	                            }g = g + 1 | 0;if (g >>> 0 >= h >>> 0) {
	                                f = 1;g = 37;break a;
	                            }
	                        }
	                    } while (0);if (!((l | 0) > -1 & h >>> 0 > 1)) {
	                        f = 1;g = 37;break;
	                    }if (m >>> 0 < e >>> 0) {
	                        k = e;do {
	                            j = k;k = k + -1 | 0;h = c[n >> 2] | 0;c[h + (j << 2) >> 2] = c[h + (k << 2) >> 2];
	                        } while (k >>> 0 > m >>> 0);k = c[a >> 2] | 0;
	                    }c[(c[n >> 2] | 0) + (m << 2) >> 2] = k + (l * 40 | 0);m = m + 1 | 0;if (m >>> 0 <= e >>> 0) {
	                        g = m;k = m;do {
	                            j = c[n >> 2] | 0;h = c[j + (g << 2) >> 2] | 0;if ((h | 0) != ((c[a >> 2] | 0) + (l * 40 | 0) | 0)) {
	                                c[j + (k << 2) >> 2] = h;k = k + 1 | 0;
	                            }g = g + 1 | 0;
	                        } while (g >>> 0 <= e >>> 0);
	                    }g = c[b + (m * 12 | 0) + 4 >> 2] | 0;if (g >>> 0 >= 3) {
	                        f = 0;g = 37;break;
	                    }
	                }if ((g | 0) == 37) {
	                    i = q;return f | 0;
	                }return 0;
	            }function hc(a, b, d, e, f, g, h, j) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;var k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0,
	                    G = 0,
	                    H = 0,
	                    I = 0,
	                    J = 0,
	                    K = 0;K = i;I = c[d >> 2] | 0;J = c[a + 8 >> 2] | 0;if ((I | 0) != (c[J >> 2] | 0)) {
	                    D = 1;i = K;return D | 0;
	                }B = a + 52 | 0;c[B >> 2] = 0;G = c[a + 56 >> 2] | 0;o = (G | 0) == 0;H = o & 1;do if (!b) {
	                    c[J + 20 >> 2] = 0;c[J + 12 >> 2] = e;c[J + 8 >> 2] = e;c[J + 16 >> 2] = f;c[J + 24 >> 2] = H;if (o) {
	                        d = a + 44 | 0;c[d >> 2] = (c[d >> 2] | 0) + 1;d = 0;r = 0;
	                    } else {
	                        d = G;r = 0;
	                    }
	                } else {
	                    if (g) {
	                        k = a + 20 | 0;c[k >> 2] = 0;l = a + 16 | 0;c[l >> 2] = 0;r = c[a >> 2] | 0;s = a + 44 | 0;q = 0;do {
	                            p = r + (q * 40 | 0) + 20 | 0;if ((c[p >> 2] | 0) != 0 ? (c[p >> 2] = 0, (c[r + (q * 40 | 0) + 24 >> 2] | 0) == 0) : 0) c[s >> 2] = (c[s >> 2] | 0) + -1;q = q + 1 | 0;
	                        } while ((q | 0) != 16);a: do if (o) {
	                            n = c[a + 28 >> 2] | 0;m = a + 12 | 0;q = 0;while (1) {
	                                e = 0;p = 2147483647;o = 0;do {
	                                    if (c[r + (e * 40 | 0) + 24 >> 2] | 0) {
	                                        C = c[r + (e * 40 | 0) + 16 >> 2] | 0;D = (C | 0) < (p | 0);p = D ? C : p;o = D ? r + (e * 40 | 0) | 0 : o;
	                                    }e = e + 1 | 0;
	                                } while (e >>> 0 <= n >>> 0);if (!o) {
	                                    d = 0;break a;
	                                }D = c[m >> 2] | 0;c[D + (q << 4) >> 2] = c[o >> 2];c[D + (q << 4) + 12 >> 2] = c[o + 36 >> 2];c[D + (q << 4) + 4 >> 2] = c[o + 28 >> 2];c[D + (q << 4) + 8 >> 2] = c[o + 32 >> 2];q = q + 1 | 0;c[l >> 2] = q;c[o + 24 >> 2] = 0;if (c[o + 20 >> 2] | 0) continue;c[s >> 2] = (c[s >> 2] | 0) + -1;
	                            }
	                        } else d = G; while (0);p = a + 40 | 0;c[p >> 2] = 0;o = a + 36 | 0;c[o >> 2] = 65535;c[a + 48 >> 2] = 0;if (!(c[b >> 2] | d)) d = 0;else {
	                            c[l >> 2] = 0;c[k >> 2] = 0;
	                        }r = (c[b + 4 >> 2] | 0) == 0;c[J + 20 >> 2] = r ? 2 : 3;c[o >> 2] = r ? 65535 : 0;c[J + 12 >> 2] = 0;c[J + 8 >> 2] = 0;c[J + 16 >> 2] = 0;c[J + 24 >> 2] = H;c[s >> 2] = 1;c[p >> 2] = 1;r = 0;break;
	                    }if (!(c[b + 8 >> 2] | 0)) {
	                        d = a + 40 | 0;q = c[d >> 2] | 0;p = c[a + 24 >> 2] | 0;if (q >>> 0 >= p >>> 0) {
	                            if (q) {
	                                l = c[a >> 2] | 0;m = 0;o = -1;n = 0;do {
	                                    if (((c[l + (m * 40 | 0) + 20 >> 2] | 0) + -1 | 0) >>> 0 < 2) {
	                                        D = c[l + (m * 40 | 0) + 8 >> 2] | 0;C = (D | 0) < (n | 0) | (o | 0) == -1;o = C ? m : o;n = C ? D : n;
	                                    }m = m + 1 | 0;
	                                } while ((m | 0) != (q | 0));if ((o | 0) > -1) {
	                                    q = q + -1 | 0;c[l + (o * 40 | 0) + 20 >> 2] = 0;c[d >> 2] = q;if (!(c[l + (o * 40 | 0) + 24 >> 2] | 0)) {
	                                        d = a + 44 | 0;c[d >> 2] = (c[d >> 2] | 0) + -1;d = G;n = 0;
	                                    } else {
	                                        d = G;n = 0;
	                                    }
	                                } else {
	                                    d = G;n = 1;
	                                }
	                            } else {
	                                q = 0;d = G;n = 1;
	                            }
	                        } else {
	                            d = G;n = 0;
	                        }
	                    } else {
	                        E = a + 24 | 0;C = a + 40 | 0;v = a + 44 | 0;x = a + 36 | 0;A = a + 48 | 0;u = a + 28 | 0;y = a + 16 | 0;z = a + 12 | 0;r = G;d = G;t = 0;w = 0;b: while (1) {
	                            switch (c[b + (t * 20 | 0) + 12 >> 2] | 0) {case 2:
	                                    {
	                                        l = c[b + (t * 20 | 0) + 20 >> 2] | 0;m = c[E >> 2] | 0;if (!m) {
	                                            n = 1;break b;
	                                        }n = c[a >> 2] | 0;s = 0;while (1) {
	                                            k = n + (s * 40 | 0) + 20 | 0;if ((c[k >> 2] | 0) == 3 ? (c[n + (s * 40 | 0) + 8 >> 2] | 0) == (l | 0) : 0) break;s = s + 1 | 0;if (s >>> 0 >= m >>> 0) {
	                                                n = 1;break b;
	                                            }
	                                        }if ((s | 0) < 0) {
	                                            n = 1;break b;
	                                        }c[k >> 2] = 0;c[C >> 2] = (c[C >> 2] | 0) + -1;if (!(c[n + (s * 40 | 0) + 24 >> 2] | 0)) {
	                                            c[v >> 2] = (c[v >> 2] | 0) + -1;s = w;
	                                        } else s = w;break;
	                                    }case 4:
	                                    {
	                                        l = c[b + (t * 20 | 0) + 28 >> 2] | 0;c[x >> 2] = l;m = c[E >> 2] | 0;if (!m) s = w;else {
	                                            n = c[a >> 2] | 0;s = l;o = 0;do {
	                                                k = n + (o * 40 | 0) + 20 | 0;do if ((c[k >> 2] | 0) == 3) {
	                                                    if ((c[n + (o * 40 | 0) + 8 >> 2] | 0) >>> 0 <= l >>> 0) if ((s | 0) == 65535) s = 65535;else break;c[k >> 2] = 0;c[C >> 2] = (c[C >> 2] | 0) + -1;if (!(c[n + (o * 40 | 0) + 24 >> 2] | 0)) c[v >> 2] = (c[v >> 2] | 0) + -1;
	                                                } while (0);o = o + 1 | 0;
	                                            } while ((o | 0) != (m | 0));s = w;
	                                        }break;
	                                    }case 0:
	                                    {
	                                        n = 0;F = 101;break b;
	                                    }case 1:
	                                    {
	                                        n = e - (c[b + (t * 20 | 0) + 16 >> 2] | 0) | 0;l = c[E >> 2] | 0;if (!l) {
	                                            n = 1;break b;
	                                        }m = c[a >> 2] | 0;s = 0;while (1) {
	                                            k = m + (s * 40 | 0) + 20 | 0;if (((c[k >> 2] | 0) + -1 | 0) >>> 0 < 2 ? (c[m + (s * 40 | 0) + 8 >> 2] | 0) == (n | 0) : 0) break;s = s + 1 | 0;if (s >>> 0 >= l >>> 0) {
	                                                n = 1;break b;
	                                            }
	                                        }if ((s | 0) < 0) {
	                                            n = 1;break b;
	                                        }c[k >> 2] = 0;c[C >> 2] = (c[C >> 2] | 0) + -1;if (!(c[m + (s * 40 | 0) + 24 >> 2] | 0)) {
	                                            c[v >> 2] = (c[v >> 2] | 0) + -1;s = w;
	                                        } else s = w;break;
	                                    }case 6:
	                                    {
	                                        m = c[b + (t * 20 | 0) + 24 >> 2] | 0;s = c[x >> 2] | 0;if ((s | 0) == 65535 | s >>> 0 < m >>> 0) {
	                                            n = 1;F = 101;break b;
	                                        }r = c[E >> 2] | 0;c: do if (r) {
	                                            l = c[a >> 2] | 0;s = 0;while (1) {
	                                                k = l + (s * 40 | 0) + 20 | 0;if ((c[k >> 2] | 0) == 3 ? (c[l + (s * 40 | 0) + 8 >> 2] | 0) == (m | 0) : 0) break;s = s + 1 | 0;if (s >>> 0 >= r >>> 0) {
	                                                    F = 88;break c;
	                                                }
	                                            }c[k >> 2] = 0;k = (c[C >> 2] | 0) + -1 | 0;c[C >> 2] = k;if (!(c[l + (s * 40 | 0) + 24 >> 2] | 0)) {
	                                                c[v >> 2] = (c[v >> 2] | 0) + -1;s = k;
	                                            } else s = k;
	                                        } else {
	                                            r = 0;F = 88;
	                                        } while (0);if ((F | 0) == 88) {
	                                            F = 0;s = c[C >> 2] | 0;
	                                        }if (s >>> 0 >= r >>> 0) {
	                                            n = 1;F = 101;break b;
	                                        }c[J + 12 >> 2] = e;c[J + 8 >> 2] = m;c[J + 16 >> 2] = f;c[J + 20 >> 2] = 3;c[J + 24 >> 2] = H;c[C >> 2] = s + 1;c[v >> 2] = (c[v >> 2] | 0) + 1;r = G;d = G;s = 1;break;
	                                    }case 3:
	                                    {
	                                        s = c[b + (t * 20 | 0) + 16 >> 2] | 0;n = c[b + (t * 20 | 0) + 24 >> 2] | 0;k = c[x >> 2] | 0;if ((k | 0) == 65535 | k >>> 0 < n >>> 0) {
	                                            n = 1;break b;
	                                        }o = c[E >> 2] | 0;if (!o) {
	                                            n = 1;break b;
	                                        }p = c[a >> 2] | 0;k = 0;while (1) {
	                                            m = p + (k * 40 | 0) + 20 | 0;if ((c[m >> 2] | 0) == 3 ? (c[p + (k * 40 | 0) + 8 >> 2] | 0) == (n | 0) : 0) {
	                                                F = 47;break;
	                                            }l = k + 1 | 0;if (l >>> 0 < o >>> 0) k = l;else break;
	                                        }if ((F | 0) == 47 ? (F = 0, c[m >> 2] = 0, c[C >> 2] = (c[C >> 2] | 0) + -1, (c[p + (k * 40 | 0) + 24 >> 2] | 0) == 0) : 0) c[v >> 2] = (c[v >> 2] | 0) + -1;m = e - s | 0;s = 0;while (1) {
	                                            l = p + (s * 40 | 0) + 20 | 0;k = c[l >> 2] | 0;if ((k + -1 | 0) >>> 0 < 2 ? (D = p + (s * 40 | 0) + 8 | 0, (c[D >> 2] | 0) == (m | 0)) : 0) break;s = s + 1 | 0;if (s >>> 0 >= o >>> 0) {
	                                                n = 1;break b;
	                                            }
	                                        }if (!((s | 0) > -1 & k >>> 0 > 1)) {
	                                            n = 1;break b;
	                                        }c[l >> 2] = 3;c[D >> 2] = n;s = w;break;
	                                    }case 5:
	                                    {
	                                        n = c[a >> 2] | 0;q = 0;do {
	                                            p = n + (q * 40 | 0) + 20 | 0;if ((c[p >> 2] | 0) != 0 ? (c[p >> 2] = 0, (c[n + (q * 40 | 0) + 24 >> 2] | 0) == 0) : 0) c[v >> 2] = (c[v >> 2] | 0) + -1;q = q + 1 | 0;
	                                        } while ((q | 0) != 16);d: do if (!d) {
	                                            l = c[u >> 2] | 0;m = r;while (1) {
	                                                d = 0;s = 2147483647;k = 0;do {
	                                                    if (c[n + (d * 40 | 0) + 24 >> 2] | 0) {
	                                                        o = c[n + (d * 40 | 0) + 16 >> 2] | 0;e = (o | 0) < (s | 0);s = e ? o : s;k = e ? n + (d * 40 | 0) | 0 : k;
	                                                    }d = d + 1 | 0;
	                                                } while (d >>> 0 <= l >>> 0);if (!k) {
	                                                    r = m;d = 0;break d;
	                                                }s = c[y >> 2] | 0;d = c[z >> 2] | 0;c[d + (s << 4) >> 2] = c[k >> 2];c[d + (s << 4) + 12 >> 2] = c[k + 36 >> 2];c[d + (s << 4) + 4 >> 2] = c[k + 28 >> 2];c[d + (s << 4) + 8 >> 2] = c[k + 32 >> 2];c[y >> 2] = s + 1;c[k + 24 >> 2] = 0;if (!(c[k + 20 >> 2] | 0)) c[v >> 2] = (c[v >> 2] | 0) + -1;if (!m) m = 0;else {
	                                                    r = m;d = m;break;
	                                                }
	                                            }
	                                        } while (0);c[C >> 2] = 0;c[x >> 2] = 65535;c[A >> 2] = 0;c[B >> 2] = 1;e = 0;s = w;break;
	                                    }default:
	                                    {
	                                        n = 1;break b;
	                                    }}t = t + 1 | 0;w = s;
	                        }if (w) {
	                            r = n;break;
	                        }q = c[C >> 2] | 0;p = c[E >> 2] | 0;
	                    }if (q >>> 0 < p >>> 0) {
	                        c[J + 12 >> 2] = e;c[J + 8 >> 2] = e;c[J + 16 >> 2] = f;c[J + 20 >> 2] = 2;c[J + 24 >> 2] = H;r = a + 44 | 0;c[r >> 2] = (c[r >> 2] | 0) + 1;c[a + 40 >> 2] = q + 1;r = n;
	                    } else r = 1;
	                } while (0);c[J + 36 >> 2] = g;c[J + 28 >> 2] = h;c[J + 32 >> 2] = j;if (!d) {
	                    o = a + 44 | 0;d = c[o >> 2] | 0;k = c[a + 28 >> 2] | 0;if (d >>> 0 > k >>> 0) {
	                        p = a + 16 | 0;q = a + 12 | 0;do {
	                            n = c[a >> 2] | 0;e = 0;l = 2147483647;m = 0;do {
	                                if (c[n + (e * 40 | 0) + 24 >> 2] | 0) {
	                                    C = c[n + (e * 40 | 0) + 16 >> 2] | 0;D = (C | 0) < (l | 0);l = D ? C : l;m = D ? n + (e * 40 | 0) | 0 : m;
	                                }e = e + 1 | 0;
	                            } while (e >>> 0 <= k >>> 0);if ((m | 0) != 0 ? (D = c[p >> 2] | 0, C = c[q >> 2] | 0, c[C + (D << 4) >> 2] = c[m >> 2], c[C + (D << 4) + 12 >> 2] = c[m + 36 >> 2], c[C + (D << 4) + 4 >> 2] = c[m + 28 >> 2], c[C + (D << 4) + 8 >> 2] = c[m + 32 >> 2], c[p >> 2] = D + 1, c[m + 24 >> 2] = 0, (c[m + 20 >> 2] | 0) == 0) : 0) {
	                                d = d + -1 | 0;c[o >> 2] = d;
	                            }
	                        } while (d >>> 0 > k >>> 0);
	                    }
	                } else {
	                    k = a + 16 | 0;D = c[k >> 2] | 0;C = c[a + 12 >> 2] | 0;c[C + (D << 4) >> 2] = I;c[C + (D << 4) + 12 >> 2] = g;c[C + (D << 4) + 4 >> 2] = h;c[C + (D << 4) + 8 >> 2] = j;c[k >> 2] = D + 1;k = c[a + 28 >> 2] | 0;
	                }rc(c[a >> 2] | 0, k + 1 | 0);D = r;i = K;return D | 0;
	            }function ic(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0;e = i;if ((b >>> 0 <= 16 ? (d = c[(c[a + 4 >> 2] | 0) + (b << 2) >> 2] | 0, (d | 0) != 0) : 0) ? (c[d + 20 >> 2] | 0) >>> 0 > 1 : 0) d = c[d >> 2] | 0;else d = 0;i = e;return d | 0;
	            }function jc(a) {
	                a = a | 0;var b = 0;b = (c[a >> 2] | 0) + ((c[a + 28 >> 2] | 0) * 40 | 0) | 0;c[a + 8 >> 2] = b;return c[b >> 2] | 0;
	            }function kc(a, b, d, e, f, g) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0;j = i;c[a + 36 >> 2] = 65535;e = e >>> 0 > 1 ? e : 1;c[a + 24 >> 2] = e;h = a + 28 | 0;c[h >> 2] = (g | 0) == 0 ? d : e;c[a + 32 >> 2] = f;c[a + 56 >> 2] = g;c[a + 44 >> 2] = 0;c[a + 40 >> 2] = 0;c[a + 48 >> 2] = 0;g = fd(680) | 0;c[a >> 2] = g;if (!g) {
	                    g = 65535;i = j;return g | 0;
	                }id(g, 0, 680);a: do if ((c[h >> 2] | 0) != -1) {
	                    f = b * 384 | 47;e = 0;while (1) {
	                        d = fd(f) | 0;g = c[a >> 2] | 0;c[g + (e * 40 | 0) + 4 >> 2] = d;if (!d) {
	                            g = 65535;break;
	                        }c[g + (e * 40 | 0) >> 2] = d + (0 - d & 15);e = e + 1 | 0;if (e >>> 0 >= ((c[h >> 2] | 0) + 1 | 0) >>> 0) break a;
	                    }i = j;return g | 0;
	                } while (0);g = a + 4 | 0;c[g >> 2] = fd(68) | 0;f = fd((c[h >> 2] << 4) + 16 | 0) | 0;c[a + 12 >> 2] = f;g = c[g >> 2] | 0;if ((g | 0) == 0 | (f | 0) == 0) {
	                    g = 65535;i = j;return g | 0;
	                }id(g, 0, 68);c[a + 20 >> 2] = 0;c[a + 16 >> 2] = 0;g = 0;i = j;return g | 0;
	            }function lc(a, b, d, e, f, g) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0;l = i;h = c[a >> 2] | 0;if (h) {
	                    k = a + 28 | 0;if ((c[k >> 2] | 0) != -1) {
	                        j = 0;do {
	                            gd(c[h + (j * 40 | 0) + 4 >> 2] | 0);h = c[a >> 2] | 0;c[h + (j * 40 | 0) + 4 >> 2] = 0;j = j + 1 | 0;
	                        } while (j >>> 0 < ((c[k >> 2] | 0) + 1 | 0) >>> 0);
	                    }
	                } else h = 0;gd(h);c[a >> 2] = 0;h = a + 4 | 0;gd(c[h >> 2] | 0);c[h >> 2] = 0;h = a + 12 | 0;gd(c[h >> 2] | 0);c[h >> 2] = 0;h = kc(a, b, d, e, f, g) | 0;i = l;return h | 0;
	            }function mc(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0;f = i;b = c[a >> 2] | 0;if (b) {
	                    e = a + 28 | 0;if ((c[e >> 2] | 0) != -1) {
	                        d = 0;do {
	                            gd(c[b + (d * 40 | 0) + 4 >> 2] | 0);b = c[a >> 2] | 0;c[b + (d * 40 | 0) + 4 >> 2] = 0;d = d + 1 | 0;
	                        } while (d >>> 0 < ((c[e >> 2] | 0) + 1 | 0) >>> 0);
	                    }
	                } else b = 0;gd(b);c[a >> 2] = 0;b = a + 4 | 0;gd(c[b >> 2] | 0);c[b >> 2] = 0;b = a + 12 | 0;gd(c[b >> 2] | 0);c[b >> 2] = 0;i = f;return;
	            }function nc(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0;f = i;b = c[a + 40 >> 2] | 0;if (!b) {
	                    i = f;return;
	                }e = a + 4 | 0;d = 0;do {
	                    c[(c[e >> 2] | 0) + (d << 2) >> 2] = (c[a >> 2] | 0) + (d * 40 | 0);d = d + 1 | 0;
	                } while (d >>> 0 < b >>> 0);i = f;return;
	            }function oc(a, b, d, e) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0;y = i;v = a + 16 | 0;c[v >> 2] = 0;c[a + 20 >> 2] = 0;if (!e) {
	                    b = 0;i = y;return b | 0;
	                }x = a + 48 | 0;e = c[x >> 2] | 0;f = (e | 0) == (b | 0);a: do if (!f ? (u = a + 32 | 0, l = c[u >> 2] | 0, k = ((e + 1 | 0) >>> 0) % (l >>> 0) | 0, (k | 0) != (b | 0)) : 0) {
	                    t = a + 28 | 0;w = c[(c[a >> 2] | 0) + ((c[t >> 2] | 0) * 40 | 0) >> 2] | 0;r = a + 40 | 0;p = a + 24 | 0;o = a + 44 | 0;q = a + 56 | 0;s = a + 12 | 0;n = k;while (1) {
	                        k = c[r >> 2] | 0;if (!k) k = 0;else {
	                            j = c[a >> 2] | 0;h = 0;do {
	                                if (((c[j + (h * 40 | 0) + 20 >> 2] | 0) + -1 | 0) >>> 0 < 2) {
	                                    e = c[j + (h * 40 | 0) + 12 >> 2] | 0;c[j + (h * 40 | 0) + 8 >> 2] = e - (e >>> 0 > n >>> 0 ? l : 0);
	                                }h = h + 1 | 0;
	                            } while ((h | 0) != (k | 0));
	                        }if (k >>> 0 >= (c[p >> 2] | 0) >>> 0) {
	                            if (!k) {
	                                e = 1;g = 46;break;
	                            }f = c[a >> 2] | 0;h = 0;l = -1;j = 0;while (1) {
	                                if (((c[f + (h * 40 | 0) + 20 >> 2] | 0) + -1 | 0) >>> 0 < 2) {
	                                    e = c[f + (h * 40 | 0) + 8 >> 2] | 0;m = (e | 0) < (j | 0) | (l | 0) == -1;g = m ? h : l;j = m ? e : j;
	                                } else g = l;h = h + 1 | 0;if ((h | 0) == (k | 0)) break;else l = g;
	                            }if ((g | 0) <= -1) {
	                                e = 1;g = 46;break;
	                            }l = k + -1 | 0;c[f + (g * 40 | 0) + 20 >> 2] = 0;c[r >> 2] = l;if (!(c[f + (g * 40 | 0) + 24 >> 2] | 0)) {
	                                c[o >> 2] = (c[o >> 2] | 0) + -1;k = l;
	                            } else k = l;
	                        }l = c[o >> 2] | 0;m = c[t >> 2] | 0;if (l >>> 0 >= m >>> 0) {
	                            e = (c[q >> 2] | 0) == 0;do if (e) {
	                                g = c[a >> 2] | 0;f = 0;j = 2147483647;h = 0;do {
	                                    if (c[g + (f * 40 | 0) + 24 >> 2] | 0) {
	                                        A = c[g + (f * 40 | 0) + 16 >> 2] | 0;z = (A | 0) < (j | 0);j = z ? A : j;h = z ? g + (f * 40 | 0) | 0 : h;
	                                    }f = f + 1 | 0;
	                                } while (f >>> 0 <= m >>> 0);if ((h | 0) != 0 ? (f = c[v >> 2] | 0, g = c[s >> 2] | 0, c[g + (f << 4) >> 2] = c[h >> 2], c[g + (f << 4) + 12 >> 2] = c[h + 36 >> 2], c[g + (f << 4) + 4 >> 2] = c[h + 28 >> 2], c[g + (f << 4) + 8 >> 2] = c[h + 32 >> 2], c[v >> 2] = f + 1, c[h + 24 >> 2] = 0, (c[h + 20 >> 2] | 0) == 0) : 0) {
	                                    l = l + -1 | 0;c[o >> 2] = l;
	                                }
	                            } while (l >>> 0 >= m >>> 0);
	                        }e = c[a >> 2] | 0;c[e + (m * 40 | 0) + 20 >> 2] = 1;c[e + (m * 40 | 0) + 12 >> 2] = n;c[e + (m * 40 | 0) + 8 >> 2] = n;c[e + (m * 40 | 0) + 16 >> 2] = 0;c[e + (m * 40 | 0) + 24 >> 2] = 0;c[o >> 2] = l + 1;c[r >> 2] = k + 1;rc(e, m + 1 | 0);l = c[u >> 2] | 0;n = ((n + 1 | 0) >>> 0) % (l >>> 0) | 0;if ((n | 0) == (b | 0)) {
	                            g = 31;break;
	                        }
	                    }if ((g | 0) == 31) {
	                        g = c[v >> 2] | 0;if (!g) {
	                            g = 41;break;
	                        }e = c[s >> 2] | 0;h = c[t >> 2] | 0;j = c[a >> 2] | 0;l = j + (h * 40 | 0) | 0;k = c[l >> 2] | 0;f = 0;while (1) {
	                            if ((c[e + (f << 4) >> 2] | 0) == (k | 0)) break;f = f + 1 | 0;if (f >>> 0 >= g >>> 0) {
	                                g = 41;break a;
	                            }
	                        }if (!h) {
	                            g = 41;break;
	                        } else e = 0;while (1) {
	                            f = j + (e * 40 | 0) | 0;e = e + 1 | 0;if ((c[f >> 2] | 0) == (w | 0)) break;if (e >>> 0 >= h >>> 0) {
	                                g = 41;break a;
	                            }
	                        }c[f >> 2] = k;c[l >> 2] = w;g = 41;break;
	                    } else if ((g | 0) == 46) {
	                        i = y;return e | 0;
	                    }
	                } else g = 39; while (0);if ((g | 0) == 39) if (d) if (f) {
	                    b = 1;i = y;return b | 0;
	                } else g = 41;do if ((g | 0) == 41) {
	                    if (!d) {
	                        e = c[x >> 2] | 0;break;
	                    }c[x >> 2] = b;b = 0;i = y;return b | 0;
	                } while (0);if ((e | 0) == (b | 0)) {
	                    b = 0;i = y;return b | 0;
	                }a = c[a + 32 >> 2] | 0;c[x >> 2] = ((b + -1 + a | 0) >>> 0) % (a >>> 0) | 0;b = 0;i = y;return b | 0;
	            }function pc(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0;e = i;d = a + 20 | 0;b = c[d >> 2] | 0;if (b >>> 0 >= (c[a + 16 >> 2] | 0) >>> 0) {
	                    b = 0;i = e;return b | 0;
	                }a = c[a + 12 >> 2] | 0;c[d >> 2] = b + 1;b = a + (b << 4) | 0;i = e;return b | 0;
	            }function qc(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0;k = i;f = c[a >> 2] | 0;if (!f) {
	                    i = k;return;
	                }c[a + 60 >> 2] = 1;if (c[a + 56 >> 2] | 0) {
	                    i = k;return;
	                }g = c[a + 28 >> 2] | 0;h = a + 16 | 0;j = a + 12 | 0;e = a + 44 | 0;a = 0;b = 2147483647;d = 0;while (1) {
	                    if (c[f + (a * 40 | 0) + 24 >> 2] | 0) {
	                        m = c[f + (a * 40 | 0) + 16 >> 2] | 0;l = (m | 0) < (b | 0);b = l ? m : b;d = l ? f + (a * 40 | 0) | 0 : d;
	                    }a = a + 1 | 0;if (a >>> 0 <= g >>> 0) continue;if (!d) break;l = c[h >> 2] | 0;b = c[j >> 2] | 0;c[b + (l << 4) >> 2] = c[d >> 2];c[b + (l << 4) + 12 >> 2] = c[d + 36 >> 2];c[b + (l << 4) + 4 >> 2] = c[d + 28 >> 2];c[b + (l << 4) + 8 >> 2] = c[d + 32 >> 2];c[h >> 2] = l + 1;c[d + 24 >> 2] = 0;if (c[d + 20 >> 2] | 0) {
	                        a = 0;b = 2147483647;d = 0;continue;
	                    }c[e >> 2] = (c[e >> 2] | 0) + -1;a = 0;b = 2147483647;d = 0;
	                }i = k;return;
	            }function rc(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0;v = i;i = i + 32 | 0;q = v + 16 | 0;t = v;o = 7;do {
	                    if (o >>> 0 < b >>> 0) {
	                        n = o;do {
	                            m = a + (n * 40 | 0) | 0;l = c[m >> 2] | 0;m = c[m + 4 >> 2] | 0;p = c[a + (n * 40 | 0) + 8 >> 2] | 0;k = a + (n * 40 | 0) + 12 | 0;s = c[k + 4 >> 2] | 0;r = q;c[r >> 2] = c[k >> 2];c[r + 4 >> 2] = s;r = c[a + (n * 40 | 0) + 20 >> 2] | 0;s = c[a + (n * 40 | 0) + 24 >> 2] | 0;k = a + (n * 40 | 0) + 28 | 0;c[t + 0 >> 2] = c[k + 0 >> 2];c[t + 4 >> 2] = c[k + 4 >> 2];c[t + 8 >> 2] = c[k + 8 >> 2];a: do if (n >>> 0 < o >>> 0) {
	                                d = n;u = 8;
	                            } else {
	                                f = (s | 0) == 0;j = r + -1 | 0;k = j >>> 0 < 2;b: do if (!r) {
	                                    e = n;while (1) {
	                                        d = e - o | 0;if (c[a + (d * 40 | 0) + 20 >> 2] | 0) {
	                                            d = e;break b;
	                                        }if ((c[a + (d * 40 | 0) + 24 >> 2] | 0) != 0 | f) {
	                                            d = e;break b;
	                                        }e = a + (e * 40 | 0) + 0 | 0;g = a + (d * 40 | 0) + 0 | 0;h = e + 40 | 0;do {
	                                            c[e >> 2] = c[g >> 2];e = e + 4 | 0;g = g + 4 | 0;
	                                        } while ((e | 0) < (h | 0));if (d >>> 0 < o >>> 0) {
	                                            u = 8;break a;
	                                        } else e = d;
	                                    }
	                                } else {
	                                    d = n;while (1) {
	                                        f = d - o | 0;e = c[a + (f * 40 | 0) + 20 >> 2] | 0;do if (e) {
	                                            e = e + -1 | 0;if ((e | j) >>> 0 < 2) {
	                                                e = c[a + (f * 40 | 0) + 8 >> 2] | 0;if ((e | 0) > (p | 0)) break b;d = a + (d * 40 | 0) | 0;if ((e | 0) < (p | 0)) break;else break a;
	                                            }if (e >>> 0 < 2) break b;if (!k ? (c[a + (f * 40 | 0) + 8 >> 2] | 0) <= (p | 0) : 0) break b;else u = 16;
	                                        } else u = 16; while (0);if ((u | 0) == 16) {
	                                            u = 0;d = a + (d * 40 | 0) | 0;
	                                        }e = d + 0 | 0;g = a + (f * 40 | 0) + 0 | 0;h = e + 40 | 0;do {
	                                            c[e >> 2] = c[g >> 2];e = e + 4 | 0;g = g + 4 | 0;
	                                        } while ((e | 0) < (h | 0));if (f >>> 0 < o >>> 0) {
	                                            d = f;u = 8;break a;
	                                        } else d = f;
	                                    }
	                                } while (0);d = a + (d * 40 | 0) | 0;
	                            } while (0);if ((u | 0) == 8) {
	                                u = 0;d = a + (d * 40 | 0) | 0;
	                            }k = d;c[k >> 2] = l;c[k + 4 >> 2] = m;c[d + 8 >> 2] = p;k = q;l = c[k + 4 >> 2] | 0;m = d + 12 | 0;c[m >> 2] = c[k >> 2];c[m + 4 >> 2] = l;c[d + 20 >> 2] = r;c[d + 24 >> 2] = s;m = d + 28 | 0;c[m + 0 >> 2] = c[t + 0 >> 2];c[m + 4 >> 2] = c[t + 4 >> 2];c[m + 8 >> 2] = c[t + 8 >> 2];n = n + 1 | 0;
	                        } while ((n | 0) != (b | 0));
	                    }o = o >>> 1;
	                } while ((o | 0) != 0);i = v;return;
	            }function sc(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0;l = i;e = c[a + 4 >> 2] | 0;f = c[a + 16 >> 2] | 0;g = c[a + 20 >> 2] | 0;j = e << 2;k = b + 256 | 0;h = 16;a = c[a + 12 >> 2] | 0;d = b;while (1) {
	                    m = c[d + 4 >> 2] | 0;c[a >> 2] = c[d >> 2];c[a + 4 >> 2] = m;m = c[d + 12 >> 2] | 0;c[a + 8 >> 2] = c[d + 8 >> 2];c[a + 12 >> 2] = m;h = h + -1 | 0;if (!h) break;else {
	                        a = a + (j << 2) | 0;d = d + 16 | 0;
	                    }
	                }j = e << 1 & 2147483646;h = c[b + 260 >> 2] | 0;c[f >> 2] = c[k >> 2];c[f + 4 >> 2] = h;k = c[b + 268 >> 2] | 0;c[f + (j << 2) >> 2] = c[b + 264 >> 2];c[f + ((j | 1) << 2) >> 2] = k;k = e << 2;h = c[b + 276 >> 2] | 0;c[f + (k << 2) >> 2] = c[b + 272 >> 2];c[f + ((k | 1) << 2) >> 2] = h;k = k + j | 0;h = c[b + 284 >> 2] | 0;c[f + (k << 2) >> 2] = c[b + 280 >> 2];c[f + ((k | 1) << 2) >> 2] = h;k = k + j | 0;h = c[b + 292 >> 2] | 0;c[f + (k << 2) >> 2] = c[b + 288 >> 2];c[f + ((k | 1) << 2) >> 2] = h;k = k + j | 0;h = c[b + 300 >> 2] | 0;c[f + (k << 2) >> 2] = c[b + 296 >> 2];c[f + ((k | 1) << 2) >> 2] = h;k = k + j | 0;h = c[b + 308 >> 2] | 0;c[f + (k << 2) >> 2] = c[b + 304 >> 2];c[f + ((k | 1) << 2) >> 2] = h;k = k + j | 0;h = c[b + 316 >> 2] | 0;c[f + (k << 2) >> 2] = c[b + 312 >> 2];c[f + ((k | 1) << 2) >> 2] = h;k = c[b + 324 >> 2] | 0;c[g >> 2] = c[b + 320 >> 2];c[g + 4 >> 2] = k;k = c[b + 332 >> 2] | 0;c[g + (j << 2) >> 2] = c[b + 328 >> 2];c[g + ((j | 1) << 2) >> 2] = k;k = e << 2;h = c[b + 340 >> 2] | 0;c[g + (k << 2) >> 2] = c[b + 336 >> 2];c[g + ((k | 1) << 2) >> 2] = h;k = k + j | 0;h = c[b + 348 >> 2] | 0;c[g + (k << 2) >> 2] = c[b + 344 >> 2];c[g + ((k | 1) << 2) >> 2] = h;k = k + j | 0;h = c[b + 356 >> 2] | 0;c[g + (k << 2) >> 2] = c[b + 352 >> 2];c[g + ((k | 1) << 2) >> 2] = h;k = k + j | 0;h = c[b + 364 >> 2] | 0;c[g + (k << 2) >> 2] = c[b + 360 >> 2];c[g + ((k | 1) << 2) >> 2] = h;k = k + j | 0;h = c[b + 372 >> 2] | 0;c[g + (k << 2) >> 2] = c[b + 368 >> 2];c[g + ((k | 1) << 2) >> 2] = h;k = k + j | 0;j = c[b + 380 >> 2] | 0;c[g + (k << 2) >> 2] = c[b + 376 >> 2];c[g + ((k | 1) << 2) >> 2] = j;i = l;return;
	            }function tc(b, e, f, g) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0;y = i;r = c[b + 4 >> 2] | 0;s = Z(c[b + 8 >> 2] | 0, r) | 0;w = (e >>> 0) % (r >>> 0) | 0;x = c[b >> 2] | 0;u = e - w | 0;b = (u << 8) + (w << 4) | 0;v = s << 8;w = w << 3;p = r << 4;o = r << 2 & 1073741820;l = o << 1;m = l + o | 0;n = 0;do {
	                    k = c[3344 + (n << 2) >> 2] | 0;j = c[3408 + (n << 2) >> 2] | 0;e = (j << 4) + k | 0;h = f + e | 0;j = b + k + (Z(j, p) | 0) | 0;k = x + j | 0;q = c[g + (n << 6) >> 2] | 0;if ((q | 0) == 16777215) {
	                        j = c[f + (e + 16) >> 2] | 0;c[k >> 2] = c[h >> 2];c[k + (o << 2) >> 2] = j;j = c[f + (e + 48) >> 2] | 0;c[k + (l << 2) >> 2] = c[f + (e + 32) >> 2];c[k + (m << 2) >> 2] = j;
	                    } else {
	                        A = d[f + (e + 1) >> 0] | 0;z = c[g + (n << 6) + 4 >> 2] | 0;a[k >> 0] = a[3472 + (q + 512 + (d[h >> 0] | 0)) >> 0] | 0;q = d[f + (e + 2) >> 0] | 0;t = c[g + (n << 6) + 8 >> 2] | 0;a[x + (j + 1) >> 0] = a[3472 + ((A | 512) + z) >> 0] | 0;k = d[f + (e + 3) >> 0] | 0;h = c[g + (n << 6) + 12 >> 2] | 0;a[x + (j + 2) >> 0] = a[3472 + (t + 512 + q) >> 0] | 0;a[x + (j + 3) >> 0] = a[3472 + (h + 512 + k) >> 0] | 0;k = j + p | 0;h = d[f + (e + 17) >> 0] | 0;j = c[g + (n << 6) + 20 >> 2] | 0;a[x + k >> 0] = a[3472 + ((c[g + (n << 6) + 16 >> 2] | 0) + 512 + (d[f + (e + 16) >> 0] | 0)) >> 0] | 0;q = d[f + (e + 18) >> 0] | 0;t = c[g + (n << 6) + 24 >> 2] | 0;a[x + (k + 1) >> 0] = a[3472 + ((h | 512) + j) >> 0] | 0;j = d[f + (e + 19) >> 0] | 0;h = c[g + (n << 6) + 28 >> 2] | 0;a[x + (k + 2) >> 0] = a[3472 + (t + 512 + q) >> 0] | 0;a[x + (k + 3) >> 0] = a[3472 + (h + 512 + j) >> 0] | 0;k = k + p | 0;j = d[f + (e + 33) >> 0] | 0;h = c[g + (n << 6) + 36 >> 2] | 0;a[x + k >> 0] = a[3472 + ((c[g + (n << 6) + 32 >> 2] | 0) + 512 + (d[f + (e + 32) >> 0] | 0)) >> 0] | 0;q = d[f + (e + 34) >> 0] | 0;t = c[g + (n << 6) + 40 >> 2] | 0;a[x + (k + 1) >> 0] = a[3472 + ((j | 512) + h) >> 0] | 0;h = d[f + (e + 35) >> 0] | 0;j = c[g + (n << 6) + 44 >> 2] | 0;a[x + (k + 2) >> 0] = a[3472 + (t + 512 + q) >> 0] | 0;a[x + (k + 3) >> 0] = a[3472 + (j + 512 + h) >> 0] | 0;k = k + p | 0;h = d[f + (e + 49) >> 0] | 0;j = c[g + (n << 6) + 52 >> 2] | 0;a[x + k >> 0] = a[3472 + ((c[g + (n << 6) + 48 >> 2] | 0) + 512 + (d[f + (e + 48) >> 0] | 0)) >> 0] | 0;q = d[f + (e + 50) >> 0] | 0;t = c[g + (n << 6) + 56 >> 2] | 0;a[x + (k + 1) >> 0] = a[3472 + ((h | 512) + j) >> 0] | 0;j = d[f + (e + 51) >> 0] | 0;h = c[g + (n << 6) + 60 >> 2] | 0;a[x + (k + 2) >> 0] = a[3472 + (t + 512 + q) >> 0] | 0;a[x + (k + 3) >> 0] = a[3472 + (h + 512 + j) >> 0] | 0;
	                    }n = n + 1 | 0;
	                } while ((n | 0) != 16);t = s << 6;s = r << 3 & 2147483640;r = f + 256 | 0;f = f + 320 | 0;l = w + v + (u << 6) | 0;p = s >>> 2;j = s >>> 1;k = j + p | 0;o = 16;do {
	                    q = o & 3;h = c[3344 + (q << 2) >> 2] | 0;q = c[3408 + (q << 2) >> 2] | 0;e = o >>> 0 > 19;m = e ? f : r;n = (q << 3) + h | 0;b = m + n | 0;q = l + (e ? t : 0) + h + (Z(q, s) | 0) | 0;h = x + q | 0;e = c[g + (o << 6) >> 2] | 0;if ((e | 0) == 16777215) {
	                        z = c[m + (n + 8) >> 2] | 0;c[h >> 2] = c[b >> 2];c[h + (p << 2) >> 2] = z;z = c[m + (n + 24) >> 2] | 0;c[h + (j << 2) >> 2] = c[m + (n + 16) >> 2];c[h + (k << 2) >> 2] = z;
	                    } else {
	                        v = d[m + (n + 1) >> 0] | 0;z = c[g + (o << 6) + 4 >> 2] | 0;a[h >> 0] = a[3472 + (e + 512 + (d[b >> 0] | 0)) >> 0] | 0;w = d[m + (n + 2) >> 0] | 0;u = c[g + (o << 6) + 8 >> 2] | 0;a[x + (q + 1) >> 0] = a[3472 + ((v | 512) + z) >> 0] | 0;z = d[m + (n + 3) >> 0] | 0;v = c[g + (o << 6) + 12 >> 2] | 0;a[x + (q + 2) >> 0] = a[3472 + (u + 512 + w) >> 0] | 0;a[x + (q + 3) >> 0] = a[3472 + (v + 512 + z) >> 0] | 0;z = q + s | 0;v = d[m + (n + 9) >> 0] | 0;w = c[g + (o << 6) + 20 >> 2] | 0;a[x + z >> 0] = a[3472 + ((c[g + (o << 6) + 16 >> 2] | 0) + 512 + (d[m + (n + 8) >> 0] | 0)) >> 0] | 0;u = d[m + (n + 10) >> 0] | 0;q = c[g + (o << 6) + 24 >> 2] | 0;a[x + (z + 1) >> 0] = a[3472 + ((v | 512) + w) >> 0] | 0;w = d[m + (n + 11) >> 0] | 0;v = c[g + (o << 6) + 28 >> 2] | 0;a[x + (z + 2) >> 0] = a[3472 + (q + 512 + u) >> 0] | 0;a[x + (z + 3) >> 0] = a[3472 + (v + 512 + w) >> 0] | 0;z = z + s | 0;w = d[m + (n + 17) >> 0] | 0;v = c[g + (o << 6) + 36 >> 2] | 0;a[x + z >> 0] = a[3472 + ((c[g + (o << 6) + 32 >> 2] | 0) + 512 + (d[m + (n + 16) >> 0] | 0)) >> 0] | 0;u = d[m + (n + 18) >> 0] | 0;q = c[g + (o << 6) + 40 >> 2] | 0;a[x + (z + 1) >> 0] = a[3472 + ((w | 512) + v) >> 0] | 0;v = d[m + (n + 19) >> 0] | 0;w = c[g + (o << 6) + 44 >> 2] | 0;a[x + (z + 2) >> 0] = a[3472 + (q + 512 + u) >> 0] | 0;a[x + (z + 3) >> 0] = a[3472 + (w + 512 + v) >> 0] | 0;z = z + s | 0;v = d[m + (n + 25) >> 0] | 0;w = c[g + (o << 6) + 52 >> 2] | 0;a[x + z >> 0] = a[3472 + ((c[g + (o << 6) + 48 >> 2] | 0) + 512 + (d[m + (n + 24) >> 0] | 0)) >> 0] | 0;u = d[m + (n + 26) >> 0] | 0;q = c[g + (o << 6) + 56 >> 2] | 0;a[x + (z + 1) >> 0] = a[3472 + ((v | 512) + w) >> 0] | 0;w = d[m + (n + 27) >> 0] | 0;v = c[g + (o << 6) + 60 >> 2] | 0;a[x + (z + 2) >> 0] = a[3472 + (q + 512 + u) >> 0] | 0;a[x + (z + 3) >> 0] = a[3472 + (v + 512 + w) >> 0] | 0;
	                    }o = o + 1 | 0;
	                } while ((o | 0) != 24);i = y;return;
	            }function uc(e, f) {
	                e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0,
	                    G = 0,
	                    H = 0,
	                    I = 0,
	                    J = 0,
	                    K = 0,
	                    L = 0,
	                    M = 0,
	                    N = 0,
	                    O = 0,
	                    P = 0,
	                    Q = 0,
	                    R = 0,
	                    S = 0,
	                    T = 0,
	                    U = 0,
	                    V = 0,
	                    W = 0,
	                    X = 0,
	                    Y = 0,
	                    _ = 0,
	                    $ = 0,
	                    aa = 0,
	                    ba = 0,
	                    ca = 0,
	                    da = 0,
	                    ea = 0,
	                    fa = 0,
	                    ga = 0,
	                    ha = 0,
	                    ia = 0,
	                    ja = 0,
	                    ka = 0,
	                    la = 0,
	                    ma = 0,
	                    na = 0,
	                    oa = 0,
	                    pa = 0,
	                    qa = 0,
	                    ra = 0,
	                    sa = 0,
	                    ta = 0,
	                    ua = 0,
	                    va = 0,
	                    wa = 0,
	                    xa = 0,
	                    ya = 0,
	                    za = 0,
	                    Aa = 0,
	                    Ba = 0,
	                    Ca = 0,
	                    Da = 0,
	                    Ea = 0,
	                    Fa = 0,
	                    Ga = 0,
	                    Ha = 0,
	                    Ia = 0,
	                    Ja = 0,
	                    Ka = 0,
	                    La = 0,
	                    Ma = 0,
	                    Na = 0,
	                    Pa = 0,
	                    Qa = 0,
	                    Ra = 0,
	                    Sa = 0,
	                    Ta = 0,
	                    Ua = 0,
	                    Va = 0,
	                    Wa = 0,
	                    Xa = 0,
	                    Ya = 0,
	                    Za = 0,
	                    _a = 0,
	                    $a = 0,
	                    ab = 0,
	                    bb = 0;bb = i;i = i + 176 | 0;ia = bb + 40 | 0;La = bb;ea = c[e + 4 >> 2] | 0;ka = e + 8 | 0;Wa = c[ka >> 2] | 0;g = Z(Wa, ea) | 0;if (!Wa) {
	                    i = bb;return;
	                }Za = ia + 24 | 0;_a = ia + 16 | 0;$a = ia + 8 | 0;la = ia + 100 | 0;ma = ia + 68 | 0;na = ia + 36 | 0;oa = ia + 4 | 0;Ma = ia + 120 | 0;Na = ia + 112 | 0;Pa = ia + 104 | 0;Qa = ia + 96 | 0;Ra = ia + 88 | 0;Sa = ia + 80 | 0;Ta = ia + 72 | 0;Ua = ia + 64 | 0;Va = ia + 56 | 0;Wa = ia + 48 | 0;Xa = ia + 40 | 0;Ya = ia + 32 | 0;pa = ia + 124 | 0;qa = ia + 116 | 0;ra = ia + 108 | 0;sa = ia + 92 | 0;ta = ia + 84 | 0;ua = ia + 76 | 0;va = ia + 60 | 0;wa = ia + 52 | 0;xa = ia + 44 | 0;ya = ia + 28 | 0;za = ia + 20 | 0;Aa = ia + 12 | 0;ha = La + 28 | 0;ja = La + 32 | 0;Ka = La + 24 | 0;Da = ea << 4;Ja = 0 - Da | 0;Ca = Ja << 1;Ha = Z(ea, -48) | 0;Ia = ea << 5;Ea = Ja << 2;Ga = ea * 48 | 0;Ba = ea << 6;ga = La + 24 | 0;fa = La + 12 | 0;Fa = g << 8;ba = g << 6;ca = ea << 3;W = Da | 4;Y = La + 16 | 0;$ = La + 20 | 0;da = La + 12 | 0;X = La + 4 | 0;_ = La + 8 | 0;U = 0;aa = 0;V = f;while (1) {
	                    f = c[V + 8 >> 2] | 0;do if ((f | 0) != 1) {
	                        T = V + 200 | 0;n = c[T >> 2] | 0;do if (!n) g = 1;else {
	                            if ((f | 0) == 2 ? (c[V + 4 >> 2] | 0) != (c[n + 4 >> 2] | 0) : 0) {
	                                g = 1;break;
	                            }g = 5;
	                        } while (0);S = V + 204 | 0;l = c[S >> 2] | 0;do if (l) {
	                            if ((f | 0) == 2 ? (c[V + 4 >> 2] | 0) != (c[l + 4 >> 2] | 0) : 0) break;g = g | 2;
	                        } while (0);R = (g & 2 | 0) == 0;do if (R) {
	                            c[Za >> 2] = 0;c[_a >> 2] = 0;c[$a >> 2] = 0;c[ia >> 2] = 0;m = 0;
	                        } else {
	                            if ((c[V >> 2] | 0) >>> 0 <= 5 ? (c[l >> 2] | 0) >>> 0 <= 5 : 0) {
	                                if ((b[V + 28 >> 1] | 0) == 0 ? (b[l + 48 >> 1] | 0) == 0 : 0) {
	                                    if ((c[V + 116 >> 2] | 0) == (c[l + 124 >> 2] | 0) ? (B = (b[V + 132 >> 1] | 0) - (b[l + 172 >> 1] | 0) | 0, (((B | 0) > -1 ? B : 0 - B | 0) | 0) <= 3) : 0) {
	                                        h = (b[V + 134 >> 1] | 0) - (b[l + 174 >> 1] | 0) | 0;h = (((h | 0) > -1 ? h : 0 - h | 0) | 0) > 3 & 1;
	                                    } else h = 1;
	                                } else h = 2;c[ia >> 2] = h;if ((b[V + 30 >> 1] | 0) == 0 ? (b[l + 50 >> 1] | 0) == 0 : 0) {
	                                    if ((c[V + 116 >> 2] | 0) == (c[l + 124 >> 2] | 0) ? (B = (b[V + 136 >> 1] | 0) - (b[l + 176 >> 1] | 0) | 0, (((B | 0) > -1 ? B : 0 - B | 0) | 0) <= 3) : 0) {
	                                        j = (b[V + 138 >> 1] | 0) - (b[l + 178 >> 1] | 0) | 0;j = (((j | 0) > -1 ? j : 0 - j | 0) | 0) > 3 & 1;
	                                    } else j = 1;
	                                } else j = 2;c[$a >> 2] = j;if ((b[V + 36 >> 1] | 0) == 0 ? (b[l + 56 >> 1] | 0) == 0 : 0) {
	                                    if ((c[V + 120 >> 2] | 0) == (c[l + 128 >> 2] | 0) ? (B = (b[V + 148 >> 1] | 0) - (b[l + 188 >> 1] | 0) | 0, (((B | 0) > -1 ? B : 0 - B | 0) | 0) <= 3) : 0) {
	                                        k = (b[V + 150 >> 1] | 0) - (b[l + 190 >> 1] | 0) | 0;k = (((k | 0) > -1 ? k : 0 - k | 0) | 0) > 3 & 1;
	                                    } else k = 1;
	                                } else k = 2;c[_a >> 2] = k;if ((b[V + 38 >> 1] | 0) == 0 ? (b[l + 58 >> 1] | 0) == 0 : 0) {
	                                    if ((c[V + 120 >> 2] | 0) == (c[l + 128 >> 2] | 0) ? (B = (b[V + 152 >> 1] | 0) - (b[l + 192 >> 1] | 0) | 0, (((B | 0) > -1 ? B : 0 - B | 0) | 0) <= 3) : 0) {
	                                        f = (b[V + 154 >> 1] | 0) - (b[l + 194 >> 1] | 0) | 0;f = (((f | 0) > -1 ? f : 0 - f | 0) | 0) > 3 & 1;
	                                    } else f = 1;
	                                } else f = 2;c[Za >> 2] = f;m = (j | h | k | f | 0) != 0 & 1;break;
	                            }c[Za >> 2] = 4;c[_a >> 2] = 4;c[$a >> 2] = 4;c[ia >> 2] = 4;m = 1;
	                        } while (0);Q = (g & 4 | 0) == 0;do if (Q) {
	                            c[la >> 2] = 0;c[ma >> 2] = 0;c[na >> 2] = 0;c[oa >> 2] = 0;k = c[V >> 2] | 0;
	                        } else {
	                            k = c[V >> 2] | 0;if (k >>> 0 <= 5 ? (c[n >> 2] | 0) >>> 0 <= 5 : 0) {
	                                if ((b[V + 28 >> 1] | 0) == 0 ? (b[n + 38 >> 1] | 0) == 0 : 0) {
	                                    if ((c[V + 116 >> 2] | 0) == (c[n + 120 >> 2] | 0) ? (B = (b[V + 132 >> 1] | 0) - (b[n + 152 >> 1] | 0) | 0, (((B | 0) > -1 ? B : 0 - B | 0) | 0) <= 3) : 0) {
	                                        j = (b[V + 134 >> 1] | 0) - (b[n + 154 >> 1] | 0) | 0;j = (((j | 0) > -1 ? j : 0 - j | 0) | 0) > 3 & 1;
	                                    } else j = 1;
	                                } else j = 2;c[oa >> 2] = j;if ((b[V + 32 >> 1] | 0) == 0 ? (b[n + 42 >> 1] | 0) == 0 : 0) {
	                                    if ((c[V + 116 >> 2] | 0) == (c[n + 120 >> 2] | 0) ? (B = (b[V + 140 >> 1] | 0) - (b[n + 160 >> 1] | 0) | 0, (((B | 0) > -1 ? B : 0 - B | 0) | 0) <= 3) : 0) {
	                                        h = (b[V + 142 >> 1] | 0) - (b[n + 162 >> 1] | 0) | 0;h = (((h | 0) > -1 ? h : 0 - h | 0) | 0) > 3 & 1;
	                                    } else h = 1;
	                                } else h = 2;c[na >> 2] = h;if ((b[V + 44 >> 1] | 0) == 0 ? (b[n + 54 >> 1] | 0) == 0 : 0) {
	                                    if ((c[V + 124 >> 2] | 0) == (c[n + 128 >> 2] | 0) ? (B = (b[V + 164 >> 1] | 0) - (b[n + 184 >> 1] | 0) | 0, (((B | 0) > -1 ? B : 0 - B | 0) | 0) <= 3) : 0) {
	                                        f = (b[V + 166 >> 1] | 0) - (b[n + 186 >> 1] | 0) | 0;f = (((f | 0) > -1 ? f : 0 - f | 0) | 0) > 3 & 1;
	                                    } else f = 1;
	                                } else f = 2;c[ma >> 2] = f;if ((b[V + 48 >> 1] | 0) == 0 ? (b[n + 58 >> 1] | 0) == 0 : 0) {
	                                    if ((c[V + 124 >> 2] | 0) == (c[n + 128 >> 2] | 0) ? (B = (b[V + 172 >> 1] | 0) - (b[n + 192 >> 1] | 0) | 0, (((B | 0) > -1 ? B : 0 - B | 0) | 0) <= 3) : 0) {
	                                        l = (b[V + 174 >> 1] | 0) - (b[n + 194 >> 1] | 0) | 0;l = (((l | 0) > -1 ? l : 0 - l | 0) | 0) > 3 & 1;
	                                    } else l = 1;
	                                } else l = 2;c[la >> 2] = l;if (m) break;m = (h | j | f | l | 0) != 0 & 1;break;
	                            }c[la >> 2] = 4;c[ma >> 2] = 4;c[na >> 2] = 4;c[oa >> 2] = 4;m = 1;
	                        } while (0);if (k >>> 0 <= 5) {
	                            do if ((db(k) | 0) != 1) {
	                                f = c[V >> 2] | 0;if ((f | 0) == 2) {
	                                    w = V + 28 | 0;x = b[V + 32 >> 1] | 0;if (!(x << 16 >> 16)) f = (b[w >> 1] | 0) != 0 ? 2 : 0;else f = 2;c[Ya >> 2] = f;q = b[V + 34 >> 1] | 0;A = q << 16 >> 16 == 0;if (A) f = (b[V + 30 >> 1] | 0) != 0 ? 2 : 0;else f = 2;c[Xa >> 2] = f;g = b[V + 40 >> 1] | 0;z = g << 16 >> 16 == 0;if (z) l = (b[V + 36 >> 1] | 0) != 0 ? 2 : 0;else l = 2;c[Wa >> 2] = l;v = b[V + 42 >> 1] | 0;y = v << 16 >> 16 == 0;if (y) l = (b[V + 38 >> 1] | 0) != 0 ? 2 : 0;else l = 2;c[Va >> 2] = l;h = b[V + 48 >> 1] | 0;if (!(h << 16 >> 16)) l = (b[V + 44 >> 1] | 0) != 0 ? 2 : 0;else l = 2;c[Qa >> 2] = l;k = b[V + 50 >> 1] | 0;B = k << 16 >> 16 == 0;if (B) l = (b[V + 46 >> 1] | 0) != 0 ? 2 : 0;else l = 2;c[Pa >> 2] = l;p = b[V + 56 >> 1] | 0;f = p << 16 >> 16 == 0;if (f) n = (b[V + 52 >> 1] | 0) != 0 ? 2 : 0;else n = 2;c[Na >> 2] = n;j = (b[V + 58 >> 1] | 0) == 0;if (j) n = (b[V + 54 >> 1] | 0) != 0 ? 2 : 0;else n = 2;c[Ma >> 2] = n;r = b[V + 44 >> 1] | 0;o = b[V + 166 >> 1] | 0;n = b[V + 142 >> 1] | 0;do if (!((r | x) << 16 >> 16)) {
	                                        u = (b[V + 164 >> 1] | 0) - (b[V + 140 >> 1] | 0) | 0;if ((((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3) {
	                                            n = 1;break;
	                                        }u = o - n | 0;if ((((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3) {
	                                            n = 1;break;
	                                        }n = (c[V + 124 >> 2] | 0) != (c[V + 116 >> 2] | 0) & 1;
	                                    } else n = 2; while (0);c[Ua >> 2] = n;s = b[V + 46 >> 1] | 0;o = b[V + 170 >> 1] | 0;n = b[V + 146 >> 1] | 0;do if (!((s | q) << 16 >> 16)) {
	                                        u = (b[V + 168 >> 1] | 0) - (b[V + 144 >> 1] | 0) | 0;if ((((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }u = o - n | 0;if ((((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }o = (c[V + 124 >> 2] | 0) != (c[V + 116 >> 2] | 0) & 1;
	                                    } else o = 2; while (0);c[Ta >> 2] = o;t = b[V + 52 >> 1] | 0;o = b[V + 182 >> 1] | 0;n = b[V + 158 >> 1] | 0;do if (!((t | g) << 16 >> 16)) {
	                                        u = (b[V + 180 >> 1] | 0) - (b[V + 156 >> 1] | 0) | 0;if ((((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }u = o - n | 0;if ((((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }o = (c[V + 128 >> 2] | 0) != (c[V + 120 >> 2] | 0) & 1;
	                                    } else o = 2; while (0);c[Sa >> 2] = o;u = b[V + 54 >> 1] | 0;o = b[V + 186 >> 1] | 0;n = b[V + 162 >> 1] | 0;do if (!((u | v) << 16 >> 16)) {
	                                        v = (b[V + 184 >> 1] | 0) - (b[V + 160 >> 1] | 0) | 0;if ((((v | 0) > -1 ? v : 0 - v | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }v = o - n | 0;if ((((v | 0) > -1 ? v : 0 - v | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }o = (c[V + 128 >> 2] | 0) != (c[V + 120 >> 2] | 0) & 1;
	                                    } else o = 2; while (0);c[Ra >> 2] = o;l = b[V + 30 >> 1] | 0;if (!(l << 16 >> 16)) o = (b[w >> 1] | 0) != 0 ? 2 : 0;else o = 2;c[Aa >> 2] = o;n = b[V + 36 >> 1] | 0;if (!(n << 16 >> 16)) o = l << 16 >> 16 != 0 ? 2 : 0;else o = 2;c[za >> 2] = o;if (!(b[V + 38 >> 1] | 0)) o = n << 16 >> 16 != 0 ? 2 : 0;else o = 2;c[ya >> 2] = o;if (A) n = x << 16 >> 16 != 0 ? 2 : 0;else n = 2;c[xa >> 2] = n;if (z) l = q << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[wa >> 2] = l;if (y) l = g << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[va >> 2] = l;if (!(s << 16 >> 16)) l = r << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[ua >> 2] = l;if (!(t << 16 >> 16)) l = s << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[ta >> 2] = l;if (!(u << 16 >> 16)) l = t << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[sa >> 2] = l;if (B) h = h << 16 >> 16 != 0 ? 2 : 0;else h = 2;c[ra >> 2] = h;if (f) f = k << 16 >> 16 != 0 ? 2 : 0;else f = 2;c[qa >> 2] = f;if (j) f = p << 16 >> 16 != 0 ? 2 : 0;else f = 2;c[pa >> 2] = f;break;
	                                } else if ((f | 0) == 3) {
	                                    j = V + 28 | 0;v = b[V + 32 >> 1] | 0;if (!(v << 16 >> 16)) f = (b[j >> 1] | 0) != 0 ? 2 : 0;else f = 2;c[Ya >> 2] = f;B = b[V + 34 >> 1] | 0;p = B << 16 >> 16 == 0;if (p) h = (b[V + 30 >> 1] | 0) != 0 ? 2 : 0;else h = 2;c[Xa >> 2] = h;z = b[V + 40 >> 1] | 0;if (!(z << 16 >> 16)) k = (b[V + 36 >> 1] | 0) != 0 ? 2 : 0;else k = 2;c[Wa >> 2] = k;o = b[V + 42 >> 1] | 0;h = o << 16 >> 16 == 0;if (h) l = (b[V + 38 >> 1] | 0) != 0 ? 2 : 0;else l = 2;c[Va >> 2] = l;f = b[V + 44 >> 1] | 0;if (!(f << 16 >> 16)) l = v << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[Ua >> 2] = l;A = b[V + 46 >> 1] | 0;g = A << 16 >> 16 == 0;if (g) l = B << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[Ta >> 2] = l;y = b[V + 52 >> 1] | 0;if (!(y << 16 >> 16)) l = z << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[Sa >> 2] = l;k = b[V + 54 >> 1] | 0;q = k << 16 >> 16 == 0;if (q) l = o << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[Ra >> 2] = l;r = b[V + 48 >> 1] | 0;if (!(r << 16 >> 16)) n = f << 16 >> 16 != 0 ? 2 : 0;else n = 2;c[Qa >> 2] = n;x = b[V + 50 >> 1] | 0;s = x << 16 >> 16 == 0;if (s) n = A << 16 >> 16 != 0 ? 2 : 0;else n = 2;c[Pa >> 2] = n;w = b[V + 56 >> 1] | 0;if (!(w << 16 >> 16)) o = y << 16 >> 16 != 0 ? 2 : 0;else o = 2;c[Na >> 2] = o;u = (b[V + 58 >> 1] | 0) == 0;if (u) o = k << 16 >> 16 != 0 ? 2 : 0;else o = 2;c[Ma >> 2] = o;t = b[V + 30 >> 1] | 0;if (!(t << 16 >> 16)) o = (b[j >> 1] | 0) != 0 ? 2 : 0;else o = 2;c[Aa >> 2] = o;if (!(b[V + 38 >> 1] | 0)) o = (b[V + 36 >> 1] | 0) != 0 ? 2 : 0;else o = 2;c[ya >> 2] = o;if (p) n = v << 16 >> 16 != 0 ? 2 : 0;else n = 2;c[xa >> 2] = n;if (h) n = z << 16 >> 16 != 0 ? 2 : 0;else n = 2;c[va >> 2] = n;if (g) l = f << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[ua >> 2] = l;if (q) l = y << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[sa >> 2] = l;if (s) l = r << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[ra >> 2] = l;if (u) l = w << 16 >> 16 != 0 ? 2 : 0;else l = 2;c[pa >> 2] = l;l = b[V + 150 >> 1] | 0;k = b[V + 138 >> 1] | 0;do if (!((b[V + 36 >> 1] | t) << 16 >> 16)) {
	                                        v = (b[V + 148 >> 1] | 0) - (b[V + 136 >> 1] | 0) | 0;if ((((v | 0) > -1 ? v : 0 - v | 0) | 0) > 3) {
	                                            l = 1;break;
	                                        }v = l - k | 0;if ((((v | 0) > -1 ? v : 0 - v | 0) | 0) > 3) {
	                                            l = 1;break;
	                                        }l = (c[V + 120 >> 2] | 0) != (c[V + 116 >> 2] | 0) & 1;
	                                    } else l = 2; while (0);c[za >> 2] = l;l = b[V + 158 >> 1] | 0;k = b[V + 146 >> 1] | 0;do if (!((z | B) << 16 >> 16)) {
	                                        B = (b[V + 156 >> 1] | 0) - (b[V + 144 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            k = 1;break;
	                                        }B = l - k | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            k = 1;break;
	                                        }k = (c[V + 120 >> 2] | 0) != (c[V + 116 >> 2] | 0) & 1;
	                                    } else k = 2; while (0);c[wa >> 2] = k;l = b[V + 182 >> 1] | 0;k = b[V + 170 >> 1] | 0;do if (!((y | A) << 16 >> 16)) {
	                                        B = (b[V + 180 >> 1] | 0) - (b[V + 168 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            f = 1;break;
	                                        }B = l - k | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            f = 1;break;
	                                        }f = (c[V + 128 >> 2] | 0) != (c[V + 124 >> 2] | 0) & 1;
	                                    } else f = 2; while (0);c[ta >> 2] = f;f = b[V + 190 >> 1] | 0;g = b[V + 178 >> 1] | 0;do if (!((w | x) << 16 >> 16)) {
	                                        B = (b[V + 188 >> 1] | 0) - (b[V + 176 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            f = 1;break;
	                                        }B = f - g | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            f = 1;break;
	                                        }f = (c[V + 128 >> 2] | 0) != (c[V + 124 >> 2] | 0) & 1;
	                                    } else f = 2; while (0);c[qa >> 2] = f;break;
	                                } else {
	                                    K = b[V + 32 >> 1] | 0;z = b[V + 28 >> 1] | 0;P = b[V + 142 >> 1] | 0;q = b[V + 134 >> 1] | 0;if (!((z | K) << 16 >> 16)) {
	                                        B = (b[V + 140 >> 1] | 0) - (b[V + 132 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) k = 1;else {
	                                            k = P - q | 0;k = (((k | 0) > -1 ? k : 0 - k | 0) | 0) > 3 & 1;
	                                        }
	                                    } else k = 2;c[Ya >> 2] = k;L = b[V + 34 >> 1] | 0;y = b[V + 30 >> 1] | 0;O = b[V + 146 >> 1] | 0;r = b[V + 138 >> 1] | 0;if (!((y | L) << 16 >> 16)) {
	                                        B = (b[V + 144 >> 1] | 0) - (b[V + 136 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) l = 1;else {
	                                            l = O - r | 0;l = (((l | 0) > -1 ? l : 0 - l | 0) | 0) > 3 & 1;
	                                        }
	                                    } else l = 2;c[Xa >> 2] = l;M = b[V + 40 >> 1] | 0;x = b[V + 36 >> 1] | 0;N = b[V + 158 >> 1] | 0;s = b[V + 150 >> 1] | 0;if (!((x | M) << 16 >> 16)) {
	                                        B = (b[V + 156 >> 1] | 0) - (b[V + 148 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) n = 1;else {
	                                            n = N - s | 0;n = (((n | 0) > -1 ? n : 0 - n | 0) | 0) > 3 & 1;
	                                        }
	                                    } else n = 2;c[Wa >> 2] = n;n = b[V + 42 >> 1] | 0;B = b[V + 38 >> 1] | 0;J = b[V + 162 >> 1] | 0;A = b[V + 154 >> 1] | 0;if (!((B | n) << 16 >> 16)) {
	                                        w = (b[V + 160 >> 1] | 0) - (b[V + 152 >> 1] | 0) | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) o = 1;else {
	                                            o = J - A | 0;o = (((o | 0) > -1 ? o : 0 - o | 0) | 0) > 3 & 1;
	                                        }
	                                    } else o = 2;c[Va >> 2] = o;D = b[V + 44 >> 1] | 0;I = b[V + 166 >> 1] | 0;do if (!((D | K) << 16 >> 16)) {
	                                        w = (b[V + 164 >> 1] | 0) - (b[V + 140 >> 1] | 0) | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) o = 1;else {
	                                            w = I - P | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                                o = 1;break;
	                                            }o = (c[V + 124 >> 2] | 0) != (c[V + 116 >> 2] | 0) & 1;
	                                        }
	                                    } else o = 2; while (0);c[Ua >> 2] = o;E = b[V + 46 >> 1] | 0;H = b[V + 170 >> 1] | 0;do if (!((E | L) << 16 >> 16)) {
	                                        w = (b[V + 168 >> 1] | 0) - (b[V + 144 >> 1] | 0) | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }w = H - O | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }o = (c[V + 124 >> 2] | 0) != (c[V + 116 >> 2] | 0) & 1;
	                                    } else o = 2; while (0);c[Ta >> 2] = o;F = b[V + 52 >> 1] | 0;G = b[V + 182 >> 1] | 0;do if (!((F | M) << 16 >> 16)) {
	                                        w = (b[V + 180 >> 1] | 0) - (b[V + 156 >> 1] | 0) | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }w = G - N | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }o = (c[V + 128 >> 2] | 0) != (c[V + 120 >> 2] | 0) & 1;
	                                    } else o = 2; while (0);c[Sa >> 2] = o;g = b[V + 54 >> 1] | 0;l = b[V + 186 >> 1] | 0;do if (!((g | n) << 16 >> 16)) {
	                                        w = (b[V + 184 >> 1] | 0) - (b[V + 160 >> 1] | 0) | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                            u = 1;break;
	                                        }w = l - J | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                            u = 1;break;
	                                        }u = (c[V + 128 >> 2] | 0) != (c[V + 120 >> 2] | 0) & 1;
	                                    } else u = 2; while (0);c[Ra >> 2] = u;f = b[V + 48 >> 1] | 0;C = b[V + 174 >> 1] | 0;do if (!((f | D) << 16 >> 16)) {
	                                        w = (b[V + 172 >> 1] | 0) - (b[V + 164 >> 1] | 0) | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                            u = 1;break;
	                                        }u = C - I | 0;u = (((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3 & 1;
	                                    } else u = 2; while (0);c[Qa >> 2] = u;h = b[V + 50 >> 1] | 0;k = b[V + 178 >> 1] | 0;do if (!((h | E) << 16 >> 16)) {
	                                        w = (b[V + 176 >> 1] | 0) - (b[V + 168 >> 1] | 0) | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                            u = 1;break;
	                                        }u = k - H | 0;u = (((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3 & 1;
	                                    } else u = 2; while (0);c[Pa >> 2] = u;j = b[V + 56 >> 1] | 0;p = b[V + 190 >> 1] | 0;do if (!((j | F) << 16 >> 16)) {
	                                        w = (b[V + 188 >> 1] | 0) - (b[V + 180 >> 1] | 0) | 0;if ((((w | 0) > -1 ? w : 0 - w | 0) | 0) > 3) {
	                                            u = 1;break;
	                                        }u = p - G | 0;u = (((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3 & 1;
	                                    } else u = 2; while (0);c[Na >> 2] = u;w = b[V + 58 >> 1] | 0;t = b[V + 194 >> 1] | 0;do if (!((w | g) << 16 >> 16)) {
	                                        v = (b[V + 192 >> 1] | 0) - (b[V + 184 >> 1] | 0) | 0;if ((((v | 0) > -1 ? v : 0 - v | 0) | 0) > 3) {
	                                            v = 1;break;
	                                        }v = t - l | 0;v = (((v | 0) > -1 ? v : 0 - v | 0) | 0) > 3 & 1;
	                                    } else v = 2; while (0);c[Ma >> 2] = v;do if (!((y | z) << 16 >> 16)) {
	                                        z = (b[V + 136 >> 1] | 0) - (b[V + 132 >> 1] | 0) | 0;if ((((z | 0) > -1 ? z : 0 - z | 0) | 0) > 3) {
	                                            u = 1;break;
	                                        }u = r - q | 0;u = (((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3 & 1;
	                                    } else u = 2; while (0);c[Aa >> 2] = u;do if (!((x | y) << 16 >> 16)) {
	                                        z = (b[V + 148 >> 1] | 0) - (b[V + 136 >> 1] | 0) | 0;if ((((z | 0) > -1 ? z : 0 - z | 0) | 0) > 3) {
	                                            u = 1;break;
	                                        }z = s - r | 0;if ((((z | 0) > -1 ? z : 0 - z | 0) | 0) > 3) {
	                                            u = 1;break;
	                                        }u = (c[V + 120 >> 2] | 0) != (c[V + 116 >> 2] | 0) & 1;
	                                    } else u = 2; while (0);c[za >> 2] = u;do if (!((B | x) << 16 >> 16)) {
	                                        B = (b[V + 152 >> 1] | 0) - (b[V + 148 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            u = 1;break;
	                                        }u = A - s | 0;u = (((u | 0) > -1 ? u : 0 - u | 0) | 0) > 3 & 1;
	                                    } else u = 2; while (0);c[ya >> 2] = u;do if (!((L | K) << 16 >> 16)) {
	                                        B = (b[V + 144 >> 1] | 0) - (b[V + 140 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }o = O - P | 0;o = (((o | 0) > -1 ? o : 0 - o | 0) | 0) > 3 & 1;
	                                    } else o = 2; while (0);c[xa >> 2] = o;do if (!((M | L) << 16 >> 16)) {
	                                        B = (b[V + 156 >> 1] | 0) - (b[V + 144 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }B = N - O | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }o = (c[V + 120 >> 2] | 0) != (c[V + 116 >> 2] | 0) & 1;
	                                    } else o = 2; while (0);c[wa >> 2] = o;do if (!((n | M) << 16 >> 16)) {
	                                        B = (b[V + 160 >> 1] | 0) - (b[V + 156 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            o = 1;break;
	                                        }o = J - N | 0;o = (((o | 0) > -1 ? o : 0 - o | 0) | 0) > 3 & 1;
	                                    } else o = 2; while (0);c[va >> 2] = o;do if (!((E | D) << 16 >> 16)) {
	                                        B = (b[V + 168 >> 1] | 0) - (b[V + 164 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            n = 1;break;
	                                        }n = H - I | 0;n = (((n | 0) > -1 ? n : 0 - n | 0) | 0) > 3 & 1;
	                                    } else n = 2; while (0);c[ua >> 2] = n;do if (!((F | E) << 16 >> 16)) {
	                                        B = (b[V + 180 >> 1] | 0) - (b[V + 168 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            n = 1;break;
	                                        }B = G - H | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            n = 1;break;
	                                        }n = (c[V + 128 >> 2] | 0) != (c[V + 124 >> 2] | 0) & 1;
	                                    } else n = 2; while (0);c[ta >> 2] = n;do if (!((g | F) << 16 >> 16)) {
	                                        B = (b[V + 184 >> 1] | 0) - (b[V + 180 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            l = 1;break;
	                                        }l = l - G | 0;l = (((l | 0) > -1 ? l : 0 - l | 0) | 0) > 3 & 1;
	                                    } else l = 2; while (0);c[sa >> 2] = l;do if (!((h | f) << 16 >> 16)) {
	                                        B = (b[V + 176 >> 1] | 0) - (b[V + 172 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            l = 1;break;
	                                        }l = k - C | 0;l = (((l | 0) > -1 ? l : 0 - l | 0) | 0) > 3 & 1;
	                                    } else l = 2; while (0);c[ra >> 2] = l;do if (!((j | h) << 16 >> 16)) {
	                                        B = (b[V + 188 >> 1] | 0) - (b[V + 176 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            k = 1;break;
	                                        }B = p - k | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            k = 1;break;
	                                        }k = (c[V + 128 >> 2] | 0) != (c[V + 124 >> 2] | 0) & 1;
	                                    } else k = 2; while (0);c[qa >> 2] = k;do if (!((w | j) << 16 >> 16)) {
	                                        B = (b[V + 192 >> 1] | 0) - (b[V + 188 >> 1] | 0) | 0;if ((((B | 0) > -1 ? B : 0 - B | 0) | 0) > 3) {
	                                            f = 1;break;
	                                        }f = t - p | 0;f = (((f | 0) > -1 ? f : 0 - f | 0) | 0) > 3 & 1;
	                                    } else f = 2; while (0);c[pa >> 2] = f;break;
	                                }
	                            } else vc(V, ia); while (0);if (!(m | c[Ya >> 2] | c[Xa >> 2] | c[Wa >> 2] | c[Va >> 2] | c[Ua >> 2] | c[Ta >> 2] | c[Sa >> 2] | c[Ra >> 2] | c[Qa >> 2] | c[Pa >> 2] | c[Na >> 2] | c[Ma >> 2] | c[Aa >> 2] | c[za >> 2] | c[ya >> 2] | c[xa >> 2] | c[wa >> 2] | c[va >> 2] | c[ua >> 2] | c[ta >> 2] | c[sa >> 2] | c[ra >> 2] | c[qa >> 2] | c[pa >> 2])) break;
	                        } else {
	                            c[Ma >> 2] = 3;c[Na >> 2] = 3;c[Pa >> 2] = 3;c[Qa >> 2] = 3;c[Ra >> 2] = 3;c[Sa >> 2] = 3;c[Ta >> 2] = 3;c[Ua >> 2] = 3;c[Va >> 2] = 3;c[Wa >> 2] = 3;c[Xa >> 2] = 3;c[Ya >> 2] = 3;c[pa >> 2] = 3;c[qa >> 2] = 3;c[ra >> 2] = 3;c[sa >> 2] = 3;c[ta >> 2] = 3;c[ua >> 2] = 3;c[va >> 2] = 3;c[wa >> 2] = 3;c[xa >> 2] = 3;c[ya >> 2] = 3;c[za >> 2] = 3;c[Aa >> 2] = 3;
	                        }J = V + 20 | 0;g = c[J >> 2] | 0;L = V + 12 | 0;k = Oa(0, 51, (c[L >> 2] | 0) + g | 0) | 0;K = V + 16 | 0;h = Oa(0, 51, (c[K >> 2] | 0) + g | 0) | 0;j = d[6864 + k >> 0] | 0;c[ha >> 2] = j;h = d[6920 + h >> 0] | 0;c[ja >> 2] = h;k = 6976 + (k * 3 | 0) | 0;c[Ka >> 2] = k;do if (!R) {
	                            l = c[(c[S >> 2] | 0) + 20 >> 2] | 0;if ((l | 0) == (g | 0)) {
	                                c[X >> 2] = j;c[_ >> 2] = h;c[La >> 2] = k;break;
	                            } else {
	                                A = (g + 1 + l | 0) >>> 1;B = Oa(0, 51, (c[L >> 2] | 0) + A | 0) | 0;A = Oa(0, 51, (c[K >> 2] | 0) + A | 0) | 0;c[X >> 2] = d[6864 + B >> 0];c[_ >> 2] = d[6920 + A >> 0];c[La >> 2] = 6976 + (B * 3 | 0);break;
	                            }
	                        } while (0);do if (!Q) {
	                            f = c[(c[T >> 2] | 0) + 20 >> 2] | 0;if ((f | 0) == (g | 0)) {
	                                c[Y >> 2] = c[ha >> 2];c[$ >> 2] = c[ja >> 2];c[da >> 2] = c[Ka >> 2];break;
	                            } else {
	                                A = (g + 1 + f | 0) >>> 1;B = Oa(0, 51, (c[L >> 2] | 0) + A | 0) | 0;A = Oa(0, 51, (c[K >> 2] | 0) + A | 0) | 0;c[Y >> 2] = d[6864 + B >> 0];c[$ >> 2] = d[6920 + A >> 0];c[da >> 2] = 6976 + (B * 3 | 0);break;
	                            }
	                        } while (0);M = Z(aa, ea) | 0;P = 3;o = 0;O = (c[e >> 2] | 0) + ((M << 8) + (U << 4)) | 0;N = ia;while (1) {
	                            l = c[N + 4 >> 2] | 0;if (l) wc(O, l, fa, Da);l = c[N + 12 >> 2] | 0;if (l) wc(O + 4 | 0, l, ga, Da);k = N + 16 | 0;m = c[N + 20 >> 2] | 0;if (m) wc(O + 8 | 0, m, ga, Da);j = N + 24 | 0;m = c[N + 28 >> 2] | 0;if (m) wc(O + 12 | 0, m, ga, Da);n = c[N >> 2] | 0;l = N + 8 | 0;m = c[l >> 2] | 0;a: do if (((n | 0) == (m | 0) ? (n | 0) == (c[k >> 2] | 0) : 0) ? (n | 0) == (c[j >> 2] | 0) : 0) {
	                                if (!n) break;y = c[La + (o * 12 | 0) + 4 >> 2] | 0;x = c[La + (o * 12 | 0) + 8 >> 2] | 0;if (n >>> 0 < 4) {
	                                    t = d[(c[La + (o * 12 | 0) >> 2] | 0) + (n + -1) >> 0] | 0;k = 0 - t | 0;j = t + 1 | 0;f = O;h = 16;while (1) {
	                                        o = f + Ca | 0;s = d[o >> 0] | 0;u = f + Ja | 0;r = d[u >> 0] | 0;q = d[f >> 0] | 0;m = f + Da | 0;g = d[m >> 0] | 0;B = r - q | 0;do if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 < y >>> 0) {
	                                            B = s - r | 0;if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 >= x >>> 0) break;B = g - q | 0;if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 >= x >>> 0) break;n = d[f + Ha >> 0] | 0;B = n - r | 0;if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 < x >>> 0) {
	                                                a[o >> 0] = (Oa(k, t, ((r + 1 + q | 0) >>> 1) - (s << 1) + n >> 1) | 0) + s;o = j;
	                                            } else o = t;n = d[f + Ia >> 0] | 0;B = n - q | 0;if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 < x >>> 0) {
	                                                a[m >> 0] = (Oa(k, t, ((r + 1 + q | 0) >>> 1) - (g << 1) + n >> 1) | 0) + g;o = o + 1 | 0;
	                                            }A = Oa(0 - o | 0, o, s + 4 - g + (q - r << 2) >> 3) | 0;B = a[3472 + ((q | 512) - A) >> 0] | 0;a[u >> 0] = a[3472 + (A + (r | 512)) >> 0] | 0;a[f >> 0] = B;
	                                        } while (0);h = h + -1 | 0;if (!h) break a;else f = f + 1 | 0;
	                                    }
	                                }n = (y >>> 2) + 2 | 0;t = O;u = 16;while (1) {
	                                    m = t + Ca | 0;f = d[m >> 0] | 0;l = t + Ja | 0;g = d[l >> 0] | 0;p = d[t >> 0] | 0;k = t + Da | 0;q = d[k >> 0] | 0;o = g - p | 0;o = (o | 0) > -1 ? o : 0 - o | 0;b: do if (o >>> 0 < y >>> 0) {
	                                        B = f - g | 0;if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 >= x >>> 0) break;B = q - p | 0;if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 >= x >>> 0) break;j = t + Ha | 0;r = d[j >> 0] | 0;h = t + Ia | 0;s = d[h >> 0] | 0;do if (o >>> 0 < n >>> 0) {
	                                            B = r - g | 0;if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 < x >>> 0) {
	                                                B = g + f + p | 0;a[l >> 0] = (q + 4 + (B << 1) + r | 0) >>> 3;a[m >> 0] = (B + 2 + r | 0) >>> 2;a[j >> 0] = (B + 4 + (r * 3 | 0) + (d[t + Ea >> 0] << 1) | 0) >>> 3;
	                                            } else a[l >> 0] = (g + 2 + (f << 1) + q | 0) >>> 2;B = s - p | 0;if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 >= x >>> 0) break;B = p + g + q | 0;a[t >> 0] = (f + 4 + (B << 1) + s | 0) >>> 3;a[k >> 0] = (B + 2 + s | 0) >>> 2;a[h >> 0] = (B + 4 + (s * 3 | 0) + (d[t + Ga >> 0] << 1) | 0) >>> 3;break b;
	                                        } else a[l >> 0] = (g + 2 + (f << 1) + q | 0) >>> 2; while (0);a[t >> 0] = (f + 2 + p + (q << 1) | 0) >>> 2;
	                                    } while (0);u = u + -1 | 0;if (!u) break;else t = t + 1 | 0;
	                                }
	                            } else ab = 311; while (0);do if ((ab | 0) == 311) {
	                                ab = 0;if (n) {
	                                    xc(O, n, La + (o * 12 | 0) | 0, Da);m = c[l >> 2] | 0;
	                                }if (m) xc(O + 4 | 0, m, La + (o * 12 | 0) | 0, Da);m = c[k >> 2] | 0;if (m) xc(O + 8 | 0, m, La + (o * 12 | 0) | 0, Da);l = c[j >> 2] | 0;if (!l) break;xc(O + 12 | 0, l, La + (o * 12 | 0) | 0, Da);
	                            } while (0);if (!P) break;else {
	                                P = P + -1 | 0;o = 2;O = O + Ba | 0;N = N + 32 | 0;
	                            }
	                        }h = c[V + 24 >> 2] | 0;g = c[192 + ((Oa(0, 51, (c[J >> 2] | 0) + h | 0) | 0) << 2) >> 2] | 0;m = Oa(0, 51, (c[L >> 2] | 0) + g | 0) | 0;j = Oa(0, 51, (c[K >> 2] | 0) + g | 0) | 0;k = d[6864 + m >> 0] | 0;c[ha >> 2] = k;j = d[6920 + j >> 0] | 0;c[ja >> 2] = j;m = 6976 + (m * 3 | 0) | 0;c[Ka >> 2] = m;do if (!R) {
	                            l = c[(c[S >> 2] | 0) + 20 >> 2] | 0;if ((l | 0) == (c[J >> 2] | 0)) {
	                                c[X >> 2] = k;c[_ >> 2] = j;c[La >> 2] = m;break;
	                            } else {
	                                A = (g + 1 + (c[192 + ((Oa(0, 51, l + h | 0) | 0) << 2) >> 2] | 0) | 0) >>> 1;B = Oa(0, 51, A + (c[L >> 2] | 0) | 0) | 0;A = Oa(0, 51, (c[K >> 2] | 0) + A | 0) | 0;c[X >> 2] = d[6864 + B >> 0];c[_ >> 2] = d[6920 + A >> 0];c[La >> 2] = 6976 + (B * 3 | 0);break;
	                            }
	                        } while (0);do if (!Q) {
	                            f = c[(c[T >> 2] | 0) + 20 >> 2] | 0;if ((f | 0) == (c[J >> 2] | 0)) {
	                                c[Y >> 2] = c[ha >> 2];c[$ >> 2] = c[ja >> 2];c[da >> 2] = c[Ka >> 2];break;
	                            } else {
	                                A = (g + 1 + (c[192 + ((Oa(0, 51, f + h | 0) | 0) << 2) >> 2] | 0) | 0) >>> 1;B = Oa(0, 51, A + (c[L >> 2] | 0) | 0) | 0;A = Oa(0, 51, (c[K >> 2] | 0) + A | 0) | 0;c[Y >> 2] = d[6864 + B >> 0];c[$ >> 2] = d[6920 + A >> 0];c[da >> 2] = 6976 + (B * 3 | 0);break;
	                            }
	                        } while (0);j = c[e >> 2] | 0;l = (U << 3) + Fa + (M << 6) | 0;n = j + l | 0;l = j + (l + ba) | 0;j = 0;h = ia;o = 0;while (1) {
	                            g = h + 4 | 0;f = c[g >> 2] | 0;if (f) {
	                                yc(n, f, fa, ca);yc(l, c[g >> 2] | 0, fa, ca);
	                            }g = h + 36 | 0;f = c[g >> 2] | 0;if (f) {
	                                yc(n + Da | 0, f, fa, ca);yc(l + Da | 0, c[g >> 2] | 0, fa, ca);
	                            }m = h + 16 | 0;g = h + 20 | 0;f = c[g >> 2] | 0;if (f) {
	                                yc(n + 4 | 0, f, ga, ca);yc(l + 4 | 0, c[g >> 2] | 0, ga, ca);
	                            }g = h + 52 | 0;f = c[g >> 2] | 0;if (f) {
	                                yc(n + W | 0, f, ga, ca);yc(l + W | 0, c[g >> 2] | 0, ga, ca);
	                            }g = c[h >> 2] | 0;k = h + 8 | 0;f = c[k >> 2] | 0;do if ((g | 0) == (f | 0)) {
	                                if ((g | 0) != (c[m >> 2] | 0)) {
	                                    ab = 342;break;
	                                }if ((g | 0) != (c[h + 24 >> 2] | 0)) {
	                                    ab = 342;break;
	                                }if (!g) break;B = La + (j * 12 | 0) | 0;zc(n, g, B, ca);zc(l, c[h >> 2] | 0, B, ca);
	                            } else ab = 342; while (0);do if ((ab | 0) == 342) {
	                                ab = 0;if (g) {
	                                    f = La + (j * 12 | 0) | 0;Ac(n, g, f, ca);Ac(l, c[h >> 2] | 0, f, ca);f = c[k >> 2] | 0;
	                                }if (f) {
	                                    B = La + (j * 12 | 0) | 0;Ac(n + 2 | 0, f, B, ca);Ac(l + 2 | 0, c[k >> 2] | 0, B, ca);
	                                }f = c[m >> 2] | 0;if (f) {
	                                    B = La + (j * 12 | 0) | 0;Ac(n + 4 | 0, f, B, ca);Ac(l + 4 | 0, c[m >> 2] | 0, B, ca);
	                                }g = h + 24 | 0;f = c[g >> 2] | 0;if (!f) break;B = La + (j * 12 | 0) | 0;Ac(n + 6 | 0, f, B, ca);Ac(l + 6 | 0, c[g >> 2] | 0, B, ca);
	                            } while (0);o = o + 1 | 0;if ((o | 0) == 2) break;else {
	                                n = n + Ia | 0;l = l + Ia | 0;j = 2;h = h + 64 | 0;
	                            }
	                        }
	                    } while (0);f = U + 1 | 0;g = (f | 0) == (ea | 0);aa = (g & 1) + aa | 0;if (aa >>> 0 >= (c[ka >> 2] | 0) >>> 0) break;else {
	                        U = g ? 0 : f;V = V + 216 | 0;
	                    }
	                }i = bb;return;
	            }function vc(a, d) {
	                a = a | 0;d = d | 0;var e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0;B = i;l = a + 28 | 0;y = b[a + 32 >> 1] | 0;if (!(y << 16 >> 16)) e = (b[l >> 1] | 0) != 0 ? 2 : 0;else e = 2;c[d + 32 >> 2] = e;z = b[a + 34 >> 1] | 0;x = z << 16 >> 16 == 0;if (x) e = (b[a + 30 >> 1] | 0) != 0 ? 2 : 0;else e = 2;c[d + 40 >> 2] = e;A = b[a + 40 >> 1] | 0;v = A << 16 >> 16 == 0;if (v) e = (b[a + 36 >> 1] | 0) != 0 ? 2 : 0;else e = 2;c[d + 48 >> 2] = e;f = b[a + 42 >> 1] | 0;w = f << 16 >> 16 == 0;if (w) e = (b[a + 38 >> 1] | 0) != 0 ? 2 : 0;else e = 2;c[d + 56 >> 2] = e;s = b[a + 44 >> 1] | 0;if (!(s << 16 >> 16)) e = y << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 64 >> 2] = e;t = b[a + 46 >> 1] | 0;p = t << 16 >> 16 == 0;if (p) e = z << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 72 >> 2] = e;u = b[a + 52 >> 1] | 0;q = u << 16 >> 16 == 0;if (q) e = A << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 80 >> 2] = e;g = b[a + 54 >> 1] | 0;r = g << 16 >> 16 == 0;if (r) e = f << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 88 >> 2] = e;m = b[a + 48 >> 1] | 0;if (!(m << 16 >> 16)) e = s << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 96 >> 2] = e;n = b[a + 50 >> 1] | 0;h = n << 16 >> 16 == 0;if (h) e = t << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 104 >> 2] = e;o = b[a + 56 >> 1] | 0;j = o << 16 >> 16 == 0;if (j) f = u << 16 >> 16 != 0 ? 2 : 0;else f = 2;c[d + 112 >> 2] = f;k = (b[a + 58 >> 1] | 0) == 0;if (k) f = g << 16 >> 16 != 0 ? 2 : 0;else f = 2;c[d + 120 >> 2] = f;g = b[a + 30 >> 1] | 0;if (!(g << 16 >> 16)) f = (b[l >> 1] | 0) != 0 ? 2 : 0;else f = 2;c[d + 12 >> 2] = f;e = b[a + 36 >> 1] | 0;if (!(e << 16 >> 16)) f = g << 16 >> 16 != 0 ? 2 : 0;else f = 2;c[d + 20 >> 2] = f;if (!(b[a + 38 >> 1] | 0)) e = e << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 28 >> 2] = e;if (x) e = y << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 44 >> 2] = e;if (v) e = z << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 52 >> 2] = e;if (w) e = A << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 60 >> 2] = e;if (p) e = s << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 76 >> 2] = e;if (q) e = t << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 84 >> 2] = e;if (r) e = u << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 92 >> 2] = e;if (h) e = m << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 108 >> 2] = e;if (j) e = n << 16 >> 16 != 0 ? 2 : 0;else e = 2;c[d + 116 >> 2] = e;if (!k) {
	                    y = 2;z = d + 124 | 0;c[z >> 2] = y;i = B;return;
	                }y = o << 16 >> 16 != 0 ? 2 : 0;z = d + 124 | 0;c[z >> 2] = y;i = B;return;
	            }function wc(b, e, f, g) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0;w = i;u = c[f + 4 >> 2] | 0;v = c[f + 8 >> 2] | 0;if (e >>> 0 < 4) {
	                    l = d[(c[f >> 2] | 0) + (e + -1) >> 0] | 0;n = 0 - l | 0;m = l + 1 | 0;k = 4;while (1) {
	                        f = b + -2 | 0;s = d[f >> 0] | 0;t = b + -1 | 0;r = d[t >> 0] | 0;q = d[b >> 0] | 0;j = b + 1 | 0;h = d[j >> 0] | 0;o = r - q | 0;if ((((o | 0) > -1 ? o : 0 - o | 0) >>> 0 < u >>> 0 ? (o = s - r | 0, ((o | 0) > -1 ? o : 0 - o | 0) >>> 0 < v >>> 0) : 0) ? (o = h - q | 0, ((o | 0) > -1 ? o : 0 - o | 0) >>> 0 < v >>> 0) : 0) {
	                            e = d[b + -3 >> 0] | 0;p = d[b + 2 >> 0] | 0;o = e - r | 0;if (((o | 0) > -1 ? o : 0 - o | 0) >>> 0 < v >>> 0) {
	                                a[f >> 0] = (Oa(n, l, ((r + 1 + q | 0) >>> 1) - (s << 1) + e >> 1) | 0) + s;f = m;
	                            } else f = l;o = p - q | 0;if (((o | 0) > -1 ? o : 0 - o | 0) >>> 0 < v >>> 0) {
	                                a[j >> 0] = (Oa(n, l, ((r + 1 + q | 0) >>> 1) - (h << 1) + p >> 1) | 0) + h;f = f + 1 | 0;
	                            }j = Oa(0 - f | 0, f, s + 4 - h + (q - r << 2) >> 3) | 0;o = a[3472 + ((q | 512) - j) >> 0] | 0;a[t >> 0] = a[3472 + ((r | 512) + j) >> 0] | 0;a[b >> 0] = o;
	                        }k = k + -1 | 0;if (!k) break;else b = b + g | 0;
	                    }i = w;return;
	                }t = (u >>> 2) + 2 | 0;s = 4;while (1) {
	                    k = b + -2 | 0;q = d[k >> 0] | 0;l = b + -1 | 0;r = d[l >> 0] | 0;m = d[b >> 0] | 0;e = b + 1 | 0;n = d[e >> 0] | 0;f = r - m | 0;f = (f | 0) > -1 ? f : 0 - f | 0;do if ((f >>> 0 < u >>> 0 ? (o = q - r | 0, ((o | 0) > -1 ? o : 0 - o | 0) >>> 0 < v >>> 0) : 0) ? (o = n - m | 0, ((o | 0) > -1 ? o : 0 - o | 0) >>> 0 < v >>> 0) : 0) {
	                        h = b + -3 | 0;o = d[h >> 0] | 0;j = b + 2 | 0;p = d[j >> 0] | 0;if (f >>> 0 < t >>> 0) {
	                            f = o - r | 0;if (((f | 0) > -1 ? f : 0 - f | 0) >>> 0 < v >>> 0) {
	                                f = r + q + m | 0;a[l >> 0] = (n + 4 + (f << 1) + o | 0) >>> 3;a[k >> 0] = (f + 2 + o | 0) >>> 2;a[h >> 0] = (f + 4 + (o * 3 | 0) + ((d[b + -4 >> 0] | 0) << 1) | 0) >>> 3;
	                            } else a[l >> 0] = (r + 2 + (q << 1) + n | 0) >>> 2;o = p - m | 0;if (((o | 0) > -1 ? o : 0 - o | 0) >>> 0 < v >>> 0) {
	                                o = m + r + n | 0;a[b >> 0] = (q + 4 + (o << 1) + p | 0) >>> 3;a[e >> 0] = (o + 2 + p | 0) >>> 2;a[j >> 0] = (o + 4 + (p * 3 | 0) + ((d[b + 3 >> 0] | 0) << 1) | 0) >>> 3;break;
	                            }
	                        } else a[l >> 0] = (r + 2 + (q << 1) + n | 0) >>> 2;a[b >> 0] = (q + 2 + m + (n << 1) | 0) >>> 2;
	                    } while (0);s = s + -1 | 0;if (!s) break;else b = b + g | 0;
	                }i = w;return;
	            }function xc(b, e, f, g) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0;A = i;u = d[(c[f >> 2] | 0) + (e + -1) >> 0] | 0;w = 0 - g | 0;v = w << 1;t = f + 4 | 0;o = f + 8 | 0;q = Z(g, -3) | 0;s = 0 - u | 0;p = u + 1 | 0;r = g << 1;n = 4;while (1) {
	                    e = b + v | 0;k = b + w | 0;j = b + g | 0;f = a[j >> 0] | 0;l = d[k >> 0] | 0;m = d[b >> 0] | 0;h = l - m | 0;if ((((h | 0) > -1 ? h : 0 - h | 0) >>> 0 < (c[t >> 2] | 0) >>> 0 ? (y = d[e >> 0] | 0, h = y - l | 0, x = c[o >> 2] | 0, ((h | 0) > -1 ? h : 0 - h | 0) >>> 0 < x >>> 0) : 0) ? (z = f & 255, f = z - m | 0, ((f | 0) > -1 ? f : 0 - f | 0) >>> 0 < x >>> 0) : 0) {
	                        f = d[b + q >> 0] | 0;h = f - l | 0;if (((h | 0) > -1 ? h : 0 - h | 0) >>> 0 < x >>> 0) {
	                            a[e >> 0] = (Oa(s, u, ((l + 1 + m | 0) >>> 1) - (y << 1) + f >> 1) | 0) + y;e = c[o >> 2] | 0;f = p;
	                        } else {
	                            e = x;f = u;
	                        }h = d[b + r >> 0] | 0;B = h - m | 0;if (((B | 0) > -1 ? B : 0 - B | 0) >>> 0 < e >>> 0) {
	                            a[j >> 0] = (Oa(s, u, ((l + 1 + m | 0) >>> 1) - (z << 1) + h >> 1) | 0) + z;f = f + 1 | 0;
	                        }f = Oa(0 - f | 0, f, 4 - z + (m - l << 2) + y >> 3) | 0;e = a[3472 + ((m | 512) - f) >> 0] | 0;a[k >> 0] = a[3472 + ((l | 512) + f) >> 0] | 0;a[b >> 0] = e;
	                    }n = n + -1 | 0;if (!n) break;else b = b + 1 | 0;
	                }i = A;return;
	            }
	            function ya(a) {
	                a = a | 0;var b = 0;b = i;i = i + a | 0;i = i + 15 & -16;return b | 0;
	            }function za() {
	                return i | 0;
	            }function Aa(a) {
	                a = a | 0;i = a;
	            }function Ba(a, b) {
	                a = a | 0;b = b | 0;if (!m) {
	                    m = a;n = b;
	                }
	            }function Ca(b) {
	                b = b | 0;a[k >> 0] = a[b >> 0];a[k + 1 >> 0] = a[b + 1 >> 0];a[k + 2 >> 0] = a[b + 2 >> 0];a[k + 3 >> 0] = a[b + 3 >> 0];
	            }function Da(b) {
	                b = b | 0;a[k >> 0] = a[b >> 0];a[k + 1 >> 0] = a[b + 1 >> 0];a[k + 2 >> 0] = a[b + 2 >> 0];a[k + 3 >> 0] = a[b + 3 >> 0];a[k + 4 >> 0] = a[b + 4 >> 0];a[k + 5 >> 0] = a[b + 5 >> 0];a[k + 6 >> 0] = a[b + 6 >> 0];a[k + 7 >> 0] = a[b + 7 >> 0];
	            }function Ea(a) {
	                a = a | 0;B = a;
	            }function Fa() {
	                return B | 0;
	            }function Ga(a, b, e, f) {
	                a = a | 0;b = b | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0;k = i;g = d[8 + b >> 0] | 0;j = d[64 + b >> 0] | 0;b = c[120 + (j * 12 | 0) >> 2] << g;h = c[124 + (j * 12 | 0) >> 2] << g;g = c[128 + (j * 12 | 0) >> 2] << g;if (!e) c[a >> 2] = Z(c[a >> 2] | 0, b) | 0;a: do if (!(f & 65436)) {
	                    if (f & 98) {
	                        n = a + 4 | 0;l = Z(c[n >> 2] | 0, h) | 0;j = a + 20 | 0;m = Z(c[j >> 2] | 0, b) | 0;e = a + 24 | 0;g = Z(c[e >> 2] | 0, h) | 0;h = c[a >> 2] | 0;b = (l >> 1) - g | 0;g = l + (g >> 1) | 0;l = m + h + 32 | 0;f = l + g >> 6;c[a >> 2] = f;m = h - m + 32 | 0;h = m + b >> 6;c[n >> 2] = h;b = m - b >> 6;c[a + 8 >> 2] = b;g = l - g >> 6;c[a + 12 >> 2] = g;c[a + 48 >> 2] = f;c[a + 32 >> 2] = f;c[a + 16 >> 2] = f;c[a + 52 >> 2] = h;c[a + 36 >> 2] = h;c[j >> 2] = h;c[a + 56 >> 2] = b;c[a + 40 >> 2] = b;c[e >> 2] = b;c[a + 60 >> 2] = g;c[a + 44 >> 2] = g;c[a + 28 >> 2] = g;if ((f + 512 | 0) >>> 0 > 1023 | (h + 512 | 0) >>> 0 > 1023 | (b + 512 | 0) >>> 0 > 1023 | (g + 512 | 0) >>> 0 > 1023) g = 1;else break;i = k;return g | 0;
	                    }g = (c[a >> 2] | 0) + 32 >> 6;if ((g + 512 | 0) >>> 0 > 1023) {
	                        m = 1;i = k;return m | 0;
	                    } else {
	                        c[a + 60 >> 2] = g;c[a + 56 >> 2] = g;c[a + 52 >> 2] = g;c[a + 48 >> 2] = g;c[a + 44 >> 2] = g;c[a + 40 >> 2] = g;c[a + 36 >> 2] = g;c[a + 32 >> 2] = g;c[a + 28 >> 2] = g;c[a + 24 >> 2] = g;c[a + 20 >> 2] = g;c[a + 16 >> 2] = g;c[a + 12 >> 2] = g;c[a + 8 >> 2] = g;c[a + 4 >> 2] = g;c[a >> 2] = g;break;
	                    }
	                } else {
	                    z = a + 4 | 0;s = a + 56 | 0;w = a + 60 | 0;t = c[w >> 2] | 0;u = Z(c[z >> 2] | 0, h) | 0;c[s >> 2] = Z(c[s >> 2] | 0, h) | 0;c[w >> 2] = Z(t, g) | 0;w = a + 8 | 0;t = c[w >> 2] | 0;s = a + 16 | 0;y = Z(c[a + 20 >> 2] | 0, b) | 0;o = Z(c[s >> 2] | 0, g) | 0;q = a + 12 | 0;p = c[q >> 2] | 0;f = Z(c[a + 32 >> 2] | 0, h) | 0;e = Z(c[a + 24 >> 2] | 0, h) | 0;r = c[a + 28 >> 2] | 0;j = Z(c[a + 48 >> 2] | 0, g) | 0;n = Z(c[a + 36 >> 2] | 0, h) | 0;l = c[a + 44 >> 2] | 0;m = Z(c[a + 40 >> 2] | 0, g) | 0;g = Z(c[a + 52 >> 2] | 0, h) | 0;x = c[a >> 2] | 0;v = y + x | 0;y = x - y | 0;x = (u >> 1) - e | 0;u = (e >> 1) + u | 0;e = u + v | 0;c[a >> 2] = e;c[z >> 2] = x + y;c[w >> 2] = y - x;c[q >> 2] = v - u;q = Z(h, r + t | 0) | 0;r = Z(t - r | 0, h) | 0;h = (o >> 1) - j | 0;o = (j >> 1) + o | 0;j = o + q | 0;c[s >> 2] = j;c[a + 20 >> 2] = h + r;c[a + 24 >> 2] = r - h;c[a + 28 >> 2] = q - o;o = Z(b, l + p | 0) | 0;b = Z(p - l | 0, b) | 0;l = (f >> 1) - g | 0;f = (g >> 1) + f | 0;h = f + o | 0;c[a + 32 >> 2] = h;c[a + 36 >> 2] = l + b;c[a + 40 >> 2] = b - l;c[a + 44 >> 2] = o - f;f = a + 56 | 0;o = c[f >> 2] | 0;l = o + n | 0;o = n - o | 0;b = a + 60 | 0;g = c[b >> 2] | 0;n = (m >> 1) - g | 0;m = (g >> 1) + m | 0;g = m + l | 0;c[a + 48 >> 2] = g;c[a + 52 >> 2] = n + o;c[f >> 2] = o - n;c[b >> 2] = l - m;b = j;j = 3;while (1) {
	                        v = (b >> 1) - g | 0;g = (g >> 1) + b | 0;w = h + e + 32 | 0;x = w + g >> 6;c[a >> 2] = x;b = e - h + 32 | 0;y = b + v >> 6;c[a + 16 >> 2] = y;b = b - v >> 6;c[a + 32 >> 2] = b;g = w - g >> 6;c[a + 48 >> 2] = g;if ((x + 512 | 0) >>> 0 > 1023 | (y + 512 | 0) >>> 0 > 1023) {
	                            g = 1;b = 14;break;
	                        }if ((b + 512 | 0) >>> 0 > 1023 | (g + 512 | 0) >>> 0 > 1023) {
	                            g = 1;b = 14;break;
	                        }f = a + 4 | 0;if (!j) break a;e = c[f >> 2] | 0;h = c[a + 36 >> 2] | 0;b = c[a + 20 >> 2] | 0;g = c[a + 52 >> 2] | 0;a = f;j = j + -1 | 0;
	                    }if ((b | 0) == 14) {
	                        i = k;return g | 0;
	                    }
	                } while (0);y = 0;i = k;return y | 0;
	            }function Ha(b, d) {
	                b = b | 0;d = d | 0;var e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0;B = i;e = a[64 + d >> 0] | 0;s = a[8 + d >> 0] | 0;D = b + 8 | 0;u = c[D >> 2] | 0;j = c[b + 20 >> 2] | 0;q = b + 16 | 0;y = c[q >> 2] | 0;r = b + 32 | 0;z = c[r >> 2] | 0;E = b + 12 | 0;v = c[E >> 2] | 0;f = c[b + 24 >> 2] | 0;m = c[b + 28 >> 2] | 0;o = b + 48 | 0;g = c[o >> 2] | 0;C = c[b + 36 >> 2] | 0;A = c[b + 40 >> 2] | 0;F = c[b + 44 >> 2] | 0;h = c[b + 52 >> 2] | 0;p = c[b >> 2] | 0;l = j + p | 0;j = p - j | 0;p = b + 4 | 0;x = c[p >> 2] | 0;t = x - f | 0;x = f + x | 0;f = x + l | 0;c[b >> 2] = f;k = t + j | 0;c[p >> 2] = k;t = j - t | 0;c[D >> 2] = t;x = l - x | 0;c[E >> 2] = x;E = m + u | 0;m = u - m | 0;u = y - g | 0;y = g + y | 0;g = y + E | 0;c[q >> 2] = g;l = u + m | 0;c[b + 20 >> 2] = l;u = m - u | 0;c[b + 24 >> 2] = u;y = E - y | 0;c[b + 28 >> 2] = y;E = F + v | 0;F = v - F | 0;v = z - h | 0;z = h + z | 0;h = z + E | 0;c[b + 32 >> 2] = h;m = v + F | 0;c[b + 36 >> 2] = m;v = F - v | 0;c[b + 40 >> 2] = v;z = E - z | 0;c[b + 44 >> 2] = z;E = b + 56 | 0;F = c[E >> 2] | 0;D = F + C | 0;F = C - F | 0;C = b + 60 | 0;j = c[C >> 2] | 0;w = A - j | 0;A = j + A | 0;j = A + D | 0;c[b + 48 >> 2] = j;n = w + F | 0;c[b + 52 >> 2] = n;w = F - w | 0;c[E >> 2] = w;A = D - A | 0;c[C >> 2] = A;s = s & 255;e = c[120 + ((e & 255) * 12 | 0) >> 2] | 0;if (d >>> 0 > 11) {
	                    d = e << s + -2;s = h + f | 0;h = f - h | 0;f = g - j | 0;e = j + g | 0;c[b >> 2] = Z(e + s | 0, d) | 0;c[q >> 2] = Z(f + h | 0, d) | 0;c[r >> 2] = Z(h - f | 0, d) | 0;c[o >> 2] = Z(s - e | 0, d) | 0;r = m + k | 0;e = k - m | 0;q = l - n | 0;s = n + l | 0;c[p >> 2] = Z(s + r | 0, d) | 0;c[b + 20 >> 2] = Z(q + e | 0, d) | 0;c[b + 36 >> 2] = Z(e - q | 0, d) | 0;c[b + 52 >> 2] = Z(r - s | 0, d) | 0;s = v + t | 0;t = t - v | 0;v = u - w | 0;w = w + u | 0;c[b + 8 >> 2] = Z(w + s | 0, d) | 0;c[b + 24 >> 2] = Z(v + t | 0, d) | 0;c[b + 40 >> 2] = Z(t - v | 0, d) | 0;c[b + 56 >> 2] = Z(s - w | 0, d) | 0;w = z + x | 0;v = x - z | 0;x = y - A | 0;y = A + y | 0;c[b + 12 >> 2] = Z(y + w | 0, d) | 0;c[b + 28 >> 2] = Z(x + v | 0, d) | 0;c[b + 44 >> 2] = Z(v - x | 0, d) | 0;c[b + 60 >> 2] = Z(w - y | 0, d) | 0;i = B;return;
	                } else {
	                    C = (d + -6 | 0) >>> 0 < 6 ? 1 : 2;d = 2 - s | 0;s = h + f | 0;D = f - h | 0;h = g - j | 0;f = j + g | 0;c[b >> 2] = (Z(f + s | 0, e) | 0) + C >> d;c[q >> 2] = (Z(h + D | 0, e) | 0) + C >> d;c[r >> 2] = (Z(D - h | 0, e) | 0) + C >> d;c[o >> 2] = (Z(s - f | 0, e) | 0) + C >> d;r = m + k | 0;f = k - m | 0;q = l - n | 0;s = n + l | 0;c[p >> 2] = (Z(s + r | 0, e) | 0) + C >> d;c[b + 20 >> 2] = (Z(q + f | 0, e) | 0) + C >> d;c[b + 36 >> 2] = (Z(f - q | 0, e) | 0) + C >> d;c[b + 52 >> 2] = (Z(r - s | 0, e) | 0) + C >> d;s = v + t | 0;t = t - v | 0;v = u - w | 0;w = w + u | 0;c[b + 8 >> 2] = (Z(w + s | 0, e) | 0) + C >> d;c[b + 24 >> 2] = (Z(v + t | 0, e) | 0) + C >> d;c[b + 40 >> 2] = (Z(t - v | 0, e) | 0) + C >> d;c[b + 56 >> 2] = (Z(s - w | 0, e) | 0) + C >> d;w = z + x | 0;v = x - z | 0;x = y - A | 0;y = A + y | 0;c[b + 12 >> 2] = (Z(y + w | 0, e) | 0) + C >> d;c[b + 28 >> 2] = (Z(x + v | 0, e) | 0) + C >> d;c[b + 44 >> 2] = (Z(v - x | 0, e) | 0) + C >> d;c[b + 60 >> 2] = (Z(w - y | 0, e) | 0) + C >> d;i = B;return;
	                }
	            }function Ia(a, b) {
	                a = a | 0;b = b | 0;var e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    i = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0;e = c[120 + ((d[64 + b >> 0] | 0) * 12 | 0) >> 2] | 0;if (b >>> 0 > 5) {
	                    e = e << (d[8 + b >> 0] | 0) + -1;b = 0;
	                } else b = 1;k = c[a >> 2] | 0;g = a + 8 | 0;h = c[g >> 2] | 0;m = h + k | 0;h = k - h | 0;k = a + 4 | 0;j = c[k >> 2] | 0;l = a + 12 | 0;f = c[l >> 2] | 0;i = j - f | 0;j = f + j | 0;c[a >> 2] = (Z(j + m | 0, e) | 0) >> b;c[k >> 2] = (Z(m - j | 0, e) | 0) >> b;c[g >> 2] = (Z(i + h | 0, e) | 0) >> b;c[l >> 2] = (Z(h - i | 0, e) | 0) >> b;l = a + 16 | 0;i = c[l >> 2] | 0;h = a + 24 | 0;g = c[h >> 2] | 0;k = g + i | 0;g = i - g | 0;i = a + 20 | 0;j = c[i >> 2] | 0;a = a + 28 | 0;m = c[a >> 2] | 0;f = j - m | 0;j = m + j | 0;c[l >> 2] = (Z(j + k | 0, e) | 0) >> b;c[i >> 2] = (Z(k - j | 0, e) | 0) >> b;c[h >> 2] = (Z(f + g | 0, e) | 0) >> b;c[a >> 2] = (Z(g - f | 0, e) | 0) >> b;return;
	            }function Ja(a, b) {
	                a = a | 0;b = b | 0;var c = 0,
	                    d = 0;d = i;b = 1 << b + -1;if (!(b & a)) {
	                    c = b;b = 0;
	                } else {
	                    b = 0;i = d;return b | 0;
	                }do {
	                    b = b + 1 | 0;c = c >>> 1;
	                } while ((c | 0) != 0 & (c & a | 0) == 0);i = d;return b | 0;
	            }function Ka(a) {
	                a = a | 0;var b = 0,
	                    d = 0;d = i;b = 8 - (c[a + 8 >> 2] | 0) | 0;a = jb(a, b) | 0;if ((a | 0) == -1) {
	                    a = 1;i = d;return a | 0;
	                }a = (a | 0) != (c[400 + (b + -1 << 2) >> 2] | 0) & 1;i = d;return a | 0;
	            }function La(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0;d = i;f = c[a + 12 >> 2] << 3;e = c[a + 16 >> 2] | 0;b = f - e | 0;if ((f | 0) == (e | 0)) {
	                    a = 0;i = d;return a | 0;
	                }if (b >>> 0 > 8) {
	                    a = 1;i = d;return a | 0;
	                } else {
	                    a = ((kb(a) | 0) >>> (32 - b | 0) | 0) != (1 << b + -1 | 0) & 1;i = d;return a | 0;
	                }return 0;
	            }function Ma(a, b, d) {
	                a = a | 0;b = b | 0;d = d | 0;var e = 0,
	                    f = 0;f = i;e = c[a + (d << 2) >> 2] | 0;do {
	                    d = d + 1 | 0;if (d >>> 0 >= b >>> 0) break;
	                } while ((c[a + (d << 2) >> 2] | 0) != (e | 0));i = f;return ((d | 0) == (b | 0) ? 0 : d) | 0;
	            }function Na(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0;e = c[a + 4 >> 2] | 0;f = (b >>> 0) % (e >>> 0) | 0;d = b - f | 0;b = Z(c[a + 8 >> 2] | 0, e) | 0;e = c[a >> 2] | 0;c[a + 12 >> 2] = e + ((d << 8) + (f << 4));d = (f << 3) + (b << 8) + (d << 6) | 0;c[a + 16 >> 2] = e + d;c[a + 20 >> 2] = e + (d + (b << 6));return;
	            }function Oa(a, b, c) {
	                a = a | 0;b = b | 0;c = c | 0;if ((c | 0) >= (a | 0)) a = (c | 0) > (b | 0) ? b : c;return a | 0;
	            }function Pa(b, e, f, g) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0;s = i;a: do if (((e >>> 0 > 3 ? (a[b >> 0] | 0) == 0 : 0) ? (a[b + 1 >> 0] | 0) == 0 : 0) ? (h = a[b + 2 >> 0] | 0, (h & 255) < 2) : 0) {
	                    b: do if ((e | 0) != 3) {
	                        p = -3;q = 3;k = b + 3 | 0;j = 2;while (1) {
	                            if (h << 24 >> 24) {
	                                if (h << 24 >> 24 == 1 & j >>> 0 > 1) {
	                                    o = q;h = 0;m = 0;l = 0;break;
	                                } else j = 0;
	                            } else j = j + 1 | 0;l = q + 1 | 0;if ((l | 0) == (e | 0)) break b;h = a[k >> 0] | 0;p = ~q;q = l;k = k + 1 | 0;
	                        }while (1) {
	                            r = a[k >> 0] | 0;n = o + 1 | 0;j = r << 24 >> 24 != 0;l = (j & 1 ^ 1) + l | 0;h = r << 24 >> 24 == 3 & (l | 0) == 2 ? 1 : h;if (r << 24 >> 24 == 1 & l >>> 0 > 1) {
	                                r = 14;break;
	                            }if (j) {
	                                m = l >>> 0 > 2 ? 1 : m;l = 0;
	                            }if ((n | 0) == (e | 0)) {
	                                r = 18;break;
	                            } else {
	                                o = n;k = k + 1 | 0;
	                            }
	                        }if ((r | 0) == 14) {
	                            n = p + o - l | 0;c[f + 12 >> 2] = n;j = q;l = l - (l >>> 0 < 3 ? l : 3) | 0;break a;
	                        } else if ((r | 0) == 18) {
	                            n = p + e - l | 0;c[f + 12 >> 2] = n;j = q;break a;
	                        }
	                    } while (0);c[g >> 2] = e;q = 1;i = s;return q | 0;
	                } else r = 19; while (0);if ((r | 0) == 19) {
	                    c[f + 12 >> 2] = e;n = e;h = 1;j = 0;m = 0;l = 0;
	                }k = b + j | 0;c[f >> 2] = k;c[f + 4 >> 2] = k;c[f + 8 >> 2] = 0;c[f + 16 >> 2] = 0;o = f + 12 | 0;c[g >> 2] = l + j + n;if (m) {
	                    q = 1;i = s;return q | 0;
	                }if (!h) {
	                    q = 0;i = s;return q | 0;
	                }l = c[o >> 2] | 0;h = k;m = k;j = 0;c: while (1) {
	                    while (1) {
	                        q = l;l = l + -1 | 0;if (!q) {
	                            r = 31;break c;
	                        }k = a[h >> 0] | 0;if ((j | 0) != 2) break;if (k << 24 >> 24 != 3) {
	                            r = 29;break;
	                        }if (!l) {
	                            h = 1;r = 32;break c;
	                        }h = h + 1 | 0;if ((d[h >> 0] | 0) > 3) {
	                            h = 1;r = 32;break c;
	                        } else j = 0;
	                    }if ((r | 0) == 29) {
	                        r = 0;if ((k & 255) < 3) {
	                            h = 1;r = 32;break;
	                        } else j = 2;
	                    }a[m >> 0] = k;h = h + 1 | 0;m = m + 1 | 0;j = k << 24 >> 24 == 0 ? j + 1 | 0 : 0;
	                }if ((r | 0) == 31) {
	                    c[o >> 2] = m - h + (c[o >> 2] | 0);q = 0;i = s;return q | 0;
	                } else if ((r | 0) == 32) {
	                    i = s;return h | 0;
	                }return 0;
	            }function Qa(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0;o = i;i = i + 16 | 0;n = o;id(b, 0, 92);f = jb(a, 8) | 0;a: do if ((((f | 0) != -1 ? (c[b >> 2] = f, jb(a, 1) | 0, jb(a, 1) | 0, (jb(a, 1) | 0) != -1) : 0) ? (jb(a, 5) | 0) != -1 : 0) ? (e = jb(a, 8) | 0, (e | 0) != -1) : 0) {
	                    m = b + 4 | 0;c[m >> 2] = e;f = b + 8 | 0;d = nb(a, f) | 0;if (!d) if ((c[f >> 2] | 0) >>> 0 <= 31) {
	                        d = nb(a, n) | 0;if (!d) {
	                            f = c[n >> 2] | 0;if (f >>> 0 <= 12) {
	                                c[b + 12 >> 2] = 1 << f + 4;d = nb(a, n) | 0;if (!d) {
	                                    f = c[n >> 2] | 0;if (f >>> 0 <= 2) {
	                                        c[b + 16 >> 2] = f;b: do if (!f) {
	                                            d = nb(a, n) | 0;if (d) break a;f = c[n >> 2] | 0;if (f >>> 0 > 12) {
	                                                d = 1;break a;
	                                            }c[b + 20 >> 2] = 1 << f + 4;
	                                        } else if ((f | 0) == 1) {
	                                            f = jb(a, 1) | 0;if ((f | 0) == -1) {
	                                                d = 1;break a;
	                                            }c[b + 24 >> 2] = (f | 0) == 1 & 1;d = ob(a, b + 28 | 0) | 0;if (d) break a;d = ob(a, b + 32 | 0) | 0;if (d) break a;h = b + 36 | 0;d = nb(a, h) | 0;if (d) break a;f = c[h >> 2] | 0;if (f >>> 0 > 255) {
	                                                d = 1;break a;
	                                            }if (!f) {
	                                                c[b + 40 >> 2] = 0;break;
	                                            }f = fd(f << 2) | 0;g = b + 40 | 0;c[g >> 2] = f;if (!f) {
	                                                d = 65535;break a;
	                                            }if (c[h >> 2] | 0) {
	                                                e = 0;while (1) {
	                                                    d = ob(a, f + (e << 2) | 0) | 0;e = e + 1 | 0;if (d) break a;if (e >>> 0 >= (c[h >> 2] | 0) >>> 0) break b;f = c[g >> 2] | 0;
	                                                }
	                                            }
	                                        } while (0);l = b + 44 | 0;d = nb(a, l) | 0;if (!d) if ((c[l >> 2] | 0) >>> 0 <= 16 ? (k = jb(a, 1) | 0, (k | 0) != -1) : 0) {
	                                            c[b + 48 >> 2] = (k | 0) == 1 & 1;d = nb(a, n) | 0;if (!d) {
	                                                e = b + 52 | 0;c[e >> 2] = (c[n >> 2] | 0) + 1;d = nb(a, n) | 0;if (!d) {
	                                                    k = b + 56 | 0;c[k >> 2] = (c[n >> 2] | 0) + 1;h = jb(a, 1) | 0;if ((!((h | 0) == 0 | (h | 0) == -1) ? (jb(a, 1) | 0) != -1 : 0) ? (j = jb(a, 1) | 0, (j | 0) != -1) : 0) {
	                                                        j = (j | 0) == 1;c[b + 60 >> 2] = j & 1;if (j) {
	                                                            j = b + 64 | 0;d = nb(a, j) | 0;if (d) break;f = b + 68 | 0;d = nb(a, f) | 0;if (d) break;h = b + 72 | 0;d = nb(a, h) | 0;if (d) break;g = b + 76 | 0;d = nb(a, g) | 0;if (d) break;e = c[e >> 2] | 0;if ((c[j >> 2] | 0) > ((e << 3) + ~c[f >> 2] | 0)) {
	                                                                d = 1;break;
	                                                            }f = c[k >> 2] | 0;if ((c[h >> 2] | 0) > ((f << 3) + ~c[g >> 2] | 0)) {
	                                                                d = 1;break;
	                                                            }
	                                                        } else {
	                                                            e = c[e >> 2] | 0;f = c[k >> 2] | 0;
	                                                        }d = Z(f, e) | 0;do switch (c[m >> 2] | 0) {case 11:
	                                                                {
	                                                                    f = 396;e = 345600;g = 58;break;
	                                                                }case 12:
	                                                                {
	                                                                    f = 396;e = 912384;g = 58;break;
	                                                                }case 13:
	                                                                {
	                                                                    f = 396;e = 912384;g = 58;break;
	                                                                }case 20:
	                                                                {
	                                                                    f = 396;e = 912384;g = 58;break;
	                                                                }case 21:
	                                                                {
	                                                                    f = 792;e = 1824768;g = 58;break;
	                                                                }case 22:
	                                                                {
	                                                                    f = 1620;e = 3110400;g = 58;break;
	                                                                }case 30:
	                                                                {
	                                                                    f = 1620;e = 3110400;g = 58;break;
	                                                                }case 31:
	                                                                {
	                                                                    f = 3600;e = 6912e3;g = 58;break;
	                                                                }case 32:
	                                                                {
	                                                                    f = 5120;e = 7864320;g = 58;break;
	                                                                }case 40:
	                                                                {
	                                                                    f = 8192;e = 12582912;g = 58;break;
	                                                                }case 41:
	                                                                {
	                                                                    f = 8192;e = 12582912;g = 58;break;
	                                                                }case 42:
	                                                                {
	                                                                    f = 8704;e = 13369344;g = 58;break;
	                                                                }case 50:
	                                                                {
	                                                                    f = 22080;e = 42393600;g = 58;break;
	                                                                }case 51:
	                                                                {
	                                                                    f = 36864;e = 70778880;g = 58;break;
	                                                                }case 10:
	                                                                {
	                                                                    f = 99;e = 152064;g = 58;break;
	                                                                }default:
	                                                                g = 60;} while (0);do if ((g | 0) == 58) {
	                                                            if (f >>> 0 < d >>> 0) {
	                                                                g = 60;break;
	                                                            }e = (e >>> 0) / ((d * 384 | 0) >>> 0) | 0;e = e >>> 0 < 16 ? e : 16;c[n >> 2] = e;f = c[l >> 2] | 0;if (f >>> 0 > e >>> 0) {
	                                                                e = f;g = 61;
	                                                            }
	                                                        } while (0);if ((g | 0) == 60) {
	                                                            c[n >> 2] = 2147483647;e = c[l >> 2] | 0;g = 61;
	                                                        }if ((g | 0) == 61) c[n >> 2] = e;g = b + 88 | 0;c[g >> 2] = e;e = jb(a, 1) | 0;if ((e | 0) == -1) {
	                                                            d = 1;break;
	                                                        }n = (e | 0) == 1;c[b + 80 >> 2] = n & 1;do if (n) {
	                                                            e = fd(952) | 0;f = b + 84 | 0;c[f >> 2] = e;if (!e) {
	                                                                d = 65535;break a;
	                                                            }d = Ec(a, e) | 0;if (d) break a;d = c[f >> 2] | 0;if (!(c[d + 920 >> 2] | 0)) break;e = c[d + 948 >> 2] | 0;if ((c[d + 944 >> 2] | 0) >>> 0 > e >>> 0) {
	                                                                d = 1;break a;
	                                                            }if (e >>> 0 < (c[l >> 2] | 0) >>> 0) {
	                                                                d = 1;break a;
	                                                            }if (e >>> 0 > (c[g >> 2] | 0) >>> 0) {
	                                                                d = 1;break a;
	                                                            }c[g >> 2] = (e | 0) == 0 ? 1 : e;
	                                                        } while (0);Ka(a) | 0;d = 0;
	                                                    } else d = 1;
	                                                }
	                                            }
	                                        } else d = 1;
	                                    } else d = 1;
	                                }
	                            } else d = 1;
	                        }
	                    } else d = 1;
	                } else d = 1; while (0);i = o;return d | 0;
	            }function Ra(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0;j = i;if ((c[a >> 2] | 0) != (c[b >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }if ((c[a + 4 >> 2] | 0) != (c[b + 4 >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }if ((c[a + 12 >> 2] | 0) != (c[b + 12 >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }d = c[a + 16 >> 2] | 0;if ((d | 0) != (c[b + 16 >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }if ((c[a + 44 >> 2] | 0) != (c[b + 44 >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }if ((c[a + 48 >> 2] | 0) != (c[b + 48 >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }if ((c[a + 52 >> 2] | 0) != (c[b + 52 >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }if ((c[a + 56 >> 2] | 0) != (c[b + 56 >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }h = c[a + 60 >> 2] | 0;if ((h | 0) != (c[b + 60 >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }if ((c[a + 80 >> 2] | 0) != (c[b + 80 >> 2] | 0)) {
	                    d = 1;i = j;return d | 0;
	                }a: do if (!d) {
	                    if ((c[a + 20 >> 2] | 0) != (c[b + 20 >> 2] | 0)) {
	                        d = 1;i = j;return d | 0;
	                    }
	                } else if ((d | 0) == 1) {
	                    if ((c[a + 24 >> 2] | 0) != (c[b + 24 >> 2] | 0)) {
	                        d = 1;i = j;return d | 0;
	                    }if ((c[a + 28 >> 2] | 0) != (c[b + 28 >> 2] | 0)) {
	                        d = 1;i = j;return d | 0;
	                    }if ((c[a + 32 >> 2] | 0) != (c[b + 32 >> 2] | 0)) {
	                        d = 1;i = j;return d | 0;
	                    }d = c[a + 36 >> 2] | 0;if ((d | 0) != (c[b + 36 >> 2] | 0)) {
	                        d = 1;i = j;return d | 0;
	                    }if (d) {
	                        e = c[a + 40 >> 2] | 0;f = c[b + 40 >> 2] | 0;g = 0;while (1) {
	                            if ((c[e + (g << 2) >> 2] | 0) != (c[f + (g << 2) >> 2] | 0)) {
	                                d = 1;break;
	                            }g = g + 1 | 0;if (g >>> 0 >= d >>> 0) break a;
	                        }i = j;return d | 0;
	                    }
	                } while (0);if (h) {
	                    if ((c[a + 64 >> 2] | 0) != (c[b + 64 >> 2] | 0)) {
	                        d = 1;i = j;return d | 0;
	                    }if ((c[a + 68 >> 2] | 0) != (c[b + 68 >> 2] | 0)) {
	                        d = 1;i = j;return d | 0;
	                    }if ((c[a + 72 >> 2] | 0) != (c[b + 72 >> 2] | 0)) {
	                        d = 1;i = j;return d | 0;
	                    }if ((c[a + 76 >> 2] | 0) != (c[b + 76 >> 2] | 0)) {
	                        d = 1;i = j;return d | 0;
	                    }
	                }d = 0;i = j;return d | 0;
	            }function Sa(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0;l = i;i = i + 16 | 0;j = l + 4 | 0;k = l;id(b, 0, 72);d = nb(a, b) | 0;if (d) {
	                    i = l;return d | 0;
	                }if ((c[b >> 2] | 0) >>> 0 > 255) {
	                    d = 1;i = l;return d | 0;
	                }e = b + 4 | 0;d = nb(a, e) | 0;if (d) {
	                    i = l;return d | 0;
	                }if ((c[e >> 2] | 0) >>> 0 > 31) {
	                    d = 1;i = l;return d | 0;
	                }if (jb(a, 1) | 0) {
	                    d = 1;i = l;return d | 0;
	                }d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    d = 1;i = l;return d | 0;
	                }c[b + 8 >> 2] = (d | 0) == 1 & 1;d = nb(a, j) | 0;if (d) {
	                    i = l;return d | 0;
	                }d = (c[j >> 2] | 0) + 1 | 0;h = b + 12 | 0;c[h >> 2] = d;if (d >>> 0 > 8) {
	                    d = 1;i = l;return d | 0;
	                }a: do if (d >>> 0 > 1) {
	                    d = b + 16 | 0;e = nb(a, d) | 0;if (e) {
	                        d = e;i = l;return d | 0;
	                    }d = c[d >> 2] | 0;if (d >>> 0 > 6) {
	                        d = 1;i = l;return d | 0;
	                    }switch (d | 0) {case 5:case 4:case 3:
	                            {
	                                d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                                    d = 1;i = l;return d | 0;
	                                }c[b + 32 >> 2] = (d | 0) == 1 & 1;d = nb(a, j) | 0;if (!d) {
	                                    c[b + 36 >> 2] = (c[j >> 2] | 0) + 1;break a;
	                                } else {
	                                    i = l;return d | 0;
	                                }
	                            }case 0:
	                            {
	                                d = fd(c[h >> 2] << 2) | 0;f = b + 20 | 0;c[f >> 2] = d;if (!d) {
	                                    d = 65535;i = l;return d | 0;
	                                }if (!(c[h >> 2] | 0)) break a;else e = 0;while (1) {
	                                    d = nb(a, j) | 0;if (d) break;c[(c[f >> 2] | 0) + (e << 2) >> 2] = (c[j >> 2] | 0) + 1;e = e + 1 | 0;if (e >>> 0 >= (c[h >> 2] | 0) >>> 0) break a;
	                                }i = l;return d | 0;
	                            }case 2:
	                            {
	                                e = b + 24 | 0;c[e >> 2] = fd((c[h >> 2] << 2) + -4 | 0) | 0;d = fd((c[h >> 2] << 2) + -4 | 0) | 0;g = b + 28 | 0;c[g >> 2] = d;if ((c[e >> 2] | 0) == 0 | (d | 0) == 0) {
	                                    d = 65535;i = l;return d | 0;
	                                }if ((c[h >> 2] | 0) == 1) break a;else f = 0;while (1) {
	                                    d = nb(a, j) | 0;if (d) {
	                                        e = 46;break;
	                                    }c[(c[e >> 2] | 0) + (f << 2) >> 2] = c[j >> 2];d = nb(a, j) | 0;if (d) {
	                                        e = 46;break;
	                                    }c[(c[g >> 2] | 0) + (f << 2) >> 2] = c[j >> 2];f = f + 1 | 0;if (f >>> 0 >= ((c[h >> 2] | 0) + -1 | 0) >>> 0) break a;
	                                }if ((e | 0) == 46) {
	                                    i = l;return d | 0;
	                                }break;
	                            }case 6:
	                            {
	                                d = nb(a, j) | 0;if (d) {
	                                    i = l;return d | 0;
	                                }e = (c[j >> 2] | 0) + 1 | 0;d = b + 40 | 0;c[d >> 2] = e;e = fd(e << 2) | 0;g = b + 44 | 0;c[g >> 2] = e;if (!e) {
	                                    d = 65535;i = l;return d | 0;
	                                }f = c[432 + ((c[h >> 2] | 0) + -1 << 2) >> 2] | 0;if (!(c[d >> 2] | 0)) break a;else e = 0;while (1) {
	                                    m = jb(a, f) | 0;c[(c[g >> 2] | 0) + (e << 2) >> 2] = m;e = e + 1 | 0;if (m >>> 0 >= (c[h >> 2] | 0) >>> 0) {
	                                        d = 1;break;
	                                    }if (e >>> 0 >= (c[d >> 2] | 0) >>> 0) break a;
	                                }i = l;return d | 0;
	                            }default:
	                            break a;}
	                } while (0);d = nb(a, j) | 0;if (d) {
	                    a = d;i = l;return a | 0;
	                }d = c[j >> 2] | 0;if (d >>> 0 > 31) {
	                    a = 1;i = l;return a | 0;
	                }c[b + 48 >> 2] = d + 1;d = nb(a, j) | 0;if (d) {
	                    a = d;i = l;return a | 0;
	                }if ((c[j >> 2] | 0) >>> 0 > 31) {
	                    a = 1;i = l;return a | 0;
	                }if (jb(a, 1) | 0) {
	                    a = 1;i = l;return a | 0;
	                }if ((jb(a, 2) | 0) >>> 0 > 2) {
	                    a = 1;i = l;return a | 0;
	                }d = ob(a, k) | 0;if (d) {
	                    a = d;i = l;return a | 0;
	                }d = (c[k >> 2] | 0) + 26 | 0;if (d >>> 0 > 51) {
	                    a = 1;i = l;return a | 0;
	                }c[b + 52 >> 2] = d;d = ob(a, k) | 0;if (d) {
	                    a = d;i = l;return a | 0;
	                }if (((c[k >> 2] | 0) + 26 | 0) >>> 0 > 51) {
	                    a = 1;i = l;return a | 0;
	                }d = ob(a, k) | 0;if (d) {
	                    a = d;i = l;return a | 0;
	                }d = c[k >> 2] | 0;if ((d + 12 | 0) >>> 0 > 24) {
	                    a = 1;i = l;return a | 0;
	                }c[b + 56 >> 2] = d;d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    a = 1;i = l;return a | 0;
	                }c[b + 60 >> 2] = (d | 0) == 1 & 1;d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    a = 1;i = l;return a | 0;
	                }c[b + 64 >> 2] = (d | 0) == 1 & 1;d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    a = 1;i = l;return a | 0;
	                }c[b + 68 >> 2] = (d | 0) == 1 & 1;Ka(a) | 0;a = 0;i = l;return a | 0;
	            }function Ta(a, b, d, e, f) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0;w = i;i = i + 32 | 0;s = w + 20 | 0;q = w + 16 | 0;o = w + 12 | 0;l = w + 8 | 0;v = w + 4 | 0;t = w;id(b, 0, 988);u = Z(c[d + 56 >> 2] | 0, c[d + 52 >> 2] | 0) | 0;k = nb(a, v) | 0;if (k) {
	                    f = k;i = w;return f | 0;
	                }n = c[v >> 2] | 0;c[b >> 2] = n;if (n >>> 0 >= u >>> 0) {
	                    f = 1;i = w;return f | 0;
	                }k = nb(a, v) | 0;if (k) {
	                    f = k;i = w;return f | 0;
	                }k = c[v >> 2] | 0;m = b + 4 | 0;c[m >> 2] = k;if ((k | 0) == 5 | (k | 0) == 0) j = 5;else if (!((k | 0) == 7 | (k | 0) == 2)) {
	                    f = 1;i = w;return f | 0;
	                }if ((j | 0) == 5) {
	                    if ((c[f >> 2] | 0) == 5) {
	                        f = 1;i = w;return f | 0;
	                    }if (!(c[d + 44 >> 2] | 0)) {
	                        f = 1;i = w;return f | 0;
	                    }
	                }k = nb(a, v) | 0;if (k) {
	                    f = k;i = w;return f | 0;
	                }n = c[v >> 2] | 0;c[b + 8 >> 2] = n;if ((n | 0) != (c[e >> 2] | 0)) {
	                    f = 1;i = w;return f | 0;
	                }n = d + 12 | 0;k = c[n >> 2] | 0;j = 0;while (1) if (!(k >>> j)) break;else j = j + 1 | 0;k = jb(a, j + -1 | 0) | 0;if ((k | 0) == -1) {
	                    f = 1;i = w;return f | 0;
	                }j = (c[f >> 2] | 0) == 5;if (j & (k | 0) != 0) {
	                    f = 1;i = w;return f | 0;
	                }c[b + 12 >> 2] = k;if (j) {
	                    k = nb(a, v) | 0;if (k) {
	                        f = k;i = w;return f | 0;
	                    }k = c[v >> 2] | 0;c[b + 16 >> 2] = k;if (k >>> 0 > 65535) {
	                        f = 1;i = w;return f | 0;
	                    }
	                }g = d + 16 | 0;k = c[g >> 2] | 0;if (!k) {
	                    h = d + 20 | 0;k = c[h >> 2] | 0;j = 0;while (1) if (!(k >>> j)) break;else j = j + 1 | 0;k = jb(a, j + -1 | 0) | 0;if ((k | 0) == -1) {
	                        f = 1;i = w;return f | 0;
	                    }j = b + 20 | 0;c[j >> 2] = k;do if (c[e + 8 >> 2] | 0) {
	                        k = ob(a, t) | 0;if (!k) {
	                            c[b + 24 >> 2] = c[t >> 2];break;
	                        } else {
	                            f = k;i = w;return f | 0;
	                        }
	                    } while (0);if ((c[f >> 2] | 0) == 5) {
	                        k = c[j >> 2] | 0;if (k >>> 0 > (c[h >> 2] | 0) >>> 1 >>> 0) {
	                            f = 1;i = w;return f | 0;
	                        }j = c[b + 24 >> 2] | 0;if ((k | 0) != (((j | 0) > 0 ? 0 : 0 - j | 0) | 0)) {
	                            f = 1;i = w;return f | 0;
	                        }
	                    }k = c[g >> 2] | 0;
	                }if ((k | 0) == 1 ? (c[d + 24 >> 2] | 0) == 0 : 0) {
	                    k = ob(a, t) | 0;if (k) {
	                        f = k;i = w;return f | 0;
	                    }k = b + 28 | 0;c[k >> 2] = c[t >> 2];do if (c[e + 8 >> 2] | 0) {
	                        j = ob(a, t) | 0;if (!j) {
	                            c[b + 32 >> 2] = c[t >> 2];break;
	                        } else {
	                            f = j;i = w;return f | 0;
	                        }
	                    } while (0);if ((c[f >> 2] | 0) == 5 ? (j = c[k >> 2] | 0, k = (c[d + 32 >> 2] | 0) + j + (c[b + 32 >> 2] | 0) | 0, (((j | 0) < (k | 0) ? j : k) | 0) != 0) : 0) {
	                        f = 1;i = w;return f | 0;
	                    }
	                }if (c[e + 68 >> 2] | 0) {
	                    k = nb(a, v) | 0;if (k) {
	                        f = k;i = w;return f | 0;
	                    }k = c[v >> 2] | 0;c[b + 36 >> 2] = k;if (k >>> 0 > 127) {
	                        f = 1;i = w;return f | 0;
	                    }
	                }k = c[m >> 2] | 0;if ((k | 0) == 5 | (k | 0) == 0) {
	                    k = jb(a, 1) | 0;if ((k | 0) == -1) {
	                        f = 1;i = w;return f | 0;
	                    }c[b + 40 >> 2] = k;do if (!k) {
	                        k = c[e + 48 >> 2] | 0;if (k >>> 0 > 16) {
	                            f = 1;i = w;return f | 0;
	                        } else {
	                            c[b + 44 >> 2] = k;break;
	                        }
	                    } else {
	                        k = nb(a, v) | 0;if (k) {
	                            f = k;i = w;return f | 0;
	                        }k = c[v >> 2] | 0;if (k >>> 0 > 15) {
	                            f = 1;i = w;return f | 0;
	                        } else {
	                            c[b + 44 >> 2] = k + 1;break;
	                        }
	                    } while (0);k = c[m >> 2] | 0;
	                }do if ((k | 0) == 5 | (k | 0) == 0) {
	                    g = c[b + 44 >> 2] | 0;j = c[n >> 2] | 0;k = jb(a, 1) | 0;if ((k | 0) == -1) {
	                        f = 1;i = w;return f | 0;
	                    }c[b + 68 >> 2] = k;if (k) {
	                        h = 0;a: while (1) {
	                            if (h >>> 0 > g >>> 0) {
	                                r = 1;j = 110;break;
	                            }k = nb(a, l) | 0;if (k) {
	                                r = k;j = 110;break;
	                            }k = c[l >> 2] | 0;if (k >>> 0 > 3) {
	                                r = 1;j = 110;break;
	                            }c[b + (h * 12 | 0) + 72 >> 2] = k;do if (k >>> 0 < 2) {
	                                k = nb(a, o) | 0;if (k) {
	                                    r = k;j = 110;break a;
	                                }k = c[o >> 2] | 0;if (k >>> 0 >= j >>> 0) {
	                                    r = 1;j = 110;break a;
	                                }c[b + (h * 12 | 0) + 76 >> 2] = k + 1;
	                            } else {
	                                if ((k | 0) != 2) break;k = nb(a, o) | 0;if (k) {
	                                    r = k;j = 110;break a;
	                                }c[b + (h * 12 | 0) + 80 >> 2] = c[o >> 2];
	                            } while (0);if ((c[l >> 2] | 0) == 3) {
	                                j = 61;break;
	                            } else h = h + 1 | 0;
	                        }if ((j | 0) == 61) {
	                            if (!h) r = 1;else break;i = w;return r | 0;
	                        } else if ((j | 0) == 110) {
	                            i = w;return r | 0;
	                        }
	                    }
	                } while (0);do if (c[f + 4 >> 2] | 0) {
	                    n = c[d + 44 >> 2] | 0;f = (c[f >> 2] | 0) == 5;k = jb(a, 1) | 0;j = (k | 0) == -1;if (f) {
	                        if (j) {
	                            f = 1;i = w;return f | 0;
	                        }c[b + 276 >> 2] = k;g = jb(a, 1) | 0;if ((g | 0) == -1) {
	                            f = 1;i = w;return f | 0;
	                        }c[b + 280 >> 2] = g;if ((n | 0) != 0 | (g | 0) == 0) break;else r = 1;i = w;return r | 0;
	                    }if (j) {
	                        f = 1;i = w;return f | 0;
	                    }c[b + 284 >> 2] = k;if (k) {
	                        j = (n << 1) + 2 | 0;h = 0;d = 0;g = 0;l = 0;m = 0;while (1) {
	                            if (h >>> 0 > j >>> 0) {
	                                r = 1;j = 110;break;
	                            }k = nb(a, q) | 0;if (k) {
	                                r = k;j = 110;break;
	                            }k = c[q >> 2] | 0;if (k >>> 0 > 6) {
	                                r = 1;j = 110;break;
	                            }c[b + (h * 20 | 0) + 288 >> 2] = k;if ((k & -3 | 0) == 1) {
	                                k = nb(a, s) | 0;if (k) {
	                                    r = k;j = 110;break;
	                                }c[b + (h * 20 | 0) + 292 >> 2] = (c[s >> 2] | 0) + 1;k = c[q >> 2] | 0;
	                            }if ((k | 0) == 2) {
	                                k = nb(a, s) | 0;if (k) {
	                                    r = k;j = 110;break;
	                                }c[b + (h * 20 | 0) + 296 >> 2] = c[s >> 2];k = c[q >> 2] | 0;
	                            }if ((k | 0) == 3 | (k | 0) == 6) {
	                                k = nb(a, s) | 0;if (k) {
	                                    r = k;j = 110;break;
	                                }c[b + (h * 20 | 0) + 300 >> 2] = c[s >> 2];k = c[q >> 2] | 0;
	                            }if ((k | 0) == 4) {
	                                k = nb(a, s) | 0;if (k) {
	                                    r = k;j = 110;break;
	                                }k = c[s >> 2] | 0;if (k >>> 0 > n >>> 0) {
	                                    r = 1;j = 110;break;
	                                }if (!k) c[b + (h * 20 | 0) + 304 >> 2] = 65535;else c[b + (h * 20 | 0) + 304 >> 2] = k + -1;k = c[q >> 2] | 0;p = g + 1 | 0;
	                            } else p = g;l = ((k | 0) == 5 & 1) + l | 0;d = ((k | 0) != 0 & k >>> 0 < 4 & 1) + d | 0;m = ((k | 0) == 6 & 1) + m | 0;if (!k) {
	                                j = 90;break;
	                            } else {
	                                h = h + 1 | 0;g = p;
	                            }
	                        }if ((j | 0) == 90) {
	                            if (p >>> 0 > 1 | l >>> 0 > 1 | m >>> 0 > 1) {
	                                f = 1;i = w;return f | 0;
	                            }if ((d | 0) != 0 & (l | 0) != 0) r = 1;else break;i = w;return r | 0;
	                        } else if ((j | 0) == 110) {
	                            i = w;return r | 0;
	                        }
	                    }
	                } while (0);g = ob(a, t) | 0;if (g) {
	                    f = g;i = w;return f | 0;
	                }f = c[t >> 2] | 0;c[b + 48 >> 2] = f;f = f + (c[e + 52 >> 2] | 0) | 0;c[t >> 2] = f;if (f >>> 0 > 51) {
	                    f = 1;i = w;return f | 0;
	                }do if (c[e + 60 >> 2] | 0) {
	                    g = nb(a, v) | 0;if (g) {
	                        f = g;i = w;return f | 0;
	                    }g = c[v >> 2] | 0;c[b + 52 >> 2] = g;if (g >>> 0 > 2) {
	                        f = 1;i = w;return f | 0;
	                    }if ((g | 0) == 1) break;g = ob(a, t) | 0;if (g) {
	                        f = g;i = w;return f | 0;
	                    }g = c[t >> 2] | 0;if ((g + 6 | 0) >>> 0 > 12) {
	                        f = 1;i = w;return f | 0;
	                    }c[b + 56 >> 2] = g << 1;g = ob(a, t) | 0;if (g) {
	                        f = g;i = w;return f | 0;
	                    }g = c[t >> 2] | 0;if ((g + 6 | 0) >>> 0 > 12) {
	                        f = 1;i = w;return f | 0;
	                    } else {
	                        c[b + 60 >> 2] = g << 1;break;
	                    }
	                } while (0);do if ((c[e + 12 >> 2] | 0) >>> 0 > 1 ? ((c[e + 16 >> 2] | 0) + -3 | 0) >>> 0 < 3 : 0) {
	                    k = e + 36 | 0;j = c[k >> 2] | 0;j = (((u >>> 0) % (j >>> 0) | 0 | 0) == 0 ? 1 : 2) + ((u >>> 0) / (j >>> 0) | 0) | 0;h = 0;while (1) {
	                        g = h + 1 | 0;if (!(-1 << g & j)) break;else h = g;
	                    }g = jb(a, ((1 << h) + -1 & j | 0) == 0 ? h : g) | 0;c[v >> 2] = g;if ((g | 0) == -1) {
	                        f = 1;i = w;return f | 0;
	                    }c[b + 64 >> 2] = g;f = c[k >> 2] | 0;if (g >>> 0 > (((u + -1 + f | 0) >>> 0) / (f >>> 0) | 0) >>> 0) r = 1;else break;i = w;return r | 0;
	                } while (0);f = 0;i = w;return f | 0;
	            }function Ua(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0;f = i;i = i + 32 | 0;e = f + 20 | 0;d = f;c[d + 0 >> 2] = c[a + 0 >> 2];c[d + 4 >> 2] = c[a + 4 >> 2];c[d + 8 >> 2] = c[a + 8 >> 2];c[d + 12 >> 2] = c[a + 12 >> 2];c[d + 16 >> 2] = c[a + 16 >> 2];a = nb(d, e) | 0;if (!a) {
	                    a = nb(d, e) | 0;if (!a) {
	                        a = nb(d, e) | 0;if (!a) {
	                            a = c[e >> 2] | 0;if (a >>> 0 > 255) a = 1;else {
	                                c[b >> 2] = a;a = 0;
	                            }
	                        }
	                    }
	                }i = f;return a | 0;
	            }function Va(a, b, d) {
	                a = a | 0;b = b | 0;d = d | 0;var e = 0,
	                    f = 0,
	                    g = 0;g = i;i = i + 32 | 0;e = g + 20 | 0;f = g;c[f + 0 >> 2] = c[a + 0 >> 2];c[f + 4 >> 2] = c[a + 4 >> 2];c[f + 8 >> 2] = c[a + 8 >> 2];c[f + 12 >> 2] = c[a + 12 >> 2];c[f + 16 >> 2] = c[a + 16 >> 2];a = nb(f, e) | 0;if (a) {
	                    i = g;return a | 0;
	                }a = nb(f, e) | 0;if (a) {
	                    i = g;return a | 0;
	                }a = nb(f, e) | 0;if (!a) a = 0;else {
	                    i = g;return a | 0;
	                }while (1) if (!(b >>> a)) break;else a = a + 1 | 0;a = jb(f, a + -1 | 0) | 0;if ((a | 0) == -1) {
	                    a = 1;i = g;return a | 0;
	                }c[d >> 2] = a;a = 0;i = g;return a | 0;
	            }function Wa(a, b, d, e) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
	                    g = 0,
	                    h = 0;h = i;i = i + 32 | 0;f = h + 20 | 0;g = h;if ((d | 0) != 5) {
	                    d = 1;i = h;return d | 0;
	                };c[g + 0 >> 2] = c[a + 0 >> 2];c[g + 4 >> 2] = c[a + 4 >> 2];c[g + 8 >> 2] = c[a + 8 >> 2];c[g + 12 >> 2] = c[a + 12 >> 2];c[g + 16 >> 2] = c[a + 16 >> 2];d = nb(g, f) | 0;if (d) {
	                    i = h;return d | 0;
	                }d = nb(g, f) | 0;if (d) {
	                    i = h;return d | 0;
	                }d = nb(g, f) | 0;if (!d) d = 0;else {
	                    i = h;return d | 0;
	                }while (1) if (!(b >>> d)) break;else d = d + 1 | 0;if ((jb(g, d + -1 | 0) | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }d = nb(g, e) | 0;i = h;return d | 0;
	            }function Xa(a, b, d, e) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0;k = i;i = i + 32 | 0;h = k + 20 | 0;j = k;c[j + 0 >> 2] = c[a + 0 >> 2];c[j + 4 >> 2] = c[a + 4 >> 2];c[j + 8 >> 2] = c[a + 8 >> 2];c[j + 12 >> 2] = c[a + 12 >> 2];c[j + 16 >> 2] = c[a + 16 >> 2];a = nb(j, h) | 0;if (a) {
	                    f = a;i = k;return f | 0;
	                }a = nb(j, h) | 0;if (a) {
	                    f = a;i = k;return f | 0;
	                }a = nb(j, h) | 0;if (a) {
	                    f = a;i = k;return f | 0;
	                }a = c[b + 12 >> 2] | 0;f = 0;while (1) if (!(a >>> f)) break;else f = f + 1 | 0;if ((jb(j, f + -1 | 0) | 0) == -1) {
	                    f = 1;i = k;return f | 0;
	                }if ((d | 0) == 5 ? (g = nb(j, h) | 0, (g | 0) != 0) : 0) {
	                    f = g;i = k;return f | 0;
	                }f = c[b + 20 >> 2] | 0;a = 0;while (1) if (!(f >>> a)) break;else a = a + 1 | 0;f = jb(j, a + -1 | 0) | 0;if ((f | 0) == -1) {
	                    f = 1;i = k;return f | 0;
	                }c[e >> 2] = f;f = 0;i = k;return f | 0;
	            }function Ya(a, b, d, e) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0;k = i;i = i + 32 | 0;h = k + 20 | 0;j = k;c[j + 0 >> 2] = c[a + 0 >> 2];c[j + 4 >> 2] = c[a + 4 >> 2];c[j + 8 >> 2] = c[a + 8 >> 2];c[j + 12 >> 2] = c[a + 12 >> 2];c[j + 16 >> 2] = c[a + 16 >> 2];a = nb(j, h) | 0;if (a) {
	                    f = a;i = k;return f | 0;
	                }a = nb(j, h) | 0;if (a) {
	                    f = a;i = k;return f | 0;
	                }a = nb(j, h) | 0;if (a) {
	                    f = a;i = k;return f | 0;
	                }a = c[b + 12 >> 2] | 0;f = 0;while (1) if (!(a >>> f)) break;else f = f + 1 | 0;if ((jb(j, f + -1 | 0) | 0) == -1) {
	                    f = 1;i = k;return f | 0;
	                }if ((d | 0) == 5 ? (g = nb(j, h) | 0, (g | 0) != 0) : 0) {
	                    f = g;i = k;return f | 0;
	                }f = c[b + 20 >> 2] | 0;a = 0;while (1) if (!(f >>> a)) break;else a = a + 1 | 0;if ((jb(j, a + -1 | 0) | 0) == -1) {
	                    f = 1;i = k;return f | 0;
	                }f = ob(j, e) | 0;i = k;return f | 0;
	            }function Za(a, b, d, e, f) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0;m = i;i = i + 32 | 0;j = m + 20 | 0;l = m;c[l + 0 >> 2] = c[a + 0 >> 2];c[l + 4 >> 2] = c[a + 4 >> 2];c[l + 8 >> 2] = c[a + 8 >> 2];c[l + 12 >> 2] = c[a + 12 >> 2];c[l + 16 >> 2] = c[a + 16 >> 2];g = nb(l, j) | 0;if (g) {
	                    l = g;i = m;return l | 0;
	                }g = nb(l, j) | 0;if (g) {
	                    l = g;i = m;return l | 0;
	                }g = nb(l, j) | 0;if (g) {
	                    l = g;i = m;return l | 0;
	                }g = c[b + 12 >> 2] | 0;a = 0;while (1) if (!(g >>> a)) break;else a = a + 1 | 0;if ((jb(l, a + -1 | 0) | 0) == -1) {
	                    l = 1;i = m;return l | 0;
	                }if ((d | 0) == 5 ? (h = nb(l, j) | 0, (h | 0) != 0) : 0) {
	                    l = h;i = m;return l | 0;
	                }g = ob(l, f) | 0;if (g) {
	                    l = g;i = m;return l | 0;
	                }if ((e | 0) != 0 ? (k = ob(l, f + 4 | 0) | 0, (k | 0) != 0) : 0) {
	                    l = k;i = m;return l | 0;
	                }l = 0;i = m;return l | 0;
	            }function _a(a, b, d, e, f) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0;m = i;i = i + 32 | 0;l = m + 24 | 0;j = m + 20 | 0;k = m;c[k + 0 >> 2] = c[b + 0 >> 2];c[k + 4 >> 2] = c[b + 4 >> 2];c[k + 8 >> 2] = c[b + 8 >> 2];c[k + 12 >> 2] = c[b + 12 >> 2];c[k + 16 >> 2] = c[b + 16 >> 2];f = nb(k, l) | 0;if (f) {
	                    n = f;i = m;return n | 0;
	                }f = nb(k, l) | 0;if (f) {
	                    n = f;i = m;return n | 0;
	                }f = nb(k, l) | 0;if (f) {
	                    n = f;i = m;return n | 0;
	                }f = c[d + 12 >> 2] | 0;b = 0;while (1) if (!(f >>> b)) break;else b = b + 1 | 0;if ((jb(k, b + -1 | 0) | 0) == -1) {
	                    n = 1;i = m;return n | 0;
	                }f = nb(k, l) | 0;if (f) {
	                    n = f;i = m;return n | 0;
	                }g = d + 16 | 0;f = c[g >> 2] | 0;if (!f) {
	                    b = c[d + 20 >> 2] | 0;f = 0;while (1) if (!(b >>> f)) break;else f = f + 1 | 0;if ((jb(k, f + -1 | 0) | 0) == -1) {
	                        n = 1;i = m;return n | 0;
	                    }if ((c[e + 8 >> 2] | 0) != 0 ? (h = ob(k, j) | 0, (h | 0) != 0) : 0) {
	                        n = h;i = m;return n | 0;
	                    }f = c[g >> 2] | 0;
	                }if ((f | 0) == 1 ? (c[d + 24 >> 2] | 0) == 0 : 0) {
	                    f = ob(k, j) | 0;if (f) {
	                        n = f;i = m;return n | 0;
	                    }if ((c[e + 8 >> 2] | 0) != 0 ? (n = ob(k, j) | 0, (n | 0) != 0) : 0) {
	                        i = m;return n | 0;
	                    }
	                }if ((c[e + 68 >> 2] | 0) != 0 ? (o = nb(k, l) | 0, (o | 0) != 0) : 0) {
	                    n = o;i = m;return n | 0;
	                }n = jb(k, 1) | 0;c[a >> 2] = n;n = (n | 0) == -1 & 1;i = m;return n | 0;
	            }function $a(a, b, d, e) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0;C = i;i = i + 448 | 0;p = C + 8 | 0;x = C + 4 | 0;v = C;p = p + (0 - p & 15) | 0;n = c[b + 3376 >> 2] | 0;j = c[e >> 2] | 0;c[x >> 2] = 0;y = b + 1192 | 0;c[y >> 2] = (c[y >> 2] | 0) + 1;q = b + 1200 | 0;c[q >> 2] = 0;o = b + 12 | 0;c[v >> 2] = (c[e + 48 >> 2] | 0) + (c[(c[o >> 2] | 0) + 52 >> 2] | 0);w = e + 36 | 0;r = b + 1212 | 0;s = e + 52 | 0;t = e + 56 | 0;u = e + 60 | 0;z = e + 4 | 0;l = e + 44 | 0;h = b + 1220 | 0;m = b + 1172 | 0;B = b + 1176 | 0;k = n + 12 | 0;A = 0;f = 0;while (1) {
	                    e = c[r >> 2] | 0;if ((c[w >> 2] | 0) == 0 ? (c[e + (j * 216 | 0) + 196 >> 2] | 0) != 0 : 0) {
	                        f = 1;e = 22;break;
	                    }g = c[(c[o >> 2] | 0) + 56 >> 2] | 0;F = c[s >> 2] | 0;E = c[t >> 2] | 0;D = c[u >> 2] | 0;c[e + (j * 216 | 0) + 4 >> 2] = c[y >> 2];c[e + (j * 216 | 0) + 8 >> 2] = F;c[e + (j * 216 | 0) + 12 >> 2] = E;c[e + (j * 216 | 0) + 16 >> 2] = D;c[e + (j * 216 | 0) + 24 >> 2] = g;e = c[z >> 2] | 0;if ((e | 0) != 2 ? !((e | 0) == 7 | (f | 0) != 0) : 0) {
	                        f = nb(a, x) | 0;if (f) {
	                            e = 22;break;
	                        }e = c[x >> 2] | 0;if (e >>> 0 > ((c[B >> 2] | 0) - j | 0) >>> 0) {
	                            f = 1;e = 22;break;
	                        }if (!e) f = 0;else {
	                            id(k, 0, 164);c[n >> 2] = 0;f = 1;
	                        }
	                    }e = c[x >> 2] | 0;if (!e) {
	                        f = bb(a, n, (c[r >> 2] | 0) + (j * 216 | 0) | 0, c[z >> 2] | 0, c[l >> 2] | 0) | 0;if (!f) g = 0;else {
	                            e = 22;break;
	                        }
	                    } else {
	                        c[x >> 2] = e + -1;g = f;
	                    }f = gb((c[r >> 2] | 0) + (j * 216 | 0) | 0, n, d, h, v, j, c[(c[o >> 2] | 0) + 64 >> 2] | 0, p) | 0;if (f) {
	                        e = 22;break;
	                    }A = ((c[(c[r >> 2] | 0) + (j * 216 | 0) + 196 >> 2] | 0) == 1 & 1) + A | 0;if (!(La(a) | 0)) e = (c[x >> 2] | 0) != 0;else e = 1;f = c[z >> 2] | 0;if ((f | 0) == 7 | (f | 0) == 2) c[q >> 2] = j;j = Ma(c[m >> 2] | 0, c[B >> 2] | 0, j) | 0;if (!((j | 0) != 0 | e ^ 1)) {
	                        f = 1;e = 22;break;
	                    }if (!e) {
	                        e = 20;break;
	                    } else f = g;
	                }if ((e | 0) == 20) {
	                    e = b + 1196 | 0;f = (c[e >> 2] | 0) + A | 0;if (f >>> 0 > (c[B >> 2] | 0) >>> 0) {
	                        y = 1;i = C;return y | 0;
	                    }c[e >> 2] = f;y = 0;i = C;return y | 0;
	                } else if ((e | 0) == 22) {
	                    i = C;return f | 0;
	                }return 0;
	            }function ab(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0;k = i;h = c[a + 1192 >> 2] | 0;d = c[a + 1200 >> 2] | 0;j = a + 1212 | 0;a: do if (!d) d = b;else {
	                    e = a + 16 | 0;f = 0;do {
	                        do {
	                            d = d + -1 | 0;if (d >>> 0 <= b >>> 0) break a;
	                        } while ((c[(c[j >> 2] | 0) + (d * 216 | 0) + 4 >> 2] | 0) != (h | 0));f = f + 1 | 0;g = c[(c[e >> 2] | 0) + 52 >> 2] | 0;
	                    } while (f >>> 0 < (g >>> 0 > 10 ? g : 10) >>> 0);
	                } while (0);g = a + 1172 | 0;b = a + 1176 | 0;while (1) {
	                    e = c[j >> 2] | 0;if ((c[e + (d * 216 | 0) + 4 >> 2] | 0) != (h | 0)) {
	                        d = 11;break;
	                    }f = e + (d * 216 | 0) + 196 | 0;e = c[f >> 2] | 0;if (!e) {
	                        d = 11;break;
	                    }c[f >> 2] = e + -1;d = Ma(c[g >> 2] | 0, c[b >> 2] | 0, d) | 0;if (!d) {
	                        d = 11;break;
	                    }
	                }if ((d | 0) == 11) {
	                    i = k;return;
	                }
	            }function bb(a, d, e, f, g) {
	                a = a | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0;B = i;i = i + 32 | 0;u = B + 20 | 0;v = B + 16 | 0;q = B + 12 | 0;p = B + 8 | 0;z = B + 4 | 0;y = B;id(d, 0, 2088);l = nb(a, z) | 0;m = c[z >> 2] | 0;do if ((f | 0) == 2 | (f | 0) == 7) {
	                    m = m + 6 | 0;if (m >>> 0 > 31 | (l | 0) != 0) {
	                        e = 1;i = B;return e | 0;
	                    } else {
	                        c[d >> 2] = m;o = m;break;
	                    }
	                } else {
	                    m = m + 1 | 0;if (m >>> 0 > 31 | (l | 0) != 0) {
	                        e = 1;i = B;return e | 0;
	                    } else {
	                        c[d >> 2] = m;o = m;break;
	                    }
	                } while (0);a: do if ((o | 0) != 31) {
	                    b: do if (o >>> 0 >= 6) {
	                        o = (o | 0) != 6;p = o & 1;if ((p | 0) == 1) t = 52;else if (!p) {
	                            c[v >> 2] = 0;q = 0;while (1) {
	                                f = kb(a) | 0;c[u >> 2] = f;t = f >>> 31;c[d + (q << 2) + 12 >> 2] = t;if (!t) {
	                                    c[d + (q << 2) + 76 >> 2] = f >>> 28 & 7;m = f << 4;n = 1;
	                                } else {
	                                    m = f << 1;n = 0;
	                                }f = q | 1;t = m >>> 31;c[d + (f << 2) + 12 >> 2] = t;if (!t) {
	                                    c[d + (f << 2) + 76 >> 2] = m >>> 28 & 7;l = m << 4;n = n + 1 | 0;
	                                } else l = m << 1;m = f + 1 | 0;t = l >>> 31;c[d + (m << 2) + 12 >> 2] = t;if (!t) {
	                                    c[d + (m << 2) + 76 >> 2] = l >>> 28 & 7;m = l << 4;n = n + 1 | 0;
	                                } else m = l << 1;l = q | 3;t = m >>> 31;c[d + (l << 2) + 12 >> 2] = t;if (!t) {
	                                    c[d + (l << 2) + 76 >> 2] = m >>> 28 & 7;f = m << 4;n = n + 1 | 0;
	                                } else f = m << 1;m = l + 1 | 0;t = f >>> 31;c[d + (m << 2) + 12 >> 2] = t;if (!t) {
	                                    c[d + (m << 2) + 76 >> 2] = f >>> 28 & 7;f = f << 4;n = n + 1 | 0;
	                                } else f = f << 1;m = l + 2 | 0;t = f >>> 31;c[d + (m << 2) + 12 >> 2] = t;if (!t) {
	                                    c[d + (m << 2) + 76 >> 2] = f >>> 28 & 7;f = f << 4;n = n + 1 | 0;
	                                } else f = f << 1;m = l + 3 | 0;t = f >>> 31;c[d + (m << 2) + 12 >> 2] = t;if (!t) {
	                                    c[d + (m << 2) + 76 >> 2] = f >>> 28 & 7;f = f << 4;n = n + 1 | 0;
	                                } else f = f << 1;m = q | 7;t = f >>> 31;c[d + (m << 2) + 12 >> 2] = t;if (!t) {
	                                    c[d + (m << 2) + 76 >> 2] = f >>> 28 & 7;m = f << 4;n = n + 1 | 0;
	                                } else m = f << 1;c[u >> 2] = m;if ((lb(a, (n * 3 | 0) + 8 | 0) | 0) == -1) {
	                                    w = 1;t = 68;break b;
	                                }t = (c[v >> 2] | 0) + 1 | 0;c[v >> 2] = t;if ((t | 0) < 2) q = q + 8 | 0;else {
	                                    t = 52;break;
	                                }
	                            }
	                        }if ((t | 0) == 52) {
	                            v = (nb(a, u) | 0) != 0;l = c[u >> 2] | 0;if (v | l >>> 0 > 3) {
	                                w = 1;t = 68;break;
	                            }c[d + 140 >> 2] = l;
	                        }if (o) {
	                            v = c[d >> 2] | 0;s = v + -7 | 0;u = s >>> 2;c[d + 4 >> 2] = (s >>> 0 > 11 ? u + 268435453 | 0 : u) << 4 | (v >>> 0 > 18 ? 15 : 0);
	                        } else {
	                            x = p;t = 70;
	                        }
	                    } else {
	                        if ((o | 0) == 0 | (o | 0) == 1) {
	                            r = v;s = u;
	                        } else if (!((o | 0) == 3 | (o | 0) == 2)) {
	                            f = 0;do {
	                                l = (nb(a, q) | 0) != 0;m = c[q >> 2] | 0;if (l | m >>> 0 > 3) {
	                                    n = 1;t = 96;break;
	                                }c[d + (f << 2) + 176 >> 2] = m;f = f + 1 | 0;
	                            } while (f >>> 0 < 4);if ((t | 0) == 96) {
	                                i = B;return n | 0;
	                            }c: do if (g >>> 0 > 1 & (o | 0) != 5) {
	                                m = g >>> 0 > 2 & 1;f = 0;while (1) {
	                                    if (qb(a, q, m) | 0) {
	                                        n = 1;t = 96;break;
	                                    }n = c[q >> 2] | 0;if (n >>> 0 >= g >>> 0) {
	                                        n = 1;t = 96;break;
	                                    }c[d + (f << 2) + 192 >> 2] = n;f = f + 1 | 0;if (f >>> 0 >= 4) {
	                                        h = 0;break c;
	                                    }
	                                }if ((t | 0) == 96) {
	                                    i = B;return n | 0;
	                                }
	                            } else h = 0; while (0);d: while (1) {
	                                n = c[d + (h << 2) + 176 >> 2] | 0;if ((n | 0) == 2 | (n | 0) == 1) n = 1;else if (!n) n = 0;else n = 3;c[q >> 2] = n;m = 0;while (1) {
	                                    n = ob(a, p) | 0;if (n) {
	                                        t = 96;break d;
	                                    }b[d + (h << 4) + (m << 2) + 208 >> 1] = c[p >> 2];n = ob(a, p) | 0;if (n) {
	                                        t = 96;break d;
	                                    }b[d + (h << 4) + (m << 2) + 210 >> 1] = c[p >> 2];t = c[q >> 2] | 0;c[q >> 2] = t + -1;if (!t) break;else m = m + 1 | 0;
	                                }h = h + 1 | 0;if (h >>> 0 >= 4) {
	                                    x = 2;t = 70;break b;
	                                }
	                            }if ((t | 0) == 96) {
	                                i = B;return n | 0;
	                            }
	                        } else {
	                            r = v;s = u;
	                        }if (g >>> 0 > 1) {
	                            if ((o | 0) == 3 | (o | 0) == 2) n = 1;else if ((o | 0) == 0 | (o | 0) == 1) n = 0;else n = 3;l = g >>> 0 > 2 & 1;f = 0;while (1) {
	                                if (qb(a, u, l) | 0) {
	                                    w = 1;t = 68;break b;
	                                }m = c[u >> 2] | 0;if (m >>> 0 >= g >>> 0) {
	                                    w = 1;t = 68;break b;
	                                }c[d + (f << 2) + 144 >> 2] = m;if (!n) break;else {
	                                    n = n + -1 | 0;f = f + 1 | 0;
	                                }
	                            }
	                        }if ((o | 0) == 0 | (o | 0) == 1) {
	                            l = 0;m = 0;
	                        } else if ((o | 0) == 3 | (o | 0) == 2) {
	                            l = 1;m = 0;
	                        } else {
	                            l = 3;m = 0;
	                        }while (1) {
	                            f = ob(a, v) | 0;if (f) {
	                                w = f;t = 68;break b;
	                            }b[d + (m << 2) + 160 >> 1] = c[v >> 2];f = ob(a, v) | 0;if (f) {
	                                w = f;t = 68;break b;
	                            }b[d + (m << 2) + 162 >> 1] = c[v >> 2];if (!l) {
	                                x = 2;t = 70;break;
	                            } else {
	                                l = l + -1 | 0;m = m + 1 | 0;
	                            }
	                        }
	                    } while (0);if ((t | 0) == 68) {
	                        e = w;i = B;return e | 0;
	                    }do if ((t | 0) == 70) {
	                        h = pb(a, z, (x | 0) == 0 & 1) | 0;if (!h) {
	                            z = c[z >> 2] | 0;c[d + 4 >> 2] = z;if (!z) break a;else break;
	                        } else {
	                            e = h;i = B;return e | 0;
	                        }
	                    } while (0);z = (ob(a, y) | 0) != 0;h = c[y >> 2] | 0;if (z | (h | 0) < -26 | (h | 0) > 25) {
	                        e = 1;i = B;return e | 0;
	                    }c[d + 8 >> 2] = h;l = c[d + 4 >> 2] | 0;o = d + 272 | 0;e: do if ((c[d >> 2] | 0) >>> 0 >= 7) {
	                        h = rb(a, d + 1864 | 0, ib(e, 0, o) | 0, 16) | 0;if (!(h & 15)) {
	                            b[d + 320 >> 1] = h >>> 4 & 255;h = 0;m = 3;while (1) {
	                                n = l >>> 1;if (!(l & 1)) h = h + 4 | 0;else {
	                                    f = 3;while (1) {
	                                        l = rb(a, d + (h << 6) + 332 | 0, ib(e, h, o) | 0, 15) | 0;c[d + (h << 2) + 1992 >> 2] = l >>> 15;if (l & 15) {
	                                            j = l;break e;
	                                        }b[d + (h << 1) + 272 >> 1] = l >>> 4 & 255;h = h + 1 | 0;if (!f) break;else f = f + -1 | 0;
	                                    }
	                                }if (!m) {
	                                    k = h;A = n;t = 87;break;
	                                } else {
	                                    l = n;m = m + -1 | 0;
	                                }
	                            }
	                        } else j = h;
	                    } else {
	                        h = 0;m = 3;while (1) {
	                            n = l >>> 1;if (!(l & 1)) h = h + 4 | 0;else {
	                                f = 3;while (1) {
	                                    l = rb(a, d + (h << 6) + 328 | 0, ib(e, h, o) | 0, 16) | 0;c[d + (h << 2) + 1992 >> 2] = l >>> 16;if (l & 15) {
	                                        j = l;break e;
	                                    }b[d + (h << 1) + 272 >> 1] = l >>> 4 & 255;h = h + 1 | 0;if (!f) break;else f = f + -1 | 0;
	                                }
	                            }if (!m) {
	                                k = h;A = n;t = 87;break;
	                            } else {
	                                l = n;m = m + -1 | 0;
	                            }
	                        }
	                    } while (0);f: do if ((t | 0) == 87) {
	                        if (A & 3) {
	                            j = rb(a, d + 1928 | 0, -1, 4) | 0;if (j & 15) break;b[d + 322 >> 1] = j >>> 4 & 255;j = rb(a, d + 1944 | 0, -1, 4) | 0;if (j & 15) break;b[d + 324 >> 1] = j >>> 4 & 255;
	                        }if (!(A & 2)) j = 0;else {
	                            h = 7;while (1) {
	                                j = rb(a, d + (k << 6) + 332 | 0, ib(e, k, o) | 0, 15) | 0;if (j & 15) break f;b[d + (k << 1) + 272 >> 1] = j >>> 4 & 255;c[d + (k << 2) + 1992 >> 2] = j >>> 15;if (!h) {
	                                    j = 0;break;
	                                } else {
	                                    k = k + 1 | 0;h = h + -1 | 0;
	                                }
	                            }
	                        }
	                    } while (0);c[a + 16 >> 2] = ((c[a + 4 >> 2] | 0) - (c[a >> 2] | 0) << 3) + (c[a + 8 >> 2] | 0);if (j) {
	                        e = j;i = B;return e | 0;
	                    }
	                } else {
	                    while (1) {
	                        if (mb(a) | 0) break;if (jb(a, 1) | 0) {
	                            n = 1;t = 96;break;
	                        }
	                    }if ((t | 0) == 96) {
	                        i = B;return n | 0;
	                    }k = 0;j = d + 328 | 0;while (1) {
	                        h = jb(a, 8) | 0;c[z >> 2] = h;if ((h | 0) == -1) {
	                            n = 1;break;
	                        }c[j >> 2] = h;k = k + 1 | 0;if (k >>> 0 >= 384) break a;else j = j + 4 | 0;
	                    }i = B;return n | 0;
	                } while (0);e = 0;i = B;return e | 0;
	            }function cb(a) {
	                a = a | 0;if (a >>> 0 < 6) a = 2;else a = (a | 0) != 6 & 1;return a | 0;
	            }function db(a) {
	                a = a | 0;var b = 0;b = i;if ((a | 0) == 0 | (a | 0) == 1) a = 1;else if ((a | 0) == 3 | (a | 0) == 2) a = 2;else a = 4;i = b;return a | 0;
	            }function eb(a) {
	                a = a | 0;var b = 0;b = i;if ((a | 0) == 2 | (a | 0) == 1) a = 2;else if (!a) a = 1;else a = 4;i = b;return a | 0;
	            }function fb(a) {
	                a = a | 0;return a + 1 & 3 | 0;
	            }function gb(d, e, f, g, h, j, k, l) {
	                d = d | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;l = l | 0;var m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0;v = i;s = c[e >> 2] | 0;c[d >> 2] = s;o = d + 196 | 0;c[o >> 2] = (c[o >> 2] | 0) + 1;Na(f, j);if ((s | 0) == 31) {
	                    m = d + 28 | 0;c[d + 20 >> 2] = 0;if ((c[o >> 2] | 0) >>> 0 > 1) {
	                        b[m >> 1] = 16;b[d + 30 >> 1] = 16;b[d + 32 >> 1] = 16;b[d + 34 >> 1] = 16;b[d + 36 >> 1] = 16;b[d + 38 >> 1] = 16;b[d + 40 >> 1] = 16;b[d + 42 >> 1] = 16;b[d + 44 >> 1] = 16;b[d + 46 >> 1] = 16;b[d + 48 >> 1] = 16;b[d + 50 >> 1] = 16;b[d + 52 >> 1] = 16;b[d + 54 >> 1] = 16;b[d + 56 >> 1] = 16;b[d + 58 >> 1] = 16;b[d + 60 >> 1] = 16;b[d + 62 >> 1] = 16;b[d + 64 >> 1] = 16;b[d + 66 >> 1] = 16;b[d + 68 >> 1] = 16;b[d + 70 >> 1] = 16;b[d + 72 >> 1] = 16;b[d + 74 >> 1] = 16;t = 0;i = v;return t | 0;
	                    }o = 23;h = e + 328 | 0;n = l;while (1) {
	                        b[m >> 1] = 16;a[n >> 0] = c[h >> 2];a[n + 1 >> 0] = c[h + 4 >> 2];a[n + 2 >> 0] = c[h + 8 >> 2];a[n + 3 >> 0] = c[h + 12 >> 2];a[n + 4 >> 0] = c[h + 16 >> 2];a[n + 5 >> 0] = c[h + 20 >> 2];a[n + 6 >> 0] = c[h + 24 >> 2];a[n + 7 >> 0] = c[h + 28 >> 2];a[n + 8 >> 0] = c[h + 32 >> 2];a[n + 9 >> 0] = c[h + 36 >> 2];a[n + 10 >> 0] = c[h + 40 >> 2];a[n + 11 >> 0] = c[h + 44 >> 2];a[n + 12 >> 0] = c[h + 48 >> 2];a[n + 13 >> 0] = c[h + 52 >> 2];a[n + 14 >> 0] = c[h + 56 >> 2];a[n + 15 >> 0] = c[h + 60 >> 2];if (!o) break;else {
	                            o = o + -1 | 0;h = h + 64 | 0;n = n + 16 | 0;m = m + 2 | 0;
	                        }
	                    }sc(f, l);t = 0;i = v;return t | 0;
	                }m = d + 28 | 0;if (s) {
	                    hd(m, e + 272 | 0, 54);n = c[e + 8 >> 2] | 0;o = c[h >> 2] | 0;do if (n) {
	                        o = o + n | 0;c[h >> 2] = o;if ((o | 0) < 0) {
	                            o = o + 52 | 0;c[h >> 2] = o;break;
	                        }if ((o | 0) > 51) {
	                            o = o + -52 | 0;c[h >> 2] = o;
	                        }
	                    } while (0);r = d + 20 | 0;c[r >> 2] = o;n = e + 328 | 0;h = e + 1992 | 0;a: do if ((c[d >> 2] | 0) >>> 0 < 7) {
	                        q = 15;o = m;while (1) {
	                            if (b[o >> 1] | 0) {
	                                if (Ga(n, c[r >> 2] | 0, 0, c[h >> 2] | 0) | 0) {
	                                    m = 1;break;
	                                }
	                            } else c[n >> 2] = 16777215;n = n + 64 | 0;o = o + 2 | 0;h = h + 4 | 0;if (!q) break a;else q = q + -1 | 0;
	                        }i = v;return m | 0;
	                    } else {
	                        if (!(b[d + 76 >> 1] | 0)) {
	                            q = 464;p = 15;o = m;
	                        } else {
	                            Ha(e + 1864 | 0, o);q = 464;p = 15;o = m;
	                        }while (1) {
	                            m = c[e + (c[q >> 2] << 2) + 1864 >> 2] | 0;q = q + 4 | 0;c[n >> 2] = m;if ((m | 0) == 0 ? (b[o >> 1] | 0) == 0 : 0) c[n >> 2] = 16777215;else u = 18;if ((u | 0) == 18 ? (u = 0, (Ga(n, c[r >> 2] | 0, 1, c[h >> 2] | 0) | 0) != 0) : 0) {
	                                m = 1;break;
	                            }n = n + 64 | 0;o = o + 2 | 0;h = h + 4 | 0;if (!p) break a;else p = p + -1 | 0;
	                        }i = v;return m | 0;
	                    } while (0);q = c[192 + ((Oa(0, 51, (c[d + 24 >> 2] | 0) + (c[r >> 2] | 0) | 0) | 0) << 2) >> 2] | 0;if ((b[d + 78 >> 1] | 0) == 0 ? (b[d + 80 >> 1] | 0) == 0 : 0) {
	                        p = e + 1928 | 0;m = 7;
	                    } else {
	                        p = e + 1928 | 0;Ia(p, q);m = 7;
	                    }while (1) {
	                        r = c[p >> 2] | 0;p = p + 4 | 0;c[n >> 2] = r;if ((r | 0) == 0 ? (b[o >> 1] | 0) == 0 : 0) c[n >> 2] = 16777215;else u = 31;if ((u | 0) == 31 ? (u = 0, (Ga(n, q, 1, c[h >> 2] | 0) | 0) != 0) : 0) {
	                            m = 1;u = 39;break;
	                        }if (!m) break;else {
	                            n = n + 64 | 0;h = h + 4 | 0;m = m + -1 | 0;o = o + 2 | 0;
	                        }
	                    }if ((u | 0) == 39) {
	                        i = v;return m | 0;
	                    }if (s >>> 0 >= 6) {
	                        o = Mb(d, e, f, j, k, l) | 0;if (o) {
	                            t = o;i = v;return t | 0;
	                        }
	                    } else u = 37;
	                } else {
	                    id(m, 0, 54);c[d + 20 >> 2] = c[h >> 2];u = 37;
	                }if ((u | 0) == 37 ? (t = Sb(d, e, g, j, f, l) | 0, (t | 0) != 0) : 0) {
	                    i = v;return t | 0;
	                }t = 0;i = v;return t | 0;
	            }function hb(a) {
	                a = a | 0;return a | 0;
	            }function ib(d, e, f) {
	                d = d | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0;k = i;l = vb(e) | 0;g = wb(e) | 0;h = a[l + 4 >> 0] | 0;j = a[g + 4 >> 0] | 0;g = (c[g >> 2] | 0) == 4;if ((c[l >> 2] | 0) == 4) {
	                    e = b[f + ((h & 255) << 1) >> 1] | 0;if (g) {
	                        e = e + 1 + (b[f + ((j & 255) << 1) >> 1] | 0) >> 1;i = k;return e | 0;
	                    }g = d + 204 | 0;if (!(zb(d, c[g >> 2] | 0) | 0)) {
	                        i = k;return e | 0;
	                    }e = e + 1 + (b[(c[g >> 2] | 0) + ((j & 255) << 1) + 28 >> 1] | 0) >> 1;i = k;return e | 0;
	                }if (g) {
	                    e = b[f + ((j & 255) << 1) >> 1] | 0;g = d + 200 | 0;if (!(zb(d, c[g >> 2] | 0) | 0)) {
	                        i = k;return e | 0;
	                    }e = e + 1 + (b[(c[g >> 2] | 0) + ((h & 255) << 1) + 28 >> 1] | 0) >> 1;i = k;return e | 0;
	                }g = d + 200 | 0;if (!(zb(d, c[g >> 2] | 0) | 0)) {
	                    h = 0;f = 0;
	                } else {
	                    h = b[(c[g >> 2] | 0) + ((h & 255) << 1) + 28 >> 1] | 0;f = 1;
	                }g = d + 204 | 0;if (!(zb(d, c[g >> 2] | 0) | 0)) {
	                    e = h;i = k;return e | 0;
	                }e = b[(c[g >> 2] | 0) + ((j & 255) << 1) + 28 >> 1] | 0;if (!f) {
	                    i = k;return e | 0;
	                }e = h + 1 + e >> 1;i = k;return e | 0;
	            }function jb(a, b) {
	                a = a | 0;b = b | 0;var e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0;p = i;n = a + 4 | 0;j = c[n >> 2] | 0;m = c[a + 12 >> 2] << 3;o = a + 16 | 0;l = c[o >> 2] | 0;g = m - l | 0;if ((g | 0) > 31) {
	                    e = a + 8 | 0;g = c[e >> 2] | 0;f = (d[j + 1 >> 0] | 0) << 16 | (d[j >> 0] | 0) << 24 | (d[j + 2 >> 0] | 0) << 8 | (d[j + 3 >> 0] | 0);if (!g) h = e;else {
	                        h = e;f = (d[j + 4 >> 0] | 0) >>> (8 - g | 0) | f << g;
	                    }
	                } else {
	                    h = a + 8 | 0;if ((g | 0) > 0) {
	                        e = c[h >> 2] | 0;k = e + 24 | 0;f = (d[j >> 0] | 0) << k;g = g + -8 + e | 0;if ((g | 0) > 0) {
	                            e = g;g = k;do {
	                                j = j + 1 | 0;g = g + -8 | 0;f = (d[j >> 0] | 0) << g | f;e = e + -8 | 0;
	                            } while ((e | 0) > 0);
	                        }
	                    } else f = 0;
	                }e = l + b | 0;c[o >> 2] = e;c[h >> 2] = e & 7;if (e >>> 0 > m >>> 0) {
	                    n = -1;i = p;return n | 0;
	                }c[n >> 2] = (c[a >> 2] | 0) + (e >>> 3);n = f >>> (32 - b | 0);i = p;return n | 0;
	            }function kb(a) {
	                a = a | 0;var b = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0;g = i;f = c[a + 4 >> 2] | 0;e = (c[a + 12 >> 2] << 3) - (c[a + 16 >> 2] | 0) | 0;if ((e | 0) > 31) {
	                    b = c[a + 8 >> 2] | 0;a = (d[f + 1 >> 0] | 0) << 16 | (d[f >> 0] | 0) << 24 | (d[f + 2 >> 0] | 0) << 8 | (d[f + 3 >> 0] | 0);if (!b) {
	                        b = a;i = g;return b | 0;
	                    }b = (d[f + 4 >> 0] | 0) >>> (8 - b | 0) | a << b;i = g;return b | 0;
	                }if ((e | 0) <= 0) {
	                    b = 0;i = g;return b | 0;
	                }h = c[a + 8 >> 2] | 0;a = h + 24 | 0;b = (d[f >> 0] | 0) << a;e = e + -8 + h | 0;if ((e | 0) <= 0) {
	                    i = g;return b | 0;
	                }do {
	                    f = f + 1 | 0;a = a + -8 | 0;b = (d[f >> 0] | 0) << a | b;e = e + -8 | 0;
	                } while ((e | 0) > 0);i = g;return b | 0;
	            }function lb(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0;d = i;e = a + 16 | 0;b = (c[e >> 2] | 0) + b | 0;c[e >> 2] = b;c[a + 8 >> 2] = b & 7;if (b >>> 0 > c[a + 12 >> 2] << 3 >>> 0) {
	                    b = -1;i = d;return b | 0;
	                }c[a + 4 >> 2] = (c[a >> 2] | 0) + (b >>> 3);b = 0;i = d;return b | 0;
	            }function mb(a) {
	                a = a | 0;return (c[a + 8 >> 2] | 0) == 0 | 0;
	            }function nb(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0;g = i;d = kb(a) | 0;do if ((d | 0) >= 0) {
	                    if (d >>> 0 > 1073741823) {
	                        if ((lb(a, 3) | 0) == -1) {
	                            d = 1;break;
	                        }c[b >> 2] = (d >>> 29 & 1) + 1;d = 0;break;
	                    }if (d >>> 0 > 536870911) {
	                        if ((lb(a, 5) | 0) == -1) {
	                            d = 1;break;
	                        }c[b >> 2] = (d >>> 27 & 3) + 3;d = 0;break;
	                    }if (d >>> 0 > 268435455) {
	                        if ((lb(a, 7) | 0) == -1) {
	                            d = 1;break;
	                        }c[b >> 2] = (d >>> 25 & 7) + 7;d = 0;break;
	                    }d = Ja(d, 28) | 0;e = d + 4 | 0;if ((e | 0) != 32) {
	                        lb(a, d + 5 | 0) | 0;d = jb(a, e) | 0;if ((d | 0) == -1) {
	                            d = 1;break;
	                        }c[b >> 2] = (1 << e) + -1 + d;d = 0;break;
	                    }c[b >> 2] = 0;lb(a, 32) | 0;if ((jb(a, 1) | 0) == 1 ? (f = kb(a) | 0, (lb(a, 32) | 0) != -1) : 0) {
	                        if ((f | 0) == 1) {
	                            c[b >> 2] = -1;d = 1;break;
	                        } else if (!f) {
	                            c[b >> 2] = -1;d = 0;break;
	                        } else {
	                            d = 1;break;
	                        }
	                    } else d = 1;
	                } else {
	                    lb(a, 1) | 0;c[b >> 2] = 0;d = 0;
	                } while (0);i = g;return d | 0;
	            }function ob(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0;e = i;i = i + 16 | 0;f = e;c[f >> 2] = 0;d = nb(a, f) | 0;a = c[f >> 2] | 0;d = (d | 0) == 0;if ((a | 0) == -1) {
	                    if (d) a = 1;else {
	                        c[b >> 2] = -2147483648;a = 0;
	                    }
	                } else if (d) {
	                    d = (a + 1 | 0) >>> 1;c[b >> 2] = (a & 1 | 0) != 0 ? d : 0 - d | 0;a = 0;
	                } else a = 1;i = e;return a | 0;
	            }function pb(a, b, e) {
	                a = a | 0;b = b | 0;e = e | 0;var f = 0,
	                    g = 0;g = i;i = i + 16 | 0;f = g;if (nb(a, f) | 0) {
	                    f = 1;i = g;return f | 0;
	                }f = c[f >> 2] | 0;if (f >>> 0 > 47) {
	                    f = 1;i = g;return f | 0;
	                }c[b >> 2] = d[((e | 0) == 0 ? 576 : 528) + f >> 0];f = 0;i = g;return f | 0;
	            }function qb(a, b, d) {
	                a = a | 0;b = b | 0;d = d | 0;var e = 0;e = i;if (!d) {
	                    d = jb(a, 1) | 0;c[b >> 2] = d;if ((d | 0) == -1) d = 1;else {
	                        c[b >> 2] = d ^ 1;d = 0;
	                    }
	                } else d = nb(a, b) | 0;i = e;return d | 0;
	            }function rb(a, b, f, g) {
	                a = a | 0;b = b | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0,
	                    G = 0,
	                    H = 0,
	                    I = 0,
	                    J = 0,
	                    K = 0,
	                    L = 0,
	                    M = 0,
	                    N = 0,
	                    O = 0;O = i;i = i + 128 | 0;M = O + 64 | 0;N = O;n = kb(a) | 0;p = n >>> 16;do if (f >>> 0 < 2) {
	                    if ((n | 0) >= 0) {
	                        if (n >>> 0 > 201326591) {
	                            o = e[1264 + (n >>> 26 << 1) >> 1] | 0;k = 25;break;
	                        }if (n >>> 0 > 16777215) {
	                            o = e[1328 + (n >>> 22 << 1) >> 1] | 0;k = 25;break;
	                        }if (n >>> 0 > 2097151) {
	                            o = e[1424 + ((n >>> 18) + -8 << 1) >> 1] | 0;k = 25;break;
	                        } else {
	                            o = e[1536 + (p << 1) >> 1] | 0;k = 25;break;
	                        }
	                    } else q = 1;
	                } else if (f >>> 0 < 4) {
	                    if ((n | 0) < 0) {
	                        q = (p & 16384 | 0) != 0 ? 2 : 2082;break;
	                    }if (n >>> 0 > 268435455) {
	                        o = e[1600 + (n >>> 26 << 1) >> 1] | 0;k = 25;break;
	                    }if (n >>> 0 > 33554431) {
	                        o = e[1664 + (n >>> 23 << 1) >> 1] | 0;k = 25;break;
	                    } else {
	                        o = e[1728 + (n >>> 18 << 1) >> 1] | 0;k = 25;break;
	                    }
	                } else {
	                    if (f >>> 0 < 8) {
	                        f = n >>> 26;if ((f + -8 | 0) >>> 0 < 56) {
	                            o = e[1984 + (f << 1) >> 1] | 0;k = 25;break;
	                        }o = e[2112 + (n >>> 22 << 1) >> 1] | 0;k = 25;break;
	                    }if (f >>> 0 < 17) {
	                        o = e[2368 + (n >>> 26 << 1) >> 1] | 0;k = 25;break;
	                    }f = n >>> 29;if (f) {
	                        o = e[2496 + (f << 1) >> 1] | 0;k = 25;break;
	                    }o = e[2512 + (n >>> 24 << 1) >> 1] | 0;k = 25;break;
	                } while (0);if ((k | 0) == 25) if (!o) {
	                    C = 1;i = O;return C | 0;
	                } else q = o;o = q & 31;f = n << o;p = 32 - o | 0;I = q >>> 11 & 31;if (I >>> 0 > g >>> 0) {
	                    C = 1;i = O;return C | 0;
	                }v = q >>> 5 & 63;do if (I) {
	                    if (!v) o = 0;else {
	                        do if (p >>> 0 < v >>> 0) if ((lb(a, o) | 0) == -1) {
	                            C = 1;i = O;return C | 0;
	                        } else {
	                            p = 32;f = kb(a) | 0;break;
	                        } while (0);n = f >>> (32 - v | 0);f = f << v;k = 0;o = 1 << v + -1;do {
	                            c[M + (k << 2) >> 2] = (o & n | 0) != 0 ? -1 : 1;o = o >>> 1;k = k + 1 | 0;
	                        } while ((o | 0) != 0);p = p - v | 0;o = k;
	                    }u = v >>> 0 < 3;a: do if (o >>> 0 < I >>> 0) {
	                        t = o;s = I >>> 0 > 10 & u & 1;b: while (1) {
	                            if (p >>> 0 < 16) {
	                                if ((lb(a, 32 - p | 0) | 0) == -1) {
	                                    J = 1;k = 127;break;
	                                }r = 32;f = kb(a) | 0;
	                            } else r = p;do if ((f | 0) >= 0) {
	                                if (f >>> 0 <= 1073741823) {
	                                    if (f >>> 0 <= 536870911) {
	                                        if (f >>> 0 <= 268435455) {
	                                            if (f >>> 0 <= 134217727) {
	                                                if (f >>> 0 <= 67108863) {
	                                                    if (f >>> 0 <= 33554431) {
	                                                        if (f >>> 0 <= 16777215) {
	                                                            if (f >>> 0 <= 8388607) {
	                                                                if (f >>> 0 > 4194303) {
	                                                                    H = 9;k = 59;
	                                                                } else {
	                                                                    if (f >>> 0 > 2097151) {
	                                                                        H = 10;k = 59;break;
	                                                                    }if (f >>> 0 > 1048575) {
	                                                                        H = 11;k = 59;break;
	                                                                    }if (f >>> 0 > 524287) {
	                                                                        H = 12;k = 59;break;
	                                                                    }if (f >>> 0 > 262143) {
	                                                                        H = 13;k = 59;break;
	                                                                    }if (f >>> 0 > 131071) {
	                                                                        p = 14;o = f << 15;n = r + -15 | 0;q = s;k = (s | 0) != 0 ? s : 4;
	                                                                    } else {
	                                                                        if (f >>> 0 < 65536) {
	                                                                            J = 1;k = 127;break b;
	                                                                        }p = 15;o = f << 16;n = r + -16 | 0;q = (s | 0) != 0 ? s : 1;k = 12;
	                                                                    }G = p << q;B = o;y = n;z = q;x = k;w = (q | 0) == 0;k = 60;
	                                                                }
	                                                            } else {
	                                                                H = 8;k = 59;
	                                                            }
	                                                        } else {
	                                                            H = 7;k = 59;
	                                                        }
	                                                    } else {
	                                                        H = 6;k = 59;
	                                                    }
	                                                } else {
	                                                    H = 5;k = 59;
	                                                }
	                                            } else {
	                                                H = 4;k = 59;
	                                            }
	                                        } else {
	                                            H = 3;k = 59;
	                                        }
	                                    } else {
	                                        H = 2;k = 59;
	                                    }
	                                } else {
	                                    H = 1;k = 59;
	                                }
	                            } else {
	                                H = 0;k = 59;
	                            } while (0);if ((k | 0) == 59) {
	                                k = 0;p = H + 1 | 0;o = f << p;p = r - p | 0;f = H << s;if (!s) {
	                                    E = p;F = o;A = f;C = 0;D = 1;
	                                } else {
	                                    G = f;B = o;y = p;z = s;x = s;w = 0;k = 60;
	                                }
	                            }if ((k | 0) == 60) {
	                                if (y >>> 0 < x >>> 0) {
	                                    if ((lb(a, 32 - y | 0) | 0) == -1) {
	                                        J = 1;k = 127;break;
	                                    }o = 32;f = kb(a) | 0;
	                                } else {
	                                    o = y;f = B;
	                                }E = o - x | 0;F = f << x;A = (f >>> (32 - x | 0)) + G | 0;C = z;D = w;
	                            }s = (t | 0) == (v | 0) & u ? A + 2 | 0 : A;o = (s + 2 | 0) >>> 1;n = D ? 1 : C;c[M + (t << 2) >> 2] = (s & 1 | 0) == 0 ? o : 0 - o | 0;t = t + 1 | 0;if (t >>> 0 >= I >>> 0) {
	                                l = E;m = F;break a;
	                            } else {
	                                p = E;f = F;s = ((o | 0) > (3 << n + -1 | 0) & n >>> 0 < 6 & 1) + n | 0;
	                            }
	                        }if ((k | 0) == 127) {
	                            i = O;return J | 0;
	                        }
	                    } else {
	                        l = p;m = f;
	                    } while (0);if (I >>> 0 < g >>> 0) {
	                        do if (l >>> 0 < 9) if ((lb(a, 32 - l | 0) | 0) == -1) {
	                            C = 1;i = O;return C | 0;
	                        } else {
	                            l = 32;m = kb(a) | 0;break;
	                        } while (0);k = m >>> 23;c: do if ((g | 0) == 4) {
	                            if ((m | 0) >= 0) {
	                                if ((I | 0) != 3) {
	                                    if (m >>> 0 <= 1073741823) {
	                                        if ((I | 0) == 2) k = 34;else k = m >>> 0 > 536870911 ? 35 : 51;
	                                    } else k = 18;
	                                } else k = 17;
	                            } else k = 1;
	                        } else {
	                            do switch (I | 0) {case 12:
	                                    {
	                                        k = d[1232 + (m >>> 28) >> 0] | 0;break;
	                                    }case 13:
	                                    {
	                                        k = d[1248 + (m >>> 29) >> 0] | 0;break;
	                                    }case 6:
	                                    {
	                                        k = d[928 + (m >>> 26) >> 0] | 0;break;
	                                    }case 5:
	                                    {
	                                        k = d[896 + (m >>> 27) >> 0] | 0;break;
	                                    }case 2:
	                                    {
	                                        k = d[736 + (m >>> 26) >> 0] | 0;break;
	                                    }case 9:
	                                    {
	                                        k = d[1120 + (m >>> 26) >> 0] | 0;break;
	                                    }case 10:
	                                    {
	                                        k = d[1184 + (m >>> 27) >> 0] | 0;break;
	                                    }case 11:
	                                    {
	                                        k = d[1216 + (m >>> 28) >> 0] | 0;break;
	                                    }case 14:
	                                    {
	                                        k = d[1256 + (m >>> 30) >> 0] | 0;break;
	                                    }case 7:
	                                    {
	                                        k = d[992 + (m >>> 26) >> 0] | 0;break;
	                                    }case 8:
	                                    {
	                                        k = d[1056 + (m >>> 26) >> 0] | 0;break;
	                                    }case 1:
	                                    {
	                                        if (m >>> 0 > 268435455) k = d[672 + (m >>> 27) >> 0] | 0;else k = d[704 + k >> 0] | 0;break;
	                                    }case 3:
	                                    {
	                                        k = d[800 + (m >>> 26) >> 0] | 0;break;
	                                    }case 4:
	                                    {
	                                        k = d[864 + (m >>> 27) >> 0] | 0;break;
	                                    }default:
	                                    {
	                                        k = m >> 31 & 16 | 1;break c;
	                                    }} while (0);if (!k) {
	                                C = 1;i = O;return C | 0;
	                            }
	                        } while (0);n = k & 15;l = l - n | 0;m = m << n;n = k >>> 4 & 15;
	                    } else n = 0;p = I + -1 | 0;f = (p | 0) == 0;if (f) {
	                        c[b + (n << 2) >> 2] = c[M + (p << 2) >> 2];K = l;h = 1 << n;break;
	                    } else {
	                        k = m;o = 0;
	                    }d: while (1) {
	                        if (!n) {
	                            c[N + (o << 2) >> 2] = 1;L = l;j = 0;
	                        } else {
	                            if (l >>> 0 < 11) {
	                                if ((lb(a, 32 - l | 0) | 0) == -1) {
	                                    J = 1;k = 127;break;
	                                }l = 32;k = kb(a) | 0;
	                            }switch (n | 0) {case 5:
	                                    {
	                                        m = d[656 + (k >>> 29) >> 0] | 0;break;
	                                    }case 6:
	                                    {
	                                        m = d[664 + (k >>> 29) >> 0] | 0;break;
	                                    }case 1:
	                                    {
	                                        m = d[624 + (k >>> 31) >> 0] | 0;break;
	                                    }case 2:
	                                    {
	                                        m = d[632 + (k >>> 30) >> 0] | 0;break;
	                                    }case 3:
	                                    {
	                                        m = d[640 + (k >>> 30) >> 0] | 0;break;
	                                    }case 4:
	                                    {
	                                        m = d[648 + (k >>> 29) >> 0] | 0;break;
	                                    }default:
	                                    {
	                                        do if (k >>> 0 <= 536870911) {
	                                            if (k >>> 0 <= 268435455) {
	                                                if (k >>> 0 <= 134217727) {
	                                                    if (k >>> 0 <= 67108863) {
	                                                        if (k >>> 0 <= 33554431) {
	                                                            if (k >>> 0 > 16777215) m = 184;else {
	                                                                if (k >>> 0 > 8388607) {
	                                                                    m = 201;break;
	                                                                }if (k >>> 0 > 4194303) {
	                                                                    m = 218;break;
	                                                                }m = k >>> 0 < 2097152 ? 0 : 235;
	                                                            }
	                                                        } else m = 167;
	                                                    } else m = 150;
	                                                } else m = 133;
	                                            } else m = 116;
	                                        } else m = k >>> 29 << 4 ^ 115; while (0);if ((m >>> 4 & 15) >>> 0 > n >>> 0) {
	                                            J = 1;k = 127;break d;
	                                        }
	                                    }}if (!m) {
	                                J = 1;k = 127;break;
	                            }C = m & 15;j = m >>> 4 & 15;c[N + (o << 2) >> 2] = j + 1;L = l - C | 0;k = k << C;j = n - j | 0;
	                        }o = o + 1 | 0;if (o >>> 0 >= p >>> 0) {
	                            k = 122;break;
	                        } else {
	                            l = L;n = j;
	                        }
	                    }if ((k | 0) == 122) {
	                        c[b + (j << 2) >> 2] = c[M + (p << 2) >> 2];h = 1 << j;if (f) {
	                            K = L;break;
	                        }k = I + -2 | 0;while (1) {
	                            j = (c[N + (k << 2) >> 2] | 0) + j | 0;h = 1 << j | h;c[b + (j << 2) >> 2] = c[M + (k << 2) >> 2];if (!k) {
	                                K = L;break;
	                            } else k = k + -1 | 0;
	                        }
	                    } else if ((k | 0) == 127) {
	                        i = O;return J | 0;
	                    }
	                } else {
	                    K = p;h = 0;
	                } while (0);if (lb(a, 32 - K | 0) | 0) {
	                    C = 1;i = O;return C | 0;
	                }C = h << 16 | I << 4;i = O;return C | 0;
	            }function sb(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0;f = i;a: do if ((jb(a, 1) | 0) != -1 ? (e = b + 4 | 0, c[e >> 2] = jb(a, 2) | 0, d = jb(a, 5) | 0, c[b >> 2] = d, (d + -2 | 0) >>> 0 >= 3) : 0) {
	                    switch (d | 0) {case 5:case 7:case 8:
	                            {
	                                if (!(c[e >> 2] | 0)) {
	                                    d = 1;break a;
	                                }switch (d | 0) {case 6:case 9:case 10:case 11:case 12:
	                                        {
	                                            d = 1;break a;
	                                        }default:
	                                        {}}break;
	                            }case 6:case 9:case 10:case 11:case 12:
	                            {
	                                if (c[e >> 2] | 0) {
	                                    d = 1;break a;
	                                }break;
	                            }default:
	                            {}}d = 0;
	                } else d = 1; while (0);i = f;return d | 0;
	            }function tb(a, b, d) {
	                a = a | 0;b = b | 0;d = d | 0;var e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0;o = i;if (!d) {
	                    i = o;return;
	                }m = b + -1 | 0;j = 1 - b | 0;k = ~b;g = 0;h = 0;l = 0;while (1) {
	                    f = (g | 0) != 0;if (f) c[a + (h * 216 | 0) + 200 >> 2] = a + ((h + -1 | 0) * 216 | 0);else c[a + (h * 216 | 0) + 200 >> 2] = 0;e = (l | 0) != 0;if (e) {
	                        c[a + (h * 216 | 0) + 204 >> 2] = a + ((h - b | 0) * 216 | 0);if (g >>> 0 < m >>> 0) c[a + (h * 216 | 0) + 208 >> 2] = a + ((j + h | 0) * 216 | 0);else n = 10;
	                    } else {
	                        c[a + (h * 216 | 0) + 204 >> 2] = 0;n = 10;
	                    }if ((n | 0) == 10) {
	                        n = 0;c[a + (h * 216 | 0) + 208 >> 2] = 0;
	                    }if (e & f) c[a + (h * 216 | 0) + 212 >> 2] = a + ((h + k | 0) * 216 | 0);else c[a + (h * 216 | 0) + 212 >> 2] = 0;e = g + 1 | 0;f = (e | 0) == (b | 0);h = h + 1 | 0;if ((h | 0) == (d | 0)) break;else {
	                        g = f ? 0 : e;l = (f & 1) + l | 0;
	                    }
	                }i = o;return;
	            }function ub(a, b) {
	                a = a | 0;b = b | 0;var d = 0;d = i;switch (b | 0) {case 4:
	                        break;case 0:
	                        {
	                            a = c[a + 200 >> 2] | 0;break;
	                        }case 2:
	                        {
	                            a = c[a + 208 >> 2] | 0;break;
	                        }case 1:
	                        {
	                            a = c[a + 204 >> 2] | 0;break;
	                        }case 3:
	                        {
	                            a = c[a + 212 >> 2] | 0;break;
	                        }default:
	                        a = 0;}i = d;return a | 0;
	            }function vb(a) {
	                a = a | 0;return 3152 + (a << 3) | 0;
	            }function wb(a) {
	                a = a | 0;return 2960 + (a << 3) | 0;
	            }function xb(a) {
	                a = a | 0;return 2768 + (a << 3) | 0;
	            }function yb(a) {
	                a = a | 0;return 2576 + (a << 3) | 0;
	            }function zb(a, b) {
	                a = a | 0;b = b | 0;var d = 0;d = i;if (!b) {
	                    i = d;return 0;
	                } else {
	                    i = d;return (c[a + 4 >> 2] | 0) == (c[b + 4 >> 2] | 0) | 0;
	                }return 0;
	            }function Ab(a) {
	                a = a | 0;var b = 0;b = i;id(a, 0, 3388);c[a + 8 >> 2] = 32;c[a + 4 >> 2] = 256;c[a + 1332 >> 2] = 1;i = b;return;
	            }function Bb(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0;h = i;f = c[b + 8 >> 2] | 0;g = a + (f << 2) + 20 | 0;e = c[g >> 2] | 0;do if (!e) {
	                    d = fd(92) | 0;c[g >> 2] = d;if (!d) {
	                        d = 65535;i = h;return d | 0;
	                    }
	                } else {
	                    d = a + 8 | 0;if ((f | 0) != (c[d >> 2] | 0)) {
	                        gd(c[e + 40 >> 2] | 0);c[(c[g >> 2] | 0) + 40 >> 2] = 0;gd(c[(c[g >> 2] | 0) + 84 >> 2] | 0);c[(c[g >> 2] | 0) + 84 >> 2] = 0;break;
	                    }f = a + 16 | 0;if (Ra(b, c[f >> 2] | 0) | 0) {
	                        gd(c[(c[g >> 2] | 0) + 40 >> 2] | 0);c[(c[g >> 2] | 0) + 40 >> 2] = 0;gd(c[(c[g >> 2] | 0) + 84 >> 2] | 0);c[(c[g >> 2] | 0) + 84 >> 2] = 0;c[d >> 2] = 33;c[a + 4 >> 2] = 257;c[f >> 2] = 0;c[a + 12 >> 2] = 0;break;
	                    }d = b + 40 | 0;gd(c[d >> 2] | 0);c[d >> 2] = 0;d = b + 84 | 0;gd(c[d >> 2] | 0);c[d >> 2] = 0;d = 0;i = h;return d | 0;
	                } while (0);f = (c[g >> 2] | 0) + 0 | 0;d = b + 0 | 0;e = f + 92 | 0;do {
	                    c[f >> 2] = c[d >> 2];f = f + 4 | 0;d = d + 4 | 0;
	                } while ((f | 0) < (e | 0));d = 0;i = h;return d | 0;
	            }function Cb(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0;h = i;f = c[b >> 2] | 0;g = a + (f << 2) + 148 | 0;d = c[g >> 2] | 0;do if (!d) {
	                    d = fd(72) | 0;c[g >> 2] = d;if (!d) {
	                        d = 65535;i = h;return d | 0;
	                    }
	                } else {
	                    e = a + 4 | 0;if ((f | 0) != (c[e >> 2] | 0)) {
	                        gd(c[d + 20 >> 2] | 0);c[(c[g >> 2] | 0) + 20 >> 2] = 0;gd(c[(c[g >> 2] | 0) + 24 >> 2] | 0);c[(c[g >> 2] | 0) + 24 >> 2] = 0;gd(c[(c[g >> 2] | 0) + 28 >> 2] | 0);c[(c[g >> 2] | 0) + 28 >> 2] = 0;gd(c[(c[g >> 2] | 0) + 44 >> 2] | 0);c[(c[g >> 2] | 0) + 44 >> 2] = 0;break;
	                    }if ((c[b + 4 >> 2] | 0) != (c[a + 8 >> 2] | 0)) {
	                        c[e >> 2] = 257;d = c[g >> 2] | 0;
	                    }gd(c[d + 20 >> 2] | 0);c[(c[g >> 2] | 0) + 20 >> 2] = 0;gd(c[(c[g >> 2] | 0) + 24 >> 2] | 0);c[(c[g >> 2] | 0) + 24 >> 2] = 0;gd(c[(c[g >> 2] | 0) + 28 >> 2] | 0);c[(c[g >> 2] | 0) + 28 >> 2] = 0;gd(c[(c[g >> 2] | 0) + 44 >> 2] | 0);c[(c[g >> 2] | 0) + 44 >> 2] = 0;
	                } while (0);f = (c[g >> 2] | 0) + 0 | 0;d = b + 0 | 0;e = f + 72 | 0;do {
	                    c[f >> 2] = c[d >> 2];f = f + 4 | 0;d = d + 4 | 0;
	                } while ((f | 0) < (e | 0));d = 0;i = h;return d | 0;
	            }function Db(a, b, d) {
	                a = a | 0;b = b | 0;d = d | 0;var e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0;q = i;o = a + (b << 2) + 148 | 0;f = c[o >> 2] | 0;if (!f) {
	                    o = 1;i = q;return o | 0;
	                }n = c[f + 4 >> 2] | 0;g = c[a + (n << 2) + 20 >> 2] | 0;if (!g) {
	                    o = 1;i = q;return o | 0;
	                }l = c[g + 52 >> 2] | 0;m = Z(c[g + 56 >> 2] | 0, l) | 0;h = c[f + 12 >> 2] | 0;a: do if (h >>> 0 > 1) {
	                    g = c[f + 16 >> 2] | 0;if (!g) {
	                        g = c[f + 20 >> 2] | 0;f = 0;while (1) {
	                            if ((c[g + (f << 2) >> 2] | 0) >>> 0 > m >>> 0) {
	                                e = 1;break;
	                            }f = f + 1 | 0;if (f >>> 0 >= h >>> 0) break a;
	                        }i = q;return e | 0;
	                    } else if ((g | 0) == 2) {
	                        k = c[f + 24 >> 2] | 0;j = c[f + 28 >> 2] | 0;h = h + -1 | 0;e = 0;while (1) {
	                            f = c[k + (e << 2) >> 2] | 0;g = c[j + (e << 2) >> 2] | 0;if (!(f >>> 0 <= g >>> 0 & g >>> 0 < m >>> 0)) {
	                                e = 1;g = 33;break;
	                            }e = e + 1 | 0;if (((f >>> 0) % (l >>> 0) | 0) >>> 0 > ((g >>> 0) % (l >>> 0) | 0) >>> 0) {
	                                e = 1;g = 33;break;
	                            }if (e >>> 0 >= h >>> 0) break a;
	                        }if ((g | 0) == 33) {
	                            i = q;return e | 0;
	                        }
	                    } else {
	                        if ((g + -3 | 0) >>> 0 < 3) {
	                            if ((c[f + 36 >> 2] | 0) >>> 0 > m >>> 0) e = 1;else break;i = q;return e | 0;
	                        }if ((g | 0) != 6) break;if ((c[f + 40 >> 2] | 0) >>> 0 < m >>> 0) e = 1;else break;i = q;return e | 0;
	                    }
	                } while (0);f = a + 4 | 0;g = c[f >> 2] | 0;do if ((g | 0) != 256) {
	                    e = a + 3380 | 0;if (!(c[e >> 2] | 0)) {
	                        if ((g | 0) == (b | 0)) break;g = a + 8 | 0;if ((n | 0) == (c[g >> 2] | 0)) {
	                            c[f >> 2] = b;c[a + 12 >> 2] = c[o >> 2];break;
	                        }if (!d) {
	                            o = 1;i = q;return o | 0;
	                        } else {
	                            c[f >> 2] = b;o = c[o >> 2] | 0;c[a + 12 >> 2] = o;o = c[o + 4 >> 2] | 0;c[g >> 2] = o;o = c[a + (o << 2) + 20 >> 2] | 0;c[a + 16 >> 2] = o;n = c[o + 52 >> 2] | 0;o = c[o + 56 >> 2] | 0;c[a + 1176 >> 2] = Z(o, n) | 0;c[a + 1340 >> 2] = n;c[a + 1344 >> 2] = o;c[e >> 2] = 1;break;
	                        }
	                    }c[e >> 2] = 0;e = a + 1212 | 0;gd(c[e >> 2] | 0);c[e >> 2] = 0;f = a + 1172 | 0;gd(c[f >> 2] | 0);c[f >> 2] = 0;g = a + 1176 | 0;c[e >> 2] = fd((c[g >> 2] | 0) * 216 | 0) | 0;o = fd(c[g >> 2] << 2) | 0;c[f >> 2] = o;f = c[e >> 2] | 0;if ((f | 0) == 0 | (o | 0) == 0) {
	                        o = 65535;i = q;return o | 0;
	                    }id(f, 0, (c[g >> 2] | 0) * 216 | 0);f = a + 16 | 0;tb(c[e >> 2] | 0, c[(c[f >> 2] | 0) + 52 >> 2] | 0, c[g >> 2] | 0);f = c[f >> 2] | 0;do if ((c[a + 1216 >> 2] | 0) == 0 ? (c[f + 16 >> 2] | 0) != 2 : 0) {
	                        if (((c[f + 80 >> 2] | 0) != 0 ? (p = c[f + 84 >> 2] | 0, (c[p + 920 >> 2] | 0) != 0) : 0) ? (c[p + 944 >> 2] | 0) == 0 : 0) {
	                            e = 1;break;
	                        }e = 0;
	                    } else e = 1; while (0);o = Z(c[f + 56 >> 2] | 0, c[f + 52 >> 2] | 0) | 0;e = lc(a + 1220 | 0, o, c[f + 88 >> 2] | 0, c[f + 44 >> 2] | 0, c[f + 12 >> 2] | 0, e) | 0;if (e) {
	                        o = e;i = q;return o | 0;
	                    }
	                } else {
	                    c[f >> 2] = b;o = c[o >> 2] | 0;c[a + 12 >> 2] = o;o = c[o + 4 >> 2] | 0;c[a + 8 >> 2] = o;o = c[a + (o << 2) + 20 >> 2] | 0;c[a + 16 >> 2] = o;n = c[o + 52 >> 2] | 0;o = c[o + 56 >> 2] | 0;c[a + 1176 >> 2] = Z(o, n) | 0;c[a + 1340 >> 2] = n;c[a + 1344 >> 2] = o;c[a + 3380 >> 2] = 1;
	                } while (0);o = 0;i = q;return o | 0;
	            }function Eb(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0;e = i;c[a + 1196 >> 2] = 0;c[a + 1192 >> 2] = 0;d = c[a + 1176 >> 2] | 0;if (!d) {
	                    i = e;return;
	                }a = c[a + 1212 >> 2] | 0;b = 0;do {
	                    c[a + (b * 216 | 0) + 4 >> 2] = 0;c[a + (b * 216 | 0) + 196 >> 2] = 0;b = b + 1 | 0;
	                } while (b >>> 0 < d >>> 0);i = e;return;
	            }function Fb(a) {
	                a = a | 0;return (c[a + 1188 >> 2] | 0) == 0 | 0;
	            }function Gb(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0;f = i;if (!(c[a + 1404 >> 2] | 0)) {
	                    if ((c[a + 1196 >> 2] | 0) == (c[a + 1176 >> 2] | 0)) {
	                        a = 1;i = f;return a | 0;
	                    }
	                } else {
	                    e = c[a + 1176 >> 2] | 0;if (!e) {
	                        a = 1;i = f;return a | 0;
	                    }a = c[a + 1212 >> 2] | 0;b = 0;d = 0;do {
	                        d = ((c[a + (b * 216 | 0) + 196 >> 2] | 0) != 0 & 1) + d | 0;b = b + 1 | 0;
	                    } while (b >>> 0 < e >>> 0);if ((d | 0) == (e | 0)) {
	                        a = 1;i = f;return a | 0;
	                    }
	                }a = 0;i = f;return a | 0;
	            }function Hb(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0;d = i;e = c[a + 16 >> 2] | 0;Kb(c[a + 1172 >> 2] | 0, c[a + 12 >> 2] | 0, b, c[e + 52 >> 2] | 0, c[e + 56 >> 2] | 0);i = d;return;
	            }function Ib(a, b, d, e) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0;t = i;i = i + 32 | 0;g = t + 24 | 0;j = t + 20 | 0;k = t + 16 | 0;n = t + 12 | 0;r = t + 8 | 0;q = t;c[e >> 2] = 0;switch (c[b >> 2] | 0) {case 5:case 1:
	                        {
	                            s = d + 1300 | 0;h = d + 1332 | 0;if (c[h >> 2] | 0) {
	                                c[e >> 2] = 1;c[h >> 2] = 0;
	                            }h = Ua(a, g) | 0;if (h) {
	                                o = h;i = t;return o | 0;
	                            }l = c[d + (c[g >> 2] << 2) + 148 >> 2] | 0;if (!l) {
	                                o = 65520;i = t;return o | 0;
	                            }h = c[l + 4 >> 2] | 0;m = c[d + (h << 2) + 20 >> 2] | 0;if (!m) {
	                                o = 65520;i = t;return o | 0;
	                            }g = c[d + 8 >> 2] | 0;if (!((g | 0) == 32 | (h | 0) == (g | 0)) ? (c[b >> 2] | 0) != 5 : 0) {
	                                o = 65520;i = t;return o | 0;
	                            }g = c[d + 1304 >> 2] | 0;h = c[b + 4 >> 2] | 0;if ((g | 0) != (h | 0) ? (g | 0) == 0 | (h | 0) == 0 : 0) c[e >> 2] = 1;h = (c[b >> 2] | 0) == 5;if ((c[s >> 2] | 0) == 5) {
	                                if (!h) f = 16;
	                            } else if (h) f = 16;if ((f | 0) == 16) c[e >> 2] = 1;g = m + 12 | 0;if (Va(a, c[g >> 2] | 0, j) | 0) {
	                                o = 1;i = t;return o | 0;
	                            }f = d + 1308 | 0;h = c[j >> 2] | 0;if ((c[f >> 2] | 0) != (h | 0)) {
	                                c[f >> 2] = h;c[e >> 2] = 1;
	                            }if ((c[b >> 2] | 0) == 5) {
	                                if (Wa(a, c[g >> 2] | 0, 5, k) | 0) {
	                                    o = 1;i = t;return o | 0;
	                                }if ((c[s >> 2] | 0) == 5) {
	                                    h = d + 1312 | 0;f = c[h >> 2] | 0;g = c[k >> 2] | 0;if ((f | 0) == (g | 0)) g = f;else c[e >> 2] = 1;
	                                } else {
	                                    g = c[k >> 2] | 0;h = d + 1312 | 0;
	                                }c[h >> 2] = g;
	                            }g = c[m + 16 >> 2] | 0;if (!g) {
	                                if (Xa(a, m, c[b >> 2] | 0, n) | 0) {
	                                    o = 1;i = t;return o | 0;
	                                }f = d + 1316 | 0;g = c[n >> 2] | 0;if ((c[f >> 2] | 0) != (g | 0)) {
	                                    c[f >> 2] = g;c[e >> 2] = 1;
	                                }if (c[l + 8 >> 2] | 0) {
	                                    f = Ya(a, m, c[b >> 2] | 0, r) | 0;if (f) {
	                                        o = f;i = t;return o | 0;
	                                    }g = d + 1320 | 0;f = c[r >> 2] | 0;if ((c[g >> 2] | 0) != (f | 0)) {
	                                        c[g >> 2] = f;c[e >> 2] = 1;
	                                    }
	                                }
	                            } else if ((g | 0) == 1 ? (c[m + 24 >> 2] | 0) == 0 : 0) {
	                                h = l + 8 | 0;g = Za(a, m, c[b >> 2] | 0, c[h >> 2] | 0, q) | 0;if (g) {
	                                    o = g;i = t;return o | 0;
	                                }f = d + 1324 | 0;g = c[q >> 2] | 0;if ((c[f >> 2] | 0) != (g | 0)) {
	                                    c[f >> 2] = g;c[e >> 2] = 1;
	                                }if ((c[h >> 2] | 0) != 0 ? (p = d + 1328 | 0, o = c[q + 4 >> 2] | 0, (c[p >> 2] | 0) != (o | 0)) : 0) {
	                                    c[p >> 2] = o;c[e >> 2] = 1;
	                                }
	                            }n = b;a = c[n + 4 >> 2] | 0;o = s;c[o >> 2] = c[n >> 2];c[o + 4 >> 2] = a;o = 0;i = t;return o | 0;
	                        }case 6:case 7:case 8:case 9:case 10:case 11:case 13:case 14:case 15:case 16:case 17:case 18:
	                        {
	                            c[e >> 2] = 1;o = 0;i = t;return o | 0;
	                        }default:
	                        {
	                            o = 0;i = t;return o | 0;
	                        }}return 0;
	            }function Jb(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0;n = i;l = 0;a: while (1) {
	                    b = c[a + (l << 2) + 148 >> 2] | 0;b: do if ((b | 0) != 0 ? (k = c[a + (c[b + 4 >> 2] << 2) + 20 >> 2] | 0, (k | 0) != 0) : 0) {
	                        j = c[k + 52 >> 2] | 0;m = Z(c[k + 56 >> 2] | 0, j) | 0;f = c[b + 12 >> 2] | 0;if (f >>> 0 <= 1) {
	                            b = 0;d = 18;break a;
	                        }d = c[b + 16 >> 2] | 0;if ((d | 0) == 2) {
	                            h = c[b + 24 >> 2] | 0;g = c[b + 28 >> 2] | 0;f = f + -1 | 0;e = 0;while (1) {
	                                b = c[h + (e << 2) >> 2] | 0;d = c[g + (e << 2) >> 2] | 0;if (!(b >>> 0 <= d >>> 0 & d >>> 0 < m >>> 0)) break b;e = e + 1 | 0;if (((b >>> 0) % (j >>> 0) | 0) >>> 0 > ((d >>> 0) % (j >>> 0) | 0) >>> 0) break b;if (e >>> 0 >= f >>> 0) {
	                                    b = 0;d = 18;break a;
	                                }
	                            }
	                        } else if (d) {
	                            if ((d + -3 | 0) >>> 0 < 3) if ((c[b + 36 >> 2] | 0) >>> 0 > m >>> 0) break;else {
	                                b = 0;d = 18;break a;
	                            }if ((d | 0) != 6) {
	                                b = 0;d = 18;break a;
	                            }if ((c[b + 40 >> 2] | 0) >>> 0 < m >>> 0) break;else {
	                                b = 0;d = 18;break a;
	                            }
	                        } else {
	                            d = c[b + 20 >> 2] | 0;b = 0;while (1) {
	                                if ((c[d + (b << 2) >> 2] | 0) >>> 0 > m >>> 0) break b;b = b + 1 | 0;if (b >>> 0 >= f >>> 0) {
	                                    b = 0;d = 18;break a;
	                                }
	                            }
	                        }
	                    } while (0);l = l + 1 | 0;if (l >>> 0 >= 256) {
	                        b = 1;d = 18;break;
	                    }
	                }if ((d | 0) == 18) {
	                    i = n;return b | 0;
	                }return 0;
	            }function Kb(a, b, d, e, f) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0;v = i;t = Z(f, e) | 0;o = c[b + 12 >> 2] | 0;if ((o | 0) == 1) {
	                    id(a, 0, t << 2);i = v;return;
	                }k = c[b + 16 >> 2] | 0;if ((k + -3 | 0) >>> 0 < 3) {
	                    d = Z(c[b + 36 >> 2] | 0, d) | 0;d = d >>> 0 < t >>> 0 ? d : t;if ((k & -2 | 0) == 4) {
	                        n = (c[b + 32 >> 2] | 0) == 0 ? d : t - d | 0;u = d;
	                    } else {
	                        n = 0;u = d;
	                    }
	                } else {
	                    n = 0;u = 0;
	                }switch (k | 0) {case 1:
	                        {
	                            if (!t) {
	                                i = v;return;
	                            } else h = 0;do {
	                                c[a + (h << 2) >> 2] = ((((Z((h >>> 0) / (e >>> 0) | 0, o) | 0) >>> 1) + ((h >>> 0) % (e >>> 0) | 0) | 0) >>> 0) % (o >>> 0) | 0;h = h + 1 | 0;
	                            } while ((h | 0) != (t | 0));i = v;return;
	                        }case 5:
	                        {
	                            d = c[b + 32 >> 2] | 0;if (!e) {
	                                i = v;return;
	                            }k = 1 - d | 0;if (!f) {
	                                i = v;return;
	                            } else {
	                                g = 0;j = 0;
	                            }while (1) {
	                                h = 0;b = j;while (1) {
	                                    m = a + ((Z(h, e) | 0) + g << 2) | 0;c[m >> 2] = b >>> 0 < n >>> 0 ? d : k;h = h + 1 | 0;if ((h | 0) == (f | 0)) break;else b = b + 1 | 0;
	                                }g = g + 1 | 0;if ((g | 0) == (e | 0)) break;else j = j + f | 0;
	                            }i = v;return;
	                        }case 3:
	                        {
	                            m = c[b + 32 >> 2] | 0;if (t) {
	                                d = 0;do {
	                                    c[a + (d << 2) >> 2] = 1;d = d + 1 | 0;
	                                } while ((d | 0) != (t | 0));
	                            }l = (e - m | 0) >>> 1;n = (f - m | 0) >>> 1;if (!u) {
	                                i = v;return;
	                            }t = m << 1;r = t + -1 | 0;s = e + -1 | 0;t = 1 - t | 0;q = f + -1 | 0;o = n;p = 0;g = l;f = l;k = n;b = l;j = m + -1 | 0;d = n;while (1) {
	                                n = a + ((Z(d, e) | 0) + b << 2) | 0;l = (c[n >> 2] | 0) == 1;h = l & 1;if (l) c[n >> 2] = 0;do if (!((j | 0) == -1 & (b | 0) == (g | 0))) {
	                                    if ((j | 0) == 1 & (b | 0) == (f | 0)) {
	                                        b = f + 1 | 0;b = (b | 0) < (s | 0) ? b : s;n = o;l = g;f = b;j = 0;m = t;break;
	                                    }if ((m | 0) == -1 & (d | 0) == (k | 0)) {
	                                        d = k + -1 | 0;d = (d | 0) > 0 ? d : 0;n = o;l = g;k = d;j = t;m = 0;break;
	                                    }if ((m | 0) == 1 & (d | 0) == (o | 0)) {
	                                        d = o + 1 | 0;d = (d | 0) < (q | 0) ? d : q;n = d;l = g;j = r;m = 0;break;
	                                    } else {
	                                        n = o;l = g;b = b + j | 0;d = d + m | 0;break;
	                                    }
	                                } else {
	                                    b = g + -1 | 0;b = (b | 0) > 0 ? b : 0;n = o;l = b;j = 0;m = r;
	                                } while (0);p = h + p | 0;if (p >>> 0 >= u >>> 0) break;else {
	                                    o = n;g = l;
	                                }
	                            }i = v;return;
	                        }case 4:
	                        {
	                            h = c[b + 32 >> 2] | 0;if (!t) {
	                                i = v;return;
	                            }d = 1 - h | 0;g = 0;do {
	                                c[a + (g << 2) >> 2] = g >>> 0 < n >>> 0 ? h : d;g = g + 1 | 0;
	                            } while ((g | 0) != (t | 0));i = v;return;
	                        }case 2:
	                        {
	                            n = c[b + 24 >> 2] | 0;m = c[b + 28 >> 2] | 0;h = o + -1 | 0;if (t) {
	                                d = 0;do {
	                                    c[a + (d << 2) >> 2] = h;d = d + 1 | 0;
	                                } while ((d | 0) != (t | 0));
	                            }if (!h) {
	                                i = v;return;
	                            }g = o + -2 | 0;while (1) {
	                                j = c[n + (g << 2) >> 2] | 0;d = (j >>> 0) / (e >>> 0) | 0;j = (j >>> 0) % (e >>> 0) | 0;h = c[m + (g << 2) >> 2] | 0;l = (h >>> 0) / (e >>> 0) | 0;h = (h >>> 0) % (e >>> 0) | 0;a: do if (d >>> 0 <= l >>> 0) {
	                                    if (j >>> 0 > h >>> 0) while (1) {
	                                        d = d + 1 | 0;if (d >>> 0 > l >>> 0) break a;
	                                    }do {
	                                        k = Z(d, e) | 0;b = j;do {
	                                            c[a + (b + k << 2) >> 2] = g;b = b + 1 | 0;
	                                        } while (b >>> 0 <= h >>> 0);d = d + 1 | 0;
	                                    } while (d >>> 0 <= l >>> 0);
	                                } while (0);if (!g) break;else g = g + -1 | 0;
	                            }i = v;return;
	                        }case 0:
	                        {
	                            l = c[b + 20 >> 2] | 0;if (!t) {
	                                i = v;return;
	                            } else {
	                                h = 0;j = 0;
	                            }while (1) {
	                                while (1) if (h >>> 0 < o >>> 0) break;else h = 0;b = l + (h << 2) | 0;d = c[b >> 2] | 0;b: do if (!d) d = 0;else {
	                                    k = 0;do {
	                                        g = k + j | 0;if (g >>> 0 >= t >>> 0) break b;c[a + (g << 2) >> 2] = h;k = k + 1 | 0;d = c[b >> 2] | 0;
	                                    } while (k >>> 0 < d >>> 0);
	                                } while (0);j = d + j | 0;if (j >>> 0 >= t >>> 0) break;else h = h + 1 | 0;
	                            }i = v;return;
	                        }default:
	                        {
	                            if (!t) {
	                                i = v;return;
	                            }g = c[b + 44 >> 2] | 0;h = 0;do {
	                                c[a + (h << 2) >> 2] = c[g + (h << 2) >> 2];h = h + 1 | 0;
	                            } while ((h | 0) != (t | 0));i = v;return;
	                        }}
	            }function Lb() {
	                return 3472;
	            }function Mb(a, b, d, e, f, g) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0;k = i;i = i + 80 | 0;h = k + 32 | 0;j = k;Nb(d, h, j, e);if ((cb(c[a >> 2] | 0) | 0) == 1) {
	                    e = Ob(a, g, b + 328 | 0, h, j, f) | 0;if (e) {
	                        i = k;return e | 0;
	                    }
	                } else {
	                    e = Pb(a, g, b, h, j, f) | 0;if (e) {
	                        i = k;return e | 0;
	                    }
	                }e = Qb(a, g + 256 | 0, b + 1352 | 0, h + 21 | 0, j + 16 | 0, c[b + 140 >> 2] | 0, f) | 0;if (e) {
	                    i = k;return e | 0;
	                }if ((c[a + 196 >> 2] | 0) >>> 0 > 1) {
	                    e = 0;i = k;return e | 0;
	                }sc(d, g);e = 0;i = k;return e | 0;
	            }function Nb(b, d, e, f) {
	                b = b | 0;d = d | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0;s = i;if (!f) {
	                    i = s;return;
	                }p = c[b + 4 >> 2] | 0;q = Z(c[b + 8 >> 2] | 0, p) | 0;n = (f >>> 0) / (p >>> 0) | 0;g = Z(n, p) | 0;o = f - g | 0;k = p << 4;h = c[b >> 2] | 0;j = (o << 4) + (Z(p << 8, n) | 0) | 0;r = (n | 0) != 0;if (r) {
	                    m = j - (k | 1) | 0;a[d >> 0] = a[h + m >> 0] | 0;a[d + 1 >> 0] = a[h + (m + 1) >> 0] | 0;a[d + 2 >> 0] = a[h + (m + 2) >> 0] | 0;a[d + 3 >> 0] = a[h + (m + 3) >> 0] | 0;a[d + 4 >> 0] = a[h + (m + 4) >> 0] | 0;a[d + 5 >> 0] = a[h + (m + 5) >> 0] | 0;a[d + 6 >> 0] = a[h + (m + 6) >> 0] | 0;a[d + 7 >> 0] = a[h + (m + 7) >> 0] | 0;a[d + 8 >> 0] = a[h + (m + 8) >> 0] | 0;a[d + 9 >> 0] = a[h + (m + 9) >> 0] | 0;a[d + 10 >> 0] = a[h + (m + 10) >> 0] | 0;a[d + 11 >> 0] = a[h + (m + 11) >> 0] | 0;a[d + 12 >> 0] = a[h + (m + 12) >> 0] | 0;a[d + 13 >> 0] = a[h + (m + 13) >> 0] | 0;a[d + 14 >> 0] = a[h + (m + 14) >> 0] | 0;a[d + 15 >> 0] = a[h + (m + 15) >> 0] | 0;a[d + 16 >> 0] = a[h + (m + 16) >> 0] | 0;a[d + 17 >> 0] = a[h + (m + 17) >> 0] | 0;a[d + 18 >> 0] = a[h + (m + 18) >> 0] | 0;a[d + 19 >> 0] = a[h + (m + 19) >> 0] | 0;a[d + 20 >> 0] = a[h + (m + 20) >> 0] | 0;m = d + 21 | 0;
	                } else m = d;l = (g | 0) != (f | 0);if (l) {
	                    j = j + -1 | 0;a[e >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 1 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 2 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 3 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 4 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 5 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 6 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 7 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 8 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 9 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 10 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 11 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 12 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 13 >> 0] = a[h + j >> 0] | 0;j = j + k | 0;a[e + 14 >> 0] = a[h + j >> 0] | 0;a[e + 15 >> 0] = a[h + (j + k) >> 0] | 0;e = e + 16 | 0;
	                }d = p << 3 & 2147483640;f = c[b >> 2] | 0;g = (Z(n << 3, d) | 0) + (q << 8) + (o << 3) | 0;if (r) {
	                    b = g - (d | 1) | 0;a[m >> 0] = a[f + b >> 0] | 0;a[m + 1 >> 0] = a[f + (b + 1) >> 0] | 0;a[m + 2 >> 0] = a[f + (b + 2) >> 0] | 0;a[m + 3 >> 0] = a[f + (b + 3) >> 0] | 0;a[m + 4 >> 0] = a[f + (b + 4) >> 0] | 0;a[m + 5 >> 0] = a[f + (b + 5) >> 0] | 0;a[m + 6 >> 0] = a[f + (b + 6) >> 0] | 0;a[m + 7 >> 0] = a[f + (b + 7) >> 0] | 0;a[m + 8 >> 0] = a[f + (b + 8) >> 0] | 0;b = b + (q << 6) | 0;a[m + 9 >> 0] = a[f + b >> 0] | 0;a[m + 10 >> 0] = a[f + (b + 1) >> 0] | 0;a[m + 11 >> 0] = a[f + (b + 2) >> 0] | 0;a[m + 12 >> 0] = a[f + (b + 3) >> 0] | 0;a[m + 13 >> 0] = a[f + (b + 4) >> 0] | 0;a[m + 14 >> 0] = a[f + (b + 5) >> 0] | 0;a[m + 15 >> 0] = a[f + (b + 6) >> 0] | 0;a[m + 16 >> 0] = a[f + (b + 7) >> 0] | 0;a[m + 17 >> 0] = a[f + (b + 8) >> 0] | 0;
	                }if (!l) {
	                    i = s;return;
	                }m = g + -1 | 0;a[e >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 1 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 2 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 3 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 4 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 5 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 6 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 7 >> 0] = a[f + m >> 0] | 0;m = m + (d + ((q << 6) - (p << 6))) | 0;a[e + 8 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 9 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 10 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 11 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 12 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 13 >> 0] = a[f + m >> 0] | 0;m = m + d | 0;a[e + 14 >> 0] = a[f + m >> 0] | 0;a[e + 15 >> 0] = a[f + (m + d) >> 0] | 0;i = s;return;
	            }function Ob(b, e, f, g, h, j) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;var k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0;z = i;k = b + 200 | 0;l = zb(b, c[k >> 2] | 0) | 0;o = (j | 0) != 0;if ((l | 0) != 0 & o) {
	                    n = (cb(c[c[k >> 2] >> 2] | 0) | 0) == 2;n = n ? 0 : l;
	                } else n = l;j = b + 204 | 0;l = zb(b, c[j >> 2] | 0) | 0;if ((l | 0) != 0 & o) {
	                    p = (cb(c[c[j >> 2] >> 2] | 0) | 0) == 2;p = p ? 0 : l;
	                } else p = l;j = b + 212 | 0;l = zb(b, c[j >> 2] | 0) | 0;if ((l | 0) != 0 & o) {
	                    r = (cb(c[c[j >> 2] >> 2] | 0) | 0) == 2;l = r ? 0 : l;
	                }j = fb(c[b >> 2] | 0) | 0;if ((j | 0) == 2) {
	                    l = g + 1 | 0;k = (n | 0) != 0;j = (p | 0) != 0;do if (!(k & j)) {
	                        if (k) {
	                            k = ((d[h >> 0] | 0) + 8 + (d[h + 1 >> 0] | 0) + (d[h + 2 >> 0] | 0) + (d[h + 3 >> 0] | 0) + (d[h + 4 >> 0] | 0) + (d[h + 5 >> 0] | 0) + (d[h + 6 >> 0] | 0) + (d[h + 7 >> 0] | 0) + (d[h + 8 >> 0] | 0) + (d[h + 9 >> 0] | 0) + (d[h + 10 >> 0] | 0) + (d[h + 11 >> 0] | 0) + (d[h + 12 >> 0] | 0) + (d[h + 13 >> 0] | 0) + (d[h + 14 >> 0] | 0) + (d[h + 15 >> 0] | 0) | 0) >>> 4;break;
	                        }if (j) k = ((d[l >> 0] | 0) + 8 + (d[g + 2 >> 0] | 0) + (d[g + 3 >> 0] | 0) + (d[g + 4 >> 0] | 0) + (d[g + 5 >> 0] | 0) + (d[g + 6 >> 0] | 0) + (d[g + 7 >> 0] | 0) + (d[g + 8 >> 0] | 0) + (d[g + 9 >> 0] | 0) + (d[g + 10 >> 0] | 0) + (d[g + 11 >> 0] | 0) + (d[g + 12 >> 0] | 0) + (d[g + 13 >> 0] | 0) + (d[g + 14 >> 0] | 0) + (d[g + 15 >> 0] | 0) + (d[g + 16 >> 0] | 0) | 0) >>> 4;else k = 128;
	                    } else {
	                        j = 0;k = 0;do {
	                            r = j;j = j + 1 | 0;k = (d[g + j >> 0] | 0) + k + (d[h + r >> 0] | 0) | 0;
	                        } while ((j | 0) != 16);k = (k + 16 | 0) >>> 5;
	                    } while (0);nd(e | 0, k & 255 | 0, 256) | 0;
	                } else if ((j | 0) == 1) {
	                    if (!n) {
	                        r = 1;i = z;return r | 0;
	                    } else {
	                        k = e;j = 0;while (1) {
	                            r = h + j | 0;a[k >> 0] = a[r >> 0] | 0;a[k + 1 >> 0] = a[r >> 0] | 0;a[k + 2 >> 0] = a[r >> 0] | 0;a[k + 3 >> 0] = a[r >> 0] | 0;a[k + 4 >> 0] = a[r >> 0] | 0;a[k + 5 >> 0] = a[r >> 0] | 0;a[k + 6 >> 0] = a[r >> 0] | 0;a[k + 7 >> 0] = a[r >> 0] | 0;a[k + 8 >> 0] = a[r >> 0] | 0;a[k + 9 >> 0] = a[r >> 0] | 0;a[k + 10 >> 0] = a[r >> 0] | 0;a[k + 11 >> 0] = a[r >> 0] | 0;a[k + 12 >> 0] = a[r >> 0] | 0;a[k + 13 >> 0] = a[r >> 0] | 0;a[k + 14 >> 0] = a[r >> 0] | 0;a[k + 15 >> 0] = a[r >> 0] | 0;j = j + 1 | 0;if ((j | 0) == 16) break;else k = k + 16 | 0;
	                        }
	                    }
	                } else if (!j) {
	                    if (!p) {
	                        r = 1;i = z;return r | 0;
	                    }b = g + 1 | 0;m = g + 2 | 0;s = g + 3 | 0;t = g + 4 | 0;u = g + 5 | 0;v = g + 6 | 0;w = g + 7 | 0;x = g + 8 | 0;y = g + 9 | 0;h = g + 10 | 0;l = g + 11 | 0;j = g + 12 | 0;k = g + 13 | 0;q = g + 14 | 0;r = g + 15 | 0;p = g + 16 | 0;o = e;n = 0;while (1) {
	                        a[o >> 0] = a[b >> 0] | 0;a[o + 1 >> 0] = a[m >> 0] | 0;a[o + 2 >> 0] = a[s >> 0] | 0;a[o + 3 >> 0] = a[t >> 0] | 0;a[o + 4 >> 0] = a[u >> 0] | 0;a[o + 5 >> 0] = a[v >> 0] | 0;a[o + 6 >> 0] = a[w >> 0] | 0;a[o + 7 >> 0] = a[x >> 0] | 0;a[o + 8 >> 0] = a[y >> 0] | 0;a[o + 9 >> 0] = a[h >> 0] | 0;a[o + 10 >> 0] = a[l >> 0] | 0;a[o + 11 >> 0] = a[j >> 0] | 0;a[o + 12 >> 0] = a[k >> 0] | 0;a[o + 13 >> 0] = a[q >> 0] | 0;a[o + 14 >> 0] = a[r >> 0] | 0;a[o + 15 >> 0] = a[p >> 0] | 0;n = n + 1 | 0;if ((n | 0) == 16) break;else o = o + 16 | 0;
	                    }
	                } else {
	                    if (!((n | 0) != 0 & (p | 0) != 0 & (l | 0) != 0)) {
	                        r = 1;i = z;return r | 0;
	                    }j = d[g + 16 >> 0] | 0;m = d[h + 15 >> 0] | 0;o = d[g >> 0] | 0;p = (((d[g + 9 >> 0] | 0) - (d[g + 7 >> 0] | 0) + ((d[g + 10 >> 0] | 0) - (d[g + 6 >> 0] | 0) << 1) + (((d[g + 11 >> 0] | 0) - (d[g + 5 >> 0] | 0) | 0) * 3 | 0) + ((d[g + 12 >> 0] | 0) - (d[g + 4 >> 0] | 0) << 2) + (((d[g + 13 >> 0] | 0) - (d[g + 3 >> 0] | 0) | 0) * 5 | 0) + (((d[g + 14 >> 0] | 0) - (d[g + 2 >> 0] | 0) | 0) * 6 | 0) + (((d[g + 15 >> 0] | 0) - (d[g + 1 >> 0] | 0) | 0) * 7 | 0) + (j - o << 3) | 0) * 5 | 0) + 32 >> 6;o = (((d[h + 8 >> 0] | 0) - (d[h + 6 >> 0] | 0) + (m - o << 3) + ((d[h + 9 >> 0] | 0) - (d[h + 5 >> 0] | 0) << 1) + (((d[h + 10 >> 0] | 0) - (d[h + 4 >> 0] | 0) | 0) * 3 | 0) + ((d[h + 11 >> 0] | 0) - (d[h + 3 >> 0] | 0) << 2) + (((d[h + 12 >> 0] | 0) - (d[h + 2 >> 0] | 0) | 0) * 5 | 0) + (((d[h + 13 >> 0] | 0) - (d[h + 1 >> 0] | 0) | 0) * 6 | 0) + (((d[h + 14 >> 0] | 0) - (d[h >> 0] | 0) | 0) * 7 | 0) | 0) * 5 | 0) + 32 >> 6;j = (m + j << 4) + 16 | 0;m = 0;do {
	                        k = j + (Z(m + -7 | 0, o) | 0) | 0;n = m << 4;b = 0;do {
	                            l = k + (Z(b + -7 | 0, p) | 0) >> 5;if ((l | 0) < 0) l = 0;else l = (l | 0) > 255 ? -1 : l & 255;a[e + (b + n) >> 0] = l;b = b + 1 | 0;
	                        } while ((b | 0) != 16);m = m + 1 | 0;
	                    } while ((m | 0) != 16);
	                }Rb(e, f, 0);Rb(e, f + 64 | 0, 1);Rb(e, f + 128 | 0, 2);Rb(e, f + 192 | 0, 3);Rb(e, f + 256 | 0, 4);Rb(e, f + 320 | 0, 5);Rb(e, f + 384 | 0, 6);Rb(e, f + 448 | 0, 7);Rb(e, f + 512 | 0, 8);Rb(e, f + 576 | 0, 9);Rb(e, f + 640 | 0, 10);Rb(e, f + 704 | 0, 11);Rb(e, f + 768 | 0, 12);Rb(e, f + 832 | 0, 13);Rb(e, f + 896 | 0, 14);Rb(e, f + 960 | 0, 15);r = 0;i = z;return r | 0;
	            }function Pb(b, e, f, g, h, j) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;var k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0,
	                    G = 0,
	                    H = 0,
	                    I = 0,
	                    J = 0,
	                    K = 0,
	                    L = 0,
	                    M = 0,
	                    N = 0;N = i;M = (j | 0) != 0;L = 0;a: while (1) {
	                    l = vb(L) | 0;n = c[l + 4 >> 2] | 0;l = ub(b, c[l >> 2] | 0) | 0;j = zb(b, l) | 0;if ((j | 0) != 0 & M) {
	                        E = (cb(c[l >> 2] | 0) | 0) == 2;j = E ? 0 : j;
	                    }o = wb(L) | 0;m = c[o + 4 >> 2] | 0;o = ub(b, c[o >> 2] | 0) | 0;k = zb(b, o) | 0;if ((k | 0) != 0 & M) {
	                        E = (cb(c[o >> 2] | 0) | 0) == 2;k = E ? 0 : k;
	                    }G = (j | 0) != 0;H = (k | 0) != 0;I = G & H;if (I) {
	                        if (!(cb(c[l >> 2] | 0) | 0)) n = d[l + (n & 255) + 82 >> 0] | 0;else n = 2;if (!(cb(c[o >> 2] | 0) | 0)) j = d[o + (m & 255) + 82 >> 0] | 0;else j = 2;j = n >>> 0 < j >>> 0 ? n : j;
	                    } else j = 2;if (!(c[f + (L << 2) + 12 >> 2] | 0)) {
	                        E = c[f + (L << 2) + 76 >> 2] | 0;j = (E >>> 0 >= j >>> 0 & 1) + E | 0;
	                    }a[b + L + 82 >> 0] = j;l = c[(xb(L) | 0) >> 2] | 0;l = ub(b, l) | 0;m = zb(b, l) | 0;if ((m | 0) != 0 & M) {
	                        E = (cb(c[l >> 2] | 0) | 0) == 2;m = E ? 0 : m;
	                    }l = c[(yb(L) | 0) >> 2] | 0;l = ub(b, l) | 0;n = zb(b, l) | 0;if ((n | 0) != 0 & M) {
	                        E = (cb(c[l >> 2] | 0) | 0) == 2;n = E ? 0 : n;
	                    }J = c[3344 + (L << 2) >> 2] | 0;K = c[3408 + (L << 2) >> 2] | 0;r = (1285 >>> L & 1 | 0) != 0;if (r) {
	                        o = h + K | 0;l = h + (K + 1) | 0;p = h + (K + 2) | 0;q = h + (K + 3) | 0;
	                    } else {
	                        q = (K << 4) + J | 0;o = e + (q + -1) | 0;l = e + (q + 15) | 0;p = e + (q + 31) | 0;q = e + (q + 47) | 0;
	                    }A = a[o >> 0] | 0;y = a[l >> 0] | 0;F = a[p >> 0] | 0;E = a[q >> 0] | 0;do if (!(51 >>> L & 1)) {
	                        x = K + -1 | 0;w = (x << 4) + J | 0;o = a[e + w >> 0] | 0;q = a[e + (w + 1) >> 0] | 0;s = a[e + (w + 2) >> 0] | 0;u = a[e + (w + 3) >> 0] | 0;t = a[e + (w + 4) >> 0] | 0;l = a[e + (w + 5) >> 0] | 0;v = a[e + (w + 6) >> 0] | 0;p = a[e + (w + 7) >> 0] | 0;if (r) {
	                            D = v;C = u;u = p;B = q;z = s;v = h + x | 0;break;
	                        } else {
	                            D = v;C = u;u = p;B = q;z = s;v = e + (w + -1) | 0;break;
	                        }
	                    } else {
	                        D = a[g + (J + 7) >> 0] | 0;C = a[g + (J + 4) >> 0] | 0;t = a[g + (J + 5) >> 0] | 0;l = a[g + (J + 6) >> 0] | 0;o = a[g + (J + 1) >> 0] | 0;u = a[g + (J + 8) >> 0] | 0;B = a[g + (J + 2) >> 0] | 0;z = a[g + (J + 3) >> 0] | 0;v = g + J | 0;
	                    } while (0);v = a[v >> 0] | 0;switch (j | 0) {case 1:
	                            {
	                                if (!G) {
	                                    k = 1;j = 51;break a;
	                                }j = Z(A & 255, 16843009) | 0;s = Z(y & 255, 16843009) | 0;v = Z(F & 255, 16843009) | 0;q = j & 255;p = s & 255;n = v & 255;m = j >>> 8 & 255;l = j >>> 16 & 255;j = j >>> 24 & 255;k = s >>> 8 & 255;r = s >>> 16 & 255;s = s >>> 24 & 255;t = v >>> 8 & 255;u = v >>> 16 & 255;v = v >>> 24 & 255;o = Z(E & 255, 16843009) | 0;break;
	                            }case 5:
	                            {
	                                if (!(I & (n | 0) != 0)) {
	                                    k = 1;j = 51;break a;
	                                }n = v & 255;u = o & 255;t = (u + 1 + n | 0) >>> 1 & 255;x = B & 255;E = (x + 2 + (u << 1) + n | 0) >>> 2;B = A & 255;A = u + 2 | 0;o = (A + B + (n << 1) | 0) >>> 2;u = (x + 1 + u | 0) >>> 1 & 255;s = z & 255;A = ((x << 1) + s + A | 0) >>> 2;v = (s + 1 + x | 0) >>> 1 & 255;C = C & 255;D = y & 255;q = t;p = o & 255;n = (D + 2 + (B << 1) + n | 0) >>> 2 & 255;m = u;l = v;j = (C + 1 + s | 0) >>> 1 & 255;k = E & 255;r = A & 255;s = (C + 2 + x + (s << 1) | 0) >>> 2 & 255;o = A << 24 | (B + 2 + (F & 255) + (D << 1) | 0) >>> 2 & 255 | E << 16 & 16711680 | o << 8 & 65280;break;
	                            }case 6:
	                            {
	                                if (!(I & (n | 0) != 0)) {
	                                    k = 1;j = 51;break a;
	                                }l = v & 255;s = A & 255;u = s + 1 | 0;r = (u + l | 0) >>> 1 & 255;C = y & 255;v = ((s << 1) + 2 + C + l | 0) >>> 2 & 255;u = (u + C | 0) >>> 1 & 255;D = F & 255;s = s + 2 | 0;y = (s + (C << 1) + D | 0) >>> 2;A = (C + 1 + D | 0) >>> 1;E = E & 255;j = o & 255;s = (s + j + (l << 1) | 0) >>> 2 & 255;k = B & 255;q = r;p = u;n = A & 255;m = s;l = (k + 2 + (j << 1) + l | 0) >>> 2 & 255;j = ((z & 255) + 2 + (k << 1) + j | 0) >>> 2 & 255;k = v;t = y & 255;o = y << 24 | A << 16 & 16711680 | (D + 1 + E | 0) >>> 1 & 255 | C + 2 + (D << 1) + E << 6 & 65280;break;
	                            }case 2:
	                            {
	                                do if (!I) {
	                                    if (G) {
	                                        j = ((A & 255) + 2 + (y & 255) + (F & 255) + (E & 255) | 0) >>> 2;break;
	                                    }if (H) j = ((C & 255) + 2 + (z & 255) + (B & 255) + (o & 255) | 0) >>> 2;else j = 128;
	                                } else j = ((A & 255) + 4 + (y & 255) + (F & 255) + (E & 255) + (C & 255) + (z & 255) + (B & 255) + (o & 255) | 0) >>> 3; while (0);o = Z(j & 255, 16843009) | 0;n = o & 255;t = o >>> 8 & 255;u = o >>> 16 & 255;v = o >>> 24 & 255;q = n;p = n;m = t;l = u;j = v;k = t;r = u;s = v;break;
	                            }case 3:
	                            {
	                                if (!k) {
	                                    k = 1;j = 51;break a;
	                                }n = (m | 0) == 0;q = B & 255;m = z & 255;p = m + 2 | 0;k = C & 255;B = k + 2 | 0;m = (B + q + (m << 1) | 0) >>> 2 & 255;v = (n ? C : t) & 255;k = (p + (k << 1) + v | 0) >>> 2 & 255;E = (n ? C : l) & 255;B = (B + E + (v << 1) | 0) >>> 2;t = B & 255;A = (n ? C : D) & 255;D = (v + 2 + A + (E << 1) | 0) >>> 2;v = D & 255;C = (n ? C : u) & 255;E = (E + 2 + C + (A << 1) | 0) >>> 2;q = (p + (o & 255) + (q << 1) | 0) >>> 2 & 255;p = m;n = k;l = k;j = t;r = t;s = v;u = v;v = E & 255;o = (A + 2 + (C * 3 | 0) | 0) >>> 2 << 24 | B & 255 | D << 8 & 65280 | E << 16 & 16711680;break;
	                            }case 4:
	                            {
	                                if (!(I & (n | 0) != 0)) {
	                                    k = 1;j = 51;break a;
	                                }j = o & 255;o = v & 255;q = A & 255;s = j + 2 | 0;D = (s + q + (o << 1) | 0) >>> 2;u = D & 255;k = B & 255;o = o + 2 | 0;v = ((j << 1) + k + o | 0) >>> 2 & 255;j = z & 255;s = ((k << 1) + j + s | 0) >>> 2 & 255;z = y & 255;o = (z + (q << 1) + o | 0) >>> 2;t = o & 255;A = F & 255;B = (q + 2 + (z << 1) + A | 0) >>> 2;q = u;p = t;n = B & 255;m = v;l = s;j = ((C & 255) + 2 + k + (j << 1) | 0) >>> 2 & 255;k = u;r = v;o = (z + 2 + (A << 1) + (E & 255) | 0) >>> 2 & 255 | B << 8 & 65280 | D << 24 | o << 16 & 16711680;break;
	                            }case 7:
	                            {
	                                if (!k) {
	                                    k = 1;j = 51;break a;
	                                }A = (m | 0) == 0;n = o & 255;p = B & 255;z = z & 255;m = (z + 1 + p | 0) >>> 1 & 255;o = C & 255;u = o + 1 | 0;v = (u + z | 0) >>> 1 & 255;B = (A ? C : t) & 255;u = (u + B | 0) >>> 1 & 255;j = z + 2 | 0;y = o + 2 | 0;z = (y + p + (z << 1) | 0) >>> 2;o = (j + (o << 1) + B | 0) >>> 2;E = (A ? C : l) & 255;y = (y + E + (B << 1) | 0) >>> 2;q = (p + 1 + n | 0) >>> 1 & 255;p = (j + n + (p << 1) | 0) >>> 2 & 255;n = m;l = v;j = u;k = z & 255;r = o & 255;s = y & 255;t = v;v = (B + 1 + E | 0) >>> 1 & 255;o = y << 16 & 16711680 | z & 255 | (B + 2 + ((A ? C : D) & 255) + (E << 1) | 0) >>> 2 << 24 | o << 8 & 65280;break;
	                            }case 0:
	                            {
	                                if (!k) {
	                                    k = 1;j = 51;break a;
	                                }q = o;p = o;n = o;m = B;l = z;j = C;k = B;r = z;s = C;t = B;u = z;v = C;o = (z & 255) << 16 | (C & 255) << 24 | (B & 255) << 8 | o & 255;break;
	                            }default:
	                            {
	                                if (!G) {
	                                    k = 1;j = 51;break a;
	                                }s = A & 255;j = y & 255;m = F & 255;l = (j + 1 + m | 0) >>> 1 & 255;o = E & 255;k = (j + 2 + (m << 1) + o | 0) >>> 2 & 255;r = (m + 1 + o | 0) >>> 1 & 255;t = (m + 2 + (o * 3 | 0) | 0) >>> 2 & 255;q = (s + 1 + j | 0) >>> 1 & 255;p = l;n = r;m = (s + 2 + (j << 1) + m | 0) >>> 2 & 255;j = k;s = t;u = E;v = E;o = o << 8 | o | o << 16 | o << 24;
	                            }}E = (K << 4) + J | 0;c[e + E >> 2] = (l & 255) << 16 | (j & 255) << 24 | (m & 255) << 8 | q & 255;c[e + (E + 16) >> 2] = (r & 255) << 16 | (s & 255) << 24 | (k & 255) << 8 | p & 255;c[e + (E + 32) >> 2] = (u & 255) << 16 | (v & 255) << 24 | (t & 255) << 8 | n & 255;c[e + (E + 48) >> 2] = o;Rb(e, f + (L << 6) + 328 | 0, L);L = L + 1 | 0;if (L >>> 0 >= 16) {
	                        k = 0;j = 51;break;
	                    }
	                }if ((j | 0) == 51) {
	                    i = N;return k | 0;
	                }return 0;
	            }function Qb(b, e, f, g, h, j, k) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;k = k | 0;var l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0;y = i;m = b + 200 | 0;l = zb(b, c[m >> 2] | 0) | 0;n = (k | 0) != 0;if ((l | 0) != 0 & n) {
	                    o = (cb(c[c[m >> 2] >> 2] | 0) | 0) == 2;l = o ? 0 : l;
	                }m = b + 204 | 0;k = zb(b, c[m >> 2] | 0) | 0;if ((k | 0) != 0 & n) {
	                    o = (cb(c[c[m >> 2] >> 2] | 0) | 0) == 2;o = o ? 0 : k;
	                } else o = k;m = b + 212 | 0;k = zb(b, c[m >> 2] | 0) | 0;if ((k | 0) != 0 & n) {
	                    n = (cb(c[c[m >> 2] >> 2] | 0) | 0) == 2;k = n ? 0 : k;
	                }w = (l | 0) != 0;x = (o | 0) != 0;v = w & x;u = v & (k | 0) != 0;t = (l | 0) == 0;s = (o | 0) == 0;p = g;q = 16;r = 0;while (1) {
	                    if ((j | 0) == 2) {
	                        if (s) {
	                            l = 1;k = 29;break;
	                        } else {
	                            n = p;b = e;m = 8;
	                        }while (1) {
	                            n = n + 1 | 0;m = m + -1 | 0;a[b >> 0] = a[n >> 0] | 0;a[b + 8 >> 0] = a[n >> 0] | 0;a[b + 16 >> 0] = a[n >> 0] | 0;a[b + 24 >> 0] = a[n >> 0] | 0;a[b + 32 >> 0] = a[n >> 0] | 0;a[b + 40 >> 0] = a[n >> 0] | 0;a[b + 48 >> 0] = a[n >> 0] | 0;a[b + 56 >> 0] = a[n >> 0] | 0;if (!m) break;else b = b + 1 | 0;
	                        }
	                    } else if (!j) {
	                        m = p + 1 | 0;do if (!v) {
	                            if (x) {
	                                n = ((d[m >> 0] | 0) + 2 + (d[p + 2 >> 0] | 0) + (d[p + 3 >> 0] | 0) + (d[p + 4 >> 0] | 0) | 0) >>> 2;b = ((d[p + 5 >> 0] | 0) + 2 + (d[p + 6 >> 0] | 0) + (d[p + 7 >> 0] | 0) + (d[p + 8 >> 0] | 0) | 0) >>> 2;break;
	                            }if (w) {
	                                b = ((d[h >> 0] | 0) + 2 + (d[h + 1 >> 0] | 0) + (d[h + 2 >> 0] | 0) + (d[h + 3 >> 0] | 0) | 0) >>> 2;n = b;
	                            } else {
	                                n = 128;b = 128;
	                            }
	                        } else {
	                            n = ((d[m >> 0] | 0) + 4 + (d[p + 2 >> 0] | 0) + (d[p + 3 >> 0] | 0) + (d[p + 4 >> 0] | 0) + (d[h >> 0] | 0) + (d[h + 1 >> 0] | 0) + (d[h + 2 >> 0] | 0) + (d[h + 3 >> 0] | 0) | 0) >>> 3;b = ((d[p + 5 >> 0] | 0) + 2 + (d[p + 6 >> 0] | 0) + (d[p + 7 >> 0] | 0) + (d[p + 8 >> 0] | 0) | 0) >>> 2;
	                        } while (0);n = n & 255;o = b & 255;nd(e | 0, n | 0, 4) | 0;nd(e + 4 | 0, o | 0, 4) | 0;nd(e + 8 | 0, n | 0, 4) | 0;nd(e + 12 | 0, o | 0, 4) | 0;nd(e + 16 | 0, n | 0, 4) | 0;nd(e + 20 | 0, o | 0, 4) | 0;g = e + 32 | 0;nd(e + 24 | 0, n | 0, 4) | 0;nd(e + 28 | 0, o | 0, 4) | 0;if (w) {
	                            o = d[h + 4 >> 0] | 0;n = d[h + 5 >> 0] | 0;b = d[h + 6 >> 0] | 0;m = d[h + 7 >> 0] | 0;k = (o + 2 + n + b + m | 0) >>> 2;if (x) {
	                                l = k;n = (o + 4 + n + b + m + (d[p + 5 >> 0] | 0) + (d[p + 6 >> 0] | 0) + (d[p + 7 >> 0] | 0) + (d[p + 8 >> 0] | 0) | 0) >>> 3;
	                            } else {
	                                l = k;n = k;
	                            }
	                        } else if (x) {
	                            l = ((d[m >> 0] | 0) + 2 + (d[p + 2 >> 0] | 0) + (d[p + 3 >> 0] | 0) + (d[p + 4 >> 0] | 0) | 0) >>> 2;n = ((d[p + 5 >> 0] | 0) + 2 + (d[p + 6 >> 0] | 0) + (d[p + 7 >> 0] | 0) + (d[p + 8 >> 0] | 0) | 0) >>> 2;
	                        } else {
	                            l = 128;n = 128;
	                        }b = l & 255;o = n & 255;nd(g | 0, b | 0, 4) | 0;nd(e + 36 | 0, o | 0, 4) | 0;nd(e + 40 | 0, b | 0, 4) | 0;nd(e + 44 | 0, o | 0, 4) | 0;nd(e + 48 | 0, b | 0, 4) | 0;nd(e + 52 | 0, o | 0, 4) | 0;nd(e + 56 | 0, b | 0, 4) | 0;nd(e + 60 | 0, o | 0, 4) | 0;
	                    } else if ((j | 0) == 1) {
	                        if (t) {
	                            l = 1;k = 29;break;
	                        } else {
	                            n = e;b = 8;m = h;
	                        }while (1) {
	                            b = b + -1 | 0;a[n >> 0] = a[m >> 0] | 0;a[n + 1 >> 0] = a[m >> 0] | 0;a[n + 2 >> 0] = a[m >> 0] | 0;a[n + 3 >> 0] = a[m >> 0] | 0;a[n + 4 >> 0] = a[m >> 0] | 0;a[n + 5 >> 0] = a[m >> 0] | 0;a[n + 6 >> 0] = a[m >> 0] | 0;a[n + 7 >> 0] = a[m >> 0] | 0;if (!b) break;else {
	                                n = n + 8 | 0;m = m + 1 | 0;
	                            }
	                        }
	                    } else {
	                        if (!u) {
	                            l = 1;k = 29;break;
	                        }n = d[p + 8 >> 0] | 0;b = d[h + 7 >> 0] | 0;l = d[p >> 0] | 0;k = (((d[p + 5 >> 0] | 0) - (d[p + 3 >> 0] | 0) + ((d[p + 6 >> 0] | 0) - (d[p + 2 >> 0] | 0) << 1) + (((d[p + 7 >> 0] | 0) - (d[p + 1 >> 0] | 0) | 0) * 3 | 0) + (n - l << 2) | 0) * 17 | 0) + 16 >> 5;l = (((d[h + 4 >> 0] | 0) - (d[h + 2 >> 0] | 0) + (b - l << 2) + ((d[h + 5 >> 0] | 0) - (d[h + 1 >> 0] | 0) << 1) + (((d[h + 6 >> 0] | 0) - (d[h >> 0] | 0) | 0) * 3 | 0) | 0) * 17 | 0) + 16 >> 5;o = Z(k, -3) | 0;n = (b + n << 4) + 16 + (Z(l, -3) | 0) | 0;b = e;m = 8;while (1) {
	                            m = m + -1 | 0;g = n + o | 0;a[b >> 0] = a[(g >> 5) + 3984 >> 0] | 0;g = g + k | 0;a[b + 1 >> 0] = a[(g >> 5) + 3984 >> 0] | 0;g = g + k | 0;a[b + 2 >> 0] = a[(g >> 5) + 3984 >> 0] | 0;g = g + k | 0;a[b + 3 >> 0] = a[(g >> 5) + 3984 >> 0] | 0;g = g + k | 0;a[b + 4 >> 0] = a[(g >> 5) + 3984 >> 0] | 0;g = g + k | 0;a[b + 5 >> 0] = a[(g >> 5) + 3984 >> 0] | 0;g = g + k | 0;a[b + 6 >> 0] = a[(g >> 5) + 3984 >> 0] | 0;a[b + 7 >> 0] = a[(g + k >> 5) + 3984 >> 0] | 0;if (!m) break;else {
	                                n = n + l | 0;b = b + 8 | 0;
	                            }
	                        }
	                    }Rb(e, f, q);g = q | 1;Rb(e, f + 64 | 0, g);Rb(e, f + 128 | 0, g + 1 | 0);Rb(e, f + 192 | 0, q | 3);r = r + 1 | 0;if (r >>> 0 >= 2) {
	                        l = 0;k = 29;break;
	                    } else {
	                        p = p + 9 | 0;q = q + 4 | 0;e = e + 64 | 0;h = h + 8 | 0;f = f + 256 | 0;
	                    }
	                }if ((k | 0) == 29) {
	                    i = y;return l | 0;
	                }return 0;
	            }function Rb(b, e, f) {
	                b = b | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0;h = i;g = c[e >> 2] | 0;if ((g | 0) == 16777215) {
	                    i = h;return;
	                }m = f >>> 0 < 16;l = m ? 16 : 8;m = m ? f : f & 3;m = (Z(c[3408 + (m << 2) >> 2] | 0, l) | 0) + (c[3344 + (m << 2) >> 2] | 0) | 0;n = b + m | 0;p = c[e + 4 >> 2] | 0;j = b + (m + 1) | 0;f = d[j >> 0] | 0;a[n >> 0] = a[3472 + (g + 512 + (d[n >> 0] | 0)) >> 0] | 0;n = c[e + 8 >> 2] | 0;k = b + (m + 2) | 0;o = d[k >> 0] | 0;a[j >> 0] = a[3472 + (p + 512 + f) >> 0] | 0;g = b + (m + 3) | 0;j = a[3472 + ((c[e + 12 >> 2] | 0) + 512 + (d[g >> 0] | 0)) >> 0] | 0;a[k >> 0] = a[3472 + (n + 512 + o) >> 0] | 0;a[g >> 0] = j;g = m + l | 0;m = b + g | 0;j = c[e + 20 >> 2] | 0;k = b + (g + 1) | 0;o = d[k >> 0] | 0;a[m >> 0] = a[3472 + ((c[e + 16 >> 2] | 0) + 512 + (d[m >> 0] | 0)) >> 0] | 0;m = c[e + 24 >> 2] | 0;n = b + (g + 2) | 0;f = d[n >> 0] | 0;a[k >> 0] = a[3472 + (j + 512 + o) >> 0] | 0;k = b + (g + 3) | 0;o = a[3472 + ((c[e + 28 >> 2] | 0) + 512 + (d[k >> 0] | 0)) >> 0] | 0;a[n >> 0] = a[3472 + (m + 512 + f) >> 0] | 0;a[k >> 0] = o;g = g + l | 0;k = b + g | 0;o = c[e + 36 >> 2] | 0;n = b + (g + 1) | 0;f = d[n >> 0] | 0;a[k >> 0] = a[3472 + ((c[e + 32 >> 2] | 0) + 512 + (d[k >> 0] | 0)) >> 0] | 0;k = c[e + 40 >> 2] | 0;m = b + (g + 2) | 0;j = d[m >> 0] | 0;a[n >> 0] = a[3472 + (o + 512 + f) >> 0] | 0;n = b + (g + 3) | 0;f = a[3472 + ((c[e + 44 >> 2] | 0) + 512 + (d[n >> 0] | 0)) >> 0] | 0;a[m >> 0] = a[3472 + (k + 512 + j) >> 0] | 0;a[n >> 0] = f;g = g + l | 0;l = b + g | 0;n = c[e + 52 >> 2] | 0;f = b + (g + 1) | 0;m = d[f >> 0] | 0;a[l >> 0] = a[3472 + ((c[e + 48 >> 2] | 0) + 512 + (d[l >> 0] | 0)) >> 0] | 0;l = c[e + 56 >> 2] | 0;j = b + (g + 2) | 0;k = d[j >> 0] | 0;a[f >> 0] = a[3472 + (n + 512 + m) >> 0] | 0;g = b + (g + 3) | 0;f = a[3472 + ((c[e + 60 >> 2] | 0) + 512 + (d[g >> 0] | 0)) >> 0] | 0;a[j >> 0] = a[3472 + (l + 512 + k) >> 0] | 0;a[g >> 0] = f;i = h;return;
	            }
	            function yc(b, e, f, g) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0;q = i;l = b + -1 | 0;k = a[b + 1 >> 0] | 0;m = d[l >> 0] | 0;n = d[b >> 0] | 0;r = m - n | 0;p = f + 4 | 0;do if ((((r | 0) > -1 ? r : 0 - r | 0) >>> 0 < (c[p >> 2] | 0) >>> 0 ? (o = d[b + -2 >> 0] | 0, r = o - m | 0, j = c[f + 8 >> 2] | 0, ((r | 0) > -1 ? r : 0 - r | 0) >>> 0 < j >>> 0) : 0) ? (h = k & 255, k = h - n | 0, ((k | 0) > -1 ? k : 0 - k | 0) >>> 0 < j >>> 0) : 0) if (e >>> 0 < 4) {
	                    k = d[(c[f >> 2] | 0) + (e + -1) >> 0] | 0;k = Oa(~k, k + 1 | 0, 4 - h + (n - m << 2) + o >> 3) | 0;o = a[3472 + ((n | 512) - k) >> 0] | 0;a[l >> 0] = a[3472 + ((m | 512) + k) >> 0] | 0;a[b >> 0] = o;break;
	                } else {
	                    a[l >> 0] = (m + 2 + h + (o << 1) | 0) >>> 2;a[b >> 0] = (n + 2 + (h << 1) + o | 0) >>> 2;break;
	                } while (0);l = b + g | 0;m = b + (g + -1) | 0;o = d[m >> 0] | 0;n = d[l >> 0] | 0;k = o - n | 0;if (((k | 0) > -1 ? k : 0 - k | 0) >>> 0 >= (c[p >> 2] | 0) >>> 0) {
	                    i = q;return;
	                }k = d[b + (g + -2) >> 0] | 0;p = k - o | 0;j = c[f + 8 >> 2] | 0;if (((p | 0) > -1 ? p : 0 - p | 0) >>> 0 >= j >>> 0) {
	                    i = q;return;
	                }h = d[b + (g + 1) >> 0] | 0;g = h - n | 0;if (((g | 0) > -1 ? g : 0 - g | 0) >>> 0 >= j >>> 0) {
	                    i = q;return;
	                }if (e >>> 0 < 4) {
	                    b = d[(c[f >> 2] | 0) + (e + -1) >> 0] | 0;b = Oa(~b, b + 1 | 0, 4 - h + (n - o << 2) + k >> 3) | 0;g = a[3472 + ((n | 512) - b) >> 0] | 0;a[m >> 0] = a[3472 + ((o | 512) + b) >> 0] | 0;a[l >> 0] = g;i = q;return;
	                } else {
	                    a[m >> 0] = (o + 2 + h + (k << 1) | 0) >>> 2;a[l >> 0] = (n + 2 + (h << 1) + k | 0) >>> 2;i = q;return;
	                }
	            }function zc(b, e, f, g) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0;v = i;if (e >>> 0 < 4) {
	                    n = d[(c[f >> 2] | 0) + (e + -1) >> 0] | 0;h = n + 1 | 0;q = 0 - g | 0;e = f + 4 | 0;p = q << 1;o = f + 8 | 0;n = ~n;j = 8;while (1) {
	                        m = b + q | 0;f = a[b + g >> 0] | 0;l = d[m >> 0] | 0;k = d[b >> 0] | 0;r = l - k | 0;if ((((r | 0) > -1 ? r : 0 - r | 0) >>> 0 < (c[e >> 2] | 0) >>> 0 ? (t = d[b + p >> 0] | 0, r = t - l | 0, s = c[o >> 2] | 0, ((r | 0) > -1 ? r : 0 - r | 0) >>> 0 < s >>> 0) : 0) ? (u = f & 255, f = u - k | 0, ((f | 0) > -1 ? f : 0 - f | 0) >>> 0 < s >>> 0) : 0) {
	                            r = Oa(n, h, 4 - u + (k - l << 2) + t >> 3) | 0;f = a[3472 + ((k | 512) - r) >> 0] | 0;a[m >> 0] = a[3472 + ((l | 512) + r) >> 0] | 0;a[b >> 0] = f;
	                        }j = j + -1 | 0;if (!j) break;else b = b + 1 | 0;
	                    }i = v;return;
	                } else {
	                    o = 0 - g | 0;m = f + 4 | 0;n = o << 1;f = f + 8 | 0;l = 8;while (1) {
	                        h = b + o | 0;e = a[b + g >> 0] | 0;j = d[h >> 0] | 0;k = d[b >> 0] | 0;s = j - k | 0;if ((((s | 0) > -1 ? s : 0 - s | 0) >>> 0 < (c[m >> 2] | 0) >>> 0 ? (p = d[b + n >> 0] | 0, s = p - j | 0, q = c[f >> 2] | 0, ((s | 0) > -1 ? s : 0 - s | 0) >>> 0 < q >>> 0) : 0) ? (r = e & 255, e = r - k | 0, ((e | 0) > -1 ? e : 0 - e | 0) >>> 0 < q >>> 0) : 0) {
	                            a[h >> 0] = (j + 2 + r + (p << 1) | 0) >>> 2;a[b >> 0] = (k + 2 + (r << 1) + p | 0) >>> 2;
	                        }l = l + -1 | 0;if (!l) break;else b = b + 1 | 0;
	                    }i = v;return;
	                }
	            }function Ac(b, e, f, g) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0;t = i;r = d[(c[f >> 2] | 0) + (e + -1) >> 0] | 0;s = r + 1 | 0;l = 0 - g | 0;h = f + 4 | 0;q = l << 1;e = f + 8 | 0;r = ~r;l = b + l | 0;m = a[b + g >> 0] | 0;k = d[l >> 0] | 0;j = d[b >> 0] | 0;u = k - j | 0;f = c[h >> 2] | 0;if ((((u | 0) > -1 ? u : 0 - u | 0) >>> 0 < f >>> 0 ? (o = d[b + q >> 0] | 0, u = o - k | 0, n = c[e >> 2] | 0, ((u | 0) > -1 ? u : 0 - u | 0) >>> 0 < n >>> 0) : 0) ? (p = m & 255, m = p - j | 0, ((m | 0) > -1 ? m : 0 - m | 0) >>> 0 < n >>> 0) : 0) {
	                    p = Oa(r, s, 4 - p + (j - k << 2) + o >> 3) | 0;f = a[3472 + ((j | 512) - p) >> 0] | 0;a[l >> 0] = a[3472 + ((k | 512) + p) >> 0] | 0;a[b >> 0] = f;f = c[h >> 2] | 0;
	                }m = b + 1 | 0;j = b + (1 - g) | 0;k = d[j >> 0] | 0;l = d[m >> 0] | 0;p = k - l | 0;if (((p | 0) > -1 ? p : 0 - p | 0) >>> 0 >= f >>> 0) {
	                    i = t;return;
	                }h = d[b + (q | 1) >> 0] | 0;p = h - k | 0;f = c[e >> 2] | 0;if (((p | 0) > -1 ? p : 0 - p | 0) >>> 0 >= f >>> 0) {
	                    i = t;return;
	                }e = d[b + (g + 1) >> 0] | 0;p = e - l | 0;if (((p | 0) > -1 ? p : 0 - p | 0) >>> 0 >= f >>> 0) {
	                    i = t;return;
	                }o = Oa(r, s, 4 - e + (l - k << 2) + h >> 3) | 0;p = a[3472 + ((l | 512) - o) >> 0] | 0;a[j >> 0] = a[3472 + ((k | 512) + o) >> 0] | 0;a[m >> 0] = p;i = t;return;
	            }function Bc(a, b, d) {
	                a = a | 0;b = b | 0;d = d | 0;var e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0;r = i;p = c[b + 4 >> 2] | 0;q = c[b + 8 >> 2] | 0;if (!((d | 0) == 0 | (d | 0) == 5) ? (c[a + 3384 >> 2] | 0) == 0 : 0) f = 0;else {
	                    g = a + 1220 | 0;e = 0;do {
	                        f = ic(g, e) | 0;e = e + 1 | 0;
	                    } while (e >>> 0 < 16 & (f | 0) == 0);
	                }l = a + 1176 | 0;n = c[l >> 2] | 0;if (n) {
	                    m = c[a + 1212 >> 2] | 0;e = 0;j = 0;g = 0;do {
	                        if (c[m + (j * 216 | 0) + 196 >> 2] | 0) break;j = j + 1 | 0;e = e + 1 | 0;o = (e | 0) == (p | 0);g = (o & 1) + g | 0;e = o ? 0 : e;
	                    } while (j >>> 0 < n >>> 0);if ((j | 0) != (n | 0)) {
	                        o = a + 1212 | 0;n = c[o >> 2] | 0;j = Z(g, p) | 0;if (e) {
	                            l = a + 1204 | 0;h = e;do {
	                                h = h + -1 | 0;m = h + j | 0;Cc(n + (m * 216 | 0) | 0, b, g, h, d, f);c[n + (m * 216 | 0) + 196 >> 2] = 1;c[l >> 2] = (c[l >> 2] | 0) + 1;
	                            } while ((h | 0) != 0);
	                        }e = e + 1 | 0;if (e >>> 0 < p >>> 0) {
	                            m = a + 1204 | 0;do {
	                                l = e + j | 0;k = n + (l * 216 | 0) + 196 | 0;if (!(c[k >> 2] | 0)) {
	                                    Cc(n + (l * 216 | 0) | 0, b, g, e, d, f);c[k >> 2] = 1;c[m >> 2] = (c[m >> 2] | 0) + 1;
	                                }e = e + 1 | 0;
	                            } while ((e | 0) != (p | 0));
	                        }if (g) {
	                            if (p) {
	                                n = g + -1 | 0;h = Z(n, p) | 0;e = a + 1204 | 0;l = 0 - p | 0;k = 0;do {
	                                    m = n;j = (c[o >> 2] | 0) + ((k + h | 0) * 216 | 0) | 0;while (1) {
	                                        Cc(j, b, m, k, d, f);c[j + 196 >> 2] = 1;c[e >> 2] = (c[e >> 2] | 0) + 1;if (!m) break;else {
	                                            m = m + -1 | 0;j = j + (l * 216 | 0) | 0;
	                                        }
	                                    }k = k + 1 | 0;
	                                } while ((k | 0) != (p | 0));
	                            }
	                        } else g = 0;g = g + 1 | 0;if (g >>> 0 >= q >>> 0) {
	                            i = r;return 0;
	                        }m = a + 1204 | 0;if (!p) {
	                            i = r;return 0;
	                        }do {
	                            e = c[o >> 2] | 0;l = Z(g, p) | 0;k = 0;do {
	                                h = k + l | 0;j = e + (h * 216 | 0) + 196 | 0;if (!(c[j >> 2] | 0)) {
	                                    Cc(e + (h * 216 | 0) | 0, b, g, k, d, f);c[j >> 2] = 1;c[m >> 2] = (c[m >> 2] | 0) + 1;
	                                }k = k + 1 | 0;
	                            } while ((k | 0) != (p | 0));g = g + 1 | 0;
	                        } while ((g | 0) != (q | 0));i = r;return 0;
	                    }
	                }if ((d | 0) == 2 | (d | 0) == 7) {
	                    if ((c[a + 3384 >> 2] | 0) == 0 | (f | 0) == 0) g = 13;else g = 14;
	                } else if (!f) g = 13;else g = 14;if ((g | 0) == 13) id(c[b >> 2] | 0, 128, Z(p * 384 | 0, q) | 0);else if ((g | 0) == 14) hd(c[b >> 2] | 0, f, Z(p * 384 | 0, q) | 0);g = c[l >> 2] | 0;c[a + 1204 >> 2] = g;if (!g) {
	                    i = r;return 0;
	                }e = c[a + 1212 >> 2] | 0;f = 0;do {
	                    c[e + (f * 216 | 0) + 8 >> 2] = 1;f = f + 1 | 0;
	                } while (f >>> 0 < g >>> 0);i = r;return 0;
	            }function Cc(b, e, f, g, h, j) {
	                b = b | 0;e = e | 0;f = f | 0;g = g | 0;h = h | 0;j = j | 0;var k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0,
	                    G = 0,
	                    H = 0,
	                    I = 0,
	                    J = 0,
	                    K = 0,
	                    L = 0,
	                    M = 0,
	                    N = 0,
	                    O = 0,
	                    P = 0,
	                    Q = 0,
	                    R = 0,
	                    S = 0,
	                    T = 0,
	                    U = 0,
	                    V = 0,
	                    W = 0,
	                    X = 0,
	                    Y = 0,
	                    _ = 0,
	                    $ = 0,
	                    aa = 0,
	                    ba = 0,
	                    ca = 0,
	                    da = 0,
	                    ea = 0,
	                    fa = 0,
	                    ga = 0,
	                    ha = 0,
	                    ia = 0,
	                    ja = 0,
	                    ka = 0,
	                    la = 0,
	                    ma = 0,
	                    na = 0,
	                    oa = 0,
	                    pa = 0,
	                    qa = 0,
	                    ra = 0,
	                    sa = 0,
	                    ta = 0;sa = i;i = i + 480 | 0;qa = sa + 96 | 0;ra = sa + 32 | 0;m = sa + 24 | 0;n = sa;na = c[e + 4 >> 2] | 0;u = c[e + 8 >> 2] | 0;Na(e, (Z(na, f) | 0) + g | 0);p = c[e >> 2] | 0;k = f << 4;l = g << 4;o = (Z(f << 8, na) | 0) + l | 0;c[b + 20 >> 2] = 40;c[b + 8 >> 2] = 0;c[b >> 2] = 6;c[b + 12 >> 2] = 0;c[b + 16 >> 2] = 0;c[b + 24 >> 2] = 0;do if ((h | 0) == 2 | (h | 0) == 7) id(qa, 0, 384);else {
	                    c[m >> 2] = 0;c[n + 4 >> 2] = na;c[n + 8 >> 2] = u;c[n >> 2] = j;if (!j) {
	                        id(qa, 0, 384);break;
	                    }dc(qa, m, n, l, k, 0, 0, 16, 16);sc(e, qa);i = sa;return;
	                } while (0);id(ra, 0, 64);if ((f | 0) != 0 ? (c[b + ((0 - na | 0) * 216 | 0) + 196 >> 2] | 0) != 0 : 0) {
	                    v = o - (na << 4) | 0;E = v | 1;D = v | 3;E = (d[p + E >> 0] | 0) + (d[p + v >> 0] | 0) + (d[p + (E + 1) >> 0] | 0) + (d[p + D >> 0] | 0) | 0;$ = v | 7;D = (d[p + (D + 2) >> 0] | 0) + (d[p + (D + 1) >> 0] | 0) + (d[p + (D + 3) >> 0] | 0) + (d[p + $ >> 0] | 0) | 0;F = (d[p + ($ + 2) >> 0] | 0) + (d[p + ($ + 1) >> 0] | 0) + (d[p + ($ + 3) >> 0] | 0) + (d[p + ($ + 4) >> 0] | 0) | 0;v = (d[p + ($ + 6) >> 0] | 0) + (d[p + ($ + 5) >> 0] | 0) + (d[p + ($ + 7) >> 0] | 0) + (d[p + (v | 15) >> 0] | 0) | 0;$ = D + E | 0;c[ra >> 2] = F + $ + (c[ra >> 2] | 0) + v;s = ra + 4 | 0;c[s >> 2] = $ - F - v + (c[s >> 2] | 0);s = 1;
	                } else {
	                    E = 0;D = 0;F = 0;v = 0;s = 0;
	                }if ((u + -1 | 0) != (f | 0) ? (c[b + (na * 216 | 0) + 196 >> 2] | 0) != 0 : 0) {
	                    z = o + (na << 8) | 0;w = z | 1;x = z | 3;w = (d[p + w >> 0] | 0) + (d[p + z >> 0] | 0) + (d[p + (w + 1) >> 0] | 0) + (d[p + x >> 0] | 0) | 0;r = z | 7;x = (d[p + (x + 2) >> 0] | 0) + (d[p + (x + 1) >> 0] | 0) + (d[p + (x + 3) >> 0] | 0) + (d[p + r >> 0] | 0) | 0;y = (d[p + (r + 2) >> 0] | 0) + (d[p + (r + 1) >> 0] | 0) + (d[p + (r + 3) >> 0] | 0) + (d[p + (r + 4) >> 0] | 0) | 0;z = (d[p + (r + 6) >> 0] | 0) + (d[p + (r + 5) >> 0] | 0) + (d[p + (r + 7) >> 0] | 0) + (d[p + (z | 15) >> 0] | 0) | 0;r = x + w | 0;c[ra >> 2] = y + r + (c[ra >> 2] | 0) + z;t = ra + 4 | 0;c[t >> 2] = r - y - z + (c[t >> 2] | 0);t = 1;r = s + 1 | 0;
	                } else {
	                    t = 0;w = 0;x = 0;y = 0;z = 0;r = s;
	                }if ((g | 0) != 0 ? (c[b + -20 >> 2] | 0) != 0 : 0) {
	                    _ = o + -1 | 0;$ = na << 4;j = na << 5;ma = na * 48 | 0;C = (d[p + (_ + $) >> 0] | 0) + (d[p + _ >> 0] | 0) + (d[p + (_ + j) >> 0] | 0) + (d[p + (_ + ma) >> 0] | 0) | 0;h = na << 6;_ = _ + h | 0;B = (d[p + (_ + $) >> 0] | 0) + (d[p + _ >> 0] | 0) + (d[p + (_ + j) >> 0] | 0) + (d[p + (_ + ma) >> 0] | 0) | 0;_ = _ + h | 0;A = (d[p + (_ + $) >> 0] | 0) + (d[p + _ >> 0] | 0) + (d[p + (_ + j) >> 0] | 0) + (d[p + (_ + ma) >> 0] | 0) | 0;h = _ + h | 0;ma = (d[p + (h + $) >> 0] | 0) + (d[p + h >> 0] | 0) + (d[p + (h + j) >> 0] | 0) + (d[p + (h + ma) >> 0] | 0) | 0;h = B + C | 0;c[ra >> 2] = A + h + (c[ra >> 2] | 0) + ma;j = ra + 16 | 0;c[j >> 2] = h - A - ma + (c[j >> 2] | 0);j = r + 1 | 0;h = 1;
	                } else {
	                    j = r;C = 0;B = 0;A = 0;ma = 0;h = 0;
	                }do if ((na + -1 | 0) != (g | 0) ? (c[b + 412 >> 2] | 0) != 0 : 0) {
	                    $ = o + 16 | 0;n = na << 4;m = na << 5;o = na * 48 | 0;b = (d[p + ($ + n) >> 0] | 0) + (d[p + $ >> 0] | 0) + (d[p + ($ + m) >> 0] | 0) + (d[p + ($ + o) >> 0] | 0) | 0;q = na << 6;$ = $ + q | 0;l = (d[p + ($ + n) >> 0] | 0) + (d[p + $ >> 0] | 0) + (d[p + ($ + m) >> 0] | 0) + (d[p + ($ + o) >> 0] | 0) | 0;$ = $ + q | 0;k = (d[p + ($ + n) >> 0] | 0) + (d[p + $ >> 0] | 0) + (d[p + ($ + m) >> 0] | 0) + (d[p + ($ + o) >> 0] | 0) | 0;q = $ + q | 0;o = (d[p + (q + n) >> 0] | 0) + (d[p + q >> 0] | 0) + (d[p + (q + m) >> 0] | 0) + (d[p + (q + o) >> 0] | 0) | 0;p = j + 1 | 0;q = h + 1 | 0;j = l + b | 0;c[ra >> 2] = k + j + (c[ra >> 2] | 0) + o;m = ra + 16 | 0;j = j - k - o + (c[m >> 2] | 0) | 0;c[m >> 2] = j;m = (r | 0) == 0;n = (h | 0) != 0;if (!(m & n)) {
	                        if (!m) {
	                            m = 1;j = p;h = q;l = 21;break;
	                        }
	                    } else c[ra + 4 >> 2] = A + ma + B + C - b - l - k - o >> 5;m = 1;o = (s | 0) != 0;b = (t | 0) != 0;h = q;l = 27;
	                } else l = 17; while (0);if ((l | 0) == 17) {
	                    n = (h | 0) != 0;if (!r) {
	                        m = 0;p = j;l = 23;
	                    } else {
	                        m = 0;l = 21;
	                    }
	                }if ((l | 0) == 21) {
	                    p = ra + 4 | 0;c[p >> 2] = c[p >> 2] >> r + 3;p = j;l = 23;
	                }do if ((l | 0) == 23) {
	                    j = (h | 0) == 0;o = (s | 0) != 0;b = (t | 0) != 0;if (j & o & b) {
	                        c[ra + 16 >> 2] = F + v + D + E - z - y - x - w >> 5;pa = m;h = p;oa = n;o = 1;b = 1;break;
	                    }if (j) {
	                        pa = m;h = p;oa = n;
	                    } else {
	                        j = c[ra + 16 >> 2] | 0;l = 27;
	                    }
	                } while (0);if ((l | 0) == 27) {
	                    c[ra + 16 >> 2] = j >> h + 3;pa = m;h = p;oa = n;
	                }if ((h | 0) == 1) c[ra >> 2] = c[ra >> 2] >> 4;else if ((h | 0) == 2) c[ra >> 2] = c[ra >> 2] >> 5;else if ((h | 0) == 3) c[ra >> 2] = (c[ra >> 2] | 0) * 21 >> 10;else c[ra >> 2] = c[ra >> 2] >> 6;Dc(ra);n = 0;j = qa;m = ra;while (1) {
	                    h = c[m + ((n >>> 2 & 3) << 2) >> 2] | 0;if ((h | 0) < 0) h = 0;else h = (h | 0) > 255 ? -1 : h & 255;a[j >> 0] = h;h = n + 1 | 0;if ((h | 0) == 256) break;else {
	                        n = h;j = j + 1 | 0;m = (h & 63 | 0) == 0 ? m + 16 | 0 : m;
	                    }
	                }ta = Z(u, na) | 0;V = na << 3;Y = 0 - V | 0;G = Y | 1;_ = G + 1 | 0;$ = Y | 3;aa = $ + 1 | 0;ba = $ + 2 | 0;ca = $ + 3 | 0;da = Y | 7;W = ra + 4 | 0;ka = na << 6;H = ka | 1;ea = H + 1 | 0;fa = ka | 3;ga = fa + 1 | 0;ha = fa + 2 | 0;ia = fa + 3 | 0;ja = ka | 7;I = V + -1 | 0;U = na << 4;J = U + -1 | 0;K = J + V | 0;L = J + U | 0;M = L + V | 0;N = L + U | 0;O = N + V | 0;X = ra + 16 | 0;P = V + 8 | 0;Q = U | 8;R = Q + V | 0;S = Q + U | 0;T = S + V | 0;U = S + U | 0;V = U + V | 0;la = ta << 6;q = E;p = D;h = F;t = v;n = w;j = x;l = y;u = z;F = 0;m = C;k = B;r = A;s = ma;E = (c[e >> 2] | 0) + ((Z(f << 6, na) | 0) + (g << 3) + (ta << 8)) | 0;while (1) {
	                    id(ra, 0, 64);if (o) {
	                        q = (d[E + G >> 0] | 0) + (d[E + Y >> 0] | 0) | 0;p = (d[E + $ >> 0] | 0) + (d[E + _ >> 0] | 0) | 0;z = (d[E + ba >> 0] | 0) + (d[E + aa >> 0] | 0) | 0;A = (d[E + da >> 0] | 0) + (d[E + ca >> 0] | 0) | 0;t = p + q | 0;c[ra >> 2] = z + t + (c[ra >> 2] | 0) + A;c[W >> 2] = t - z - A + (c[W >> 2] | 0);t = 1;
	                    } else {
	                        z = h;A = t;t = 0;
	                    }if (b) {
	                        B = (d[E + H >> 0] | 0) + (d[E + ka >> 0] | 0) | 0;C = (d[E + fa >> 0] | 0) + (d[E + ea >> 0] | 0) | 0;D = (d[E + ha >> 0] | 0) + (d[E + ga >> 0] | 0) | 0;u = (d[E + ja >> 0] | 0) + (d[E + ia >> 0] | 0) | 0;h = C + B | 0;c[ra >> 2] = D + h + (c[ra >> 2] | 0) + u;c[W >> 2] = h - D - u + (c[W >> 2] | 0);h = t + 1 | 0;
	                    } else {
	                        B = n;C = j;D = l;h = t;
	                    }if (oa) {
	                        v = (d[E + I >> 0] | 0) + (d[E + -1 >> 0] | 0) | 0;w = (d[E + K >> 0] | 0) + (d[E + J >> 0] | 0) | 0;x = (d[E + M >> 0] | 0) + (d[E + L >> 0] | 0) | 0;y = (d[E + O >> 0] | 0) + (d[E + N >> 0] | 0) | 0;t = w + v | 0;c[ra >> 2] = x + t + (c[ra >> 2] | 0) + y;c[X >> 2] = t - x - y + (c[X >> 2] | 0);t = h + 1 | 0;s = 1;
	                    } else {
	                        t = h;v = m;w = k;x = r;y = s;s = 0;
	                    }do if (pa) {
	                        l = (d[E + P >> 0] | 0) + (d[E + 8 >> 0] | 0) | 0;m = (d[E + R >> 0] | 0) + (d[E + Q >> 0] | 0) | 0;j = (d[E + T >> 0] | 0) + (d[E + S >> 0] | 0) | 0;n = (d[E + V >> 0] | 0) + (d[E + U >> 0] | 0) | 0;t = t + 1 | 0;s = s + 1 | 0;k = m + l | 0;c[ra >> 2] = j + k + (c[ra >> 2] | 0) + n;k = k - j - n + (c[X >> 2] | 0) | 0;c[X >> 2] = k;r = (h | 0) == 0;if (!(r & oa)) {
	                            if (r) {
	                                l = 54;break;
	                            } else {
	                                l = 49;break;
	                            }
	                        } else {
	                            c[W >> 2] = x + y + w + v - l - m - j - n >> 4;l = 54;break;
	                        }
	                    } else if (!h) {
	                        r = s;l = 50;
	                    } else l = 49; while (0);if ((l | 0) == 49) {
	                        c[W >> 2] = c[W >> 2] >> h + 2;r = s;l = 50;
	                    }do if ((l | 0) == 50) {
	                        l = 0;s = (r | 0) == 0;if (s & o & b) {
	                            c[X >> 2] = z + A + p + q - u - D - C - B >> 4;break;
	                        }if (!s) {
	                            k = c[X >> 2] | 0;s = r;l = 54;
	                        }
	                    } while (0);if ((l | 0) == 54) c[X >> 2] = k >> s + 2;if ((t | 0) == 1) c[ra >> 2] = c[ra >> 2] >> 3;else if ((t | 0) == 2) c[ra >> 2] = c[ra >> 2] >> 4;else if ((t | 0) == 3) c[ra >> 2] = (c[ra >> 2] | 0) * 21 >> 9;else c[ra >> 2] = c[ra >> 2] >> 5;Dc(ra);s = 0;r = qa + ((F << 6) + 256) | 0;k = ra;while (1) {
	                        t = c[k + ((s >>> 1 & 3) << 2) >> 2] | 0;if ((t | 0) < 0) t = 0;else t = (t | 0) > 255 ? -1 : t & 255;a[r >> 0] = t;t = s + 1 | 0;if ((t | 0) == 64) break;else {
	                            s = t;r = r + 1 | 0;k = (t & 15 | 0) == 0 ? k + 16 | 0 : k;
	                        }
	                    }F = F + 1 | 0;if ((F | 0) == 2) break;else {
	                        h = z;t = A;n = B;j = C;l = D;m = v;k = w;r = x;s = y;E = E + la | 0;
	                    }
	                }sc(e, qa);i = sa;return;
	            }function Dc(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0;h = i;f = a + 4 | 0;b = c[f >> 2] | 0;g = a + 16 | 0;d = c[g >> 2] | 0;e = c[a >> 2] | 0;if (!(b | d)) {
	                    c[a + 60 >> 2] = e;c[a + 56 >> 2] = e;c[a + 52 >> 2] = e;c[a + 48 >> 2] = e;c[a + 44 >> 2] = e;c[a + 40 >> 2] = e;c[a + 36 >> 2] = e;c[a + 32 >> 2] = e;c[a + 28 >> 2] = e;c[a + 24 >> 2] = e;c[a + 20 >> 2] = e;c[g >> 2] = e;c[a + 12 >> 2] = e;c[a + 8 >> 2] = e;c[f >> 2] = e;i = h;return;
	                } else {
	                    k = b + e | 0;g = b >> 1;j = g + e | 0;g = e - g | 0;b = e - b | 0;c[a >> 2] = d + k;e = d >> 1;c[a + 16 >> 2] = e + k;c[a + 32 >> 2] = k - e;c[a + 48 >> 2] = k - d;c[f >> 2] = d + j;c[a + 20 >> 2] = e + j;c[a + 36 >> 2] = j - e;c[a + 52 >> 2] = j - d;c[a + 8 >> 2] = d + g;c[a + 24 >> 2] = e + g;c[a + 40 >> 2] = g - e;c[a + 56 >> 2] = g - d;c[a + 12 >> 2] = d + b;c[a + 28 >> 2] = e + b;c[a + 44 >> 2] = b - e;c[a + 60 >> 2] = b - d;i = h;return;
	                }
	            }function Ec(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0;h = i;id(b, 0, 952);d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }d = (d | 0) == 1;c[b >> 2] = d & 1;do if (d) {
	                    d = jb(a, 8) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    }c[b + 4 >> 2] = d;if ((d | 0) == 255) {
	                        d = jb(a, 16) | 0;if ((d | 0) == -1) {
	                            d = 1;i = h;return d | 0;
	                        }c[b + 8 >> 2] = d;d = jb(a, 16) | 0;if ((d | 0) == -1) {
	                            d = 1;i = h;return d | 0;
	                        } else {
	                            c[b + 12 >> 2] = d;break;
	                        }
	                    }
	                } while (0);d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }d = (d | 0) == 1;c[b + 16 >> 2] = d & 1;do if (d) {
	                    d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    } else {
	                        c[b + 20 >> 2] = (d | 0) == 1 & 1;break;
	                    }
	                } while (0);d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }d = (d | 0) == 1;c[b + 24 >> 2] = d & 1;do if (d) {
	                    d = jb(a, 3) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    }c[b + 28 >> 2] = d;d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    }c[b + 32 >> 2] = (d | 0) == 1 & 1;d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    }d = (d | 0) == 1;c[b + 36 >> 2] = d & 1;if (!d) {
	                        c[b + 40 >> 2] = 2;c[b + 44 >> 2] = 2;c[b + 48 >> 2] = 2;break;
	                    }d = jb(a, 8) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    }c[b + 40 >> 2] = d;d = jb(a, 8) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    }c[b + 44 >> 2] = d;d = jb(a, 8) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    } else {
	                        c[b + 48 >> 2] = d;break;
	                    }
	                } else {
	                    c[b + 28 >> 2] = 5;c[b + 40 >> 2] = 2;c[b + 44 >> 2] = 2;c[b + 48 >> 2] = 2;
	                } while (0);d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }d = (d | 0) == 1;c[b + 52 >> 2] = d & 1;if (d) {
	                    d = b + 56 | 0;e = nb(a, d) | 0;if (e) {
	                        d = e;i = h;return d | 0;
	                    }if ((c[d >> 2] | 0) >>> 0 > 5) {
	                        d = 1;i = h;return d | 0;
	                    }d = b + 60 | 0;e = nb(a, d) | 0;if (e) {
	                        d = e;i = h;return d | 0;
	                    }if ((c[d >> 2] | 0) >>> 0 > 5) {
	                        d = 1;i = h;return d | 0;
	                    }
	                }d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }d = (d | 0) == 1;c[b + 64 >> 2] = d & 1;do if (d) {
	                    d = kb(a) | 0;if ((lb(a, 32) | 0) == -1 | (d | 0) == 0) {
	                        d = 1;i = h;return d | 0;
	                    }c[b + 68 >> 2] = d;d = kb(a) | 0;if ((lb(a, 32) | 0) == -1 | (d | 0) == 0) {
	                        d = 1;i = h;return d | 0;
	                    }c[b + 72 >> 2] = d;d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    } else {
	                        c[b + 76 >> 2] = (d | 0) == 1 & 1;break;
	                    }
	                } while (0);d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }d = (d | 0) == 1;f = b + 80 | 0;c[f >> 2] = d & 1;if (d) {
	                    e = Fc(a, b + 84 | 0) | 0;if (e) {
	                        d = e;i = h;return d | 0;
	                    }
	                } else {
	                    c[b + 84 >> 2] = 1;c[b + 96 >> 2] = 288000001;c[b + 224 >> 2] = 288000001;c[b + 480 >> 2] = 24;c[b + 484 >> 2] = 24;c[b + 488 >> 2] = 24;c[b + 492 >> 2] = 24;
	                }e = jb(a, 1) | 0;if ((e | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }e = (e | 0) == 1;d = b + 496 | 0;c[d >> 2] = e & 1;if (e) {
	                    e = Fc(a, b + 500 | 0) | 0;if (e) {
	                        d = e;i = h;return d | 0;
	                    }
	                } else {
	                    c[b + 500 >> 2] = 1;c[b + 512 >> 2] = 240000001;c[b + 640 >> 2] = 240000001;c[b + 896 >> 2] = 24;c[b + 900 >> 2] = 24;c[b + 904 >> 2] = 24;c[b + 908 >> 2] = 24;
	                }if (!((c[f >> 2] | 0) == 0 ? (c[d >> 2] | 0) == 0 : 0)) g = 46;do if ((g | 0) == 46) {
	                    d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    } else {
	                        c[b + 912 >> 2] = (d | 0) == 1 & 1;break;
	                    }
	                } while (0);d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }c[b + 916 >> 2] = (d | 0) == 1 & 1;d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                    d = 1;i = h;return d | 0;
	                }d = (d | 0) == 1;c[b + 920 >> 2] = d & 1;do if (d) {
	                    d = jb(a, 1) | 0;if ((d | 0) == -1) {
	                        d = 1;i = h;return d | 0;
	                    }c[b + 924 >> 2] = (d | 0) == 1 & 1;e = b + 928 | 0;d = nb(a, e) | 0;if (d) {
	                        i = h;return d | 0;
	                    }if ((c[e >> 2] | 0) >>> 0 > 16) {
	                        d = 1;i = h;return d | 0;
	                    }e = b + 932 | 0;d = nb(a, e) | 0;if (d) {
	                        i = h;return d | 0;
	                    }if ((c[e >> 2] | 0) >>> 0 > 16) {
	                        d = 1;i = h;return d | 0;
	                    }e = b + 936 | 0;d = nb(a, e) | 0;if (d) {
	                        i = h;return d | 0;
	                    }if ((c[e >> 2] | 0) >>> 0 > 16) {
	                        d = 1;i = h;return d | 0;
	                    }e = b + 940 | 0;d = nb(a, e) | 0;if (d) {
	                        i = h;return d | 0;
	                    }if ((c[e >> 2] | 0) >>> 0 > 16) {
	                        d = 1;i = h;return d | 0;
	                    }d = nb(a, b + 944 | 0) | 0;if (d) {
	                        i = h;return d | 0;
	                    }d = nb(a, b + 948 | 0) | 0;if (!d) break;i = h;return d | 0;
	                } else {
	                    c[b + 924 >> 2] = 1;c[b + 928 >> 2] = 2;c[b + 932 >> 2] = 1;c[b + 936 >> 2] = 16;c[b + 940 >> 2] = 16;c[b + 944 >> 2] = 16;c[b + 948 >> 2] = 16;
	                } while (0);d = 0;i = h;return d | 0;
	            }function Fc(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0;k = i;d = nb(a, b) | 0;if (d) {
	                    i = k;return d | 0;
	                }d = (c[b >> 2] | 0) + 1 | 0;c[b >> 2] = d;if (d >>> 0 > 32) {
	                    d = 1;i = k;return d | 0;
	                }d = jb(a, 4) | 0;if ((d | 0) == -1) {
	                    d = 1;i = k;return d | 0;
	                }j = b + 4 | 0;c[j >> 2] = d;e = jb(a, 4) | 0;if ((e | 0) == -1) {
	                    d = 1;i = k;return d | 0;
	                }h = b + 8 | 0;c[h >> 2] = e;a: do if (c[b >> 2] | 0) {
	                    g = 0;while (1) {
	                        f = b + (g << 2) + 12 | 0;d = nb(a, f) | 0;if (d) {
	                            e = 17;break;
	                        }e = c[f >> 2] | 0;if ((e | 0) == -1) {
	                            d = 1;e = 17;break;
	                        }d = e + 1 | 0;c[f >> 2] = d;c[f >> 2] = d << (c[j >> 2] | 0) + 6;f = b + (g << 2) + 140 | 0;d = nb(a, f) | 0;if (d) {
	                            e = 17;break;
	                        }e = c[f >> 2] | 0;if ((e | 0) == -1) {
	                            d = 1;e = 17;break;
	                        }e = e + 1 | 0;c[f >> 2] = e;c[f >> 2] = e << (c[h >> 2] | 0) + 4;e = jb(a, 1) | 0;if ((e | 0) == -1) {
	                            d = 1;e = 17;break;
	                        }c[b + (g << 2) + 268 >> 2] = (e | 0) == 1 & 1;g = g + 1 | 0;if (g >>> 0 >= (c[b >> 2] | 0) >>> 0) break a;
	                    }if ((e | 0) == 17) {
	                        i = k;return d | 0;
	                    }
	                } while (0);d = jb(a, 5) | 0;if ((d | 0) == -1) {
	                    d = 1;i = k;return d | 0;
	                }c[b + 396 >> 2] = d + 1;d = jb(a, 5) | 0;if ((d | 0) == -1) {
	                    d = 1;i = k;return d | 0;
	                }c[b + 400 >> 2] = d + 1;d = jb(a, 5) | 0;if ((d | 0) == -1) {
	                    d = 1;i = k;return d | 0;
	                }c[b + 404 >> 2] = d + 1;d = jb(a, 5) | 0;if ((d | 0) == -1) {
	                    d = 1;i = k;return d | 0;
	                }c[b + 408 >> 2] = d;d = 0;i = k;return d | 0;
	            }function Gc(a, b, d, e) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0;p = i;a: do if (!(c[d + 284 >> 2] | 0)) o = 0;else {
	                    h = 0;while (1) {
	                        j = c[d + (h * 20 | 0) + 288 >> 2] | 0;if ((j | 0) == 5) {
	                            o = 1;break a;
	                        } else if (!j) break;h = h + 1 | 0;
	                    }o = 0;
	                } while (0);j = c[b + 16 >> 2] | 0;if ((j | 0) == 1) {
	                    if ((c[e >> 2] | 0) != 5) {
	                        f = c[a + 12 >> 2] | 0;if ((c[a + 8 >> 2] | 0) >>> 0 > (c[d + 12 >> 2] | 0) >>> 0) f = (c[b + 12 >> 2] | 0) + f | 0;
	                    } else f = 0;m = c[b + 36 >> 2] | 0;h = (m | 0) == 0;if (h) j = 0;else j = (c[d + 12 >> 2] | 0) + f | 0;e = (c[e + 4 >> 2] | 0) == 0;k = ((e & (j | 0) != 0) << 31 >> 31) + j | 0;l = (k | 0) != 0;if (l) {
	                        g = k + -1 | 0;n = (g >>> 0) % (m >>> 0) | 0;g = (g >>> 0) / (m >>> 0) | 0;
	                    } else {
	                        n = 0;g = 0;
	                    }if (h) j = 0;else {
	                        k = c[b + 40 >> 2] | 0;j = 0;h = 0;do {
	                            j = (c[k + (h << 2) >> 2] | 0) + j | 0;h = h + 1 | 0;
	                        } while (h >>> 0 < m >>> 0);
	                    }if (l) {
	                        g = Z(j, g) | 0;k = c[b + 40 >> 2] | 0;j = 0;do {
	                            g = (c[k + (j << 2) >> 2] | 0) + g | 0;j = j + 1 | 0;
	                        } while (j >>> 0 <= n >>> 0);
	                    } else g = 0;if (e) j = (c[b + 28 >> 2] | 0) + g | 0;else j = g;g = (c[d + 32 >> 2] | 0) + (c[b + 32 >> 2] | 0) | 0;h = a + 12 | 0;if (!o) {
	                        b = ((g | 0) < 0 ? g : 0) + j + (c[d + 28 >> 2] | 0) | 0;c[h >> 2] = f;c[a + 8 >> 2] = c[d + 12 >> 2];i = p;return b | 0;
	                    } else {
	                        c[h >> 2] = 0;c[a + 8 >> 2] = 0;b = 0;i = p;return b | 0;
	                    }
	                } else if (!j) {
	                    if ((c[e >> 2] | 0) != 5) {
	                        h = c[a >> 2] | 0;j = c[d + 20 >> 2] | 0;if (h >>> 0 > j >>> 0 ? (k = c[b + 20 >> 2] | 0, (h - j | 0) >>> 0 >= k >>> 1 >>> 0) : 0) {
	                            h = (c[a + 4 >> 2] | 0) + k | 0;k = a;
	                        } else {
	                            k = a;m = 11;
	                        }
	                    } else {
	                        c[a + 4 >> 2] = 0;c[a >> 2] = 0;j = c[d + 20 >> 2] | 0;h = 0;k = a;m = 11;
	                    }do if ((m | 0) == 11) {
	                        if (j >>> 0 > h >>> 0 ? (g = c[b + 20 >> 2] | 0, (j - h | 0) >>> 0 > g >>> 1 >>> 0) : 0) {
	                            h = (c[a + 4 >> 2] | 0) - g | 0;break;
	                        }h = c[a + 4 >> 2] | 0;
	                    } while (0);if (!(c[e + 4 >> 2] | 0)) {
	                        b = c[d + 24 >> 2] | 0;b = j + h + ((b | 0) < 0 ? b : 0) | 0;i = p;return b | 0;
	                    }c[a + 4 >> 2] = h;f = c[d + 24 >> 2] | 0;g = (f | 0) < 0;if (!o) {
	                        c[k >> 2] = j;b = j + h + (g ? f : 0) | 0;i = p;return b | 0;
	                    } else {
	                        c[a + 4 >> 2] = 0;c[k >> 2] = g ? 0 - f | 0 : 0;b = 0;i = p;return b | 0;
	                    }
	                } else {
	                    if ((c[e >> 2] | 0) == 5) {
	                        k = 0;g = 0;f = a + 12 | 0;
	                    } else {
	                        j = c[d + 12 >> 2] | 0;f = a + 12 | 0;h = c[f >> 2] | 0;if ((c[a + 8 >> 2] | 0) >>> 0 > j >>> 0) h = (c[b + 12 >> 2] | 0) + h | 0;k = h;g = (j + h << 1) + (((c[e + 4 >> 2] | 0) == 0) << 31 >> 31) | 0;
	                    }if (!o) {
	                        c[f >> 2] = k;c[a + 8 >> 2] = c[d + 12 >> 2];b = g;i = p;return b | 0;
	                    } else {
	                        c[f >> 2] = 0;c[a + 8 >> 2] = 0;b = 0;i = p;return b | 0;
	                    }
	                }return 0;
	            }function Hc(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0;d = i;Ab(a);e = fd(2112) | 0;c[a + 3376 >> 2] = e;if (e) {
	                    if (!b) b = 0;else {
	                        c[a + 1216 >> 2] = 1;b = 0;
	                    }
	                } else b = 1;i = d;return b | 0;
	            }function Ic(a, b, d, e, f) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;var g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0;r = i;i = i + 208 | 0;l = r + 204 | 0;p = r;g = r + 112 | 0;h = r + 40 | 0;q = r + 16 | 0;j = r + 12 | 0;n = r + 8 | 0;c[j >> 2] = 0;o = a + 3344 | 0;if ((c[o >> 2] | 0) != 0 ? (c[a + 3348 >> 2] | 0) == (b | 0) : 0) {
	                    b = a + 3356 | 0;c[q + 0 >> 2] = c[b + 0 >> 2];c[q + 4 >> 2] = c[b + 4 >> 2];c[q + 8 >> 2] = c[b + 8 >> 2];c[q + 12 >> 2] = c[b + 12 >> 2];c[q + 4 >> 2] = c[q >> 2];c[q + 8 >> 2] = 0;c[q + 16 >> 2] = 0;c[f >> 2] = c[a + 3352 >> 2];
	                } else k = 4;do if ((k | 0) == 4) if (!(Pa(b, d, q, f) | 0)) {
	                    d = a + 3356 | 0;c[d + 0 >> 2] = c[q + 0 >> 2];c[d + 4 >> 2] = c[q + 4 >> 2];c[d + 8 >> 2] = c[q + 8 >> 2];c[d + 12 >> 2] = c[q + 12 >> 2];c[d + 16 >> 2] = c[q + 16 >> 2];c[a + 3352 >> 2] = c[f >> 2];c[a + 3348 >> 2] = b;break;
	                } else {
	                    n = 3;i = r;return n | 0;
	                } while (0);c[o >> 2] = 0;if (sb(q, p) | 0) {
	                    n = 3;i = r;return n | 0;
	                }if (((c[p >> 2] | 0) + -1 | 0) >>> 0 > 11) {
	                    n = 0;i = r;return n | 0;
	                }b = Ib(q, p, a, j) | 0;if (!b) {
	                    do if (!(c[j >> 2] | 0)) k = 19;else {
	                        if ((c[a + 1184 >> 2] | 0) != 0 ? (c[a + 16 >> 2] | 0) != 0 : 0) {
	                            if (c[a + 3380 >> 2] | 0) {
	                                n = 3;i = r;return n | 0;
	                            }if (!(c[a + 1188 >> 2] | 0)) {
	                                m = a + 1220 | 0;n = a + 1336 | 0;c[n >> 2] = jc(m) | 0;nc(m);Bc(a, n, 0) | 0;
	                            } else Bc(a, a + 1336 | 0, c[a + 1372 >> 2] | 0) | 0;c[f >> 2] = 0;c[o >> 2] = 1;c[a + 1180 >> 2] = 0;g = a + 1336 | 0;b = a + 1360 | 0;break;
	                        }c[a + 1188 >> 2] = 0;c[a + 1180 >> 2] = 0;k = 19;
	                    } while (0);do if ((k | 0) == 19) {
	                        b = c[p >> 2] | 0;if ((b | 0) == 8) {
	                            if (!(Sa(q, h) | 0)) {
	                                Cb(a, h) | 0;n = 0;i = r;return n | 0;
	                            } else {
	                                n = h + 20 | 0;gd(c[n >> 2] | 0);c[n >> 2] = 0;n = h + 24 | 0;gd(c[n >> 2] | 0);c[n >> 2] = 0;n = h + 28 | 0;gd(c[n >> 2] | 0);c[n >> 2] = 0;n = h + 44 | 0;gd(c[n >> 2] | 0);c[n >> 2] = 0;n = 3;i = r;return n | 0;
	                            }
	                        } else if ((b | 0) == 7) {
	                            if (!(Qa(q, g) | 0)) {
	                                Bb(a, g) | 0;n = 0;i = r;return n | 0;
	                            } else {
	                                n = g + 40 | 0;gd(c[n >> 2] | 0);c[n >> 2] = 0;n = g + 84 | 0;gd(c[n >> 2] | 0);c[n >> 2] = 0;n = 3;i = r;return n | 0;
	                            }
	                        } else if ((b | 0) == 1 | (b | 0) == 5) {
	                            k = a + 1180 | 0;if (c[a + 1180 >> 2] | 0) {
	                                n = 0;i = r;return n | 0;
	                            }c[a + 1184 >> 2] = 1;if (Fb(a) | 0) {
	                                c[a + 1204 >> 2] = 0;c[a + 1208 >> 2] = e;Ua(q, l) | 0;j = a + 8 | 0;d = c[j >> 2] | 0;b = Db(a, c[l >> 2] | 0, (c[p >> 2] | 0) == 5 & 1) | 0;if (b) {
	                                    c[a + 4 >> 2] = 256;c[a + 12 >> 2] = 0;c[j >> 2] = 32;c[a + 16 >> 2] = 0;c[a + 3380 >> 2] = 0;n = (b | 0) == 65535 ? 5 : 4;i = r;return n | 0;
	                                }if ((d | 0) != (c[j >> 2] | 0)) {
	                                    d = c[a + 16 >> 2] | 0;c[n >> 2] = 1;b = c[a >> 2] | 0;if (b >>> 0 < 32) b = c[a + (b << 2) + 20 >> 2] | 0;else b = 0;c[f >> 2] = 0;c[o >> 2] = 1;if ((((((c[p >> 2] | 0) == 5 ? (l = _a(n, q, d, c[a + 12 >> 2] | 0, 5) | 0, (c[n >> 2] | l | 0) == 0) : 0) ? (m = a + 1220 | 0, !((c[a + 1276 >> 2] | 0) != 0 | (b | 0) == 0)) : 0) ? (c[b + 52 >> 2] | 0) == (c[d + 52 >> 2] | 0) : 0) ? (c[b + 56 >> 2] | 0) == (c[d + 56 >> 2] | 0) : 0) ? (c[b + 88 >> 2] | 0) == (c[d + 88 >> 2] | 0) : 0) qc(m);else c[a + 1280 >> 2] = 0;c[a >> 2] = c[j >> 2];n = 2;i = r;return n | 0;
	                                }
	                            }if (c[a + 3380 >> 2] | 0) {
	                                n = 3;i = r;return n | 0;
	                            }h = a + 1368 | 0;j = a + 2356 | 0;b = a + 16 | 0;if (Ta(q, j, c[b >> 2] | 0, c[a + 12 >> 2] | 0, p) | 0) {
	                                n = 3;i = r;return n | 0;
	                            }if (!(Fb(a) | 0)) d = a + 1220 | 0;else {
	                                d = a + 1220 | 0;if ((c[p >> 2] | 0) != 5 ? (oc(d, c[a + 2368 >> 2] | 0, (c[p + 4 >> 2] | 0) != 0 & 1, c[(c[b >> 2] | 0) + 48 >> 2] | 0) | 0) != 0 : 0) {
	                                    n = 3;i = r;return n | 0;
	                                }c[a + 1336 >> 2] = jc(d) | 0;
	                            }od(h | 0, j | 0, 988) | 0;c[a + 1188 >> 2] = 1;b = a + 1360 | 0;l = p;m = c[l + 4 >> 2] | 0;n = b;c[n >> 2] = c[l >> 2];c[n + 4 >> 2] = m;Hb(a, c[a + 1432 >> 2] | 0);nc(d);if (gc(d, a + 1436 | 0, c[a + 1380 >> 2] | 0, c[a + 1412 >> 2] | 0) | 0) {
	                                n = 3;i = r;return n | 0;
	                            }g = a + 1336 | 0;if ($a(q, a, g, h) | 0) {
	                                ab(a, c[h >> 2] | 0);n = 3;i = r;return n | 0;
	                            }if (Gb(a) | 0) {
	                                c[k >> 2] = 1;break;
	                            } else {
	                                n = 0;i = r;return n | 0;
	                            }
	                        } else {
	                            n = 0;i = r;return n | 0;
	                        }
	                    } while (0);uc(g, c[a + 1212 >> 2] | 0);Eb(a);j = Gc(a + 1284 | 0, c[a + 16 >> 2] | 0, a + 1368 | 0, b) | 0;d = a + 1188 | 0;do if (c[d >> 2] | 0) {
	                        h = a + 1220 | 0;if (!(c[a + 1364 >> 2] | 0)) {
	                            hc(h, 0, g, c[a + 1380 >> 2] | 0, j, (c[b >> 2] | 0) == 5 & 1, c[a + 1208 >> 2] | 0, c[a + 1204 >> 2] | 0) | 0;break;
	                        } else {
	                            hc(h, a + 1644 | 0, g, c[a + 1380 >> 2] | 0, j, (c[b >> 2] | 0) == 5 & 1, c[a + 1208 >> 2] | 0, c[a + 1204 >> 2] | 0) | 0;break;
	                        }
	                    } while (0);c[a + 1184 >> 2] = 0;c[d >> 2] = 0;n = 1;i = r;return n | 0;
	                } else if ((b | 0) == 65520) {
	                    n = 4;i = r;return n | 0;
	                } else {
	                    n = 3;i = r;return n | 0;
	                }return 0;
	            }function Jc(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0;f = i;e = 0;do {
	                    d = a + (e << 2) + 20 | 0;b = c[d >> 2] | 0;if (b) {
	                        gd(c[b + 40 >> 2] | 0);c[(c[d >> 2] | 0) + 40 >> 2] = 0;gd(c[(c[d >> 2] | 0) + 84 >> 2] | 0);c[(c[d >> 2] | 0) + 84 >> 2] = 0;gd(c[d >> 2] | 0);c[d >> 2] = 0;
	                    }e = e + 1 | 0;
	                } while ((e | 0) != 32);e = 0;do {
	                    d = a + (e << 2) + 148 | 0;b = c[d >> 2] | 0;if (b) {
	                        gd(c[b + 20 >> 2] | 0);c[(c[d >> 2] | 0) + 20 >> 2] = 0;gd(c[(c[d >> 2] | 0) + 24 >> 2] | 0);c[(c[d >> 2] | 0) + 24 >> 2] = 0;gd(c[(c[d >> 2] | 0) + 28 >> 2] | 0);c[(c[d >> 2] | 0) + 28 >> 2] = 0;gd(c[(c[d >> 2] | 0) + 44 >> 2] | 0);c[(c[d >> 2] | 0) + 44 >> 2] = 0;gd(c[d >> 2] | 0);c[d >> 2] = 0;
	                    }e = e + 1 | 0;
	                } while ((e | 0) != 256);b = a + 3376 | 0;gd(c[b >> 2] | 0);c[b >> 2] = 0;b = a + 1212 | 0;gd(c[b >> 2] | 0);c[b >> 2] = 0;b = a + 1172 | 0;gd(c[b >> 2] | 0);c[b >> 2] = 0;mc(a + 1220 | 0);i = f;return;
	            }function Kc(a, b, d, e) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;var f = 0;f = i;a = pc(a + 1220 | 0) | 0;if (!a) {
	                    a = 0;i = f;return a | 0;
	                }c[b >> 2] = c[a + 4 >> 2];c[d >> 2] = c[a + 12 >> 2];c[e >> 2] = c[a + 8 >> 2];a = c[a >> 2] | 0;i = f;return a | 0;
	            }function Lc(a) {
	                a = a | 0;var b = 0;b = i;a = c[a + 16 >> 2] | 0;if (!a) {
	                    a = 0;i = b;return a | 0;
	                }a = c[a + 52 >> 2] | 0;i = b;return a | 0;
	            }function Mc(a) {
	                a = a | 0;var b = 0;b = i;a = c[a + 16 >> 2] | 0;if (!a) {
	                    a = 0;i = b;return a | 0;
	                }a = c[a + 56 >> 2] | 0;i = b;return a | 0;
	            }function Nc(a) {
	                a = a | 0;var b = 0;b = i;qc(a + 1220 | 0);i = b;return;
	            }function Oc(a) {
	                a = a | 0;var b = 0;b = i;a = (Jb(a) | 0) == 0 & 1;i = b;return a | 0;
	            }function Pc(a) {
	                a = a | 0;var b = 0,
	                    d = 0;d = i;a = c[a + 16 >> 2] | 0;if (((((a | 0) != 0 ? (c[a + 80 >> 2] | 0) != 0 : 0) ? (b = c[a + 84 >> 2] | 0, (b | 0) != 0) : 0) ? (c[b + 24 >> 2] | 0) != 0 : 0) ? (c[b + 32 >> 2] | 0) != 0 : 0) {
	                    a = 1;i = d;return a | 0;
	                }a = 0;i = d;return a | 0;
	            }function Qc(a) {
	                a = a | 0;var b = 0,
	                    d = 0;d = i;a = c[a + 16 >> 2] | 0;if (((((a | 0) != 0 ? (c[a + 80 >> 2] | 0) != 0 : 0) ? (b = c[a + 84 >> 2] | 0, (b | 0) != 0) : 0) ? (c[b + 24 >> 2] | 0) != 0 : 0) ? (c[b + 36 >> 2] | 0) != 0 : 0) a = c[b + 48 >> 2] | 0;else a = 2;i = d;return a | 0;
	            }function Rc(a, b, d, e, f, g) {
	                a = a | 0;b = b | 0;d = d | 0;e = e | 0;f = f | 0;g = g | 0;var h = 0;h = i;a = c[a + 16 >> 2] | 0;if ((a | 0) != 0 ? (c[a + 60 >> 2] | 0) != 0 : 0) {
	                    c[b >> 2] = 1;b = a + 64 | 0;c[d >> 2] = c[b >> 2] << 1;c[e >> 2] = (c[a + 52 >> 2] << 4) - ((c[a + 68 >> 2] | 0) + (c[b >> 2] | 0) << 1);b = a + 72 | 0;c[f >> 2] = c[b >> 2] << 1;a = (c[a + 56 >> 2] << 4) - ((c[a + 76 >> 2] | 0) + (c[b >> 2] | 0) << 1) | 0;c[g >> 2] = a;i = h;return;
	                }c[b >> 2] = 0;c[d >> 2] = 0;c[e >> 2] = 0;c[f >> 2] = 0;a = 0;c[g >> 2] = a;i = h;return;
	            }function Sc(a, b, d) {
	                a = a | 0;b = b | 0;d = d | 0;var e = 0,
	                    f = 0,
	                    g = 0;f = i;a = c[a + 16 >> 2] | 0;a: do if ((((a | 0) != 0 ? (c[a + 80 >> 2] | 0) != 0 : 0) ? (e = c[a + 84 >> 2] | 0, (e | 0) != 0) : 0) ? (c[e >> 2] | 0) != 0 : 0) {
	                    a = c[e + 4 >> 2] | 0;do switch (a | 0) {case 11:
	                            {
	                                e = 11;a = 15;break a;
	                            }case 255:
	                            {
	                                a = c[e + 8 >> 2] | 0;e = c[e + 12 >> 2] | 0;g = (a | 0) == 0 | (e | 0) == 0;e = g ? 0 : e;a = g ? 0 : a;break a;
	                            }case 2:
	                            {
	                                e = 11;a = 12;break a;
	                            }case 12:
	                            {
	                                e = 33;a = 64;break a;
	                            }case 13:
	                            {
	                                e = 99;a = 160;break a;
	                            }case 3:
	                            {
	                                e = 11;a = 10;break a;
	                            }case 5:
	                            {
	                                e = 33;a = 40;break a;
	                            }case 6:
	                            {
	                                e = 11;a = 24;break a;
	                            }case 7:
	                            {
	                                e = 11;a = 20;break a;
	                            }case 4:
	                            {
	                                e = 11;a = 16;break a;
	                            }case 10:
	                            {
	                                e = 11;a = 18;break a;
	                            }case 9:
	                            {
	                                e = 33;a = 80;break a;
	                            }case 8:
	                            {
	                                e = 11;a = 32;break a;
	                            }case 1:case 0:
	                            {
	                                e = a;break a;
	                            }default:
	                            {
	                                e = 0;a = 0;break a;
	                            }} while (0);
	                } else {
	                    e = 1;a = 1;
	                } while (0);c[b >> 2] = a;c[d >> 2] = e;i = f;return;
	            }function Tc(a) {
	                a = a | 0;a = c[a + 16 >> 2] | 0;if (!a) a = 0;else a = c[a >> 2] | 0;return a | 0;
	            }function Uc(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0,
	                    f = 0;f = i;do if (a) {
	                    d = fd(3396) | 0;if (d) {
	                        e = d + 8 | 0;if (!(Hc(e, b) | 0)) {
	                            c[d >> 2] = 1;c[d + 4 >> 2] = 0;c[a >> 2] = d;d = 0;break;
	                        } else {
	                            Jc(e);gd(d);d = -4;break;
	                        }
	                    } else d = -4;
	                } else d = -1; while (0);i = f;return d | 0;
	            }function Vc(a, b) {
	                a = a | 0;b = b | 0;var d = 0,
	                    e = 0;e = i;if ((a | 0) == 0 | (b | 0) == 0) {
	                    a = -1;i = e;return a | 0;
	                }d = a + 8 | 0;if (!(c[a + 24 >> 2] | 0)) {
	                    a = -6;i = e;return a | 0;
	                }if (!(c[a + 20 >> 2] | 0)) {
	                    a = -6;i = e;return a | 0;
	                }c[b + 4 >> 2] = (Lc(d) | 0) << 4;c[b + 8 >> 2] = (Mc(d) | 0) << 4;c[b + 12 >> 2] = Pc(d) | 0;c[b + 16 >> 2] = Qc(d) | 0;Rc(d, b + 28 | 0, b + 32 | 0, b + 36 | 0, b + 40 | 0, b + 44 | 0);Sc(d, b + 20 | 0, b + 24 | 0);c[b >> 2] = Tc(d) | 0;a = 0;i = e;return a | 0;
	            }function Wc(a, b, d) {
	                a = a | 0;b = b | 0;d = d | 0;var e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0;m = i;i = i + 16 | 0;j = m;a: do if ((!((b | 0) == 0 | (d | 0) == 0) ? (f = c[b >> 2] | 0, (f | 0) != 0) : 0) ? (g = c[b + 4 >> 2] | 0, (g | 0) != 0) : 0) {
	                    if ((a | 0) != 0 ? (e = c[a >> 2] | 0, (e | 0) != 0) : 0) {
	                        c[d >> 2] = 0;c[j >> 2] = 0;k = a + 8 | 0;c[a + 3392 >> 2] = c[b + 12 >> 2];h = b + 8 | 0;b = 1;while (1) {
	                            if ((e | 0) == 2) {
	                                l = 8;break;
	                            }e = Ic(k, f, g, c[h >> 2] | 0, j) | 0;n = c[j >> 2] | 0;f = f + n | 0;g = g - n | 0;g = (g | 0) < 0 ? 0 : g;c[d >> 2] = f;if ((e | 0) == 4) {
	                                e = (Oc(k) | 0 | g | 0) == 0;b = e ? -2 : b;
	                            } else if ((e | 0) == 5) {
	                                b = -4;break a;
	                            } else if ((e | 0) == 2) break;else if ((e | 0) == 1) {
	                                l = 13;break;
	                            }if (!g) break a;e = c[a >> 2] | 0;
	                        }if ((l | 0) == 8) {
	                            c[a >> 2] = 1;c[d >> 2] = f + (c[j >> 2] | 0);
	                        } else if ((l | 0) == 13) {
	                            b = a + 4 | 0;c[b >> 2] = (c[b >> 2] | 0) + 1;b = (g | 0) == 0 ? 2 : 3;break;
	                        }b = a + 1288 | 0;if ((c[b >> 2] | 0) != 0 ? (c[a + 1244 >> 2] | 0) != (c[a + 1248 >> 2] | 0) : 0) {
	                            c[b >> 2] = 0;c[a >> 2] = 2;b = 3;
	                        } else b = 4;
	                    } else b = -3;
	                } else b = -1; while (0);i = m;return b | 0;
	            }function Xc(a) {
	                a = a | 0;c[a >> 2] = 2;c[a + 4 >> 2] = 3;return;
	            }function Yc(a, b, d) {
	                a = a | 0;b = b | 0;d = d | 0;var e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0;h = i;i = i + 16 | 0;f = h + 8 | 0;e = h + 4 | 0;g = h;if ((a | 0) == 0 | (b | 0) == 0) {
	                    a = -1;i = h;return a | 0;
	                }a = a + 8 | 0;if (d) Nc(a);a = Kc(a, g, e, f) | 0;if (!a) {
	                    a = 0;i = h;return a | 0;
	                }c[b >> 2] = a;c[b + 4 >> 2] = c[g >> 2];c[b + 8 >> 2] = c[e >> 2];c[b + 12 >> 2] = c[f >> 2];a = 2;i = h;return a | 0;
	            }function Zc(a) {
	                a = a | 0;var b = 0,
	                    d = 0;d = i;b = jd(a) | 0;c[1792] = b;c[1791] = b;c[1790] = a;c[1793] = b + a;i = d;return b | 0;
	            }function _c(a) {
	                a = a | 0;c[1790] = a;return;
	            }function $c() {
	                var a = 0;a = i;c[1786] = c[1791];c[1787] = c[1790];do bd() | 0; while ((c[1787] | 0) != 0);i = a;return;
	            }function ad() {
	                var a = 0,
	                    b = 0;b = i;if (Uc(7176, 0) | 0) {
	                    da(7280) | 0;a = c[1784] | 0;if (a) kd(a);
	                } else {
	                    c[1796] = 1;c[1798] = 1;
	                }i = b;return -1;
	            }function bd() {
	                var a = 0,
	                    b = 0,
	                    d = 0;b = i;c[1788] = c[1798];a = Wc(c[1794] | 0, 7144, 7200) | 0;switch (a | 0) {case 4:
	                        {
	                            if (Vc(c[1794] | 0, 7208) | 0) {
	                                a = -1;i = b;return a | 0;
	                            }c[1814] = (Z((c[1803] | 0) * 3 | 0, c[1804] | 0) | 0) >>> 1;ra();a = c[1800] | 0;c[1787] = (c[1786] | 0) - a + (c[1787] | 0);c[1786] = a;a = 0;i = b;return a | 0;
	                        }case 2:
	                        {
	                            c[1787] = 0;break;
	                        }case 1:case -2:
	                        {
	                            c[1787] = 0;i = b;return a | 0;
	                        }case 3:
	                        {
	                            d = c[1800] | 0;c[1787] = (c[1786] | 0) - d + (c[1787] | 0);c[1786] = d;break;
	                        }default:
	                        {
	                            i = b;return a | 0;
	                        }}c[1798] = (c[1798] | 0) + 1;if ((Yc(c[1794] | 0, 7264, 0) | 0) != 2) {
	                    i = b;return a | 0;
	                }do {
	                    c[1796] = (c[1796] | 0) + 1;ca(c[1816] | 0, c[1803] | 0, c[1804] | 0);
	                } while ((Yc(c[1794] | 0, 7264, 0) | 0) == 2);i = b;return a | 0;
	            }function cd() {
	                var a = 0,
	                    b = 0;b = i;a = c[1784] | 0;if (a) kd(a);i = b;return;
	            }function dd() {
	                var a = 0,
	                    b = 0;b = i;i = i + 16 | 0;a = b;Xc(a);i = b;return c[a >> 2] | 0;
	            }function ed() {
	                var a = 0,
	                    b = 0;b = i;i = i + 16 | 0;a = b;Xc(a);i = b;return c[a + 4 >> 2] | 0;
	            }function fd(a) {
	                a = a | 0;var b = 0;b = i;a = jd(a) | 0;i = b;return a | 0;
	            }function gd(a) {
	                a = a | 0;var b = 0;b = i;kd(a);i = b;return;
	            }function hd(a, b, c) {
	                a = a | 0;b = b | 0;c = c | 0;var d = 0;d = i;od(a | 0, b | 0, c | 0) | 0;i = d;return;
	            }function id(a, b, c) {
	                a = a | 0;b = b | 0;c = c | 0;var d = 0;d = i;nd(a | 0, b & 255 | 0, c | 0) | 0;i = d;return;
	            }function jd(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0,
	                    x = 0,
	                    y = 0,
	                    z = 0,
	                    A = 0,
	                    B = 0,
	                    C = 0,
	                    D = 0,
	                    E = 0,
	                    F = 0,
	                    G = 0,
	                    H = 0,
	                    I = 0,
	                    J = 0,
	                    K = 0,
	                    L = 0;L = i;do if (a >>> 0 < 245) {
	                    if (a >>> 0 < 11) p = 16;else p = a + 11 & -8;a = p >>> 3;l = c[1828] | 0;k = l >>> a;if (k & 3) {
	                        g = (k & 1 ^ 1) + a | 0;b = g << 1;h = 7352 + (b << 2) | 0;b = 7352 + (b + 2 << 2) | 0;e = c[b >> 2] | 0;j = e + 8 | 0;f = c[j >> 2] | 0;do if ((h | 0) != (f | 0)) {
	                            if (f >>> 0 < (c[1832] | 0) >>> 0) ka();d = f + 12 | 0;if ((c[d >> 2] | 0) == (e | 0)) {
	                                c[d >> 2] = h;c[b >> 2] = f;break;
	                            } else ka();
	                        } else c[1828] = l & ~(1 << g); while (0);x = g << 3;c[e + 4 >> 2] = x | 3;x = e + (x | 4) | 0;c[x >> 2] = c[x >> 2] | 1;x = j;i = L;return x | 0;
	                    }j = c[1830] | 0;if (p >>> 0 > j >>> 0) {
	                        if (k) {
	                            g = 2 << a;g = k << a & (g | 0 - g);g = (g & 0 - g) + -1 | 0;a = g >>> 12 & 16;g = g >>> a;h = g >>> 5 & 8;g = g >>> h;d = g >>> 2 & 4;g = g >>> d;e = g >>> 1 & 2;g = g >>> e;f = g >>> 1 & 1;f = (h | a | d | e | f) + (g >>> f) | 0;g = f << 1;e = 7352 + (g << 2) | 0;g = 7352 + (g + 2 << 2) | 0;d = c[g >> 2] | 0;a = d + 8 | 0;h = c[a >> 2] | 0;do if ((e | 0) != (h | 0)) {
	                                if (h >>> 0 < (c[1832] | 0) >>> 0) ka();j = h + 12 | 0;if ((c[j >> 2] | 0) == (d | 0)) {
	                                    c[j >> 2] = e;c[g >> 2] = h;m = c[1830] | 0;break;
	                                } else ka();
	                            } else {
	                                c[1828] = l & ~(1 << f);m = j;
	                            } while (0);x = f << 3;k = x - p | 0;c[d + 4 >> 2] = p | 3;b = d + p | 0;c[d + (p | 4) >> 2] = k | 1;c[d + x >> 2] = k;if (m) {
	                                e = c[1833] | 0;g = m >>> 3;h = g << 1;f = 7352 + (h << 2) | 0;j = c[1828] | 0;g = 1 << g;if (j & g) {
	                                    j = 7352 + (h + 2 << 2) | 0;h = c[j >> 2] | 0;if (h >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                        n = j;o = h;
	                                    }
	                                } else {
	                                    c[1828] = j | g;n = 7352 + (h + 2 << 2) | 0;o = f;
	                                }c[n >> 2] = e;c[o + 12 >> 2] = e;c[e + 8 >> 2] = o;c[e + 12 >> 2] = f;
	                            }c[1830] = k;c[1833] = b;x = a;i = L;return x | 0;
	                        }k = c[1829] | 0;if (k) {
	                            l = (k & 0 - k) + -1 | 0;w = l >>> 12 & 16;l = l >>> w;v = l >>> 5 & 8;l = l >>> v;x = l >>> 2 & 4;l = l >>> x;j = l >>> 1 & 2;l = l >>> j;m = l >>> 1 & 1;m = c[7616 + ((v | w | x | j | m) + (l >>> m) << 2) >> 2] | 0;l = (c[m + 4 >> 2] & -8) - p | 0;j = m;while (1) {
	                                d = c[j + 16 >> 2] | 0;if (!d) {
	                                    d = c[j + 20 >> 2] | 0;if (!d) break;
	                                }j = (c[d + 4 >> 2] & -8) - p | 0;x = j >>> 0 < l >>> 0;l = x ? j : l;j = d;m = x ? d : m;
	                            }k = c[1832] | 0;if (m >>> 0 < k >>> 0) ka();b = m + p | 0;if (m >>> 0 >= b >>> 0) ka();a = c[m + 24 >> 2] | 0;g = c[m + 12 >> 2] | 0;do if ((g | 0) == (m | 0)) {
	                                h = m + 20 | 0;j = c[h >> 2] | 0;if (!j) {
	                                    h = m + 16 | 0;j = c[h >> 2] | 0;if (!j) {
	                                        e = 0;break;
	                                    }
	                                }while (1) {
	                                    f = j + 20 | 0;g = c[f >> 2] | 0;if (g) {
	                                        j = g;h = f;continue;
	                                    }f = j + 16 | 0;g = c[f >> 2] | 0;if (!g) break;else {
	                                        j = g;h = f;
	                                    }
	                                }if (h >>> 0 < k >>> 0) ka();else {
	                                    c[h >> 2] = 0;e = j;break;
	                                }
	                            } else {
	                                f = c[m + 8 >> 2] | 0;if (f >>> 0 < k >>> 0) ka();j = f + 12 | 0;if ((c[j >> 2] | 0) != (m | 0)) ka();h = g + 8 | 0;if ((c[h >> 2] | 0) == (m | 0)) {
	                                    c[j >> 2] = g;c[h >> 2] = f;e = g;break;
	                                } else ka();
	                            } while (0);do if (a) {
	                                j = c[m + 28 >> 2] | 0;h = 7616 + (j << 2) | 0;if ((m | 0) == (c[h >> 2] | 0)) {
	                                    c[h >> 2] = e;if (!e) {
	                                        c[1829] = c[1829] & ~(1 << j);break;
	                                    }
	                                } else {
	                                    if (a >>> 0 < (c[1832] | 0) >>> 0) ka();j = a + 16 | 0;if ((c[j >> 2] | 0) == (m | 0)) c[j >> 2] = e;else c[a + 20 >> 2] = e;if (!e) break;
	                                }h = c[1832] | 0;if (e >>> 0 < h >>> 0) ka();c[e + 24 >> 2] = a;j = c[m + 16 >> 2] | 0;do if (j) if (j >>> 0 < h >>> 0) ka();else {
	                                    c[e + 16 >> 2] = j;c[j + 24 >> 2] = e;break;
	                                } while (0);f = c[m + 20 >> 2] | 0;if (f) if (f >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                    c[e + 20 >> 2] = f;c[f + 24 >> 2] = e;break;
	                                }
	                            } while (0);if (l >>> 0 < 16) {
	                                x = l + p | 0;c[m + 4 >> 2] = x | 3;x = m + (x + 4) | 0;c[x >> 2] = c[x >> 2] | 1;
	                            } else {
	                                c[m + 4 >> 2] = p | 3;c[m + (p | 4) >> 2] = l | 1;c[m + (l + p) >> 2] = l;d = c[1830] | 0;if (d) {
	                                    e = c[1833] | 0;g = d >>> 3;h = g << 1;f = 7352 + (h << 2) | 0;j = c[1828] | 0;g = 1 << g;if (j & g) {
	                                        j = 7352 + (h + 2 << 2) | 0;h = c[j >> 2] | 0;if (h >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                            r = j;q = h;
	                                        }
	                                    } else {
	                                        c[1828] = j | g;r = 7352 + (h + 2 << 2) | 0;q = f;
	                                    }c[r >> 2] = e;c[q + 12 >> 2] = e;c[e + 8 >> 2] = q;c[e + 12 >> 2] = f;
	                                }c[1830] = l;c[1833] = b;
	                            }x = m + 8 | 0;i = L;return x | 0;
	                        }
	                    }
	                } else if (a >>> 0 <= 4294967231) {
	                    a = a + 11 | 0;p = a & -8;m = c[1829] | 0;if (m) {
	                        h = 0 - p | 0;a = a >>> 8;if (a) {
	                            if (p >>> 0 > 16777215) l = 31;else {
	                                q = (a + 1048320 | 0) >>> 16 & 8;r = a << q;o = (r + 520192 | 0) >>> 16 & 4;r = r << o;l = (r + 245760 | 0) >>> 16 & 2;l = 14 - (o | q | l) + (r << l >>> 15) | 0;l = p >>> (l + 7 | 0) & 1 | l << 1;
	                            }
	                        } else l = 0;j = c[7616 + (l << 2) >> 2] | 0;a: do if (!j) {
	                            a = 0;k = 0;
	                        } else {
	                            if ((l | 0) == 31) k = 0;else k = 25 - (l >>> 1) | 0;f = h;a = 0;e = p << k;k = 0;while (1) {
	                                g = c[j + 4 >> 2] & -8;h = g - p | 0;if (h >>> 0 < f >>> 0) {
	                                    if ((g | 0) == (p | 0)) {
	                                        a = j;k = j;break a;
	                                    } else k = j;
	                                } else h = f;r = c[j + 20 >> 2] | 0;j = c[j + (e >>> 31 << 2) + 16 >> 2] | 0;a = (r | 0) == 0 | (r | 0) == (j | 0) ? a : r;if (!j) break;else {
	                                    f = h;e = e << 1;
	                                }
	                            }
	                        } while (0);if ((a | 0) == 0 & (k | 0) == 0) {
	                            a = 2 << l;a = m & (a | 0 - a);if (!a) break;r = (a & 0 - a) + -1 | 0;n = r >>> 12 & 16;r = r >>> n;m = r >>> 5 & 8;r = r >>> m;o = r >>> 2 & 4;r = r >>> o;q = r >>> 1 & 2;r = r >>> q;a = r >>> 1 & 1;a = c[7616 + ((m | n | o | q | a) + (r >>> a) << 2) >> 2] | 0;
	                        }if (!a) {
	                            n = h;m = k;
	                        } else while (1) {
	                            r = (c[a + 4 >> 2] & -8) - p | 0;j = r >>> 0 < h >>> 0;h = j ? r : h;k = j ? a : k;j = c[a + 16 >> 2] | 0;if (j) {
	                                a = j;continue;
	                            }a = c[a + 20 >> 2] | 0;if (!a) {
	                                n = h;m = k;break;
	                            }
	                        }if ((m | 0) != 0 ? n >>> 0 < ((c[1830] | 0) - p | 0) >>> 0 : 0) {
	                            k = c[1832] | 0;if (m >>> 0 < k >>> 0) ka();o = m + p | 0;if (m >>> 0 >= o >>> 0) ka();a = c[m + 24 >> 2] | 0;g = c[m + 12 >> 2] | 0;do if ((g | 0) == (m | 0)) {
	                                h = m + 20 | 0;j = c[h >> 2] | 0;if (!j) {
	                                    h = m + 16 | 0;j = c[h >> 2] | 0;if (!j) {
	                                        b = 0;break;
	                                    }
	                                }while (1) {
	                                    f = j + 20 | 0;g = c[f >> 2] | 0;if (g) {
	                                        j = g;h = f;continue;
	                                    }f = j + 16 | 0;g = c[f >> 2] | 0;if (!g) break;else {
	                                        j = g;h = f;
	                                    }
	                                }if (h >>> 0 < k >>> 0) ka();else {
	                                    c[h >> 2] = 0;b = j;break;
	                                }
	                            } else {
	                                f = c[m + 8 >> 2] | 0;if (f >>> 0 < k >>> 0) ka();j = f + 12 | 0;if ((c[j >> 2] | 0) != (m | 0)) ka();h = g + 8 | 0;if ((c[h >> 2] | 0) == (m | 0)) {
	                                    c[j >> 2] = g;c[h >> 2] = f;b = g;break;
	                                } else ka();
	                            } while (0);do if (a) {
	                                j = c[m + 28 >> 2] | 0;h = 7616 + (j << 2) | 0;if ((m | 0) == (c[h >> 2] | 0)) {
	                                    c[h >> 2] = b;if (!b) {
	                                        c[1829] = c[1829] & ~(1 << j);break;
	                                    }
	                                } else {
	                                    if (a >>> 0 < (c[1832] | 0) >>> 0) ka();j = a + 16 | 0;if ((c[j >> 2] | 0) == (m | 0)) c[j >> 2] = b;else c[a + 20 >> 2] = b;if (!b) break;
	                                }h = c[1832] | 0;if (b >>> 0 < h >>> 0) ka();c[b + 24 >> 2] = a;j = c[m + 16 >> 2] | 0;do if (j) if (j >>> 0 < h >>> 0) ka();else {
	                                    c[b + 16 >> 2] = j;c[j + 24 >> 2] = b;break;
	                                } while (0);j = c[m + 20 >> 2] | 0;if (j) if (j >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                    c[b + 20 >> 2] = j;c[j + 24 >> 2] = b;break;
	                                }
	                            } while (0);b: do if (n >>> 0 >= 16) {
	                                c[m + 4 >> 2] = p | 3;c[m + (p | 4) >> 2] = n | 1;c[m + (n + p) >> 2] = n;j = n >>> 3;if (n >>> 0 < 256) {
	                                    g = j << 1;d = 7352 + (g << 2) | 0;h = c[1828] | 0;j = 1 << j;do if (!(h & j)) {
	                                        c[1828] = h | j;t = 7352 + (g + 2 << 2) | 0;u = d;
	                                    } else {
	                                        f = 7352 + (g + 2 << 2) | 0;e = c[f >> 2] | 0;if (e >>> 0 >= (c[1832] | 0) >>> 0) {
	                                            t = f;u = e;break;
	                                        }ka();
	                                    } while (0);c[t >> 2] = o;c[u + 12 >> 2] = o;c[m + (p + 8) >> 2] = u;c[m + (p + 12) >> 2] = d;break;
	                                }d = n >>> 8;if (d) {
	                                    if (n >>> 0 > 16777215) f = 31;else {
	                                        w = (d + 1048320 | 0) >>> 16 & 8;x = d << w;u = (x + 520192 | 0) >>> 16 & 4;x = x << u;f = (x + 245760 | 0) >>> 16 & 2;f = 14 - (u | w | f) + (x << f >>> 15) | 0;f = n >>> (f + 7 | 0) & 1 | f << 1;
	                                    }
	                                } else f = 0;h = 7616 + (f << 2) | 0;c[m + (p + 28) >> 2] = f;c[m + (p + 20) >> 2] = 0;c[m + (p + 16) >> 2] = 0;j = c[1829] | 0;g = 1 << f;if (!(j & g)) {
	                                    c[1829] = j | g;c[h >> 2] = o;c[m + (p + 24) >> 2] = h;c[m + (p + 12) >> 2] = o;c[m + (p + 8) >> 2] = o;break;
	                                }j = c[h >> 2] | 0;if ((f | 0) == 31) d = 0;else d = 25 - (f >>> 1) | 0;c: do if ((c[j + 4 >> 2] & -8 | 0) != (n | 0)) {
	                                    f = n << d;while (1) {
	                                        g = j + (f >>> 31 << 2) + 16 | 0;h = c[g >> 2] | 0;if (!h) break;if ((c[h + 4 >> 2] & -8 | 0) == (n | 0)) {
	                                            v = h;break c;
	                                        } else {
	                                            f = f << 1;j = h;
	                                        }
	                                    }if (g >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                        c[g >> 2] = o;c[m + (p + 24) >> 2] = j;c[m + (p + 12) >> 2] = o;c[m + (p + 8) >> 2] = o;break b;
	                                    }
	                                } else v = j; while (0);b = v + 8 | 0;d = c[b >> 2] | 0;x = c[1832] | 0;if (v >>> 0 >= x >>> 0 & d >>> 0 >= x >>> 0) {
	                                    c[d + 12 >> 2] = o;c[b >> 2] = o;c[m + (p + 8) >> 2] = d;c[m + (p + 12) >> 2] = v;c[m + (p + 24) >> 2] = 0;break;
	                                } else ka();
	                            } else {
	                                x = n + p | 0;c[m + 4 >> 2] = x | 3;x = m + (x + 4) | 0;c[x >> 2] = c[x >> 2] | 1;
	                            } while (0);x = m + 8 | 0;i = L;return x | 0;
	                        }
	                    }
	                } else p = -1; while (0);k = c[1830] | 0;if (k >>> 0 >= p >>> 0) {
	                    d = k - p | 0;b = c[1833] | 0;if (d >>> 0 > 15) {
	                        c[1833] = b + p;c[1830] = d;c[b + (p + 4) >> 2] = d | 1;c[b + k >> 2] = d;c[b + 4 >> 2] = p | 3;
	                    } else {
	                        c[1830] = 0;c[1833] = 0;c[b + 4 >> 2] = k | 3;x = b + (k + 4) | 0;c[x >> 2] = c[x >> 2] | 1;
	                    }x = b + 8 | 0;i = L;return x | 0;
	                }k = c[1831] | 0;if (k >>> 0 > p >>> 0) {
	                    w = k - p | 0;c[1831] = w;x = c[1834] | 0;c[1834] = x + p;c[x + (p + 4) >> 2] = w | 1;c[x + 4 >> 2] = p | 3;x = x + 8 | 0;i = L;return x | 0;
	                }do if (!(c[1946] | 0)) {
	                    k = ua(30) | 0;if (!(k + -1 & k)) {
	                        c[1948] = k;c[1947] = k;c[1949] = -1;c[1950] = -1;c[1951] = 0;c[1939] = 0;c[1946] = (ta(0) | 0) & -16 ^ 1431655768;break;
	                    } else ka();
	                } while (0);l = p + 48 | 0;g = c[1948] | 0;f = p + 47 | 0;h = g + f | 0;g = 0 - g | 0;m = h & g;if (m >>> 0 <= p >>> 0) {
	                    x = 0;i = L;return x | 0;
	                }a = c[1938] | 0;if ((a | 0) != 0 ? (u = c[1936] | 0, v = u + m | 0, v >>> 0 <= u >>> 0 | v >>> 0 > a >>> 0) : 0) {
	                    x = 0;i = L;return x | 0;
	                }d: do if (!(c[1939] & 4)) {
	                    j = c[1834] | 0;e: do if (j) {
	                        a = 7760 | 0;while (1) {
	                            k = c[a >> 2] | 0;if (k >>> 0 <= j >>> 0 ? (s = a + 4 | 0, (k + (c[s >> 2] | 0) | 0) >>> 0 > j >>> 0) : 0) break;a = c[a + 8 >> 2] | 0;if (!a) {
	                                A = 181;break e;
	                            }
	                        }if (a) {
	                            k = h - (c[1831] | 0) & g;if (k >>> 0 < 2147483647) {
	                                j = ma(k | 0) | 0;if ((j | 0) == ((c[a >> 2] | 0) + (c[s >> 2] | 0) | 0)) A = 190;else A = 191;
	                            } else k = 0;
	                        } else A = 181;
	                    } else A = 181; while (0);do if ((A | 0) == 181) {
	                        j = ma(0) | 0;if ((j | 0) != (-1 | 0)) {
	                            a = j;k = c[1947] | 0;h = k + -1 | 0;if (!(h & a)) k = m;else k = m - a + (h + a & 0 - k) | 0;a = c[1936] | 0;h = a + k | 0;if (k >>> 0 > p >>> 0 & k >>> 0 < 2147483647) {
	                                v = c[1938] | 0;if ((v | 0) != 0 ? h >>> 0 <= a >>> 0 | h >>> 0 > v >>> 0 : 0) {
	                                    k = 0;break;
	                                }h = ma(k | 0) | 0;if ((h | 0) == (j | 0)) A = 190;else {
	                                    j = h;A = 191;
	                                }
	                            } else k = 0;
	                        } else k = 0;
	                    } while (0);f: do if ((A | 0) == 190) {
	                        if ((j | 0) != (-1 | 0)) {
	                            w = j;s = k;A = 201;break d;
	                        }
	                    } else if ((A | 0) == 191) {
	                        a = 0 - k | 0;do if ((j | 0) != (-1 | 0) & k >>> 0 < 2147483647 & l >>> 0 > k >>> 0 ? (d = c[1948] | 0, d = f - k + d & 0 - d, d >>> 0 < 2147483647) : 0) if ((ma(d | 0) | 0) == (-1 | 0)) {
	                            ma(a | 0) | 0;k = 0;break f;
	                        } else {
	                            k = d + k | 0;break;
	                        } while (0);if ((j | 0) == (-1 | 0)) k = 0;else {
	                            w = j;s = k;A = 201;break d;
	                        }
	                    } while (0);c[1939] = c[1939] | 4;A = 198;
	                } else {
	                    k = 0;A = 198;
	                } while (0);if ((((A | 0) == 198 ? m >>> 0 < 2147483647 : 0) ? (w = ma(m | 0) | 0, x = ma(0) | 0, (w | 0) != (-1 | 0) & (x | 0) != (-1 | 0) & w >>> 0 < x >>> 0) : 0) ? (z = x - w | 0, y = z >>> 0 > (p + 40 | 0) >>> 0, y) : 0) {
	                    s = y ? z : k;A = 201;
	                }if ((A | 0) == 201) {
	                    j = (c[1936] | 0) + s | 0;c[1936] = j;if (j >>> 0 > (c[1937] | 0) >>> 0) c[1937] = j;o = c[1834] | 0;g: do if (o) {
	                        f = 7760 | 0;while (1) {
	                            k = c[f >> 2] | 0;g = f + 4 | 0;j = c[g >> 2] | 0;if ((w | 0) == (k + j | 0)) {
	                                A = 213;break;
	                            }h = c[f + 8 >> 2] | 0;if (!h) break;else f = h;
	                        }if (((A | 0) == 213 ? (c[f + 12 >> 2] & 8 | 0) == 0 : 0) ? o >>> 0 >= k >>> 0 & o >>> 0 < w >>> 0 : 0) {
	                            c[g >> 2] = j + s;d = (c[1831] | 0) + s | 0;b = o + 8 | 0;if (!(b & 7)) b = 0;else b = 0 - b & 7;x = d - b | 0;c[1834] = o + b;c[1831] = x;c[o + (b + 4) >> 2] = x | 1;c[o + (d + 4) >> 2] = 40;c[1835] = c[1950];break;
	                        }k = c[1832] | 0;if (w >>> 0 < k >>> 0) {
	                            c[1832] = w;k = w;
	                        }h = w + s | 0;g = 7760 | 0;while (1) {
	                            if ((c[g >> 2] | 0) == (h | 0)) {
	                                A = 223;break;
	                            }j = c[g + 8 >> 2] | 0;if (!j) break;else g = j;
	                        }if ((A | 0) == 223 ? (c[g + 12 >> 2] & 8 | 0) == 0 : 0) {
	                            c[g >> 2] = w;j = g + 4 | 0;c[j >> 2] = (c[j >> 2] | 0) + s;j = w + 8 | 0;if (!(j & 7)) r = 0;else r = 0 - j & 7;j = w + (s + 8) | 0;if (!(j & 7)) b = 0;else b = 0 - j & 7;j = w + (b + s) | 0;q = r + p | 0;n = w + q | 0;d = j - (w + r) - p | 0;c[w + (r + 4) >> 2] = p | 3;h: do if ((j | 0) != (o | 0)) {
	                                if ((j | 0) == (c[1833] | 0)) {
	                                    x = (c[1830] | 0) + d | 0;c[1830] = x;c[1833] = n;c[w + (q + 4) >> 2] = x | 1;c[w + (x + q) >> 2] = x;break;
	                                }l = s + 4 | 0;h = c[w + (l + b) >> 2] | 0;if ((h & 3 | 0) == 1) {
	                                    m = h & -8;e = h >>> 3;i: do if (h >>> 0 >= 256) {
	                                        a = c[w + ((b | 24) + s) >> 2] | 0;g = c[w + (s + 12 + b) >> 2] | 0;do if ((g | 0) == (j | 0)) {
	                                            g = b | 16;f = w + (l + g) | 0;h = c[f >> 2] | 0;if (!h) {
	                                                g = w + (g + s) | 0;h = c[g >> 2] | 0;if (!h) {
	                                                    H = 0;break;
	                                                }
	                                            } else g = f;while (1) {
	                                                e = h + 20 | 0;f = c[e >> 2] | 0;if (f) {
	                                                    h = f;g = e;continue;
	                                                }e = h + 16 | 0;f = c[e >> 2] | 0;if (!f) break;else {
	                                                    h = f;g = e;
	                                                }
	                                            }if (g >>> 0 < k >>> 0) ka();else {
	                                                c[g >> 2] = 0;H = h;break;
	                                            }
	                                        } else {
	                                            f = c[w + ((b | 8) + s) >> 2] | 0;if (f >>> 0 < k >>> 0) ka();k = f + 12 | 0;if ((c[k >> 2] | 0) != (j | 0)) ka();h = g + 8 | 0;if ((c[h >> 2] | 0) == (j | 0)) {
	                                                c[k >> 2] = g;c[h >> 2] = f;H = g;break;
	                                            } else ka();
	                                        } while (0);if (!a) break;k = c[w + (s + 28 + b) >> 2] | 0;h = 7616 + (k << 2) | 0;do if ((j | 0) != (c[h >> 2] | 0)) {
	                                            if (a >>> 0 < (c[1832] | 0) >>> 0) ka();k = a + 16 | 0;if ((c[k >> 2] | 0) == (j | 0)) c[k >> 2] = H;else c[a + 20 >> 2] = H;if (!H) break i;
	                                        } else {
	                                            c[h >> 2] = H;if (H) break;c[1829] = c[1829] & ~(1 << k);break i;
	                                        } while (0);h = c[1832] | 0;if (H >>> 0 < h >>> 0) ka();c[H + 24 >> 2] = a;j = b | 16;k = c[w + (j + s) >> 2] | 0;do if (k) if (k >>> 0 < h >>> 0) ka();else {
	                                            c[H + 16 >> 2] = k;c[k + 24 >> 2] = H;break;
	                                        } while (0);j = c[w + (l + j) >> 2] | 0;if (!j) break;if (j >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                            c[H + 20 >> 2] = j;c[j + 24 >> 2] = H;break;
	                                        }
	                                    } else {
	                                        g = c[w + ((b | 8) + s) >> 2] | 0;f = c[w + (s + 12 + b) >> 2] | 0;h = 7352 + (e << 1 << 2) | 0;do if ((g | 0) != (h | 0)) {
	                                            if (g >>> 0 < k >>> 0) ka();if ((c[g + 12 >> 2] | 0) == (j | 0)) break;ka();
	                                        } while (0);if ((f | 0) == (g | 0)) {
	                                            c[1828] = c[1828] & ~(1 << e);break;
	                                        }do if ((f | 0) == (h | 0)) D = f + 8 | 0;else {
	                                            if (f >>> 0 < k >>> 0) ka();k = f + 8 | 0;if ((c[k >> 2] | 0) == (j | 0)) {
	                                                D = k;break;
	                                            }ka();
	                                        } while (0);c[g + 12 >> 2] = f;c[D >> 2] = g;
	                                    } while (0);j = w + ((m | b) + s) | 0;k = m + d | 0;
	                                } else k = d;j = j + 4 | 0;c[j >> 2] = c[j >> 2] & -2;c[w + (q + 4) >> 2] = k | 1;c[w + (k + q) >> 2] = k;j = k >>> 3;if (k >>> 0 < 256) {
	                                    g = j << 1;f = 7352 + (g << 2) | 0;h = c[1828] | 0;j = 1 << j;do if (!(h & j)) {
	                                        c[1828] = h | j;I = 7352 + (g + 2 << 2) | 0;J = f;
	                                    } else {
	                                        j = 7352 + (g + 2 << 2) | 0;h = c[j >> 2] | 0;if (h >>> 0 >= (c[1832] | 0) >>> 0) {
	                                            I = j;J = h;break;
	                                        }ka();
	                                    } while (0);c[I >> 2] = n;c[J + 12 >> 2] = n;c[w + (q + 8) >> 2] = J;c[w + (q + 12) >> 2] = f;break;
	                                }d = k >>> 8;do if (!d) f = 0;else {
	                                    if (k >>> 0 > 16777215) {
	                                        f = 31;break;
	                                    }v = (d + 1048320 | 0) >>> 16 & 8;x = d << v;u = (x + 520192 | 0) >>> 16 & 4;x = x << u;f = (x + 245760 | 0) >>> 16 & 2;f = 14 - (u | v | f) + (x << f >>> 15) | 0;f = k >>> (f + 7 | 0) & 1 | f << 1;
	                                } while (0);h = 7616 + (f << 2) | 0;c[w + (q + 28) >> 2] = f;c[w + (q + 20) >> 2] = 0;c[w + (q + 16) >> 2] = 0;j = c[1829] | 0;g = 1 << f;if (!(j & g)) {
	                                    c[1829] = j | g;c[h >> 2] = n;c[w + (q + 24) >> 2] = h;c[w + (q + 12) >> 2] = n;c[w + (q + 8) >> 2] = n;break;
	                                }j = c[h >> 2] | 0;if ((f | 0) == 31) h = 0;else h = 25 - (f >>> 1) | 0;j: do if ((c[j + 4 >> 2] & -8 | 0) != (k | 0)) {
	                                    f = k << h;while (1) {
	                                        g = j + (f >>> 31 << 2) + 16 | 0;h = c[g >> 2] | 0;if (!h) break;if ((c[h + 4 >> 2] & -8 | 0) == (k | 0)) {
	                                            K = h;break j;
	                                        } else {
	                                            f = f << 1;j = h;
	                                        }
	                                    }if (g >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                        c[g >> 2] = n;c[w + (q + 24) >> 2] = j;c[w + (q + 12) >> 2] = n;c[w + (q + 8) >> 2] = n;break h;
	                                    }
	                                } else K = j; while (0);b = K + 8 | 0;d = c[b >> 2] | 0;x = c[1832] | 0;if (K >>> 0 >= x >>> 0 & d >>> 0 >= x >>> 0) {
	                                    c[d + 12 >> 2] = n;c[b >> 2] = n;c[w + (q + 8) >> 2] = d;c[w + (q + 12) >> 2] = K;c[w + (q + 24) >> 2] = 0;break;
	                                } else ka();
	                            } else {
	                                x = (c[1831] | 0) + d | 0;c[1831] = x;c[1834] = n;c[w + (q + 4) >> 2] = x | 1;
	                            } while (0);x = w + (r | 8) | 0;i = L;return x | 0;
	                        }j = 7760 | 0;while (1) {
	                            h = c[j >> 2] | 0;if (h >>> 0 <= o >>> 0 ? (B = c[j + 4 >> 2] | 0, C = h + B | 0, C >>> 0 > o >>> 0) : 0) break;j = c[j + 8 >> 2] | 0;
	                        }j = h + (B + -39) | 0;if (!(j & 7)) j = 0;else j = 0 - j & 7;g = h + (B + -47 + j) | 0;g = g >>> 0 < (o + 16 | 0) >>> 0 ? o : g;h = g + 8 | 0;j = w + 8 | 0;if (!(j & 7)) j = 0;else j = 0 - j & 7;f = s + -40 - j | 0;c[1834] = w + j;c[1831] = f;c[w + (j + 4) >> 2] = f | 1;c[w + (s + -36) >> 2] = 40;c[1835] = c[1950];c[g + 4 >> 2] = 27;c[h + 0 >> 2] = c[1940];c[h + 4 >> 2] = c[1941];c[h + 8 >> 2] = c[1942];c[h + 12 >> 2] = c[1943];c[1940] = w;c[1941] = s;c[1943] = 0;c[1942] = h;f = g + 28 | 0;c[f >> 2] = 7;if ((g + 32 | 0) >>> 0 < C >>> 0) do {
	                            x = f;f = f + 4 | 0;c[f >> 2] = 7;
	                        } while ((x + 8 | 0) >>> 0 < C >>> 0);if ((g | 0) != (o | 0)) {
	                            k = g - o | 0;j = o + (k + 4) | 0;c[j >> 2] = c[j >> 2] & -2;c[o + 4 >> 2] = k | 1;c[o + k >> 2] = k;j = k >>> 3;if (k >>> 0 < 256) {
	                                g = j << 1;f = 7352 + (g << 2) | 0;h = c[1828] | 0;j = 1 << j;do if (!(h & j)) {
	                                    c[1828] = h | j;E = 7352 + (g + 2 << 2) | 0;F = f;
	                                } else {
	                                    d = 7352 + (g + 2 << 2) | 0;b = c[d >> 2] | 0;if (b >>> 0 >= (c[1832] | 0) >>> 0) {
	                                        E = d;F = b;break;
	                                    }ka();
	                                } while (0);c[E >> 2] = o;c[F + 12 >> 2] = o;c[o + 8 >> 2] = F;c[o + 12 >> 2] = f;break;
	                            }d = k >>> 8;if (d) {
	                                if (k >>> 0 > 16777215) g = 31;else {
	                                    w = (d + 1048320 | 0) >>> 16 & 8;x = d << w;v = (x + 520192 | 0) >>> 16 & 4;x = x << v;g = (x + 245760 | 0) >>> 16 & 2;g = 14 - (v | w | g) + (x << g >>> 15) | 0;g = k >>> (g + 7 | 0) & 1 | g << 1;
	                                }
	                            } else g = 0;h = 7616 + (g << 2) | 0;c[o + 28 >> 2] = g;c[o + 20 >> 2] = 0;c[o + 16 >> 2] = 0;e = c[1829] | 0;j = 1 << g;if (!(e & j)) {
	                                c[1829] = e | j;c[h >> 2] = o;c[o + 24 >> 2] = h;c[o + 12 >> 2] = o;c[o + 8 >> 2] = o;break;
	                            }e = c[h >> 2] | 0;if ((g | 0) == 31) d = 0;else d = 25 - (g >>> 1) | 0;k: do if ((c[e + 4 >> 2] & -8 | 0) != (k | 0)) {
	                                j = k << d;while (1) {
	                                    h = e + (j >>> 31 << 2) + 16 | 0;d = c[h >> 2] | 0;if (!d) break;if ((c[d + 4 >> 2] & -8 | 0) == (k | 0)) {
	                                        G = d;break k;
	                                    } else {
	                                        j = j << 1;e = d;
	                                    }
	                                }if (h >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                    c[h >> 2] = o;c[o + 24 >> 2] = e;c[o + 12 >> 2] = o;c[o + 8 >> 2] = o;break g;
	                                }
	                            } else G = e; while (0);b = G + 8 | 0;d = c[b >> 2] | 0;x = c[1832] | 0;if (G >>> 0 >= x >>> 0 & d >>> 0 >= x >>> 0) {
	                                c[d + 12 >> 2] = o;c[b >> 2] = o;c[o + 8 >> 2] = d;c[o + 12 >> 2] = G;c[o + 24 >> 2] = 0;break;
	                            } else ka();
	                        }
	                    } else {
	                        x = c[1832] | 0;if ((x | 0) == 0 | w >>> 0 < x >>> 0) c[1832] = w;c[1940] = w;c[1941] = s;c[1943] = 0;c[1837] = c[1946];c[1836] = -1;b = 0;do {
	                            x = b << 1;v = 7352 + (x << 2) | 0;c[7352 + (x + 3 << 2) >> 2] = v;c[7352 + (x + 2 << 2) >> 2] = v;b = b + 1 | 0;
	                        } while ((b | 0) != 32);b = w + 8 | 0;if (!(b & 7)) b = 0;else b = 0 - b & 7;x = s + -40 - b | 0;c[1834] = w + b;c[1831] = x;c[w + (b + 4) >> 2] = x | 1;c[w + (s + -36) >> 2] = 40;c[1835] = c[1950];
	                    } while (0);b = c[1831] | 0;if (b >>> 0 > p >>> 0) {
	                        w = b - p | 0;c[1831] = w;x = c[1834] | 0;c[1834] = x + p;c[x + (p + 4) >> 2] = w | 1;c[x + 4 >> 2] = p | 3;x = x + 8 | 0;i = L;return x | 0;
	                    }
	                }c[(va() | 0) >> 2] = 12;x = 0;i = L;return x | 0;
	            }function kd(a) {
	                a = a | 0;var b = 0,
	                    d = 0,
	                    e = 0,
	                    f = 0,
	                    g = 0,
	                    h = 0,
	                    j = 0,
	                    k = 0,
	                    l = 0,
	                    m = 0,
	                    n = 0,
	                    o = 0,
	                    p = 0,
	                    q = 0,
	                    r = 0,
	                    s = 0,
	                    t = 0,
	                    u = 0,
	                    v = 0,
	                    w = 0;w = i;if (!a) {
	                    i = w;return;
	                }f = a + -8 | 0;h = c[1832] | 0;if (f >>> 0 < h >>> 0) ka();g = c[a + -4 >> 2] | 0;e = g & 3;if ((e | 0) == 1) ka();q = g & -8;r = a + (q + -8) | 0;do if (!(g & 1)) {
	                    g = c[f >> 2] | 0;if (!e) {
	                        i = w;return;
	                    }j = -8 - g | 0;m = a + j | 0;n = g + q | 0;if (m >>> 0 < h >>> 0) ka();if ((m | 0) == (c[1833] | 0)) {
	                        f = a + (q + -4) | 0;g = c[f >> 2] | 0;if ((g & 3 | 0) != 3) {
	                            v = m;l = n;break;
	                        }c[1830] = n;c[f >> 2] = g & -2;c[a + (j + 4) >> 2] = n | 1;c[r >> 2] = n;i = w;return;
	                    }d = g >>> 3;if (g >>> 0 < 256) {
	                        e = c[a + (j + 8) >> 2] | 0;f = c[a + (j + 12) >> 2] | 0;g = 7352 + (d << 1 << 2) | 0;if ((e | 0) != (g | 0)) {
	                            if (e >>> 0 < h >>> 0) ka();if ((c[e + 12 >> 2] | 0) != (m | 0)) ka();
	                        }if ((f | 0) == (e | 0)) {
	                            c[1828] = c[1828] & ~(1 << d);v = m;l = n;break;
	                        }if ((f | 0) != (g | 0)) {
	                            if (f >>> 0 < h >>> 0) ka();g = f + 8 | 0;if ((c[g >> 2] | 0) == (m | 0)) b = g;else ka();
	                        } else b = f + 8 | 0;c[e + 12 >> 2] = f;c[b >> 2] = e;v = m;l = n;break;
	                    }b = c[a + (j + 24) >> 2] | 0;e = c[a + (j + 12) >> 2] | 0;do if ((e | 0) == (m | 0)) {
	                        f = a + (j + 20) | 0;g = c[f >> 2] | 0;if (!g) {
	                            f = a + (j + 16) | 0;g = c[f >> 2] | 0;if (!g) {
	                                k = 0;break;
	                            }
	                        }while (1) {
	                            d = g + 20 | 0;e = c[d >> 2] | 0;if (e) {
	                                g = e;f = d;continue;
	                            }d = g + 16 | 0;e = c[d >> 2] | 0;if (!e) break;else {
	                                g = e;f = d;
	                            }
	                        }if (f >>> 0 < h >>> 0) ka();else {
	                            c[f >> 2] = 0;k = g;break;
	                        }
	                    } else {
	                        d = c[a + (j + 8) >> 2] | 0;if (d >>> 0 < h >>> 0) ka();g = d + 12 | 0;if ((c[g >> 2] | 0) != (m | 0)) ka();f = e + 8 | 0;if ((c[f >> 2] | 0) == (m | 0)) {
	                            c[g >> 2] = e;c[f >> 2] = d;k = e;break;
	                        } else ka();
	                    } while (0);if (b) {
	                        g = c[a + (j + 28) >> 2] | 0;f = 7616 + (g << 2) | 0;if ((m | 0) == (c[f >> 2] | 0)) {
	                            c[f >> 2] = k;if (!k) {
	                                c[1829] = c[1829] & ~(1 << g);v = m;l = n;break;
	                            }
	                        } else {
	                            if (b >>> 0 < (c[1832] | 0) >>> 0) ka();g = b + 16 | 0;if ((c[g >> 2] | 0) == (m | 0)) c[g >> 2] = k;else c[b + 20 >> 2] = k;if (!k) {
	                                v = m;l = n;break;
	                            }
	                        }f = c[1832] | 0;if (k >>> 0 < f >>> 0) ka();c[k + 24 >> 2] = b;g = c[a + (j + 16) >> 2] | 0;do if (g) if (g >>> 0 < f >>> 0) ka();else {
	                            c[k + 16 >> 2] = g;c[g + 24 >> 2] = k;break;
	                        } while (0);g = c[a + (j + 20) >> 2] | 0;if (g) {
	                            if (g >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                c[k + 20 >> 2] = g;c[g + 24 >> 2] = k;v = m;l = n;break;
	                            }
	                        } else {
	                            v = m;l = n;
	                        }
	                    } else {
	                        v = m;l = n;
	                    }
	                } else {
	                    v = f;l = q;
	                } while (0);if (v >>> 0 >= r >>> 0) ka();g = a + (q + -4) | 0;f = c[g >> 2] | 0;if (!(f & 1)) ka();if (!(f & 2)) {
	                    if ((r | 0) == (c[1834] | 0)) {
	                        m = (c[1831] | 0) + l | 0;c[1831] = m;c[1834] = v;c[v + 4 >> 2] = m | 1;if ((v | 0) != (c[1833] | 0)) {
	                            i = w;return;
	                        }c[1833] = 0;c[1830] = 0;i = w;return;
	                    }if ((r | 0) == (c[1833] | 0)) {
	                        m = (c[1830] | 0) + l | 0;c[1830] = m;c[1833] = v;c[v + 4 >> 2] = m | 1;c[v + m >> 2] = m;i = w;return;
	                    }h = (f & -8) + l | 0;d = f >>> 3;do if (f >>> 0 >= 256) {
	                        b = c[a + (q + 16) >> 2] | 0;g = c[a + (q | 4) >> 2] | 0;do if ((g | 0) == (r | 0)) {
	                            f = a + (q + 12) | 0;g = c[f >> 2] | 0;if (!g) {
	                                f = a + (q + 8) | 0;g = c[f >> 2] | 0;if (!g) {
	                                    p = 0;break;
	                                }
	                            }while (1) {
	                                d = g + 20 | 0;e = c[d >> 2] | 0;if (e) {
	                                    g = e;f = d;continue;
	                                }d = g + 16 | 0;e = c[d >> 2] | 0;if (!e) break;else {
	                                    g = e;f = d;
	                                }
	                            }if (f >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                c[f >> 2] = 0;p = g;break;
	                            }
	                        } else {
	                            f = c[a + q >> 2] | 0;if (f >>> 0 < (c[1832] | 0) >>> 0) ka();e = f + 12 | 0;if ((c[e >> 2] | 0) != (r | 0)) ka();d = g + 8 | 0;if ((c[d >> 2] | 0) == (r | 0)) {
	                                c[e >> 2] = g;c[d >> 2] = f;p = g;break;
	                            } else ka();
	                        } while (0);if (b) {
	                            g = c[a + (q + 20) >> 2] | 0;f = 7616 + (g << 2) | 0;if ((r | 0) == (c[f >> 2] | 0)) {
	                                c[f >> 2] = p;if (!p) {
	                                    c[1829] = c[1829] & ~(1 << g);break;
	                                }
	                            } else {
	                                if (b >>> 0 < (c[1832] | 0) >>> 0) ka();g = b + 16 | 0;if ((c[g >> 2] | 0) == (r | 0)) c[g >> 2] = p;else c[b + 20 >> 2] = p;if (!p) break;
	                            }g = c[1832] | 0;if (p >>> 0 < g >>> 0) ka();c[p + 24 >> 2] = b;f = c[a + (q + 8) >> 2] | 0;do if (f) if (f >>> 0 < g >>> 0) ka();else {
	                                c[p + 16 >> 2] = f;c[f + 24 >> 2] = p;break;
	                            } while (0);d = c[a + (q + 12) >> 2] | 0;if (d) if (d >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                                c[p + 20 >> 2] = d;c[d + 24 >> 2] = p;break;
	                            }
	                        }
	                    } else {
	                        e = c[a + q >> 2] | 0;f = c[a + (q | 4) >> 2] | 0;g = 7352 + (d << 1 << 2) | 0;if ((e | 0) != (g | 0)) {
	                            if (e >>> 0 < (c[1832] | 0) >>> 0) ka();if ((c[e + 12 >> 2] | 0) != (r | 0)) ka();
	                        }if ((f | 0) == (e | 0)) {
	                            c[1828] = c[1828] & ~(1 << d);break;
	                        }if ((f | 0) != (g | 0)) {
	                            if (f >>> 0 < (c[1832] | 0) >>> 0) ka();g = f + 8 | 0;if ((c[g >> 2] | 0) == (r | 0)) o = g;else ka();
	                        } else o = f + 8 | 0;c[e + 12 >> 2] = f;c[o >> 2] = e;
	                    } while (0);c[v + 4 >> 2] = h | 1;c[v + h >> 2] = h;if ((v | 0) == (c[1833] | 0)) {
	                        c[1830] = h;i = w;return;
	                    } else g = h;
	                } else {
	                    c[g >> 2] = f & -2;c[v + 4 >> 2] = l | 1;c[v + l >> 2] = l;g = l;
	                }e = g >>> 3;if (g >>> 0 < 256) {
	                    f = e << 1;g = 7352 + (f << 2) | 0;d = c[1828] | 0;e = 1 << e;if (d & e) {
	                        d = 7352 + (f + 2 << 2) | 0;b = c[d >> 2] | 0;if (b >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                            s = d;t = b;
	                        }
	                    } else {
	                        c[1828] = d | e;s = 7352 + (f + 2 << 2) | 0;t = g;
	                    }c[s >> 2] = v;c[t + 12 >> 2] = v;c[v + 8 >> 2] = t;c[v + 12 >> 2] = g;i = w;return;
	                }d = g >>> 8;if (d) {
	                    if (g >>> 0 > 16777215) f = 31;else {
	                        l = (d + 1048320 | 0) >>> 16 & 8;m = d << l;k = (m + 520192 | 0) >>> 16 & 4;m = m << k;f = (m + 245760 | 0) >>> 16 & 2;f = 14 - (k | l | f) + (m << f >>> 15) | 0;f = g >>> (f + 7 | 0) & 1 | f << 1;
	                    }
	                } else f = 0;b = 7616 + (f << 2) | 0;c[v + 28 >> 2] = f;c[v + 20 >> 2] = 0;c[v + 16 >> 2] = 0;d = c[1829] | 0;e = 1 << f;a: do if (d & e) {
	                    b = c[b >> 2] | 0;if ((f | 0) == 31) d = 0;else d = 25 - (f >>> 1) | 0;b: do if ((c[b + 4 >> 2] & -8 | 0) != (g | 0)) {
	                        f = g << d;while (1) {
	                            e = b + (f >>> 31 << 2) + 16 | 0;d = c[e >> 2] | 0;if (!d) break;if ((c[d + 4 >> 2] & -8 | 0) == (g | 0)) {
	                                u = d;break b;
	                            } else {
	                                f = f << 1;b = d;
	                            }
	                        }if (e >>> 0 < (c[1832] | 0) >>> 0) ka();else {
	                            c[e >> 2] = v;c[v + 24 >> 2] = b;c[v + 12 >> 2] = v;c[v + 8 >> 2] = v;break a;
	                        }
	                    } else u = b; while (0);d = u + 8 | 0;b = c[d >> 2] | 0;m = c[1832] | 0;if (u >>> 0 >= m >>> 0 & b >>> 0 >= m >>> 0) {
	                        c[b + 12 >> 2] = v;c[d >> 2] = v;c[v + 8 >> 2] = b;c[v + 12 >> 2] = u;c[v + 24 >> 2] = 0;break;
	                    } else ka();
	                } else {
	                    c[1829] = d | e;c[b >> 2] = v;c[v + 24 >> 2] = b;c[v + 12 >> 2] = v;c[v + 8 >> 2] = v;
	                } while (0);m = (c[1836] | 0) + -1 | 0;c[1836] = m;if (!m) b = 7768 | 0;else {
	                    i = w;return;
	                }while (1) {
	                    b = c[b >> 2] | 0;if (!b) break;else b = b + 8 | 0;
	                }c[1836] = -1;i = w;return;
	            }function ld() {}function md(b) {
	                b = b | 0;var c = 0;c = b;while (a[c >> 0] | 0) c = c + 1 | 0;return c - b | 0;
	            }function nd(b, d, e) {
	                b = b | 0;d = d | 0;e = e | 0;var f = 0,
	                    g = 0,
	                    h = 0,
	                    i = 0;f = b + e | 0;if ((e | 0) >= 20) {
	                    d = d & 255;h = b & 3;i = d | d << 8 | d << 16 | d << 24;g = f & ~3;if (h) {
	                        h = b + 4 - h | 0;while ((b | 0) < (h | 0)) {
	                            a[b >> 0] = d;b = b + 1 | 0;
	                        }
	                    }while ((b | 0) < (g | 0)) {
	                        c[b >> 2] = i;b = b + 4 | 0;
	                    }
	                }while ((b | 0) < (f | 0)) {
	                    a[b >> 0] = d;b = b + 1 | 0;
	                }return b - e | 0;
	            }function od(b, d, e) {
	                b = b | 0;d = d | 0;e = e | 0;var f = 0;if ((e | 0) >= 4096) return pa(b | 0, d | 0, e | 0) | 0;f = b | 0;if ((b & 3) == (d & 3)) {
	                    while (b & 3) {
	                        if (!e) return f | 0;a[b >> 0] = a[d >> 0] | 0;b = b + 1 | 0;d = d + 1 | 0;e = e - 1 | 0;
	                    }while ((e | 0) >= 4) {
	                        c[b >> 2] = c[d >> 2];b = b + 4 | 0;d = d + 4 | 0;e = e - 4 | 0;
	                    }
	                }while ((e | 0) > 0) {
	                    a[b >> 0] = a[d >> 0] | 0;b = b + 1 | 0;d = d + 1 | 0;e = e - 1 | 0;
	                }return f | 0;
	            }function pd(a, b, c, d, e, f) {
	                a = a | 0;b = b | 0;c = c | 0;d = d | 0;e = e | 0;f = f | 0;xa[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0);
	            }function qd(a, b, c, d, e) {
	                a = a | 0;b = b | 0;c = c | 0;d = d | 0;e = e | 0;_(0);
	            }
	
	            // EMSCRIPTEN_END_FUNCS
	            var xa = [qd, fc, ec, qd];return { _strlen: md, _free: kd, _broadwayGetMajorVersion: dd, _get_h264bsdClip: Lb, _broadwayExit: cd, _memset: nd, _broadwayCreateStream: Zc, _malloc: jd, _memcpy: od, _broadwayGetMinorVersion: ed, _broadwayPlayStream: $c, _broadwaySetStreamLength: _c, _broadwayInit: ad, runPostSets: ld, stackAlloc: ya, stackSave: za, stackRestore: Aa, setThrew: Ba, setTempRet0: Ea, getTempRet0: Fa, dynCall_viiiii: pd };
	        }(
	
	        // EMSCRIPTEN_END_ASM
	        p.Xc, p.Yc, Q),
	            Bb = p._strlen = $._strlen,
	            Ea = p._free = $._free;p._broadwayGetMajorVersion = $._broadwayGetMajorVersion;p._get_h264bsdClip = $._get_h264bsdClip;p._broadwayExit = $._broadwayExit;var Gb = p._memset = $._memset;p._broadwayCreateStream = $._broadwayCreateStream;var Ca = p._malloc = $._malloc,
	            gc = p._memcpy = $._memcpy;
	        p._broadwayGetMinorVersion = $._broadwayGetMinorVersion;p._broadwayPlayStream = $._broadwayPlayStream;p._broadwaySetStreamLength = $._broadwaySetStreamLength;p._broadwayInit = $._broadwayInit;p.runPostSets = $.runPostSets;p.dynCall_viiiii = $.dynCall_viiiii;z.pb = $.stackAlloc;z.Tb = $.stackSave;z.Sb = $.stackRestore;z.Yd = $.setTempRet0;z.xd = $.getTempRet0;
	        if (T) if ("function" === typeof p.locateFile ? T = p.locateFile(T) : p.memoryInitializerPrefixURL && (T = p.memoryInitializerPrefixURL + T), t || da) {
	            var hc = p.readBinary(T);N.set(hc, Ia);
	        } else Ya(), yb(T, function (a) {
	            N.set(a, Ia);Za();
	        }, function () {
	            d("could not load memory initializer " + T);
	        });function ia(a) {
	            this.name = "ExitStatus";this.message = "Program terminated with exit(" + a + ")";this.status = a;
	        }ia.prototype = Error();var ic,
	            jc = k,
	            Xa = function kc() {
	            !p.calledRun && lc && mc();p.calledRun || (Xa = kc);
	        };
	        p.callMain = p.ag = function (a) {
	            function b() {
	                for (var a = 0; 3 > a; a++) e.push(0);
	            }w(0 == S, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");w(0 == Oa.length, "cannot call main when preRun functions remain to be called");a = a || [];Sa || (Sa = i, Na(R));var c = a.length + 1,
	                e = [M(Va(p.thisProgram), "i8", 0)];b();for (var f = 0; f < c - 1; f += 1) e.push(M(Va(a[f]), "i8", 0)), b();e.push(0);e = M(e, "i32", 0);ic = y;try {
	                var h = p._main(c, e, 0);nc(h);
	            } catch (j) {
	                j instanceof ia || ("SimulateInfiniteLoop" == j ? p.noExitRuntime = i : (j && "object" === typeof j && j.stack && p.fa("exception thrown: " + [j, j.stack]), d(j)));
	            } finally {}
	        };
	        function mc(a) {
	            function b() {
	                if (!p.calledRun && (p.calledRun = i, !H)) {
	                    Sa || (Sa = i, Na(R));Na(Pa);ba && jc !== k && p.fa("pre-main prep time: " + (Date.now() - jc) + " ms");if (p.onRuntimeInitialized) p.onRuntimeInitialized();p._main && lc && p.callMain(a);if (p.postRun) for ("function" == typeof p.postRun && (p.postRun = [p.postRun]); p.postRun.length;) Ua(p.postRun.shift());Na(Ra);
	                }
	            }a = a || p.arguments;jc === k && (jc = Date.now());if (!(0 < S)) {
	                if (p.preRun) for ("function" == typeof p.preRun && (p.preRun = [p.preRun]); p.preRun.length;) Ta(p.preRun.shift());
	                Na(Oa);!(0 < S) && !p.calledRun && (p.setStatus ? (p.setStatus("Running..."), setTimeout(function () {
	                    setTimeout(function () {
	                        p.setStatus("");
	                    }, 1);b();
	                }, 1)) : b());
	            }
	        }p.run = p.Ng = mc;function nc(a) {
	            p.noExitRuntime || (H = i, y = ic, Na(Qa), t ? (process.stdout.once("drain", function () {
	                process.exit(a);
	            }), console.log(" "), setTimeout(function () {
	                process.exit(a);
	            }, 500)) : da && "function" === typeof quit && quit(a), d(new ia(a)));
	        }p.exit = p.hg = nc;
	        function A(a) {
	            a && (p.print(a), p.fa(a));H = i;d("abort() at " + Fa() + "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.");
	        }p.abort = p.abort = A;if (p.preInit) for ("function" == typeof p.preInit && (p.preInit = [p.preInit]); 0 < p.preInit.length;) p.preInit.pop()();var lc = m;p.noInitialRun && (lc = m);mc();
	
	        var resultModule = window.Module || this.Module;
	        return resultModule;
	    };
	
	    var nowValue = function () {
	        return new Date().getTime();
	    };
	
	    if (typeof performance != "undefined") {
	        if (performance.now) {
	            nowValue = function () {
	                return performance.now();
	            };
	        };
	    };
	
	    var Broadway = function (parOptions) {
	        this.options = parOptions || {};
	
	        this.now = nowValue;
	
	        var asmInstance;
	
	        var Module = getModule(function () {}, function ($buffer, width, height) {
	            var buffer = this.pictureBuffers[$buffer];
	            if (!buffer) {
	                buffer = this.pictureBuffers[$buffer] = toU8Array($buffer, width * height * 3 / 2);
	            };
	
	            if (this.options.rgb) {
	                if (!asmInstance) {
	                    asmInstance = getAsm(width, height);
	                };
	                asmInstance.inp.set(buffer);
	                asmInstance.doit();
	
	                var copyU8 = new Uint8Array(asmInstance.outSize);
	                copyU8.set(asmInstance.out);
	                this.onPictureDecoded(copyU8, width, height, this._getEndTime(), this._startedTime);
	                return;
	            };
	
	            this.onPictureDecoded(buffer, width, height, this._getEndTime(), this._startedTime);
	        }.bind(this));
	
	        var HEAP8 = Module.HEAP8;
	        var HEAPU8 = Module.HEAPU8;
	        var HEAP16 = Module.HEAP16;
	        var HEAP32 = Module.HEAP32;
	        var _h264bsdClip = Module._get_h264bsdClip();
	
	        var MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;
	
	        // from old constructor
	        Module._broadwayInit();
	
	        /**
	         * Creates a typed array from a HEAP8 pointer.
	         */
	        function toU8Array(ptr, length) {
	            return HEAPU8.subarray(ptr, ptr + length);
	        };
	        this.streamBuffer = toU8Array(Module._broadwayCreateStream(MAX_STREAM_BUFFER_LENGTH), MAX_STREAM_BUFFER_LENGTH);
	        this.pictureBuffers = {};
	
	        this.onPictureDecoded = function (buffer, width, height, time, cnt) {};
	
	        this._takeStartTime = function (time) {
	            if (this._started) {
	                return;
	            };
	            this._started = true;
	            this._startedTime = time || nowValue();
	        };
	
	        this._getTime = function () {
	            return nowValue() - this._startedTime;
	        };
	
	        this._getEndTime = function () {
	            this._started = false;
	            return this._getTime();
	        };
	
	        /**
	         * Decodes a stream buffer. This may be one single (unframed) NAL unit without the
	         * start code, or a sequence of NAL units with framing start code prefixes. This
	         * function overwrites stream buffer allocated by the codec with the supplied buffer.
	         */
	        this.decode = function decode(buffer, time) {
	            // console.info("Decoding: " + buffer.length);
	            this._takeStartTime(time);
	            this.streamBuffer.set(buffer);
	            Module._broadwaySetStreamLength(buffer.length);
	            Module._broadwayPlayStream();
	        };
	
	        function patchOptimizations(config, patches) {
	            var scope = getGlobalScope();
	            for (var name in patches) {
	                var patch = patches[name];
	                if (patch) {
	                    var option = config[name];
	                    if (!option) option = "original";
	                    console.info(name + ": " + option);
	                    assert(option in patch.options);
	                    var fn = patch.options[option].fn;
	                    if (fn) {
	                        scope[patch.original] = Module.patch(null, patch.name, fn);
	                        console.info("Patching: " + patch.name + ", with: " + option);
	                    }
	                }
	            }
	        };
	
	        var patches = {
	            "filter": {
	                name: "_h264bsdFilterPicture",
	                display: "Filter Picture",
	                original: "Original_h264bsdFilterPicture",
	                options: {
	                    none: { display: "None", fn: function () {} },
	                    original: { display: "Original", fn: null }
	                }
	            },
	            "filterHorLuma": {
	                name: "_FilterHorLuma",
	                display: "Filter Hor Luma",
	                original: "OriginalFilterHorLuma",
	                options: {
	                    none: { display: "None", fn: function () {} },
	                    original: { display: "Original", fn: null },
	                    optimized: { display: "Optimized", fn: OptimizedFilterHorLuma }
	                }
	            },
	            "filterVerLumaEdge": {
	                name: "_FilterVerLumaEdge",
	                display: "Filter Ver Luma Edge",
	                original: "OriginalFilterVerLumaEdge",
	                options: {
	                    none: { display: "None", fn: function () {} },
	                    original: { display: "Original", fn: null },
	                    optimized: { display: "Optimized", fn: OptimizedFilterVerLumaEdge }
	                }
	            },
	            "getBoundaryStrengthsA": {
	                name: "_GetBoundaryStrengthsA",
	                display: "Get Boundary Strengths",
	                original: "OriginalGetBoundaryStrengthsA",
	                options: {
	                    none: { display: "None", fn: function () {} },
	                    original: { display: "Original", fn: null },
	                    optimized: { display: "Optimized", fn: OptimizedGetBoundaryStrengthsA }
	                }
	            }
	        };
	        function getGlobalScope() {
	            return function () {
	                return this;
	            }.call(null);
	        };
	
	        /* Optimizations */
	
	        function clip(x, y, z) {
	            return z < x ? x : z > y ? y : z;
	        }
	
	        function OptimizedGetBoundaryStrengthsA($mb, $bS) {
	            var $totalCoeff = $mb + 28;
	
	            var tc0 = HEAP16[$totalCoeff + 0 >> 1];
	            var tc1 = HEAP16[$totalCoeff + 2 >> 1];
	            var tc2 = HEAP16[$totalCoeff + 4 >> 1];
	            var tc3 = HEAP16[$totalCoeff + 6 >> 1];
	            var tc4 = HEAP16[$totalCoeff + 8 >> 1];
	            var tc5 = HEAP16[$totalCoeff + 10 >> 1];
	            var tc6 = HEAP16[$totalCoeff + 12 >> 1];
	            var tc7 = HEAP16[$totalCoeff + 14 >> 1];
	            var tc8 = HEAP16[$totalCoeff + 16 >> 1];
	            var tc9 = HEAP16[$totalCoeff + 18 >> 1];
	            var tc10 = HEAP16[$totalCoeff + 20 >> 1];
	            var tc11 = HEAP16[$totalCoeff + 22 >> 1];
	            var tc12 = HEAP16[$totalCoeff + 24 >> 1];
	            var tc13 = HEAP16[$totalCoeff + 26 >> 1];
	            var tc14 = HEAP16[$totalCoeff + 28 >> 1];
	            var tc15 = HEAP16[$totalCoeff + 30 >> 1];
	
	            HEAP32[$bS + 32 >> 2] = tc2 || tc0 ? 2 : 0;
	            HEAP32[$bS + 40 >> 2] = tc3 || tc1 ? 2 : 0;
	            HEAP32[$bS + 48 >> 2] = tc6 || tc4 ? 2 : 0;
	            HEAP32[$bS + 56 >> 2] = tc7 || tc5 ? 2 : 0;
	            HEAP32[$bS + 64 >> 2] = tc8 || tc2 ? 2 : 0;
	            HEAP32[$bS + 72 >> 2] = tc9 || tc3 ? 2 : 0;
	            HEAP32[$bS + 80 >> 2] = tc12 || tc6 ? 2 : 0;
	            HEAP32[$bS + 88 >> 2] = tc13 || tc7 ? 2 : 0;
	            HEAP32[$bS + 96 >> 2] = tc10 || tc8 ? 2 : 0;
	            HEAP32[$bS + 104 >> 2] = tc11 || tc9 ? 2 : 0;
	            HEAP32[$bS + 112 >> 2] = tc14 || tc12 ? 2 : 0;
	            HEAP32[$bS + 120 >> 2] = tc15 || tc13 ? 2 : 0;
	
	            HEAP32[$bS + 12 >> 2] = tc1 || tc0 ? 2 : 0;
	            HEAP32[$bS + 20 >> 2] = tc4 || tc1 ? 2 : 0;
	            HEAP32[$bS + 28 >> 2] = tc5 || tc4 ? 2 : 0;
	            HEAP32[$bS + 44 >> 2] = tc3 || tc2 ? 2 : 0;
	            HEAP32[$bS + 52 >> 2] = tc6 || tc3 ? 2 : 0;
	            HEAP32[$bS + 60 >> 2] = tc7 || tc6 ? 2 : 0;
	            HEAP32[$bS + 76 >> 2] = tc9 || tc8 ? 2 : 0;
	            HEAP32[$bS + 84 >> 2] = tc12 || tc9 ? 2 : 0;
	            HEAP32[$bS + 92 >> 2] = tc13 || tc12 ? 2 : 0;
	            HEAP32[$bS + 108 >> 2] = tc11 || tc10 ? 2 : 0;
	            HEAP32[$bS + 116 >> 2] = tc14 || tc11 ? 2 : 0;
	            HEAP32[$bS + 124 >> 2] = tc15 || tc14 ? 2 : 0;
	        }
	
	        function OptimizedFilterVerLumaEdge($data, bS, $thresholds, imageWidth) {
	            var delta, tc, tmp;
	            var p0, q0, p1, q1, p2, q2;
	            var tmpFlag;
	            var $clp = _h264bsdClip + 512;
	            var alpha = HEAP32[$thresholds + 4 >> 2];
	            var beta = HEAP32[$thresholds + 8 >> 2];
	            var val;
	
	            if (bS < 4) {
	                tmp = tc = HEAPU8[HEAP32[$thresholds >> 2] + (bS - 1)] & 255;
	                for (var i = 4; i > 0; i--) {
	                    p1 = HEAPU8[$data + -2] & 255;
	                    p0 = HEAPU8[$data + -1] & 255;
	                    q0 = HEAPU8[$data] & 255;
	                    q1 = HEAPU8[$data + 1] & 255;
	                    if (Math.abs(p0 - q0) < alpha && Math.abs(p1 - p0) < beta && Math.abs(q1 - q0) < beta) {
	                        p2 = HEAPU8[$data - 3] & 255;
	                        if (Math.abs(p2 - p0) < beta) {
	                            val = p2 + (p0 + q0 + 1 >> 1) - (p1 << 1) >> 1;
	                            HEAP8[$data - 2] = p1 + clip(-tc, tc, val);
	                            tmp++;
	                        }
	
	                        q2 = HEAPU8[$data + 2] & 255;
	                        if (Math.abs(q2 - q0) < beta) {
	                            val = q2 + (p0 + q0 + 1 >> 1) - (q1 << 1) >> 1;
	                            HEAP8[$data + 1] = q1 + clip(-tc, tc, val);
	                            tmp++;
	                        }
	
	                        val = (q0 - p0 << 2) + (p1 - q1) + 4 >> 3;
	                        delta = clip(-tmp, tmp, val);
	
	                        p0 = HEAPU8[$clp + (p0 + delta)] & 255;
	                        q0 = HEAPU8[$clp + (q0 - delta)] & 255;
	                        tmp = tc;
	                        HEAP8[$data - 1] = p0;
	                        HEAP8[$data] = q0;
	
	                        $data += imageWidth;
	                    }
	                }
	            } else {
	                OriginalFilterVerLumaEdge($data, bS, $thresholds, imageWidth);
	            }
	        }
	
	        /**
	         * Filter all four successive horizontal 4-pixel luma edges. This can be done when bS is equal to all four edges.
	         */
	        function OptimizedFilterHorLuma($data, bS, $thresholds, imageWidth) {
	            var delta, tc, tmp;
	            var p0, q0, p1, q1, p2, q2;
	            var tmpFlag;
	            var $clp = _h264bsdClip + 512;
	            var alpha = HEAP32[$thresholds + 4 >> 2];
	            var beta = HEAP32[$thresholds + 8 >> 2];
	            var val;
	
	            if (bS < 4) {
	                tmp = tc = HEAPU8[HEAP32[$thresholds >> 2] + (bS - 1)] & 255;
	                for (var i = 16; i > 0; i--) {
	                    p1 = HEAPU8[$data + (-imageWidth << 1)] & 255;
	                    p0 = HEAPU8[$data + -imageWidth] & 255;
	                    q0 = HEAPU8[$data] & 255;
	                    q1 = HEAPU8[$data + imageWidth] & 255;
	
	                    if (Math.abs(p0 - q0) < alpha && Math.abs(p1 - p0) < beta && Math.abs(q1 - q0) < beta) {
	                        p2 = HEAPU8[$data + -imageWidth * 3] & 255;
	                        if (Math.abs(p2 - p0) < beta) {
	                            val = p2 + (p0 + q0 + 1 >> 1) - (p1 << 1) >> 1;
	                            HEAP8[$data + (-imageWidth << 1)] = p1 + clip(-tc, tc, val);
	                            tmp++;
	                        }
	
	                        q2 = HEAPU8[$data + (imageWidth << 2)] & 255;
	                        if (Math.abs(q2 - q0) < beta) {
	                            val = q2 + (p0 + q0 + 1 >> 1) - (q1 << 1) >> 1;
	                            HEAP8[$data + imageWidth] = q1 + clip(-tc, tc, val);
	                            tmp++;
	                        }
	
	                        val = (q0 - p0 << 2) + (p1 - q1) + 4 >> 3;
	                        delta = clip(-tmp, tmp, val);
	
	                        p0 = HEAPU8[$clp + (p0 + delta)] & 255;
	                        q0 = HEAPU8[$clp + (q0 - delta)] & 255;
	                        tmp = tc;
	                        HEAP8[$data - imageWidth] = p0;
	                        HEAP8[$data] = q0;
	
	                        $data++;
	                    }
	                }
	            } else {
	                OriginalFilterHorLuma($data, bS, $thresholds, imageWidth);
	            }
	        }
	    };
	
	    Broadway.prototype = {
	        configure: function (config) {
	            // patchOptimizations(config, patches);
	            console.info("Broadway Configured: " + JSON.stringify(config));
	        }
	
	    };
	
	    /*
	      asm.js implementation of a yuv to rgb convertor
	     provided by @soliton4
	      based on
	     http://www.wordsaretoys.com/2013/10/18/making-yuv-conversion-a-little-faster/
	      */
	
	    // factory to create asm.js yuv -> rgb convertor for a given resolution
	    var asmInstances = {};
	    var getAsm = function (parWidth, parHeight) {
	        var idStr = "" + parWidth + "x" + parHeight;
	        if (asmInstances[idStr]) {
	            return asmInstances[idStr];
	        };
	
	        var lumaSize = parWidth * parHeight;
	        var chromaSize = (lumaSize | 0) >> 2;
	
	        var inpSize = lumaSize + chromaSize + chromaSize;
	        var outSize = parWidth * parHeight * 4;
	        var cacheSize = Math.pow(2, 24) * 4;
	        var size = inpSize + outSize + cacheSize;
	
	        var chunkSize = Math.pow(2, 24);
	        var heapSize = chunkSize;
	        while (heapSize < size) {
	            heapSize += chunkSize;
	        };
	        var heap = new ArrayBuffer(heapSize);
	
	        var res = asmFactory(global, {}, heap);
	        res.init(parWidth, parHeight);
	        asmInstances[idStr] = res;
	
	        res.heap = heap;
	        res.out = new Uint8Array(heap, 0, outSize);
	        res.inp = new Uint8Array(heap, outSize, inpSize);
	        res.outSize = outSize;
	
	        return res;
	    };
	
	    function asmFactory(stdlib, foreign, heap) {
	        "use asm";
	
	        var imul = stdlib.Math.imul;
	        var min = stdlib.Math.min;
	        var max = stdlib.Math.max;
	        var pow = stdlib.Math.pow;
	        var out = new stdlib.Uint8Array(heap);
	        var out32 = new stdlib.Uint32Array(heap);
	        var inp = new stdlib.Uint8Array(heap);
	        var mem = new stdlib.Uint8Array(heap);
	        var mem32 = new stdlib.Uint32Array(heap);
	
	        // for double algo
	        /*var vt = 1.370705;
	         var gt = 0.698001;
	         var gt2 = 0.337633;
	         var bt = 1.732446;*/
	
	        var width = 0;
	        var height = 0;
	        var lumaSize = 0;
	        var chromaSize = 0;
	        var inpSize = 0;
	        var outSize = 0;
	
	        var inpStart = 0;
	        var outStart = 0;
	
	        var widthFour = 0;
	
	        var cacheStart = 0;
	
	        function init(parWidth, parHeight) {
	            parWidth = parWidth | 0;
	            parHeight = parHeight | 0;
	
	            var i = 0;
	            var s = 0;
	
	            width = parWidth;
	            widthFour = imul(parWidth, 4) | 0;
	            height = parHeight;
	            lumaSize = imul(width | 0, height | 0) | 0;
	            chromaSize = (lumaSize | 0) >> 2;
	            outSize = imul(imul(width, height) | 0, 4) | 0;
	            inpSize = lumaSize + chromaSize | 0 + chromaSize | 0;
	
	            outStart = 0;
	            inpStart = outStart + outSize | 0;
	            cacheStart = inpStart + inpSize | 0;
	
	            // initializing memory (to be on the safe side)
	            s = ~~+pow(+2, +24);
	            s = imul(s, 4) | 0;
	
	            for (i = 0 | 0; (i | 0) < (s | 0) | 0; i = i + 4 | 0) {
	                mem32[(cacheStart + i | 0) >> 2] = 0;
	            };
	        };
	
	        function doit() {
	            var ystart = 0;
	            var ustart = 0;
	            var vstart = 0;
	
	            var y = 0;
	            var yn = 0;
	            var u = 0;
	            var v = 0;
	
	            var o = 0;
	
	            var line = 0;
	            var col = 0;
	
	            var usave = 0;
	            var vsave = 0;
	
	            var ostart = 0;
	            var cacheAdr = 0;
	
	            ostart = outStart | 0;
	
	            ystart = inpStart | 0;
	            ustart = ystart + lumaSize | 0 | 0;
	            vstart = ustart + chromaSize | 0;
	
	            for (line = 0; (line | 0) < (height | 0); line = line + 2 | 0) {
	                usave = ustart;
	                vsave = vstart;
	                for (col = 0; (col | 0) < (width | 0); col = col + 2 | 0) {
	                    y = inp[ystart >> 0] | 0;
	                    yn = inp[(ystart + width | 0) >> 0] | 0;
	
	                    u = inp[ustart >> 0] | 0;
	                    v = inp[vstart >> 0] | 0;
	
	                    cacheAdr = ((y << 16 | 0) + (u << 8 | 0) | 0) + v | 0;
	                    o = mem32[(cacheStart + cacheAdr | 0) >> 2] | 0;
	                    if (o) {} else {
	                        o = yuv2rgbcalc(y, u, v) | 0;
	                        mem32[(cacheStart + cacheAdr | 0) >> 2] = o | 0;
	                    };
	                    mem32[ostart >> 2] = o;
	
	                    cacheAdr = ((yn << 16 | 0) + (u << 8 | 0) | 0) + v | 0;
	                    o = mem32[(cacheStart + cacheAdr | 0) >> 2] | 0;
	                    if (o) {} else {
	                        o = yuv2rgbcalc(yn, u, v) | 0;
	                        mem32[(cacheStart + cacheAdr | 0) >> 2] = o | 0;
	                    };
	                    mem32[(ostart + widthFour | 0) >> 2] = o;
	
	                    //yuv2rgb5(y, u, v, ostart);
	                    //yuv2rgb5(yn, u, v, (ostart + widthFour)|0);
	                    ostart = ostart + 4 | 0;
	
	                    // next step only for y. u and v stay the same
	                    ystart = ystart + 1 | 0;
	                    y = inp[ystart >> 0] | 0;
	                    yn = inp[(ystart + width | 0) >> 0] | 0;
	
	                    //yuv2rgb5(y, u, v, ostart);
	                    cacheAdr = ((y << 16 | 0) + (u << 8 | 0) | 0) + v | 0;
	                    o = mem32[(cacheStart + cacheAdr | 0) >> 2] | 0;
	                    if (o) {} else {
	                        o = yuv2rgbcalc(y, u, v) | 0;
	                        mem32[(cacheStart + cacheAdr | 0) >> 2] = o | 0;
	                    };
	                    mem32[ostart >> 2] = o;
	
	                    //yuv2rgb5(yn, u, v, (ostart + widthFour)|0);
	                    cacheAdr = ((yn << 16 | 0) + (u << 8 | 0) | 0) + v | 0;
	                    o = mem32[(cacheStart + cacheAdr | 0) >> 2] | 0;
	                    if (o) {} else {
	                        o = yuv2rgbcalc(yn, u, v) | 0;
	                        mem32[(cacheStart + cacheAdr | 0) >> 2] = o | 0;
	                    };
	                    mem32[(ostart + widthFour | 0) >> 2] = o;
	                    ostart = ostart + 4 | 0;
	
	                    //all positions inc 1
	
	                    ystart = ystart + 1 | 0;
	                    ustart = ustart + 1 | 0;
	                    vstart = vstart + 1 | 0;
	                };
	                ostart = ostart + widthFour | 0;
	                ystart = ystart + width | 0;
	            };
	        };
	
	        function yuv2rgbcalc(y, u, v) {
	            y = y | 0;
	            u = u | 0;
	            v = v | 0;
	
	            var r = 0;
	            var g = 0;
	            var b = 0;
	
	            var o = 0;
	
	            var a0 = 0;
	            var a1 = 0;
	            var a2 = 0;
	            var a3 = 0;
	            var a4 = 0;
	
	            a0 = imul(1192, y - 16 | 0) | 0;
	            a1 = imul(1634, v - 128 | 0) | 0;
	            a2 = imul(832, v - 128 | 0) | 0;
	            a3 = imul(400, u - 128 | 0) | 0;
	            a4 = imul(2066, u - 128 | 0) | 0;
	
	            r = (a0 + a1 | 0) >> 10 | 0;
	            g = ((a0 - a2 | 0) - a3 | 0) >> 10 | 0;
	            b = (a0 + a4 | 0) >> 10 | 0;
	
	            if ((r & 255 | 0) != (r | 0) | 0) {
	                r = min(255, max(0, r | 0) | 0) | 0;
	            };
	            if ((g & 255 | 0) != (g | 0) | 0) {
	                g = min(255, max(0, g | 0) | 0) | 0;
	            };
	            if ((b & 255 | 0) != (b | 0) | 0) {
	                b = min(255, max(0, b | 0) | 0) | 0;
	            };
	
	            o = 255;
	            o = o << 8 | 0;
	            o = o + b | 0;
	            o = o << 8 | 0;
	            o = o + g | 0;
	            o = o << 8 | 0;
	            o = o + r | 0;
	
	            return o | 0;
	        };
	
	        return {
	            init: init,
	            doit: doit
	        };
	    };
	
	    /*
	     potential worker initialization
	      */
	
	    if (typeof self != "undefined") {
	        var isWorker = false;
	        var decoder;
	        self.addEventListener('message', function (e) {
	
	            if (isWorker) {
	                decoder.decode(new Uint8Array(e.data.buf), e.data.time);
	            } else {
	                if (e.data && e.data.type === "Broadway.js - Worker init") {
	                    isWorker = true;
	                    decoder = new Broadway(e.data.options);
	                    decoder.onPictureDecoded = function (buffer, width, height, time, timeStarted) {
	                        if (buffer) {
	                            buffer = new Uint8Array(buffer);
	                        };
	
	                        // buffer needs to be copied because we give up ownership
	                        var copyU8 = new Uint8Array(buffer.length);
	                        copyU8.set(buffer, 0, buffer.length);
	
	                        postMessage({ buf: copyU8.buffer, width: width, height: height, time: time, timeStarted: timeStarted }, [copyU8.buffer]);
	
	                        // only post the buffer (slightly faster)
	                        // add 2nd parameter to indicate transfer of owner ship (this it was makes this worker implementation faster)
	                        //postMessage(copyU8.buffer, [copyU8.buffer]);
	                    };
	                    postMessage({ consoleLog: "initialized" });
	                };
	            };
	        }, false);
	    };
	
	    Broadway.nowValue = nowValue;
	
	    return Broadway;
	});
	if ("function" !== "undefined") {
	    require = _require;
	}
	
	//# sourceMappingURL=decoder.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), "/"))

/***/ },
/* 2 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	if (true) {
	    var _mp4box = __webpack_require__(4);
	    var DataStream = _mp4box.DataStream;
	    var BoxParser = _mp4box.BoxParser;
	    var ISOFile = _mp4box.ISOFile;
	    var MP4Box = _mp4box.MP4Box;
	}
	
	function MovDasher() {}
	
	MovDasher.MIN_FRAMES_PER_SEGMENT = 200;
	
	MovDasher.dashify = function (inputMp4Box, trackId, log) {
	    var orig_trak = MovDasher._getTrack(inputMp4Box.inputIsoFile.moov, trackId);
	    var orig_sampleDesc = orig_trak.mdia.minf.stbl.stsd.entries[0];
	
	    var samplesInfo = inputMp4Box.getTrackSamplesInfo(trackId);
	
	    var isVideo;
	    if (orig_sampleDesc.isVideo()) {
	        isVideo = true;
	    } else if (orig_sampleDesc.isAudio()) {
	        isVideo = false;
	    } else {
	        log.warn("unknown track type", orig_sampleDesc);
	        return;
	    }
	
	    var orig_stts = orig_trak.mdia.minf.stbl.stts;
	    var orig_stsz = orig_trak.mdia.minf.stbl.stsz;
	    var orig_stss = orig_trak.mdia.minf.stbl.stss;
	    var orig_stsd = orig_trak.mdia.minf.stbl.stsd;
	
	    var timescale = orig_trak.mdia.mdhd.timescale;
	    var duration = orig_trak.mdia.mdhd.duration;
	    var sampleDuration = orig_stts.sample_deltas[0];
	    var constantFrameRate = orig_stts.sample_counts.length == 1;
	    if (!constantFrameRate) {
	        log.info("Variable frame rate detected");
	    }
	    var sampleCount = orig_stsz.sample_sizes.length;
	    var sampleSizes = orig_stsz.sample_sizes;
	    var iframesOnly = !orig_stss;
	
	    if (!iframesOnly) {
	        var sampleFlags = MovDasher.getSampleFlags(sampleCount, orig_stss.sample_numbers);
	        var syncSamples = orig_stss.sample_numbers;
	    }
	
	    var ftyp = new BoxParser.ftypBox();
	    ftyp.major_brand = "dash";
	    ftyp.minor_version = 0;
	    ftyp.compatible_brands = ["iso6", "mp41"];
	
	    var moov = new BoxParser.moovBox();
	
	    var matrix = [0x10000, 0, 0, 0, 0x10000, 0, 0, 0, 0x40000000];
	
	    var mvhd = new BoxParser.mvhdBox();
	    mvhd.timescale = timescale;
	    mvhd.duration = 0;
	    mvhd.rate = 1 << 16;
	    mvhd.volume = 1;
	    mvhd.matrix = matrix;
	    mvhd.next_track_id = 2;
	    moov.boxes.push(mvhd);
	
	    var mvex = new BoxParser.mvexBox();
	
	    var mehd = new BoxParser.mehdBox();
	    mehd.fragment_duration = duration;
	    mvex.boxes.push(mehd);
	
	    var trex = new BoxParser.trexBox();
	    trex.track_id = 1;
	    trex.default_sample_description_index = 1;
	    trex.default_sample_duration = sampleDuration;
	    trex.default_sample_flags = iframesOnly ? 0x02000000 : 0x00010000;
	
	    mvex.boxes.push(trex);
	
	    moov.boxes.push(mvex);
	
	    var trak = new BoxParser.trakBox();
	
	    var tkhd = new BoxParser.tkhdBox();
	    tkhd.track_id = 1;
	    tkhd.flags = BoxParser.TKHD_FLAG_ENABLED | BoxParser.TKHD_FLAG_IN_MOVIE | BoxParser.TKHD_FLAG_IN_PREVIEW | BoxParser.TKHD_FLAG_IN_POSTER;
	    tkhd.matrix = matrix;
	    tkhd.width = orig_trak.tkhd.width;
	    tkhd.height = orig_trak.tkhd.height;
	    trak.boxes.push(tkhd);
	
	    var mdia = new BoxParser.mdiaBox();
	
	    var mdhd = new BoxParser.mdhdBox();
	    mdhd.timescale = timescale;
	    mdia.boxes.push(mdhd);
	
	    var mdiaHdlr = new BoxParser.hdlrBox();
	    mdiaHdlr.componentType = "mhlr";
	    mdiaHdlr.componentSubType = isVideo ? "vide" : "soun";
	    mdiaHdlr.name = "";
	    mdia.boxes.push(mdiaHdlr);
	
	    var minf = new BoxParser.minfBox();
	
	    var dinf = new BoxParser.dinfBox();
	    var dref = new BoxParser.drefBox();
	    var url = new BoxParser["url Box"]();
	    dref.entries = [url];
	    dinf.boxes.push(dref);
	    minf.boxes.push(dinf);
	
	    if (isVideo) {
	        var vmhd = new BoxParser.vmhdBox();
	        vmhd.graphicsmode = 0;
	        vmhd.opcolor = [0, 0, 0];
	        minf.boxes.push(vmhd);
	    } else {
	        var smhd = new BoxParser.smhdBox();
	        smhd.data = [0, 0, 0, 0];
	        minf.boxes.push(smhd);
	    }
	
	    var minfHdlr = new BoxParser.hdlrBox();
	    minfHdlr.componentType = "dhlr";
	    minfHdlr.componentSubType = "url ";
	    minfHdlr.name = "";
	    minf.boxes.push(minfHdlr);
	
	    var stbl = new BoxParser.stblBox();
	
	    var stsd = orig_stsd;
	    if (!isVideo) {
	        stsd = new BoxParser.stsdBox();
	        stsd.entries = [];
	        for (var i = 0; i < orig_stsd.entries.length; i++) {
	            var audioSampleEntry = orig_stsd.entries[i];
	            if (audioSampleEntry.type == "mp4a") {
	                var newAse = new BoxParser.AudioSampleEntry("mp4a");
	                newAse.data_reference_index = audioSampleEntry.data_reference_index;
	                newAse.version = 0;
	                newAse.revision = 0;
	                newAse.vendor = 0;
	                newAse.channel_count = audioSampleEntry.channel_count;
	                newAse.samplesize = audioSampleEntry.samplesize;
	                newAse.samplerate = audioSampleEntry.samplerate;
	                newAse.esds = audioSampleEntry.esds || (audioSampleEntry.wave || {}).esds;
	                newAse.boxes = [newAse.esds];
	
	                stsd.entries.push(newAse);
	            } else {
	                stsd.entries.push(audioSampleEntry);
	            }
	        }
	    }
	
	    stbl.boxes.push(stsd);
	
	    var stsz = new BoxParser.stszBox();
	    stsz.sample_sizes = [];
	    stbl.boxes.push(stsz);
	
	    var stts = new BoxParser.sttsBox();
	    stts.sample_counts = [];
	    stbl.boxes.push(stts);
	
	    var stco = new BoxParser.stcoBox();
	    stco.chunk_offsets = [];
	    stbl.boxes.push(stco);
	
	    var stsc = new BoxParser.stscBox();
	    stsc.first_chunk = [];
	    stbl.boxes.push(stsc);
	
	    minf.boxes.push(stbl);
	    mdia.boxes.push(minf);
	    trak.boxes.push(mdia);
	    moov.boxes.push(trak);
	
	    var moofs = [];
	    var segmentDataIntervals = [];
	    var syncIdx = 0;
	
	    for (var fn = 0, sequenceNumber = 1; fn < sampleCount; sequenceNumber++) {
	        var segSampleCount = Math.min(MovDasher.MIN_FRAMES_PER_SEGMENT, sampleCount - fn);
	
	        if (!iframesOnly) {
	            // align segment to GOP boundary
	            var segEndFn = fn + segSampleCount;
	            while (syncIdx < syncSamples.length && syncSamples[syncIdx] - 1 < segEndFn) syncIdx++;
	            segEndFn = syncIdx < syncSamples.length ? syncSamples[syncIdx] - 1 : sampleCount;
	            segSampleCount = segEndFn - fn;
	        }
	
	        var moof = new BoxParser.moofBox();
	
	        var mfhd = new BoxParser.mfhdBox();
	        mfhd.sequence_number = sequenceNumber;
	        moof.boxes.push(mfhd);
	
	        var traf = new BoxParser.trafBox();
	
	        var tfhd = new BoxParser.tfhdBox();
	        tfhd.track_id = 1;
	        tfhd.flags |= BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF;
	        tfhd.flags |= BoxParser.TFHD_FLAG_SAMPLE_DUR;
	        tfhd.default_sample_duration = sampleDuration;
	        if (!isVideo) {
	            tfhd.flags |= BoxParser.TFHD_FLAG_SAMPLE_FLAGS;
	            tfhd.default_sample_flags = 0x02000000;
	        }
	        traf.boxes.push(tfhd);
	
	        var tfdt = new BoxParser.tfdtBox();
	        tfdt.baseMediaDecodeTime = samplesInfo[fn].dts;
	        traf.tfdt = tfdt;
	        traf.boxes.push(tfdt);
	
	        var trun = new BoxParser.trunBox();
	        trun.sample_count = segSampleCount;
	        trun.flags |= BoxParser.TRUN_FLAGS_DATA_OFFSET;
	        trun.flags |= BoxParser.TRUN_FLAGS_SIZE;
	        trun.data_offset = -42;
	        var segSampleSizes = sampleSizes.subarray(fn, fn + segSampleCount);
	        trun.sample_size = segSampleSizes;
	        if (sampleFlags) {
	            trun.flags |= BoxParser.TRUN_FLAGS_FLAGS;
	            trun.sample_flags = sampleFlags.subarray(fn, fn + segSampleCount);
	        }
	        if (!constantFrameRate) {
	            var segSampleDurations = [];
	            for (var s = fn; s < fn + segSampleCount; s++) {
	                segSampleDurations.push(samplesInfo[s].duration);
	            }
	            trun.flags |= BoxParser.TRUN_FLAGS_DURATION;
	            trun.sample_duration = segSampleDurations;
	        }
	        traf.trun = trun;
	        traf.boxes.push(trun);
	
	        moof.traf = traf;
	        moof.boxes.push(traf);
	
	        moofs.push(moof);
	
	        var addSample = function (acc, curr) {
	            if (acc.length == 0) {
	                acc.push({
	                    chunk: curr.chunk_index,
	                    dataFrom: curr.offset,
	                    dataTo: curr.offset + curr.size
	                });
	            } else {
	                var last = acc[acc.length - 1];
	                if (last.chunk != curr.chunk_index) {
	                    acc.push({
	                        chunk: curr.chunk_index,
	                        dataFrom: curr.offset,
	                        dataTo: curr.offset + curr.size
	                    });
	                } else {
	                    last.dataTo += curr.size;
	                }
	            }
	        };
	
	        var sampleDataIntervals = [];
	        for (var s = fn; s < fn + segSampleCount; s++) {
	            var sampleInfo = samplesInfo[s];
	            addSample(sampleDataIntervals, sampleInfo);
	        }
	        segmentDataIntervals.push(sampleDataIntervals);
	
	        fn += segSampleCount;
	    }
	
	    var segmentStartTv = [];
	    for (i = 0; i < moofs.length; i++) {
	        segmentStartTv[i] = moofs[i].traf.tfdt.baseMediaDecodeTime;
	    }
	
	    var segments = [];
	    for (i = 0; i < moofs.length; i++) {
	        moof = moofs[i];
	        trun = moof.traf.trun;
	
	        var samplesSize = 0;
	        for (var j = 0; j < trun.sample_size.length; j++) {
	            samplesSize += trun.sample_size[j];
	        }
	
	        var mdat = new BoxParser.mdatBox();
	        mdat.data = new Uint8Array(0);
	
	        var out = new DataStream(undefined, 0, DataStream.BIG_ENDIAN);
	        moof.write(out);
	        mdat.write(out);
	        var moofDataOffset = out.getPosition();
	        out.adjustUint32(trun.data_offset_position, moofDataOffset);
	        out.adjustUint32(mdat.sizePosition, samplesSize + 8);
	
	        segments[i] = {
	            dataIntervals: segmentDataIntervals[i],
	            header: out.buffer
	        };
	    }
	
	    out = new DataStream(undefined, 0, DataStream.BIG_ENDIAN);
	    ftyp.write(out);
	    moov.write(out);
	
	    var dashified = {};
	    dashified.moovbuf = out.buffer;
	    dashified.segments = segments;
	    dashified.timescale = timescale;
	    dashified.segmentStartTv = segmentStartTv;
	    dashified.duration = duration;
	    dashified.sampleDuration = sampleDuration;
	    dashified.mimeType = isVideo ? "video/mp4" : "audio/mp4";
	    dashified.codecs = orig_sampleDesc.getCodec();
	    dashified.startTimecodeOffset = -1;
	    dashified.dropFrame = false; // todo
	    if (!isVideo) {
	        dashified.channelConfig = MovDasher.parseEsdsChannelConfig(orig_sampleDesc.esds, log) || orig_sampleDesc.channel_count;
	    }
	
	    var timecodeTrak = inputMp4Box.inputIsoFile.moov.traks[1];
	    if (timecodeTrak && timecodeTrak.samples[0].description.type == "tmcd") {
	        dashified.startTimecodeOffset = timecodeTrak.samples[0].offset;
	    }
	
	    return dashified;
	};
	
	MovDasher._getTrack = function (moov, id) {
	    for (var i = 0; i < moov.traks.length; i++) {
	        var trak = moov.traks[i];
	        if (id == trak.tkhd.track_id) {
	            return trak;
	        }
	    }
	    return null;
	};
	
	MovDasher.parseEsdsChannelConfig = function (esds, log) {
	    if (esds == null || esds.esd == null) return null;
	
	    var decoderConfigDescr = esds.esd.findDescriptor(0x04);
	    if (!decoderConfigDescr) return null;
	
	    var decSpecificInfo = decoderConfigDescr.findDescriptor(0x05);
	    if (decSpecificInfo && decSpecificInfo.data) {
	        if (decSpecificInfo.data.length == 2) {
	            return decSpecificInfo.data[1] >> 3 & 0xf;
	        } else {
	            log.warn("unsupported Decoder Specific Info", decSpecificInfo.data);
	            return null;
	        }
	    } else {
	        return null;
	    }
	};
	
	MovDasher.loadMov = function (dataSrc, onDone, onError) {
	    var moovParsed = false;
	
	    var inputMp4Box = new MP4Box(false);
	    inputMp4Box.onReady = function () {
	        moovParsed = true;
	        inputMp4Box.flush();
	        onDone(inputMp4Box);
	    };
	
	    function loadChunk(chunkStart, chunkEnd) {
	        dataSrc.fetch(chunkStart, chunkEnd, function (buffer) {
	            buffer.fileStart = chunkStart;
	            // IE hack
	            if (buffer.fileStart !== chunkStart) {
	                buffer = buffer.slice(0);
	                buffer.fileStart = chunkStart;
	            }
	            var nextStart = inputMp4Box.appendBuffer(buffer);
	            if (!moovParsed) {
	                loadChunk(nextStart, nextStart + 1024 * 1024);
	            }
	        }, onError);
	    }
	
	    loadChunk(0, 10000);
	};
	
	MovDasher.getSampleFlags = function (sampleCount, syncSamples) {
	    var sampleFlags = new Uint32Array(sampleCount);
	    for (var i = 0; i < sampleCount; i++) {
	        sampleFlags[i] = 0x00010000;
	    }
	    for (i = 0; i < syncSamples.length; i++) {
	        var idx = syncSamples[i] - 1;
	        sampleFlags[idx] = 0x02000000; // I-frame here
	    }
	    return sampleFlags;
	};
	
	MovDasher.rescale = function (srcTv, srcTs, dstTs) {
	    return srcTv / srcTs * dstTs;
	};
	
	MovDasher.mediaToEdited = function (trak, mediaTv, movieTimescale) {
	    if (!(trak && trak.edts && trak.edts.elst && trak.edts.elst.entries && trak.edts.elst.entries.length)) return mediaTv;
	    var accum = 0;
	    for (var i = 0; i < trak.edts.elst.entries.length; i++) {
	        var edit = trak.edts.elst.entries[i];
	        if (mediaTv < edit.media_time) return accum;
	        var duration = MovDasher.rescale(edit.segment_duration, movieTimescale, trak.mdia.mdhd.timescale);
	        if (edit.media_time != -1 && (duration == 0 || mediaTv >= edit.media_time && mediaTv < edit.media_time + duration)) {
	            accum += mediaTv - edit.media_time;
	            break;
	        }
	        accum += duration;
	    }
	
	    return accum;
	};
	
	/**
	 *
	 * @param dataSrc
	 * @param onDone
	 *            callback with Array of TimePackets sorted by frame {duration: 2,
	 *            frame: 2178, mediaPts: 4356, pts: 4356, sync: false, timescale: 50 }
	 * @param onError
	 */
	MovDasher.parseTimePackets = function (mp4box, dataSrc, onDone, onError) {
	    var moov = mp4box.inputIsoFile.moov;
	    window["MOOV"] = moov;
	    if (!moov) {
	        onError("moov not found");
	    }
	    var videotracks = moov.traks.filter(function (t) {
	        return "vide" == t.mdia.hdlr.componentSubType;
	    });
	    var audiotracks = moov.traks.filter(function (t) {
	        return "soun" == t.mdia.hdlr.componentSubType;
	    });
	    if ((!videotracks || !videotracks.length) && (!audiotracks || !audiotracks.length)) {
	        onError("neither video nor audio track found");
	        return;
	    }
	    var vtrak = videotracks[0] || audiotracks[0];
	
	    var movieTimescale = moov.mvhd.timescale;
	    var sizes = vtrak.mdia.minf.stbl.stsz;
	    var timeToSamples = vtrak.mdia.minf.stbl.stts;
	    var syncSamples = vtrak.mdia.minf.stbl.stss;
	    var compOffsets = vtrak.mdia.minf.stbl.ctts;
	    var timescale = vtrak.mdia.mdhd.timescale;
	    var sttsInd = 0;
	    var ssOff = 0;
	    var pts = 0;
	    var cttsSubInd = 0;
	    var cttsInd = 0;
	    var sttsSubInd = 0;
	    var pkts = [];
	
	    for (var i = 0; i < sizes.sample_sizes.length; i++) {
	        var curFrame = i;
	        var duration = timeToSamples.sample_deltas[sttsInd];
	        var sync = !syncSamples;
	
	        if (!!syncSamples && ssOff < syncSamples.sample_numbers.length && curFrame + 1 == syncSamples.sample_numbers[ssOff]) {
	            sync = true;
	            ssOff++;
	        }
	
	        var realPts = pts;
	        if (compOffsets) {
	            realPts = pts + compOffsets.sample_offsets[cttsInd];
	            cttsSubInd++;
	            if (cttsInd < compOffsets.sample_offsets.length - 1 && cttsSubInd == compOffsets.sample_counts[cttsInd]) {
	                cttsInd++;
	                cttsSubInd = 0;
	            }
	        }
	
	        var _pts = MovDasher.mediaToEdited(vtrak, realPts, movieTimescale);
	        var pkt = {
	            pts: _pts,
	            mediaPts: realPts,
	            timescale: timescale,
	            duration: duration,
	            frame: curFrame,
	            sync: sync,
	            timecode: 0
	        };
	        pkts.push(pkt);
	
	        // shiftPts
	        pts -= sttsSubInd * timeToSamples.sample_deltas[sttsInd];
	        sttsSubInd += 1;
	        while (sttsInd < timeToSamples.sample_deltas.length - 1 && sttsSubInd >= timeToSamples.sample_counts[sttsInd]) {
	            pts += timeToSamples.sample_counts[sttsInd] * timeToSamples.sample_deltas[sttsInd];
	            sttsSubInd -= timeToSamples.sample_counts[sttsInd];
	            sttsInd++;
	        }
	        pts += sttsSubInd * timeToSamples.sample_deltas[sttsInd];
	    }
	
	    var tmcdtracks = moov.traks.filter(function (t) {
	        return "tmcd" == t.mdia.hdlr.componentSubType;
	    });
	    if (tmcdtracks && tmcdtracks.length) {
	        var timecodeTrak = tmcdtracks[0];
	        var startTimecodeOffset = timecodeTrak.samples[0].offset;
	        dataSrc.fetch(startTimecodeOffset, startTimecodeOffset + 4, function (buf) {
	            var dv = new DataView(buf);
	            var tc = dv.getUint32(0, false);
	            // TODO: dropFrame
	            for (var i = 0; i < pkts.length; i++) {
	                pkts[i].timecode = i + tc;
	            }
	            onDone(pkts);
	        });
	    } else {
	        onDone(pkts);
	    }
	};
	
	/**
	 * @return Array of TimePackets sorted by frame
	 * {duration: 2, frame: 2178, mediaPts: 4356, pts: 4356, sync: false, timescale: 50 }
	 */
	MovDasher.parseTimePacketsInM4s = function (movieMp4box, segmentMp4Box) {
	    var moov = movieMp4box.inputIsoFile.moov;
	    var videotracks = moov.traks.filter(function (t) {
	        return "vide" == t.mdia.hdlr.componentSubType;
	    });
	    //if (!videotracks || !videotracks.length) {
	    //    onError("video track not found");
	    //}
	    var vtrak = videotracks[0];
	
	    var moof = segmentMp4Box.inputIsoFile.moofs[0];
	    var trun = moof.trafs[0].truns[0];
	
	    var movieTimescale = moov.mvhd.timescale;
	    var sampleCount = trun.sample_count;
	    var timescale = vtrak.mdia.mdhd.timescale;
	    var pts = moof.trafs[0].tfdt.baseMediaDecodeTime;
	    var pkts = [];
	
	    for (var i = 0; i < sampleCount; i++) {
	        var duration = trun.sample_duration[i] || moof.trafs[0].tfhd.default_sample_duration;
	
	        var realPts = pts;
	        if (trun.flags & BoxParser.TRUN_FLAGS_CTS_OFFSET) {
	            realPts = pts + trun.sample_composition_time_offset[i];
	        }
	
	        var _pts = MovDasher.mediaToEdited(vtrak, realPts, movieTimescale);
	        var pkt = {
	            pts: _pts,
	            mediaPts: realPts,
	            timescale: timescale,
	            duration: duration,
	            frame: -1,
	            sync: false,
	            timecode: 0
	        };
	        pkts.push(pkt);
	
	        pts += duration;
	    }
	
	    return pkts;
	};
	
	MovDasher.wrapMp3Segment = function (idx, FRAMES_PER_SEGMENT, _totalSamples, _frameSize, /* uint8array */mp3Arr) {
	    var moof = new BoxParser.moofBox();
	
	    var mfhd = new BoxParser.mfhdBox();
	    mfhd.sequence_number = idx + 1;
	    moof.boxes.push(mfhd);
	
	    var traf = new BoxParser.trafBox();
	
	    var tfhd = new BoxParser.tfhdBox();
	    tfhd.track_id = 1;
	    tfhd.flags |= BoxParser.TFHD_FLAG_SAMPLE_DUR;
	    tfhd.flags |= BoxParser.TFHD_FLAG_SAMPLE_FLAGS;
	    tfhd.flags |= BoxParser.TFHD_FLAG_SAMPLE_SIZE;
	    tfhd.default_sample_duration = 1152;
	    tfhd.default_sample_flags = 0;
	    tfhd.default_sample_size = _frameSize;
	    traf.boxes.push(tfhd);
	
	    var tfdt = new BoxParser.tfdtBox();
	    var frameNum = idx * FRAMES_PER_SEGMENT;
	    tfdt.baseMediaDecodeTime = frameNum * 1152;
	    traf.boxes.push(tfdt);
	
	    var trun = new BoxParser.trunBox();
	    trun.sample_count = mp3Arr.length / _frameSize;
	    trun.flags |= BoxParser.TRUN_FLAGS_DATA_OFFSET;
	    trun.data_offset = -42;
	    traf.boxes.push(trun);
	
	    moof.boxes.push(traf);
	
	    var mdat = new BoxParser.mdatBox();
	    mdat.data = mp3Arr;
	
	    var out = new DataStream(undefined, 0, DataStream.BIG_ENDIAN);
	    moof.write(out);
	    var dataOffset = out.byteLength + 8;
	    out.adjustUint32(trun.data_offset_position, dataOffset);
	    mdat.write(out);
	
	    return out.buffer;
	};
	
	MovDasher.mp3InitSegment = function (_sampleRate, _totalSamples, _frameSize, onDone) {
	    var ftyp = new BoxParser.ftypBox();
	    ftyp.major_brand = "dash";
	    ftyp.minor_version = 0;
	    ftyp.compatible_brands = ["iso6", "mp41"];
	
	    var moov = new BoxParser.moovBox();
	
	    var matrix = [0x10000, 0, 0, 0, 0x10000, 0, 0, 0, 0x40000000];
	
	    var mvhd = new BoxParser.mvhdBox();
	    mvhd.timescale = _sampleRate;
	    mvhd.duration = 0;
	    mvhd.rate = 1 << 16;
	    mvhd.volume = 1;
	    mvhd.matrix = matrix;
	    mvhd.next_track_id = 2;
	    moov.boxes.push(mvhd);
	
	    var mvex = new BoxParser.mvexBox();
	
	    var mehd = new BoxParser.mehdBox();
	    mehd.fragment_duration = _totalSamples;
	    mvex.boxes.push(mehd);
	
	    var trex = new BoxParser.trexBox();
	    trex.track_id = 1;
	    trex.default_sample_description_index = 1;
	    trex.default_sample_duration = 1152;
	    trex.default_sample_size = _frameSize;
	    trex.default_sample_flags = 0;
	    mvex.boxes.push(trex);
	
	    moov.boxes.push(mvex);
	
	    var trak = new BoxParser.trakBox();
	
	    var tkhd = new BoxParser.tkhdBox();
	    tkhd.track_id = 1;
	    tkhd.matrix = matrix;
	    trak.boxes.push(tkhd);
	
	    var mdia = new BoxParser.mdiaBox();
	
	    var mdhd = new BoxParser.mdhdBox();
	    mdhd.timescale = _sampleRate;
	    mdia.boxes.push(mdhd);
	
	    var mdiaHdlr = new BoxParser.hdlrBox();
	    mdiaHdlr.componentType = "mhlr";
	    mdiaHdlr.componentSubType = "soun";
	    mdiaHdlr.name = "";
	    mdia.boxes.push(mdiaHdlr);
	
	    var minf = new BoxParser.minfBox();
	
	    var dinf = new BoxParser.dinfBox();
	    var dref = new BoxParser.drefBox();
	    var url = new BoxParser["url Box"]();
	    dref.entries = [url];
	    dinf.boxes.push(dref);
	    minf.boxes.push(dinf);
	
	    var smhd = new BoxParser.smhdBox();
	    smhd.data = [0, 0, 0, 0];
	    minf.boxes.push(smhd);
	
	    var minfHdlr = new BoxParser.hdlrBox();
	    minfHdlr.componentType = "dhlr";
	    minfHdlr.componentSubType = "url ";
	    minfHdlr.name = "";
	    minf.boxes.push(minfHdlr);
	
	    var stbl = new BoxParser.stblBox();
	
	    var stsd = new BoxParser.stsdBox();
	    var audioSampleEntry = new BoxParser.AudioSampleEntry(".mp3");
	    audioSampleEntry.data_reference_index = 1;
	    audioSampleEntry.version = 1;
	    audioSampleEntry.revision = 0;
	    audioSampleEntry.vendor = 0;
	    audioSampleEntry.channel_count = 2;
	    audioSampleEntry.samplerate = _sampleRate;
	    audioSampleEntry.samplesize = 16;
	    audioSampleEntry.compressionId = -2;
	    audioSampleEntry.packetSize = 0;
	    audioSampleEntry.samplesPerPacket = 1152;
	    audioSampleEntry.bytesPerPacket = _frameSize;
	    audioSampleEntry.bytesPerFrame = _frameSize;
	    audioSampleEntry.bytesPerSample = 2;
	    stsd.entries.push(audioSampleEntry);
	    stbl.boxes.push(stsd);
	
	    var stsz = new BoxParser.stszBox();
	    stsz.sample_sizes = [];
	    stbl.boxes.push(stsz);
	
	    var stts = new BoxParser.sttsBox();
	    stts.sample_counts = [];
	    stbl.boxes.push(stts);
	
	    var stco = new BoxParser.stcoBox();
	    stco.chunk_offsets = [];
	    stbl.boxes.push(stco);
	
	    var stsc = new BoxParser.stscBox();
	    stsc.first_chunk = [];
	    stbl.boxes.push(stsc);
	
	    minf.boxes.push(stbl);
	    mdia.boxes.push(minf);
	    trak.boxes.push(mdia);
	    moov.boxes.push(trak);
	
	    var out = new DataStream(undefined, 0, DataStream.BIG_ENDIAN);
	    ftyp.write(out);
	    moov.write(out);
	    onDone(out.buffer);
	};
	
	MovDasher.getTrunSamplesInfo = function (segmentMp4Box) {
	    var moof = segmentMp4Box.inputIsoFile.moofs[0];
	    var trun = moof.trafs[0].truns[0];
	    var samples = [];
	
	    for (var i = 0, offset = moof.start + trun.data_offset; i < trun.sample_count; i++) {
	        var sample = {
	            offset: offset,
	            size: trun.sample_size[i]
	        };
	        samples.push(sample);
	        offset += sample.size;
	    }
	
	    return samples;
	};
	
	MovDasher.getAvcC = function (mp4box) {
	    var video = mp4box.inputIsoFile.moov.traks[0];
	    return video.mdia.minf.stbl.stsd.entries[0].avcC;
	};
	
	MovDasher.createSilenceMoof = function (templateMp4Box, idx, baseMediaDecodeTime, duration, log) {
	    var sampleDuration = 1024;
	    if (duration % sampleDuration != 0) {
	        throw new RuntimeException("silence segment duration " + duration + " is not a multiple of sample duration " + sampleDuration);
	    }
	
	    var moof = new BoxParser.moofBox();
	
	    var mfhd = new BoxParser.mfhdBox();
	    mfhd.sequence_number = idx + 1;
	    moof.boxes.push(mfhd);
	
	    var traf = new BoxParser.trafBox();
	
	    var tfhd = new BoxParser.tfhdBox();
	    tfhd.track_id = 1;
	    tfhd.flags |= BoxParser.TFHD_FLAG_SAMPLE_DUR;
	    tfhd.flags |= BoxParser.TFHD_FLAG_SAMPLE_FLAGS;
	    tfhd.flags |= BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF;
	    tfhd.default_sample_duration = sampleDuration;
	    tfhd.default_sample_flags = 0x02000000;
	    traf.boxes.push(tfhd);
	
	    var tfdt = new BoxParser.tfdtBox();
	    tfdt.baseMediaDecodeTime = baseMediaDecodeTime;
	    traf.boxes.push(tfdt);
	
	    var segSampleSizes = [];
	    var data = new DataStream(undefined, 0, DataStream.BIG_ENDIAN);
	    var sampleCount = duration / sampleDuration;
	
	    var sampleDesc = templateMp4Box.inputIsoFile.moov.traks[0].mdia.minf.stbl.stsd.entries[0];
	    var channelConfig = MovDasher.parseEsdsChannelConfig(sampleDesc.esds, log) || sampleDesc.channel_count;
	    var silenceFrame = THE_SOUND_OF_SILENCE[channelConfig];
	    if (!silenceFrame) {
	        silenceFrame = THE_SOUND_OF_SILENCE[2];
	    }
	
	    for (var i = 0; i < sampleCount; i++) {
	        segSampleSizes.push(silenceFrame.length);
	        data.writeUint8Array(silenceFrame);
	    }
	
	    var trun = new BoxParser.trunBox();
	    trun.flags |= BoxParser.TRUN_FLAGS_DATA_OFFSET;
	    trun.flags |= BoxParser.TRUN_FLAGS_SIZE;
	    trun.data_offset = -42;
	    trun.sample_count = sampleCount;
	    trun.sample_size = segSampleSizes;
	    traf.boxes.push(trun);
	
	    moof.boxes.push(traf);
	
	    var mdat = new BoxParser.mdatBox();
	    mdat.data = new Uint8Array(data.buffer);
	
	    var out = new DataStream(undefined, 0, DataStream.BIG_ENDIAN);
	    moof.write(out);
	    var dataOffset = out.byteLength + 8;
	    out.adjustUint32(trun.data_offset_position, dataOffset);
	    mdat.write(out);
	
	    return out.buffer;
	};
	
	MovDasher.conformMoof = function (segmentBuf, idx, decodeTime) {
	    var segmentMp4Box = new MP4Box(false);
	    segmentBuf.fileStart = 0;
	    segmentMp4Box.appendBuffer(segmentBuf);
	
	    delete segmentMp4Box.inputIsoFile.styp;
	    delete segmentMp4Box.inputIsoFile.sidx;
	
	    segmentMp4Box.inputIsoFile.boxes = segmentMp4Box.inputIsoFile.boxes.filter(function (box) {
	        return box.type != "styp" && box.type != "sidx";
	    });
	
	    var moof = segmentMp4Box.inputIsoFile.moofs[0];
	    var traf = moof.trafs[0];
	    moof.mfhd.sequence_number = idx + 1;
	    traf.tfdt.baseMediaDecodeTime = decodeTime;
	    traf.tfhd.flags |= BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF;
	
	    var mdat = segmentMp4Box.inputIsoFile.mdats[0];
	    mdat.data = new Uint8Array(segmentBuf.slice(mdat.start + 8, mdat.start + mdat.size));
	
	    var out = new DataStream(undefined, 0, DataStream.BIG_ENDIAN);
	    moof.write(out);
	    var dataOffset = out.byteLength + 8;
	    out.adjustUint32(traf.truns[0].data_offset_position, dataOffset);
	    mdat.write(out);
	
	    return out.buffer;
	};
	
	// one aac frame of silence
	var THE_SOUND_OF_SILENCE = {
	    1: [0x00, 0xC8, 0x00, 0x80, 0x23, 0x80],
	    2: [0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80],
	    6: [0x00, 0xC8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x18, 0x32, 0x00, 0x20, 0x08, 0xE0]
	};
	
	MovDasher.hasBFrames = function (mp4Box, trackId) {
	    var trak = MovDasher._getTrack(mp4Box.inputIsoFile.moov, trackId);
	    return trak.mdia.minf.stbl.ctts != null;
	};
	
	if (true) {
	    module.exports = MovDasher;
	}
	
	//# sourceMappingURL=MovDasher.js.map

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	// file:src/log.js
	/* 
	 * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato
	 * License: BSD-3-Clause (see LICENSE file)
	 */
	var Log = (function (){
			var start = new Date();
			var LOG_LEVEL_ERROR 	= 4;
			var LOG_LEVEL_WARNING 	= 3;
			var LOG_LEVEL_INFO 		= 2;
			var LOG_LEVEL_DEBUG		= 1;
			var log_level = LOG_LEVEL_ERROR;
			var logObject = {
				setLogLevel : function(level) {
					if (level == this.debug) log_level = LOG_LEVEL_DEBUG;
					else if (level == this.info) log_level = LOG_LEVEL_INFO;
					else if (level == this.warn) log_level = LOG_LEVEL_WARNING;
					else if (level == this.error) log_level = LOG_LEVEL_ERROR;
					else log_level = LOG_LEVEL_ERROR;
				},
				debug : function(module, msg) {
					if (LOG_LEVEL_DEBUG >= log_level) {
						console.debug("["+Log.getDurationString(new Date()-start,1000)+"]","["+module+"]",msg);
					}
				},
				info : function(module, msg) {
					if (LOG_LEVEL_INFO >= log_level) {
						console.info("["+Log.getDurationString(new Date()-start,1000)+"]","["+module+"]",msg);
					}
				},
				warn : function(module, msg) {
					if (LOG_LEVEL_WARNING >= log_level) {
						console.warn("["+Log.getDurationString(new Date()-start,1000)+"]","["+module+"]",msg);
					}
				},
				error : function(module, msg) {
					if (LOG_LEVEL_ERROR >= log_level) {
						console.error("["+Log.getDurationString(new Date()-start,1000)+"]","["+module+"]",msg);
					}
				}
			};
			return logObject;
		})();
		
	/* Helper function to print a duration value in the form H:MM:SS.MS */
	Log.getDurationString = function(duration, _timescale) {
		var neg;
		/* Helper function to print a number on a fixed number of digits */
		function pad(number, length) {
			var str = '' + number;
			var a = str.split('.');		
			while (a[0].length < length) {
				a[0] = '0' + a[0];
			}
			return a.join('.');
		}
		if (duration < 0) {
			neg = true;
			duration = -duration;
		} else {
			neg = false;	
		}
		var timescale = _timescale || 1;
		var duration_sec = duration/timescale;
		var hours = Math.floor(duration_sec/3600);
		duration_sec -= hours * 3600;
		var minutes = Math.floor(duration_sec/60);
		duration_sec -= minutes * 60;		
		var msec = duration_sec*1000;
		duration_sec = Math.floor(duration_sec);
		msec -= duration_sec*1000;
		msec = Math.floor(msec);
		return (neg ? "-": "")+hours+":"+pad(minutes,2)+":"+pad(duration_sec,2)+"."+pad(msec,3);
	}
		
	/* Helper function to stringify HTML5 TimeRanges objects */	
	Log.printRanges = function(ranges) {
		var length = ranges.length;
		if (length > 0) {
			var str = "";
			for (var i = 0; i < length; i++) {
			  if (i > 0) str += ",";
			  str += "["+Log.getDurationString(ranges.start(i))+ ","+Log.getDurationString(ranges.end(i))+"]";
			}
			return str;
		} else {
			return "(empty)";
		}
	}
	// file:src/stream.js
	var MP4BoxStream = function(arrayBuffer) {
	  if (arrayBuffer instanceof ArrayBuffer) {
	    this.buffer = arrayBuffer;
	    this.uint8 = new Uint8Array(arrayBuffer);
	  } else {
	    throw ("Needs an array buffer");
	  }
	  this.position = 0;
	};
	
	/*************************************************************************
	  Common API between MultiBufferStream and SimpleStream
	 *************************************************************************/
	MP4BoxStream.prototype.getPosition = function() {
	  return this.position;
	}
	
	MP4BoxStream.prototype.getEndPosition = function() {
	  return this.buffer.byteLength;
	}
	
	MP4BoxStream.prototype.getLength = function() {
	  return this.buffer.byteLength;
	}
	
	MP4BoxStream.prototype.seek = function (pos) {
	  var npos = Math.max(0, Math.min(this.uint8.length, pos));
	  this.position = (isNaN(npos) || !isFinite(npos)) ? 0 : npos;
	  return true;
	}
	
	MP4BoxStream.prototype.isEos = function () {
	  return this.getPosition() >= this.getEndPosition();
	}
	
	/*************************************************************************
	  Read methods, simimar to DataStream but simpler
	 *************************************************************************/
	
	MP4BoxStream.prototype.readUint8 = function() {
	  var u8;
	  if (this.position + 1 <= this.uint8.length) {
	    u8 = this.uint8[this.position];
	    this.position++;
	    return u8;
	  } else {
	    throw ("Not enough bytes in buffer");
	  }
	}
	
	MP4BoxStream.prototype.readUint16 = function() {
	  var u8_1, u8_2, u16;
	  if (this.position + 2 <= this.uint8.length) {
	    u8_1 = this.uint8[this.position];
	    this.position++;
	    u8_2 = this.uint8[this.position];
	    this.position++;
	    u16 = u8_1 << 8 | u8_2;
	    return u16;
	  } else {
	    throw ("Not enough bytes in buffer");
	  }
	}
	
	MP4BoxStream.prototype.readUint24 = function() {
	  var u8, u24;
	  if (this.position + 3 <= this.uint8.length) {
	    u24 = this.uint8[this.position] << 16;
	    this.position++;
	    u24 |= this.uint8[this.position] << 8;
	    this.position++;
	    u24 |= this.uint8[this.position];
	    this.position++;
	    return u24;
	  } else {
	    throw ("Not enough bytes in buffer");
	  }
	}
	
	MP4BoxStream.prototype.readUint32 = function() {
	  var u8, u32;
	  if (this.position + 4 <= this.uint8.length) {
	    u32 = this.uint8[this.position] << 24;
	    this.position++;
	    u32 |= this.uint8[this.position] << 16;
	    this.position++;
	    u32 |= this.uint8[this.position] << 8;
	    this.position++;
	    u32 |= this.uint8[this.position];
	    this.position++;
	    return u32;
	  } else {
	    throw ("Not enough bytes in buffer");
	  }
	}
	
	MP4BoxStream.prototype.readUint64 = function() {
	  var u64;
	  if (this.position + 8 <= this.uint8.length) {
	    u64 = this.readUint32() << 32;
	    u64 |= this.readUint32();
	    return u64;
	  } else {
	    throw ("Not enough bytes in buffer");
	  }
	}
	
	MP4BoxStream.prototype.readString = function(length) {
	  if (this.position + length <= this.uint8.length) {
	    var s = "";
	    for (var i = 0; i < length; i++) {
	      s += String.fromCharCode(this.readUint8());
	    }
	    return s;
	  } else {
	    throw ("Not enough bytes in buffer");
	  }
	}
	
	MP4BoxStream.prototype.readCString = function() {
	  var arr = [];
	  while(true) {
	    var b = this.readUint8();
	    if (b !== 0) {
	      arr.push(b);
	    } else {
	      break;
	    }
	  }
	  return String.fromCharCode.apply(null, arr); 
	}
	
	MP4BoxStream.prototype.readInt8 = function() {
	  return this.readUint8();
	}
	
	MP4BoxStream.prototype.readInt16 = function() {
	  return this.readUint16();
	}
	
	MP4BoxStream.prototype.readInt32 = function() {
	  return this.readUint32();
	}
	
	MP4BoxStream.prototype.readUint8Array = function(length) {
	  var arr = [];
	  for (var i = 0; i < length; i++) {
	    arr[i] = this.readUint8();
	  }
	  return arr;
	}
	
	MP4BoxStream.prototype.readInt16Array = function(length) {
	  var arr = [];
	  for (var i = 0; i < length; i++) {
	    arr[i] = this.readUint16();
	  }
	  return arr;
	}
	
	MP4BoxStream.prototype.readUint32Array = function(length) {
	  var arr = [];
	  for (var i = 0; i < length; i++) {
	    arr[i] = this.readUint32();
	  }
	  return arr;
	}
	
	MP4BoxStream.prototype.readInt32Array = function(length) {
	  var arr = [];
	  for (var i = 0; i < length; i++) {
	    arr[i] = this.readInt32();
	  }
	  return arr;
	}
	// file:src/DataStream.js
	/**
	  DataStream reads scalars, arrays and structs of data from an ArrayBuffer.
	  It's like a file-like DataView on steroids.
	
	  @param {ArrayBuffer} arrayBuffer ArrayBuffer to read from.
	  @param {?Number} byteOffset Offset from arrayBuffer beginning for the DataStream.
	  @param {?Boolean} endianness DataStream.BIG_ENDIAN or DataStream.LITTLE_ENDIAN (the default).
	  */
	var DataStream = function(arrayBuffer, byteOffset, endianness) {
	  this._byteOffset = byteOffset || 0;
	  if (arrayBuffer instanceof ArrayBuffer) {
	    this.buffer = arrayBuffer;
	  } else if (typeof arrayBuffer == "object") {
	    this.dataView = arrayBuffer;
	    if (byteOffset) {
	      this._byteOffset += byteOffset;
	    }
	  } else {
	    this.buffer = new ArrayBuffer(arrayBuffer || 0);
	  }
	  this.position = 0;
	  this.endianness = endianness == null ? DataStream.LITTLE_ENDIAN : endianness;
	};
	DataStream.prototype = {};
	
	DataStream.prototype.getPosition = function() {
	  return this.position;
	}
	
	/**
	  Internal function to resize the DataStream buffer when required.
	  @param {number} extra Number of bytes to add to the buffer allocation.
	  @return {null}
	  */
	DataStream.prototype._realloc = function(extra) {
	  if (!this._dynamicSize) {
	    return;
	  }
	  var req = this._byteOffset + this.position + extra;
	  var blen = this._buffer.byteLength;
	  if (req <= blen) {
	    if (req > this._byteLength) {
	      this._byteLength = req;
	    }
	    return;
	  }
	  if (blen < 1) {
	    blen = 1;
	  }
	  while (req > blen) {
	    blen *= 2;
	  }
	  var buf = new ArrayBuffer(blen);
	  var src = new Uint8Array(this._buffer);
	  var dst = new Uint8Array(buf, 0, src.length);
	  dst.set(src);
	  this.buffer = buf;
	  this._byteLength = req;
	};
	
	/**
	  Internal function to trim the DataStream buffer when required.
	  Used for stripping out the extra bytes from the backing buffer when
	  the virtual byteLength is smaller than the buffer byteLength (happens after
	  growing the buffer with writes and not filling the extra space completely).
	
	  @return {null}
	  */
	DataStream.prototype._trimAlloc = function() {
	  if (this._byteLength == this._buffer.byteLength) {
	    return;
	  }
	  var buf = new ArrayBuffer(this._byteLength);
	  var dst = new Uint8Array(buf);
	  var src = new Uint8Array(this._buffer, 0, dst.length);
	  dst.set(src);
	  this.buffer = buf;
	};
	
	
	/**
	  Big-endian const to use as default endianness.
	  @type {boolean}
	  */
	DataStream.BIG_ENDIAN = false;
	
	/**
	  Little-endian const to use as default endianness.
	  @type {boolean}
	  */
	DataStream.LITTLE_ENDIAN = true;
	
	/**
	  Virtual byte length of the DataStream backing buffer.
	  Updated to be max of original buffer size and last written size.
	  If dynamicSize is false is set to buffer size.
	  @type {number}
	  */
	DataStream.prototype._byteLength = 0;
	
	/**
	  Returns the byte length of the DataStream object.
	  @type {number}
	  */
	Object.defineProperty(DataStream.prototype, 'byteLength',
	  { get: function() {
	    return this._byteLength - this._byteOffset;
	  }});
	
	/**
	  Set/get the backing ArrayBuffer of the DataStream object.
	  The setter updates the DataView to point to the new buffer.
	  @type {Object}
	  */
	Object.defineProperty(DataStream.prototype, 'buffer',
	  { get: function() {
	      this._trimAlloc();
	      return this._buffer;
	    },
	    set: function(v) {
	      this._buffer = v;
	      if (this._buffer.byteLength === 0 && !this._byteOffset) {
	        this._dataView = new DataView(this._buffer);
	      } else {
	        this._dataView = new DataView(this._buffer, this._byteOffset);
	      }
	      this._byteLength = this._buffer.byteLength;
	    } });
	
	/**
	  Set/get the byteOffset of the DataStream object.
	  The setter updates the DataView to point to the new byteOffset.
	  @type {number}
	  */
	Object.defineProperty(DataStream.prototype, 'byteOffset',
	  { get: function() {
	      return this._byteOffset;
	    },
	    set: function(v) {
	      this._byteOffset = v;
	      this._dataView = new DataView(this._buffer, this._byteOffset);
	      this._byteLength = this._buffer.byteLength;
	    } });
	
	/**
	  Set/get the backing DataView of the DataStream object.
	  The setter updates the buffer and byteOffset to point to the DataView values.
	  @type {Object}
	  */
	Object.defineProperty(DataStream.prototype, 'dataView',
	  { get: function() {
	      return this._dataView;
	    },
	    set: function(v) {
	      this._byteOffset = v.byteOffset;
	      this._buffer = v.buffer;
	      this._dataView = new DataView(this._buffer, this._byteOffset);
	      this._byteLength = this._byteOffset + v.byteLength;
	    } });
	
	/**
	  Sets the DataStream read/write position to given position.
	  Clamps between 0 and DataStream length.
	
	  @param {number} pos Position to seek to.
	  @return {null}
	  */
	DataStream.prototype.seek = function(pos) {
	  var npos = Math.max(0, Math.min(this.byteLength, pos));
	  this.position = (isNaN(npos) || !isFinite(npos)) ? 0 : npos;
	};
	
	/**
	  Returns true if the DataStream seek pointer is at the end of buffer and
	  there's no more data to read.
	
	  @return {boolean} True if the seek pointer is at the end of the buffer.
	  */
	DataStream.prototype.isEof = function() {
	  return (this.position >= this._byteLength);
	};
	
	
	/**
	  Maps a Uint8Array into the DataStream buffer.
	
	  Nice for quickly reading in data.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} Uint8Array to the DataStream backing buffer.
	  */
	DataStream.prototype.mapUint8Array = function(length) {
	  this._realloc(length * 1);
	  var arr = new Uint8Array(this._buffer, this.byteOffset+this.position, length);
	  this.position += length * 1;
	  return arr;
	};
	
	
	/**
	  Reads an Int32Array of desired length and endianness from the DataStream.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} The read Int32Array.
	 */
	DataStream.prototype.readInt32Array = function(length, e) {
	  length = length == null ? (this.byteLength-this.position / 4) : length;
	  var arr = new Int32Array(length);
	  DataStream.memcpy(arr.buffer, 0,
	                    this.buffer, this.byteOffset+this.position,
	                    length*arr.BYTES_PER_ELEMENT);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += arr.byteLength;
	  return arr;
	};
	
	/**
	  Reads an Int16Array of desired length and endianness from the DataStream.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} The read Int16Array.
	 */
	DataStream.prototype.readInt16Array = function(length, e) {
	  length = length == null ? (this.byteLength-this.position / 2) : length;
	  var arr = new Int16Array(length);
	  DataStream.memcpy(arr.buffer, 0,
	                    this.buffer, this.byteOffset+this.position,
	                    length*arr.BYTES_PER_ELEMENT);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += arr.byteLength;
	  return arr;
	};
	
	/**
	  Reads an Int8Array of desired length from the DataStream.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} The read Int8Array.
	 */
	DataStream.prototype.readInt8Array = function(length) {
	  length = length == null ? (this.byteLength-this.position) : length;
	  var arr = new Int8Array(length);
	  DataStream.memcpy(arr.buffer, 0,
	                    this.buffer, this.byteOffset+this.position,
	                    length*arr.BYTES_PER_ELEMENT);
	  this.position += arr.byteLength;
	  return arr;
	};
	
	/**
	  Reads a Uint32Array of desired length and endianness from the DataStream.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} The read Uint32Array.
	 */
	DataStream.prototype.readUint32Array = function(length, e) {
	  length = length == null ? (this.byteLength-this.position / 4) : length;
	  var arr = new Uint32Array(length);
	  DataStream.memcpy(arr.buffer, 0,
	                    this.buffer, this.byteOffset+this.position,
	                    length*arr.BYTES_PER_ELEMENT);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += arr.byteLength;
	  return arr;
	};
	
	/**
	  Reads a Uint16Array of desired length and endianness from the DataStream.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} The read Uint16Array.
	 */
	DataStream.prototype.readUint16Array = function(length, e) {
	  length = length == null ? (this.byteLength-this.position / 2) : length;
	  var arr = new Uint16Array(length);
	  DataStream.memcpy(arr.buffer, 0,
	                    this.buffer, this.byteOffset+this.position,
	                    length*arr.BYTES_PER_ELEMENT);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += arr.byteLength;
	  return arr;
	};
	
	/**
	  Reads a Uint8Array of desired length from the DataStream.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} The read Uint8Array.
	 */
	DataStream.prototype.readUint8Array = function(length) {
	  length = length == null ? (this.byteLength-this.position) : length;
	  var arr = new Uint8Array(length);
	  DataStream.memcpy(arr.buffer, 0,
	                    this.buffer, this.byteOffset+this.position,
	                    length*arr.BYTES_PER_ELEMENT);
	  this.position += arr.byteLength;
	  return arr;
	};
	
	/**
	  Reads a Float64Array of desired length and endianness from the DataStream.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} The read Float64Array.
	 */
	DataStream.prototype.readFloat64Array = function(length, e) {
	  length = length == null ? (this.byteLength-this.position / 8) : length;
	  var arr = new Float64Array(length);
	  DataStream.memcpy(arr.buffer, 0,
	                    this.buffer, this.byteOffset+this.position,
	                    length*arr.BYTES_PER_ELEMENT);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += arr.byteLength;
	  return arr;
	};
	
	/**
	  Reads a Float32Array of desired length and endianness from the DataStream.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} The read Float32Array.
	 */
	DataStream.prototype.readFloat32Array = function(length, e) {
	  length = length == null ? (this.byteLength-this.position / 4) : length;
	  var arr = new Float32Array(length);
	  DataStream.memcpy(arr.buffer, 0,
	                    this.buffer, this.byteOffset+this.position,
	                    length*arr.BYTES_PER_ELEMENT);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += arr.byteLength;
	  return arr;
	};
	
	
	/**
	  Reads a 32-bit int from the DataStream with the desired endianness.
	
	  @param {?boolean} e Endianness of the number.
	  @return {number} The read number.
	 */
	DataStream.prototype.readInt32 = function(e) {
	  var v = this._dataView.getInt32(this.position, e == null ? this.endianness : e);
	  this.position += 4;
	  return v;
	};
	
	/**
	  Reads a 16-bit int from the DataStream with the desired endianness.
	
	  @param {?boolean} e Endianness of the number.
	  @return {number} The read number.
	 */
	DataStream.prototype.readInt16 = function(e) {
	  var v = this._dataView.getInt16(this.position, e == null ? this.endianness : e);
	  this.position += 2;
	  return v;
	};
	
	/**
	  Reads an 8-bit int from the DataStream.
	
	  @return {number} The read number.
	 */
	DataStream.prototype.readInt8 = function() {
	  var v = this._dataView.getInt8(this.position);
	  this.position += 1;
	  return v;
	};
	
	/**
	  Reads a 32-bit unsigned int from the DataStream with the desired endianness.
	
	  @param {?boolean} e Endianness of the number.
	  @return {number} The read number.
	 */
	DataStream.prototype.readUint32 = function(e) {
	  var v = this._dataView.getUint32(this.position, e == null ? this.endianness : e);
	  this.position += 4;
	  return v;
	};
	
	/**
	  Reads a 16-bit unsigned int from the DataStream with the desired endianness.
	
	  @param {?boolean} e Endianness of the number.
	  @return {number} The read number.
	 */
	DataStream.prototype.readUint16 = function(e) {
	  var v = this._dataView.getUint16(this.position, e == null ? this.endianness : e);
	  this.position += 2;
	  return v;
	};
	
	/**
	  Reads an 8-bit unsigned int from the DataStream.
	
	  @return {number} The read number.
	 */
	DataStream.prototype.readUint8 = function() {
	  var v = this._dataView.getUint8(this.position);
	  this.position += 1;
	  return v;
	};
	
	/**
	  Reads a 32-bit float from the DataStream with the desired endianness.
	
	  @param {?boolean} e Endianness of the number.
	  @return {number} The read number.
	 */
	DataStream.prototype.readFloat32 = function(e) {
	  var v = this._dataView.getFloat32(this.position, e == null ? this.endianness : e);
	  this.position += 4;
	  return v;
	};
	
	/**
	  Reads a 64-bit float from the DataStream with the desired endianness.
	
	  @param {?boolean} e Endianness of the number.
	  @return {number} The read number.
	 */
	DataStream.prototype.readFloat64 = function(e) {
	  var v = this._dataView.getFloat64(this.position, e == null ? this.endianness : e);
	  this.position += 8;
	  return v;
	};
	
	/**
	  Native endianness. Either DataStream.BIG_ENDIAN or DataStream.LITTLE_ENDIAN
	  depending on the platform endianness.
	
	  @type {boolean}
	 */
	DataStream.endianness = new Int8Array(new Int16Array([1]).buffer)[0] > 0;
	
	/**
	  Copies byteLength bytes from the src buffer at srcOffset to the
	  dst buffer at dstOffset.
	
	  @param {Object} dst Destination ArrayBuffer to write to.
	  @param {number} dstOffset Offset to the destination ArrayBuffer.
	  @param {Object} src Source ArrayBuffer to read from.
	  @param {number} srcOffset Offset to the source ArrayBuffer.
	  @param {number} byteLength Number of bytes to copy.
	 */
	DataStream.memcpy = function(dst, dstOffset, src, srcOffset, byteLength) {
	  var dstU8 = new Uint8Array(dst, dstOffset, byteLength);
	  var srcU8 = new Uint8Array(src, srcOffset, byteLength);
	  dstU8.set(srcU8);
	};
	
	/**
	  Converts array to native endianness in-place.
	
	  @param {Object} array Typed array to convert.
	  @param {boolean} arrayIsLittleEndian True if the data in the array is
	                                       little-endian. Set false for big-endian.
	  @return {Object} The converted typed array.
	 */
	DataStream.arrayToNative = function(array, arrayIsLittleEndian) {
	  if (arrayIsLittleEndian == this.endianness) {
	    return array;
	  } else {
	    return this.flipArrayEndianness(array);
	  }
	};
	
	/**
	  Converts native endianness array to desired endianness in-place.
	
	  @param {Object} array Typed array to convert.
	  @param {boolean} littleEndian True if the converted array should be
	                                little-endian. Set false for big-endian.
	  @return {Object} The converted typed array.
	 */
	DataStream.nativeToEndian = function(array, littleEndian) {
	  if (this.endianness == littleEndian) {
	    return array;
	  } else {
	    return this.flipArrayEndianness(array);
	  }
	};
	
	/**
	  Flips typed array endianness in-place.
	
	  @param {Object} array Typed array to flip.
	  @return {Object} The converted typed array.
	 */
	DataStream.flipArrayEndianness = function(array) {
	  var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);
	  for (var i=0; i<array.byteLength; i+=array.BYTES_PER_ELEMENT) {
	    for (var j=i+array.BYTES_PER_ELEMENT-1, k=i; j>k; j--, k++) {
	      var tmp = u8[k];
	      u8[k] = u8[j];
	      u8[j] = tmp;
	    }
	  }
	  return array;
	};
	
	/**
	  Seek position where DataStream#readStruct ran into a problem.
	  Useful for debugging struct parsing.
	
	  @type {number}
	 */
	DataStream.prototype.failurePosition = 0;
	
	String.fromCharCodeUint8 = function(uint8arr) {
	    var arr = [];
	    for (var i = 0; i < uint8arr.length; i++) {
	      arr[i] = uint8arr[i];
	    }
	    return String.fromCharCode.apply(null, arr);
	}
	/**
	  Read a string of desired length and encoding from the DataStream.
	
	  @param {number} length The length of the string to read in bytes.
	  @param {?string} encoding The encoding of the string data in the DataStream.
	                            Defaults to ASCII.
	  @return {string} The read string.
	 */
	DataStream.prototype.readString = function(length, encoding) {
	  if (encoding == null || encoding == "ASCII") {
	    return String.fromCharCodeUint8.apply(null, [this.mapUint8Array(length == null ? this.byteLength-this.position : length)]);
	  } else {
	    return (new TextDecoder(encoding)).decode(this.mapUint8Array(length));
	  }
	};
	
	/**
	  Read null-terminated string of desired length from the DataStream. Truncates
	  the returned string so that the null byte is not a part of it.
	
	  @param {?number} length The length of the string to read.
	  @return {string} The read string.
	 */
	DataStream.prototype.readCString = function(length) {
	  var blen = this.byteLength-this.position;
	  var u8 = new Uint8Array(this._buffer, this._byteOffset + this.position);
	  var len = blen;
	  if (length != null) {
	    len = Math.min(length, blen);
	  }
	  for (var i = 0; i < len && u8[i] !== 0; i++); // find first zero byte
	  var s = String.fromCharCodeUint8.apply(null, [this.mapUint8Array(i)]);
	  if (length != null) {
	    this.position += len-i;
	  } else if (i != blen) {
	    this.position += 1; // trailing zero if not at end of buffer
	  }
	  return s;
	};
	
	/* 
	   TODO: fix endianness for 24/64-bit fields
	   TODO: check range/support for 64-bits numbers in JavaScript
	*/
	var MAX_SIZE = Math.pow(2, 32);
	
	DataStream.prototype.readUint64 = function () {
		return (this.readUint32()*MAX_SIZE)+this.readUint32();
	}
	
	DataStream.prototype.readUint24 = function () {
		return (this.readUint8()<<16)+(this.readUint8()<<8)+this.readUint8();
	}
	
	if (true) {
	  exports.DataStream = DataStream;  
	}
	// file:src/DataStream-write.js
	/**
	  Saves the DataStream contents to the given filename.
	  Uses Chrome's anchor download property to initiate download.
	 
	  @param {string} filename Filename to save as.
	  @return {null}
	  */
	DataStream.prototype.save = function(filename) {
	  var blob = new Blob([this.buffer]);
	  var URL = (window.webkitURL || window.URL);
	  if (URL && URL.createObjectURL) {
	      var url = URL.createObjectURL(blob);
	      var a = document.createElement('a');
	      a.setAttribute('href', url);
	      a.setAttribute('download', filename);
	      a.click();
	      URL.revokeObjectURL(url);
	  } else {
	      throw("DataStream.save: Can't create object URL.");
	  }
	};
	
	/**
	  Whether to extend DataStream buffer when trying to write beyond its size.
	  If set, the buffer is reallocated to twice its current size until the
	  requested write fits the buffer.
	  @type {boolean}
	  */
	DataStream.prototype._dynamicSize = true;
	Object.defineProperty(DataStream.prototype, 'dynamicSize',
	  { get: function() {
	      return this._dynamicSize;
	    },
	    set: function(v) {
	      if (!v) {
	        this._trimAlloc();
	      }
	      this._dynamicSize = v;
	    } });
	
	/**
	  Internal function to trim the DataStream buffer when required.
	  Used for stripping out the first bytes when not needed anymore.
	
	  @return {null}
	  */
	DataStream.prototype.shift = function(offset) {
	  var buf = new ArrayBuffer(this._byteLength-offset);
	  var dst = new Uint8Array(buf);
	  var src = new Uint8Array(this._buffer, offset, dst.length);
	  dst.set(src);
	  this.buffer = buf;
	  this.position -= offset;
	};
	
	/**
	  Writes an Int32Array of specified endianness to the DataStream.
	
	  @param {Object} arr The array to write.
	  @param {?boolean} e Endianness of the data to write.
	 */
	DataStream.prototype.writeInt32Array = function(arr, e) {
	  this._realloc(arr.length * 4);
	  if (arr instanceof Int32Array &&
	      this.byteOffset+this.position % arr.BYTES_PER_ELEMENT === 0) {
	    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
	                      arr.buffer, 0,
	                      arr.byteLength);
	    this.mapInt32Array(arr.length, e);
	  } else {
	    for (var i=0; i<arr.length; i++) {
	      this.writeInt32(arr[i], e);
	    }
	  }
	};
	
	/**
	  Writes an Int16Array of specified endianness to the DataStream.
	
	  @param {Object} arr The array to write.
	  @param {?boolean} e Endianness of the data to write.
	 */
	DataStream.prototype.writeInt16Array = function(arr, e) {
	  this._realloc(arr.length * 2);
	  if (arr instanceof Int16Array &&
	      this.byteOffset+this.position % arr.BYTES_PER_ELEMENT === 0) {
	    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
	                      arr.buffer, 0,
	                      arr.byteLength);
	    this.mapInt16Array(arr.length, e);
	  } else {
	    for (var i=0; i<arr.length; i++) {
	      this.writeInt16(arr[i], e);
	    }
	  }
	};
	
	/**
	  Writes an Int8Array to the DataStream.
	
	  @param {Object} arr The array to write.
	 */
	DataStream.prototype.writeInt8Array = function(arr) {
	  this._realloc(arr.length * 1);
	  if (arr instanceof Int8Array &&
	      this.byteOffset+this.position % arr.BYTES_PER_ELEMENT === 0) {
	    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
	                      arr.buffer, 0,
	                      arr.byteLength);
	    this.mapInt8Array(arr.length);
	  } else {
	    for (var i=0; i<arr.length; i++) {
	      this.writeInt8(arr[i]);
	    }
	  }
	};
	
	/**
	  Writes a Uint32Array of specified endianness to the DataStream.
	
	  @param {Object} arr The array to write.
	  @param {?boolean} e Endianness of the data to write.
	 */
	DataStream.prototype.writeUint32Array = function(arr, e) {
	  this._realloc(arr.length * 4);
	  if (arr instanceof Uint32Array &&
	      this.byteOffset+this.position % arr.BYTES_PER_ELEMENT === 0) {
	    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
	                      arr.buffer, 0,
	                      arr.byteLength);
	    this.mapUint32Array(arr.length, e);
	  } else {
	    for (var i=0; i<arr.length; i++) {
	      this.writeUint32(arr[i], e);
	    }
	  }
	};
	
	/**
	  Writes a Uint16Array of specified endianness to the DataStream.
	
	  @param {Object} arr The array to write.
	  @param {?boolean} e Endianness of the data to write.
	 */
	DataStream.prototype.writeUint16Array = function(arr, e) {
	  this._realloc(arr.length * 2);
	  if (arr instanceof Uint16Array &&
	      this.byteOffset+this.position % arr.BYTES_PER_ELEMENT === 0) {
	    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
	                      arr.buffer, 0,
	                      arr.byteLength);
	    this.mapUint16Array(arr.length, e);
	  } else {
	    for (var i=0; i<arr.length; i++) {
	      this.writeUint16(arr[i], e);
	    }
	  }
	};
	
	/**
	  Writes a Uint8Array to the DataStream.
	
	  @param {Object} arr The array to write.
	 */
	DataStream.prototype.writeUint8Array = function(arr) {
	  this._realloc(arr.length * 1);
	  if (arr instanceof Uint8Array &&
	      this.byteOffset+this.position % arr.BYTES_PER_ELEMENT === 0) {
	    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
	                      arr.buffer, 0,
	                      arr.byteLength);
	    this.mapUint8Array(arr.length);
	  } else {
	    for (var i=0; i<arr.length; i++) {
	      this.writeUint8(arr[i]);
	    }
	  }
	};
	
	/**
	  Writes a Float64Array of specified endianness to the DataStream.
	
	  @param {Object} arr The array to write.
	  @param {?boolean} e Endianness of the data to write.
	 */
	DataStream.prototype.writeFloat64Array = function(arr, e) {
	  this._realloc(arr.length * 8);
	  if (arr instanceof Float64Array &&
	      this.byteOffset+this.position % arr.BYTES_PER_ELEMENT === 0) {
	    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
	                      arr.buffer, 0,
	                      arr.byteLength);
	    this.mapFloat64Array(arr.length, e);
	  } else {
	    for (var i=0; i<arr.length; i++) {
	      this.writeFloat64(arr[i], e);
	    }
	  }
	};
	
	/**
	  Writes a Float32Array of specified endianness to the DataStream.
	
	  @param {Object} arr The array to write.
	  @param {?boolean} e Endianness of the data to write.
	 */
	DataStream.prototype.writeFloat32Array = function(arr, e) {
	  this._realloc(arr.length * 4);
	  if (arr instanceof Float32Array &&
	      this.byteOffset+this.position % arr.BYTES_PER_ELEMENT === 0) {
	    DataStream.memcpy(this._buffer, this.byteOffset+this.position,
	                      arr.buffer, 0,
	                      arr.byteLength);
	    this.mapFloat32Array(arr.length, e);
	  } else {
	    for (var i=0; i<arr.length; i++) {
	      this.writeFloat32(arr[i], e);
	    }
	  }
	};
	
	
	/**
	  Writes a 32-bit int to the DataStream with the desired endianness.
	
	  @param {number} v Number to write.
	  @param {?boolean} e Endianness of the number.
	 */
	DataStream.prototype.writeInt32 = function(v, e) {
	  this._realloc(4);
	  this._dataView.setInt32(this.position, v, e == null ? this.endianness : e);
	  this.position += 4;
	};
	
	/**
	  Writes a 16-bit int to the DataStream with the desired endianness.
	
	  @param {number} v Number to write.
	  @param {?boolean} e Endianness of the number.
	 */
	DataStream.prototype.writeInt16 = function(v, e) {
	  this._realloc(2);
	  this._dataView.setInt16(this.position, v, e == null ? this.endianness : e);
	  this.position += 2;
	};
	
	/**
	  Writes an 8-bit int to the DataStream.
	
	  @param {number} v Number to write.
	 */
	DataStream.prototype.writeInt8 = function(v) {
	  this._realloc(1);
	  this._dataView.setInt8(this.position, v);
	  this.position += 1;
	};
	
	/**
	  Writes a 32-bit unsigned int to the DataStream with the desired endianness.
	
	  @param {number} v Number to write.
	  @param {?boolean} e Endianness of the number.
	 */
	DataStream.prototype.writeUint32 = function(v, e) {
	  this._realloc(4);
	  this._dataView.setUint32(this.position, v, e == null ? this.endianness : e);
	  this.position += 4;
	};
	
	/**
	  Writes a 16-bit unsigned int to the DataStream with the desired endianness.
	
	  @param {number} v Number to write.
	  @param {?boolean} e Endianness of the number.
	 */
	DataStream.prototype.writeUint16 = function(v, e) {
	  this._realloc(2);
	  this._dataView.setUint16(this.position, v, e == null ? this.endianness : e);
	  this.position += 2;
	};
	
	/**
	  Writes an 8-bit unsigned  int to the DataStream.
	
	  @param {number} v Number to write.
	 */
	DataStream.prototype.writeUint8 = function(v) {
	  this._realloc(1);
	  this._dataView.setUint8(this.position, v);
	  this.position += 1;
	};
	
	/**
	  Writes a 32-bit float to the DataStream with the desired endianness.
	
	  @param {number} v Number to write.
	  @param {?boolean} e Endianness of the number.
	 */
	DataStream.prototype.writeFloat32 = function(v, e) {
	  this._realloc(4);
	  this._dataView.setFloat32(this.position, v, e == null ? this.endianness : e);
	  this.position += 4;
	};
	
	/**
	  Writes a 64-bit float to the DataStream with the desired endianness.
	
	  @param {number} v Number to write.
	  @param {?boolean} e Endianness of the number.
	 */
	DataStream.prototype.writeFloat64 = function(v, e) {
	  this._realloc(8);
	  this._dataView.setFloat64(this.position, v, e == null ? this.endianness : e);
	  this.position += 8;
	};
	
	/**
	  Write a UCS-2 string of desired endianness to the DataStream. The
	  lengthOverride argument lets you define the number of characters to write.
	  If the string is shorter than lengthOverride, the extra space is padded with
	  zeroes.
	
	  @param {string} str The string to write.
	  @param {?boolean} endianness The endianness to use for the written string data.
	  @param {?number} lengthOverride The number of characters to write.
	 */
	DataStream.prototype.writeUCS2String = function(str, endianness, lengthOverride) {
	  if (lengthOverride == null) {
	    lengthOverride = str.length;
	  }
	  for (var i = 0; i < str.length && i < lengthOverride; i++) {
	    this.writeUint16(str.charCodeAt(i), endianness);
	  }
	  for (; i<lengthOverride; i++) {
	    this.writeUint16(0);
	  }
	};
	
	/**
	  Writes a string of desired length and encoding to the DataStream.
	
	  @param {string} s The string to write.
	  @param {?string} encoding The encoding for the written string data.
	                            Defaults to ASCII.
	  @param {?number} length The number of characters to write.
	 */
	DataStream.prototype.writeString = function(s, encoding, length) {
	  var i = 0;
	  if (encoding == null || encoding == "ASCII") {
	    if (length != null) {
	      var len = Math.min(s.length, length);
	      for (i=0; i<len; i++) {
	        this.writeUint8(s.charCodeAt(i));
	      }
	      for (; i<length; i++) {
	        this.writeUint8(0);
	      }
	    } else {
	      for (i=0; i<s.length; i++) {
	        this.writeUint8(s.charCodeAt(i));
	      }
	    }
	  } else {
	    this.writeUint8Array((new TextEncoder(encoding)).encode(s.substring(0, length)));
	  }
	};
	
	/**
	  Writes a null-terminated string to DataStream and zero-pads it to length
	  bytes. If length is not given, writes the string followed by a zero.
	  If string is longer than length, the written part of the string does not have
	  a trailing zero.
	
	  @param {string} s The string to write.
	  @param {?number} length The number of characters to write.
	 */
	DataStream.prototype.writeCString = function(s, length) {
	  var i = 0;
	  if (length != null) {
	    var len = Math.min(s.length, length);
	    for (i=0; i<len; i++) {
	      this.writeUint8(s.charCodeAt(i));
	    }
	    for (; i<length; i++) {
	      this.writeUint8(0);
	    }
	  } else {
	    for (i=0; i<s.length; i++) {
	      this.writeUint8(s.charCodeAt(i));
	    }
	    this.writeUint8(0);
	  }
	};
	
	/**
	  Writes a struct to the DataStream. Takes a structDefinition that gives the
	  types and a struct object that gives the values. Refer to readStruct for the
	  structure of structDefinition.
	
	  @param {Object} structDefinition Type definition of the struct.
	  @param {Object} struct The struct data object.
	  */
	DataStream.prototype.writeStruct = function(structDefinition, struct) {
	  for (var i = 0; i < structDefinition.length; i+=2) {
	    var t = structDefinition[i+1];
	    this.writeType(t, struct[structDefinition[i]], struct);
	  }
	};
	
	/**
	  Writes object v of type t to the DataStream.
	
	  @param {Object} t Type of data to write.
	  @param {Object} v Value of data to write.
	  @param {Object} struct Struct to pass to write callback functions.
	  */
	DataStream.prototype.writeType = function(t, v, struct) {
	  var tp;
	  if (typeof t == "function") {
	    return t(this, v);
	  } else if (typeof t == "object" && !(t instanceof Array)) {
	    return t.set(this, v, struct);
	  }
	  var lengthOverride = null;
	  var charset = "ASCII";
	  var pos = this.position;
	  if (typeof(t) == 'string' && /:/.test(t)) {
	    tp = t.split(":");
	    t = tp[0];
	    lengthOverride = parseInt(tp[1]);
	  }
	  if (typeof t == 'string' && /,/.test(t)) {
	    tp = t.split(",");
	    t = tp[0];
	    charset = parseInt(tp[1]);
	  }
	
	  switch(t) {
	    case 'uint8':
	      this.writeUint8(v);
	      break;
	    case 'int8':
	      this.writeInt8(v);
	      break;
	
	    case 'uint16':
	      this.writeUint16(v, this.endianness);
	      break;
	    case 'int16':
	      this.writeInt16(v, this.endianness);
	      break;
	    case 'uint32':
	      this.writeUint32(v, this.endianness);
	      break;
	    case 'int32':
	      this.writeInt32(v, this.endianness);
	      break;
	    case 'float32':
	      this.writeFloat32(v, this.endianness);
	      break;
	    case 'float64':
	      this.writeFloat64(v, this.endianness);
	      break;
	
	    case 'uint16be':
	      this.writeUint16(v, DataStream.BIG_ENDIAN);
	      break;
	    case 'int16be':
	      this.writeInt16(v, DataStream.BIG_ENDIAN);
	      break;
	    case 'uint32be':
	      this.writeUint32(v, DataStream.BIG_ENDIAN);
	      break;
	    case 'int32be':
	      this.writeInt32(v, DataStream.BIG_ENDIAN);
	      break;
	    case 'float32be':
	      this.writeFloat32(v, DataStream.BIG_ENDIAN);
	      break;
	    case 'float64be':
	      this.writeFloat64(v, DataStream.BIG_ENDIAN);
	      break;
	
	    case 'uint16le':
	      this.writeUint16(v, DataStream.LITTLE_ENDIAN);
	      break;
	    case 'int16le':
	      this.writeInt16(v, DataStream.LITTLE_ENDIAN);
	      break;
	    case 'uint32le':
	      this.writeUint32(v, DataStream.LITTLE_ENDIAN);
	      break;
	    case 'int32le':
	      this.writeInt32(v, DataStream.LITTLE_ENDIAN);
	      break;
	    case 'float32le':
	      this.writeFloat32(v, DataStream.LITTLE_ENDIAN);
	      break;
	    case 'float64le':
	      this.writeFloat64(v, DataStream.LITTLE_ENDIAN);
	      break;
	
	    case 'cstring':
	      this.writeCString(v, lengthOverride);
	      break;
	
	    case 'string':
	      this.writeString(v, charset, lengthOverride);
	      break;
	
	    case 'u16string':
	      this.writeUCS2String(v, this.endianness, lengthOverride);
	      break;
	
	    case 'u16stringle':
	      this.writeUCS2String(v, DataStream.LITTLE_ENDIAN, lengthOverride);
	      break;
	
	    case 'u16stringbe':
	      this.writeUCS2String(v, DataStream.BIG_ENDIAN, lengthOverride);
	      break;
	
	    default:
	      if (t.length == 3) {
	        var ta = t[1];
	        for (var i=0; i<v.length; i++) {
	          this.writeType(ta, v[i]);
	        }
	        break;
	      } else {
	        this.writeStruct(t, v);
	        break;
	      }
	  }
	  if (lengthOverride != null) {
	    this.position = pos;
	    this._realloc(lengthOverride);
	    this.position = pos + lengthOverride;
	  }
	};
	
	
	DataStream.prototype.writeUint64 = function (v) {
		var h = Math.floor(v / MAX_SIZE);
		this.writeUint32(h);
		this.writeUint32(v & 0xFFFFFFFF);
	}
	
	DataStream.prototype.writeUint24 = function (v) {
		this.writeUint8((v & 0x00FF0000)>>16);
		this.writeUint8((v & 0x0000FF00)>>8);
		this.writeUint8((v & 0x000000FF));
	}
	
	DataStream.prototype.adjustUint32 = function(position, value) {
		var pos = this.position;
		this.seek(position);
		this.writeUint32(value);
		this.seek(pos);
	}
	// file:src/DataStream-map.js
	/**
	  Maps an Int32Array into the DataStream buffer, swizzling it to native
	  endianness in-place. The current offset from the start of the buffer needs to
	  be a multiple of element size, just like with typed array views.
	
	  Nice for quickly reading in data. Warning: potentially modifies the buffer
	  contents.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} Int32Array to the DataStream backing buffer.
	  */
	DataStream.prototype.mapInt32Array = function(length, e) {
	  this._realloc(length * 4);
	  var arr = new Int32Array(this._buffer, this.byteOffset+this.position, length);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += length * 4;
	  return arr;
	};
	
	/**
	  Maps an Int16Array into the DataStream buffer, swizzling it to native
	  endianness in-place. The current offset from the start of the buffer needs to
	  be a multiple of element size, just like with typed array views.
	
	  Nice for quickly reading in data. Warning: potentially modifies the buffer
	  contents.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} Int16Array to the DataStream backing buffer.
	  */
	DataStream.prototype.mapInt16Array = function(length, e) {
	  this._realloc(length * 2);
	  var arr = new Int16Array(this._buffer, this.byteOffset+this.position, length);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += length * 2;
	  return arr;
	};
	
	/**
	  Maps an Int8Array into the DataStream buffer.
	
	  Nice for quickly reading in data.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} Int8Array to the DataStream backing buffer.
	  */
	DataStream.prototype.mapInt8Array = function(length) {
	  this._realloc(length * 1);
	  var arr = new Int8Array(this._buffer, this.byteOffset+this.position, length);
	  this.position += length * 1;
	  return arr;
	};
	
	/**
	  Maps a Uint32Array into the DataStream buffer, swizzling it to native
	  endianness in-place. The current offset from the start of the buffer needs to
	  be a multiple of element size, just like with typed array views.
	
	  Nice for quickly reading in data. Warning: potentially modifies the buffer
	  contents.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} Uint32Array to the DataStream backing buffer.
	  */
	DataStream.prototype.mapUint32Array = function(length, e) {
	  this._realloc(length * 4);
	  var arr = new Uint32Array(this._buffer, this.byteOffset+this.position, length);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += length * 4;
	  return arr;
	};
	
	/**
	  Maps a Uint16Array into the DataStream buffer, swizzling it to native
	  endianness in-place. The current offset from the start of the buffer needs to
	  be a multiple of element size, just like with typed array views.
	
	  Nice for quickly reading in data. Warning: potentially modifies the buffer
	  contents.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} Uint16Array to the DataStream backing buffer.
	  */
	DataStream.prototype.mapUint16Array = function(length, e) {
	  this._realloc(length * 2);
	  var arr = new Uint16Array(this._buffer, this.byteOffset+this.position, length);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += length * 2;
	  return arr;
	};
	
	/**
	  Maps a Float64Array into the DataStream buffer, swizzling it to native
	  endianness in-place. The current offset from the start of the buffer needs to
	  be a multiple of element size, just like with typed array views.
	
	  Nice for quickly reading in data. Warning: potentially modifies the buffer
	  contents.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} Float64Array to the DataStream backing buffer.
	  */
	DataStream.prototype.mapFloat64Array = function(length, e) {
	  this._realloc(length * 8);
	  var arr = new Float64Array(this._buffer, this.byteOffset+this.position, length);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += length * 8;
	  return arr;
	};
	
	/**
	  Maps a Float32Array into the DataStream buffer, swizzling it to native
	  endianness in-place. The current offset from the start of the buffer needs to
	  be a multiple of element size, just like with typed array views.
	
	  Nice for quickly reading in data. Warning: potentially modifies the buffer
	  contents.
	
	  @param {number} length Number of elements to map.
	  @param {?boolean} e Endianness of the data to read.
	  @return {Object} Float32Array to the DataStream backing buffer.
	  */
	DataStream.prototype.mapFloat32Array = function(length, e) {
	  this._realloc(length * 4);
	  var arr = new Float32Array(this._buffer, this.byteOffset+this.position, length);
	  DataStream.arrayToNative(arr, e == null ? this.endianness : e);
	  this.position += length * 4;
	  return arr;
	};
	// file:src/buffer.js
	/**
	 * MultiBufferStream is a class that acts as a SimpleStream for parsing 
	 * It holds several, possibly non-contiguous ArrayBuffer objects, each with a fileStart property 
	 * containing the offset for the buffer data in an original/virtual file 
	 *
	 * It inherits also from DataStream for all read/write/alloc operations
	 */
	
	/**
	 * Constructor
	 */
	var MultiBufferStream = function(buffer) {
		/* List of ArrayBuffers, with a fileStart property, sorted in fileStart order and non overlapping */
		this.buffers = [];	
		this.bufferIndex = -1;
		if (buffer) {
			this.insertBuffer(buffer);
			this.bufferIndex = 0;
		}
	}
	MultiBufferStream.prototype = new DataStream(new ArrayBuffer(), 0, DataStream.BIG_ENDIAN);
	
	/************************************************************************************
	  Methods for the managnement of the buffers (insertion, removal, concatenation, ...)
	 ***********************************************************************************/
	
	MultiBufferStream.prototype.initialized = function() {
		var firstBuffer;
		if (this.bufferIndex > -1) {
			return true;
		} else if (this.buffers.length > 0) {
			firstBuffer = this.buffers[0];
			if (firstBuffer.fileStart === 0) {
				this.buffer = firstBuffer;
				this.bufferIndex = 0;
				Log.debug("MultiBufferStream", "Stream ready for parsing");
				return true;
			} else {
				Log.warn("MultiBufferStream", "The first buffer should have a fileStart of 0");
				this.logBufferLevel();
				return false;
			}
		} else {
			Log.warn("MultiBufferStream", "No buffer to start parsing from");
			this.logBufferLevel();
			return false;
		}			
	}
	
	/**
	 * helper functions to concatenate two ArrayBuffer objects
	 * @param  {ArrayBuffer} buffer1 
	 * @param  {ArrayBuffer} buffer2 
	 * @return {ArrayBuffer} the concatenation of buffer1 and buffer2 in that order
	 */
	ArrayBuffer.concat = function(buffer1, buffer2) {
	  Log.debug("ArrayBuffer", "Trying to create a new buffer of size: "+(buffer1.byteLength + buffer2.byteLength));
	  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
	  tmp.set(new Uint8Array(buffer1), 0);
	  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
	  return tmp.buffer;
	};
	
	/**
	 * Reduces the size of a given buffer, but taking the part between offset and offset+newlength
	 * @param  {ArrayBuffer} buffer    
	 * @param  {Number}      offset    the start of new buffer
	 * @param  {Number}      newLength the length of the new buffer
	 * @return {ArrayBuffer}           the new buffer
	 */
	MultiBufferStream.prototype.reduceBuffer = function(buffer, offset, newLength) {
		var smallB;
		smallB = new Uint8Array(newLength);
		smallB.set(new Uint8Array(buffer, offset, newLength));
		smallB.buffer.fileStart = buffer.fileStart+offset;
		smallB.buffer.usedBytes = 0;
		return smallB.buffer;	
	}
	
	/**
	 * Inserts the new buffer in the sorted list of buffers,
	 *  making sure, it is not overlapping with existing ones (possibly reducing its size).
	 *  if the new buffer overrides/replaces the 0-th buffer (for instance because it is bigger), 
	 *  updates the DataStream buffer for parsing 
	*/
	MultiBufferStream.prototype.insertBuffer = function(ab) {	
		var to_add = true;
		/* TODO: improve insertion if many buffers */
		for (var i = 0; i < this.buffers.length; i++) {
			var b = this.buffers[i];
			if (ab.fileStart <= b.fileStart) {
				/* the insertion position is found */
				if (ab.fileStart === b.fileStart) {
					/* The new buffer overlaps with an existing buffer */
					if (ab.byteLength >  b.byteLength) {
						/* the new buffer is bigger than the existing one
						   remove the existing buffer and try again to insert 
						   the new buffer to check overlap with the next ones */
						this.buffers.splice(i, 1);
						i--; 
						continue;
					} else {
						/* the new buffer is smaller than the existing one, just drop it */
						Log.warn("MultiBufferStream", "Buffer (fileStart: "+ab.fileStart+" - Length: "+ab.byteLength+") already appended, ignoring");
					}
				} else {
					/* The beginning of the new buffer is not overlapping with an existing buffer
					   let's check the end of it */
					if (ab.fileStart + ab.byteLength <= b.fileStart) {
						/* no overlap, we can add it as is */
					} else {
						/* There is some overlap, cut the new buffer short, and add it*/
						ab = this.reduceBuffer(ab, 0, b.fileStart - ab.fileStart);
					}
					Log.debug("MultiBufferStream", "Appending new buffer (fileStart: "+ab.fileStart+" - Length: "+ab.byteLength+")");
					this.buffers.splice(i, 0, ab);
					/* if this new buffer is inserted in the first place in the list of the buffer, 
					   and the DataStream is initialized, make it the buffer used for parsing */
					if (i === 0) {
						this.buffer = ab;
					}
				}
				to_add = false;
				break;
			} else if (ab.fileStart < b.fileStart + b.byteLength) {
				/* the new buffer overlaps its beginning with the end of the current buffer */
				var offset = b.fileStart + b.byteLength - ab.fileStart;
				var newLength = ab.byteLength - offset;
				if (newLength > 0) {
					/* the new buffer is bigger than the current overlap, drop the overlapping part and try again inserting the remaining buffer */
					ab = this.reduceBuffer(ab, offset, newLength);
				} else {
					/* the content of the new buffer is entirely contained in the existing buffer, drop it entirely */
					to_add = false;
					break;
				}
			}
		}
		/* if the buffer has not been added, we can add it at the end */
		if (to_add) {
			Log.debug("MultiBufferStream", "Appending new buffer (fileStart: "+ab.fileStart+" - Length: "+ab.byteLength+")");
			this.buffers.push(ab);
			/* if this new buffer is inserted in the first place in the list of the buffer, 
			   and the DataStream is initialized, make it the buffer used for parsing */
			if (i === 0) {
				this.buffer = ab;
			}
		}
	}
	
	/**
	 * Displays the status of the buffers (number and used bytes)
	 * @param  {Object} info callback method for display
	 */
	MultiBufferStream.prototype.logBufferLevel = function(info) {
		var i;
		var buffer;
		var used, total;
		var ranges = [];
		var range;
		var bufferedString = "";
		used = 0;
		total = 0;
		for (i = 0; i < this.buffers.length; i++) {
			buffer = this.buffers[i];
			if (i === 0) {
				range = {};
				ranges.push(range);
				range.start = buffer.fileStart;
				range.end = buffer.fileStart+buffer.byteLength;
				bufferedString += "["+range.start+"-";
			} else if (range.end === buffer.fileStart) {
				range.end = buffer.fileStart+buffer.byteLength;
			} else {
				range = {};
				range.start = buffer.fileStart;
				bufferedString += (ranges[ranges.length-1].end-1)+"], ["+range.start+"-";
				range.end = buffer.fileStart+buffer.byteLength;
				ranges.push(range);
			}
			used += buffer.usedBytes;
			total += buffer.byteLength;
		}
		if (ranges.length > 0) {
			bufferedString += (range.end-1)+"]";
		}
		var log = (info ? Log.info : Log.debug)
		if (this.buffers.length === 0) {
			log("MultiBufferStream", "No more buffer in memory");
		} else {
			log("MultiBufferStream", ""+this.buffers.length+" stored buffer(s) ("+used+"/"+total+" bytes): "+bufferedString);
		}
	}
	
	MultiBufferStream.prototype.cleanBuffers = function () {
		var i;
		var buffer;
		for (i = 0; i < this.buffers.length; i++) {
			buffer = this.buffers[i];
			if (buffer.usedBytes === buffer.byteLength) {
				Log.debug("MultiBufferStream", "Removing buffer #"+i);
				this.buffers.splice(i, 1);
				i--;
			}
		}
	}
	
	MultiBufferStream.prototype.mergeNextBuffer = function() {
		var next_buffer;
		if (this.bufferIndex+1 < this.buffers.length) {
			next_buffer = this.buffers[this.bufferIndex+1];
			if (next_buffer.fileStart === this.buffer.fileStart + this.buffer.byteLength) {
				var oldLength = this.buffer.byteLength;
				var oldUsedBytes = this.buffer.usedBytes;
				var oldFileStart = this.buffer.fileStart;
				this.buffers[this.bufferIndex] = ArrayBuffer.concat(this.buffer, next_buffer);
				this.buffer = this.buffers[this.bufferIndex];
				this.buffers.splice(this.bufferIndex+1, 1);
				this.buffer.usedBytes = oldUsedBytes; /* TODO: should it be += ? */
				this.buffer.fileStart = oldFileStart;
				Log.debug("ISOFile", "Concatenating buffer for box parsing (length: "+oldLength+"->"+this.buffer.byteLength+")");
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	
	
	/*************************************************************************
	  Seek-related functions
	 *************************************************************************/
	
	/**
	 * Finds the buffer that holds the given file position
	 * @param  {Boolean} fromStart    indicates if the search should start from the current buffer (false) 
	 *                                or from the first buffer (true)
	 * @param  {Number}  filePosition position in the file to seek to
	 * @param  {Boolean} markAsUsed   indicates if the bytes in between the current position and the seek position 
	 *                                should be marked as used for garbage collection
	 * @return {Number}               the index of the buffer holding the seeked file position, -1 if not found.
	 */
	MultiBufferStream.prototype.findPosition = function(fromStart, filePosition, markAsUsed) {
		var i;
		var abuffer = null;
		var index = -1;
	
		/* find the buffer with the largest position smaller than the given position */
		if (fromStart === true) {
		   /* the reposition can be in the past, we need to check from the beginning of the list of buffers */
			i = 0;
		} else {
			i = this.bufferIndex;
		}
	
		while (i < this.buffers.length) {
			abuffer = this.buffers[i];
			if (abuffer.fileStart <= filePosition) {
				index = i;
				if (markAsUsed) {
					if (abuffer.fileStart + abuffer.byteLength <= filePosition) {
						abuffer.usedBytes = abuffer.byteLength;	
					} else {
						abuffer.usedBytes = filePosition - abuffer.fileStart;
					}		
					this.logBufferLevel();	
				}
			} else {
				break;
			}
			i++;
		}
	
		if (index !== -1) {
			abuffer = this.buffers[index];
			if (abuffer.fileStart + abuffer.byteLength >= filePosition) {			
				Log.debug("MultiBufferStream", "Found position in existing buffer #"+index);
				return index;
			} else {
				return -1;
			}
		} else {
			return -1;
		}
	}
	
	/**
	 * Finds the largest file position contained in a buffer or in the next buffers if they are contiguous (no gap)
	 * starting from the given buffer index or from the current buffer if the index is not given
	 *
	 * @param  {Number} inputindex Index of the buffer to start from
	 * @return {Number}            The largest file position found in the buffers
	 */
	MultiBufferStream.prototype.findEndContiguousBuf = function(inputindex) {
		var i;
		var currentBuf;
		var nextBuf;
		var index = (inputindex !== undefined ? inputindex : this.bufferIndex);
		currentBuf = this.buffers[index];
		/* find the end of the contiguous range of data */
		if (this.buffers.length > index+1) {
			for (i = index+1; i < this.buffers.length; i++) {
				nextBuf = this.buffers[i];
				if (nextBuf.fileStart === currentBuf.fileStart + currentBuf.byteLength) {
					currentBuf = nextBuf;
				} else {
					break;
				}
			}
		}
		/* return the position of last byte in the file that we have */
		return currentBuf.fileStart + currentBuf.byteLength;
	}
	
	/**
	 * Returns the largest file position contained in the buffers, larger than the given position
	 * @param  {Number} pos the file position to start from
	 * @return {Number}     the largest position in the current buffer or in the buffer and the next contiguous 
	 *                      buffer that holds the given position
	 */
	MultiBufferStream.prototype.getEndFilePositionAfter = function(pos) {
		var index = this.findPosition(true, pos, false);
		if (index !== -1) {
			return this.findEndContiguousBuf(index);
		} else {
			return pos;
		}
	}
	
	/*************************************************************************
	  Garbage collection related functions
	 *************************************************************************/
	
	/**
	 * Marks a given number of bytes as used in the current buffer for garbage collection
	 * @param {Number} nbBytes 
	 */
	MultiBufferStream.prototype.addUsedBytes = function(nbBytes) {
		this.buffer.usedBytes += nbBytes;
		this.logBufferLevel();
	}
	
	/**
	 * Marks the entire current buffer as used, ready for garbage collection
	 */
	MultiBufferStream.prototype.setAllUsedBytes = function() {
		this.buffer.usedBytes = this.buffer.byteLength;
		this.logBufferLevel();
	}
	
	/*************************************************************************
	  Common API between MultiBufferStream and SimpleStream
	 *************************************************************************/
	
	/**
	 * Tries to seek to a given file position
	 * if possible, repositions the parsing from there and returns true 
	 * if not possible, does not change anything and returns false 
	 * @param  {Number}  filePosition position in the file to seek to
	 * @param  {Boolean} fromStart    indicates if the search should start from the current buffer (false) 
	 *                                or from the first buffer (true)
	 * @param  {Boolean} markAsUsed   indicates if the bytes in between the current position and the seek position 
	 *                                should be marked as used for garbage collection
	 * @return {Boolean}              true if the seek succeeded, false otherwise
	 */
	MultiBufferStream.prototype.seek = function(filePosition, fromStart, markAsUsed) {
		var index;
		index = this.findPosition(fromStart, filePosition, markAsUsed);
		if (index !== -1) {
			this.buffer = this.buffers[index];
			this.bufferIndex = index;
			this.position = filePosition - this.buffer.fileStart;
			Log.debug("MultiBufferStream", "Repositioning parser at buffer position: "+this.position);
			return true;
		} else {
			Log.debug("MultiBufferStream", "Position "+filePosition+" not found in buffered data");
			return false;
		}
	}
	
	/**
	 * Returns the current position in the file
	 * @return {Number} the position in the file
	 */
	MultiBufferStream.prototype.getPosition = function() {
		if (this.bufferIndex === -1 || this.buffers[this.bufferIndex] === null) {
			throw "Error accessing position in the MultiBufferStream";
		}
		return this.buffers[this.bufferIndex].fileStart+this.position;
	}
	
	/**
	 * Returns the length of the current buffer
	 * @return {Number} the length of the current buffer
	 */
	MultiBufferStream.prototype.getLength = function() {
		return this.byteLength;
	}
	
	MultiBufferStream.prototype.getEndPosition = function() {
		if (this.bufferIndex === -1 || this.buffers[this.bufferIndex] === null) {
			throw "Error accessing position in the MultiBufferStream";
		}
		return this.buffers[this.bufferIndex].fileStart+this.byteLength;
	}
	
	// file:src/descriptor.js
	/* 
	 * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato
	 * License: BSD-3-Clause (see LICENSE file)
	 */
	var MPEG4DescriptorParser = function () {
		var ES_DescrTag 			= 0x03;
		var DecoderConfigDescrTag 	= 0x04;
		var DecSpecificInfoTag 		= 0x05;
		var SLConfigDescrTag 		= 0x06;
	
		var descTagToName = [];
		descTagToName[ES_DescrTag] 				= "ES_Descriptor";
		descTagToName[DecoderConfigDescrTag] 	= "DecoderConfigDescriptor";
		descTagToName[DecSpecificInfoTag] 		= "DecoderSpecificInfo";
		descTagToName[SLConfigDescrTag] 		= "SLConfigDescriptor";
	
		var that = this;
		var classes = {};
			
		this.parseOneDescriptor = function (stream) {
			var hdrSize = 0;
			var size = 0;
			var tag;
			var desc;
			var byteRead;
			tag = stream.readUint8();
			hdrSize++;
			byteRead = stream.readUint8();
			hdrSize++;
			while (byteRead & 0x80) {		
				size = (byteRead & 0x7F)<<7;
				byteRead = stream.readUint8();
				hdrSize++;
			} 
			size += byteRead & 0x7F;
			Log.debug("MPEG4DescriptorParser", "Found "+(descTagToName[tag] || "Descriptor "+tag)+", size "+size+" at position "+stream.getPosition());
			if (descTagToName[tag]) {
				desc = new classes[descTagToName[tag]](size);
			} else {
				desc = new classes.Descriptor(size);
			}
			desc.parse(stream);
			return desc;
		}
	
		classes.Descriptor = function(_tag, _size) {
			this.tag = _tag;
			this.size = _size;
			this.descs = [];
		}
	
		classes.Descriptor.prototype.parse = function (stream) {
			this.data = stream.readUint8Array(this.size);
		}
	
		classes.Descriptor.prototype.findDescriptor = function (tag) {
			for (var i = 0; i < this.descs.length; i++) {
				if (this.descs[i].tag == tag) {
					return this.descs[i];
				}
			}
			return null;
		}
	
		classes.Descriptor.prototype.parseRemainingDescriptors = function (stream) {
			var start = stream.position;
			while (stream.position < start+this.size) {
				var desc = that.parseOneDescriptor(stream);
				this.descs.push(desc);
			}
		}
	
		classes.ES_Descriptor = function (size) {
			classes.Descriptor.call(this, ES_DescrTag, size);
		}
		
		classes.ES_Descriptor.prototype = new classes.Descriptor();
	
		classes.ES_Descriptor.prototype.parse = function(stream) {
			this.ES_ID = stream.readUint16();
			this.flags = stream.readUint8();
			this.size -= 3;
			if (this.flags & 0x80) {
				this.dependsOn_ES_ID = stream.readUint16();
				this.size -= 2;
			} else {
				this.dependsOn_ES_ID = 0;
			}
			if (this.flags & 0x40) {
				var l = stream.readUint8();
				this.URL = stream.readString(l);
				this.size -= l+1;
			} else {
				this.URL = null;
			}
			if (this.flags & 0x20) {
				this.OCR_ES_ID = stream.readUint16();
				this.size -= 2;
			} else {
				this.OCR_ES_ID = 0;
			}
			this.parseRemainingDescriptors(stream);
		}
		
		classes.ES_Descriptor.prototype.getOTI = function(stream) {
			var dcd = this.findDescriptor(DecoderConfigDescrTag);
			if (dcd) {
				return dcd.oti;
			} else {
				return 0;
			}
		}
	
		classes.ES_Descriptor.prototype.getAudioConfig = function(stream) {
			var dcd = this.findDescriptor(DecoderConfigDescrTag);
			if (!dcd) return null;
			var dsi = dcd.findDescriptor(DecSpecificInfoTag);
			if (dsi && dsi.data) {
				return (dsi.data[0]& 0xF8) >> 3;
			} else {
				return null;
			}
		}
		
		classes.DecoderConfigDescriptor = function (size) {
			classes.Descriptor.call(this, DecoderConfigDescrTag, size);
		}	
		classes.DecoderConfigDescriptor.prototype = new classes.Descriptor();
	
		classes.DecoderConfigDescriptor.prototype.parse = function(stream) {
			this.oti = stream.readUint8();
			this.streamType = stream.readUint8();
			this.bufferSize = stream.readUint24();
			this.maxBitrate = stream.readUint32();
			this.avgBitrate = stream.readUint32();
			this.size -= 13;
			this.parseRemainingDescriptors(stream);
		}
	
		classes.DecoderSpecificInfo = function (size) {
			classes.Descriptor.call(this, DecSpecificInfoTag, size);
		}
		classes.DecoderSpecificInfo.prototype = new classes.Descriptor();
	
		classes.SLConfigDescriptor = function (size) {
			classes.Descriptor.call(this, SLConfigDescrTag, size);
		}
		classes.SLConfigDescriptor.prototype = new classes.Descriptor();
		
		return this;
	}
	// file:src/box.js
	/* 
	 * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato
	 * License: BSD-3-Clause (see LICENSE file)
	 */
	var BoxParser = {
		ERR_INVALID_DATA : -1,
		ERR_NOT_ENOUGH_DATA : 0,
		OK : 1,
		boxCodes : [ 
					 "mdat", "idat", "free", "skip",
					 "avcC", "hvcC", "ftyp", "styp", 
					 "payl", "vttC",
					 "rtp ", "sdp ",
					 "btrt", "frma",
					 "trpy", "tpyl", "totl", "tpay", "dmed", "dimm", "drep", "nump", "npck", "maxr", "tmin", "tmax", "dmax", "pmax", "payt",
					 "vmhd", "smhd", "hmhd", // full boxes not yet parsed
					 "idat", "meco",
					 "udta", "strk",
					 "free", "skip"
				   ],
		fullBoxCodes : [ "mvhd", "tkhd", "mdhd", "hdlr", "vmhd", "smhd", "hmhd", "nmhd", "url ", "urn ", 
					  "ctts", "cslg", "stco", "co64", "stsc", "stss", "stsz", "stz2", "stts", "stsh", 
					  "mehd", "trex", "mfhd", "tfhd", "trun", "tfdt",
					  "esds", "subs",
					  "txtC",
					  "sidx", "emsg", "prft", "pssh",
					  "elst", "dref", "url ", "urn ",
					  "sbgp", "sgpd",
					  "cprt",
					  "iods",
					  "ssix", "tfra", "mfro", "pdin", "tsel",
					  "trep", "leva", "stri", "stsg",
					  "schm", 
					  "stvi", 
					  "padb", "stdp", "sdtp", "saio", "saiz",
					  "meta", "xml ", "bxml", "iloc", "pitm", "ipro", "iinf", "infe", "iref" , "mere", 
					  "kind", "elng",
					  /* missing "stsd", "iref", : special case full box and container */
					],
		containerBoxCodes : [ 
			[ "moov", [ "trak", "sidx" ] ],
			[ "trak" ],
			[ "edts" ],
			[ "mdia" ],
			[ "minf" ],
			[ "dinf" ],
			[ "stbl", [ "sgpd", "sbgp" ] ],
			[ "mvex", [ "trex" ] ],
			[ "moof", [ "traf" ] ],
			[ "traf", [ "trun", "sgpd", "sbgp" ] ],
			[ "vttc" ], 
			[ "tref" ],
			[ "iref" ],
			[ "udta" ],
			[ "mfra" ],
			[ "meco" ],
			[ "hnti" ],
			[ "hinf" ],
			[ "strk" ],
			[ "strd" ],
			[ "sinf" ],
			[ "rinf" ],
			[ "schi" ],
			[ "trgr" ],
			[ "udta", ["kind"] ],
			[ "iprp" ],
			[ "wave" ]
		],
		sampleEntryCodes : [ 
			/* 4CC as registered on http://mp4ra.org/codecs.html */
			{ prefix: "Visual", types: [ "mp4v", "avc1", "avc2", "avc3", "avc4", "avcp", "drac", "encv", "mjp2", "mvc1", "mvc2", "resv", "s263", "svc1", "vc-1", "hvc1", "hev1"  ] },
			{ prefix: "Audio", 	types: [ "mp4a", "ac-3", "alac", "dra1", "dtsc", "dtse", ,"dtsh", "dtsl", "ec-3", "enca", "g719", "g726", "m4ae", "mlpa",  "raw ", "samr", "sawb", "sawp", "sevc", "sqcp", "ssmv", "twos", ".mp3" ] },
			{ prefix: "Hint", 	types: [ "fdp ", "m2ts", "pm2t", "prtp", "rm2t", "rrtp", "rsrp", "rtp ", "sm2t", "srtp" ] },
			{ prefix: "Metadata", types: [ "metx", "mett", "urim" ] },
			{ prefix: "Subtitle", types: [ "stpp", "wvtt", "sbtt", "tx3g", "stxt" ] },
			{ prefix: "System", types: [ "mp4s"] }
		],
		sampleGroupEntryCodes: [
			"roll", "prol", "alst", "rap ", "tele", "avss", "avll", "sync", "tscl", "tsas", "stsa", "scif", "mvif", "scnm", "dtrt", "vipr", "tele", "rash"
		],
		trackGroupTypes: [ "msrc" ],
		initialize: function() {
			var i, j;
			var length;
			BoxParser.FullBox.prototype = new BoxParser.Box();
			BoxParser.ContainerBox.prototype = new BoxParser.Box();
			BoxParser.SampleEntry.prototype = new BoxParser.FullBox();
			BoxParser.TrackGroupTypeBox.prototype = new BoxParser.FullBox();
			/* creating constructors for simple boxes */
			length = BoxParser.boxCodes.length;
			for (i=0; i<length; i++) {
				BoxParser[BoxParser.boxCodes[i]+"Box"] = (function (j) { /* creating a closure around the iterating value of i */
					return function(size) {
						BoxParser.Box.call(this, BoxParser.boxCodes[j], size);
					}
				})(i);
				BoxParser[BoxParser.boxCodes[i]+"Box"].prototype = new BoxParser.Box();
			}
			/* creating constructors for full boxes */
			length = BoxParser.fullBoxCodes.length;
			for (i=0; i<length; i++) {
				BoxParser[BoxParser.fullBoxCodes[i]+"Box"] = (function (j) { 
					return function(size) {
						BoxParser.FullBox.call(this, BoxParser.fullBoxCodes[j], size);
					}
				})(i);
				BoxParser[BoxParser.fullBoxCodes[i]+"Box"].prototype = new BoxParser.FullBox();
			}
			/* creating constructors for container boxes */
			length = BoxParser.containerBoxCodes.length;
			for (i=0; i<length; i++) {
				BoxParser[BoxParser.containerBoxCodes[i][0]+"Box"] = (function (j, subBoxNames) { 
					return function(size) {
						BoxParser.ContainerBox.call(this, BoxParser.containerBoxCodes[j][0], size);
						if (subBoxNames) {
							this.subBoxNames = subBoxNames;
							var nbSubBoxes = subBoxNames.length;
							for (var k = 0; k<nbSubBoxes; k++) {
								this[subBoxNames[k]+"s"] = [];
							}
						}
					}
				})(i, BoxParser.containerBoxCodes[i][1]);
				BoxParser[BoxParser.containerBoxCodes[i][0]+"Box"].prototype = new BoxParser.ContainerBox();
			}
			/* creating constructors for stsd entries  */
			length = BoxParser.sampleEntryCodes.length;
			for (j = 0; j < length; j++) {
				var prefix = BoxParser.sampleEntryCodes[j].prefix;
				var types = BoxParser.sampleEntryCodes[j].types;
				var nb_types = types.length;
				BoxParser[prefix+"SampleEntry"] = function(type, size) { BoxParser.SampleEntry.call(this, type, size); };
				BoxParser[prefix+"SampleEntry"].prototype = new BoxParser.SampleEntry();
				for (i=0; i<nb_types; i++) {
					BoxParser[types[i]+"SampleEntry"] = (function (k, l) { 
						return function(size) {
							BoxParser[BoxParser.sampleEntryCodes[k].prefix+"SampleEntry"].call(this, BoxParser.sampleEntryCodes[k].types[l], size);
						}
					})(j, i);
					BoxParser[types[i]+"SampleEntry"].prototype = new BoxParser[prefix+"SampleEntry"]();
				}
			}
			/* creating constructors for stsd entries  */
			length = BoxParser.sampleGroupEntryCodes.length;
			for (i = 0; i < length; i++) {
				BoxParser[BoxParser.sampleGroupEntryCodes[i]+"SampleGroupEntry"] = (function (j) { 
					return function(size) {
						BoxParser.SampleGroupEntry.call(this, BoxParser.sampleGroupEntryCodes[j], size);
					}
				})(i);
				BoxParser[BoxParser.sampleGroupEntryCodes[i]+"SampleGroupEntry"].prototype = new BoxParser.SampleGroupEntry();
			}		
			/* creating constructors for track groups  */
			length = BoxParser.trackGroupTypes.length;
			for (i = 0; i < length; i++) {
				BoxParser[BoxParser.trackGroupTypes[i]+"Box"] = (function (j) { 
					return function(size) {
						BoxParser.TrackGroupTypeBox.call(this, BoxParser.trackGroupTypes[j], size);
					}
				})(i);
				BoxParser[BoxParser.trackGroupTypes[i]+"Box"].prototype = new BoxParser.TrackGroupTypeBox();
			}		
		},
		Box: function(_type, _size) {
			this.type = _type;
			this.size = _size;
		},
		FullBox: function(type, size) {
			BoxParser.Box.call(this, type, size);
			this.flags = 0;
			this.version = 0;
		},
		ContainerBox: function(type, size) {
			BoxParser.Box.call(this, type, size);
			this.boxes = [];
		},
		SampleEntry: function(type, size, hdr_size, start) {
			BoxParser.Box.call(this, type, size);	
			this.hdr_size = hdr_size;
			this.start = start;
			this.boxes = [];
		},
		SampleGroupEntry: function(type) {
			this.grouping_type = type;
		},
		TrackGroupTypeBox: function(type, size) {
			BoxParser.FullBox.call(this, type, size);
		}
	}
	
	BoxParser.initialize();
	
	BoxParser.TKHD_FLAG_ENABLED    = 0x000001;
	BoxParser.TKHD_FLAG_IN_MOVIE   = 0x000002;
	BoxParser.TKHD_FLAG_IN_PREVIEW = 0x000004;
	BoxParser.TKHD_FLAG_IN_POSTER  = 0x000008;
	
	BoxParser.TFHD_FLAG_BASE_DATA_OFFSET	= 0x01;
	BoxParser.TFHD_FLAG_SAMPLE_DESC			= 0x02;
	BoxParser.TFHD_FLAG_SAMPLE_DUR			= 0x08;
	BoxParser.TFHD_FLAG_SAMPLE_SIZE			= 0x10;
	BoxParser.TFHD_FLAG_SAMPLE_FLAGS		= 0x20;
	BoxParser.TFHD_FLAG_DUR_EMPTY			= 0x10000;
	BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF= 0x20000;
	
	BoxParser.TRUN_FLAGS_DATA_OFFSET= 0x01;
	BoxParser.TRUN_FLAGS_FIRST_FLAG	= 0x04;
	BoxParser.TRUN_FLAGS_DURATION	= 0x100;
	BoxParser.TRUN_FLAGS_SIZE		= 0x200;
	BoxParser.TRUN_FLAGS_FLAGS		= 0x400;
	BoxParser.TRUN_FLAGS_CTS_OFFSET	= 0x800;
	
	BoxParser.Box.prototype.add = function(name) {
		var i, j;
		var box = new BoxParser[name+"Box"]();
		this.boxes.push(box);
		if (this[name+"s"]) {
			this[name+"s"].push(box);
		} else {
			this[name] = box;
		}
		return box;
	}
	
	BoxParser.Box.prototype.set = function(prop, value) {
		this[prop] = value;
		return this;
	}
	
	BoxParser.Box.prototype.addEntry = function(value, _prop) {
		var prop = _prop || "entries";
		if (!this[prop]) {
			this[prop] = [];
		}
		this[prop].push(value);
		return this;
	}
	
	if (true) {
		exports.BoxParser = BoxParser;
	}
	// file:src/box-codecs.js
	BoxParser.SampleEntry.prototype.isVideo = function() {
		return false;
	}
	
	BoxParser.SampleEntry.prototype.isAudio = function() {
		return false;
	}
	
	BoxParser.SampleEntry.prototype.isSubtitle = function() {
		return false;
	}
	
	BoxParser.SampleEntry.prototype.isMetadata = function() {
		return false;
	}
	
	BoxParser.SampleEntry.prototype.isHint = function() {
		return false;
	}
	
	BoxParser.SampleEntry.prototype.getCodec = function() {
		return this.type.replace('.','');
	}
	
	BoxParser.SampleEntry.prototype.getWidth = function() {
		return "";
	}
	
	BoxParser.SampleEntry.prototype.getHeight = function() {
		return "";
	}
	
	BoxParser.SampleEntry.prototype.getChannelCount = function() {
		return "";
	}
	
	BoxParser.SampleEntry.prototype.getSampleRate = function() {
		return "";
	}
	
	BoxParser.SampleEntry.prototype.getSampleSize = function() {
		return "";
	}
	
	BoxParser.VisualSampleEntry.prototype.isVideo = function() {
		return true;
	}
	
	BoxParser.VisualSampleEntry.prototype.getWidth = function() {
		return this.width;
	}
	
	BoxParser.VisualSampleEntry.prototype.getHeight = function() {
		return this.height;
	}
	
	BoxParser.AudioSampleEntry.prototype.isAudio = function() {
		return true;
	}
	
	BoxParser.AudioSampleEntry.prototype.getChannelCount = function() {
		return this.channel_count;
	}
	
	BoxParser.AudioSampleEntry.prototype.getSampleRate = function() {
		return this.samplerate;
	}
	
	BoxParser.AudioSampleEntry.prototype.getSampleSize = function() {
		return this.samplesize;
	}
	
	BoxParser.SubtitleSampleEntry.prototype.isSubtitle = function() {
		return true;
	}
	
	BoxParser.MetadataSampleEntry.prototype.isMetadata = function() {
		return true;
	}
	
	
	BoxParser.decimalToHex = function(d, padding) {
		var hex = Number(d).toString(16);
		padding = typeof (padding) === "undefined" || padding === null ? padding = 2 : padding;
		while (hex.length < padding) {
			hex = "0" + hex;
		}
		return hex;
	}
	
	BoxParser.avc1SampleEntry.prototype.getCodec = function() {
		var baseCodec = BoxParser.SampleEntry.prototype.getCodec.call(this);
		if (this.avcC) {
			return baseCodec+"."+BoxParser.decimalToHex(this.avcC.AVCProfileIndication)+
							  ""+BoxParser.decimalToHex(this.avcC.profile_compatibility)+
							  ""+BoxParser.decimalToHex(this.avcC.AVCLevelIndication);		
		} else {
			return baseCodec;
		}
	}
	
	BoxParser.hvc1SampleEntry.prototype.getCodec = function() {
		var i;
		var baseCodec = BoxParser.SampleEntry.prototype.getCodec.call(this);
		if (this.hvcC) {
			baseCodec += '.';
			switch (this.hvcC.general_profile_space) {
				case 0: 
					baseCodec += '';
					break;
				case 1: 
					baseCodec += 'A';
					break;
				case 2: 
					baseCodec += 'B';
					break;
				case 3: 
					baseCodec += 'C';
					break;
			
			}
			baseCodec += this.hvcC.general_profile_idc;
			baseCodec += '.';
			var val = this.hvcC.general_profile_compatibility;
			var reversed = 0;
			for (i=0; i<32; i++) {
				reversed |= val & 1;
				if (i==31) break;
				reversed <<= 1;
				val >>=1;
			}				
			baseCodec += BoxParser.decimalToHex(reversed, 0);
			baseCodec += '.';
			if (this.hvcC.general_tier_flag === 0) {
				baseCodec += 'L';
			} else {
				baseCodec += 'H';
			}
			baseCodec += this.hvcC.general_level_idc;
			var hasByte = false;
			var constraint_string = "";
			for (i = 5; i >= 0; i--) {
				if (this.hvcC.general_constraint_indicator[i] || hasByte) {
					constraint_string = "."+BoxParser.decimalToHex(this.hvcC.general_constraint_indicator[i], 0)+constraint_string;
					hasByte = true;
				}
			}
			baseCodec += constraint_string;
		} 
		return baseCodec;
	}
	
	BoxParser.mp4aSampleEntry.prototype.getCodec = function() {
		var baseCodec = BoxParser.SampleEntry.prototype.getCodec.call(this);
		var esds = this.esds || (this.wave || {}).esds;
		if (esds && esds.esd) {
			var oti = esds.esd.getOTI();
			var dsi = esds.esd.getAudioConfig();
			return baseCodec+"."+BoxParser.decimalToHex(oti)+(dsi ? "."+dsi: "");
		} else {
			return baseCodec;
		}
	}
	
	BoxParser.stxtSampleEntry.prototype.getCodec = function() {
		var baseCodec = BoxParser.SampleEntry.prototype.getCodec.call(this);
		if(this.mime_format) {
			return baseCodec + "." + this.mime_format;
		} else {
			return baseCodec
		}
	}
	// file:src/box-parse.js
	/* 
	 * Copyright (c) Telecom ParisTech/TSI/MM/GPAC Cyril Concolato
	 * License: BSD-3-Clause (see LICENSE file)
	 */
	BoxParser.parseOneBox = function(stream, headerOnly, parentSize) {
		var box;
		var start = stream.getPosition();
		var hdr_size = 0;
		var diff;
		var uuid;
		if (stream.getEndPosition() - start < 8) {
			Log.debug("BoxParser", "Not enough data in stream to parse the type and size of the box");
			return { code: BoxParser.ERR_NOT_ENOUGH_DATA };
		}
		var size = stream.readUint32();
	    if (size === 0) {
	        Log.debug("BoxParser", "Found terminator box at " + start);
	        return { code: BoxParser.OK };
	    }
		var type = stream.readString(4);
		Log.debug("BoxParser", "Found box of type "+type+" and size "+size+" at position "+start);
		hdr_size = 8;
		if (type == "uuid") {
			uuid = stream.readUint8Array(16);
			hdr_size += 16;
		}
		if (size == 1) {
			if (stream.getEndPosition() - stream.getPosition() < 8) {
				stream.seek(start);
				Log.warn("BoxParser", "Not enough data in stream to parse the extended size of the \""+type+"\" box");
				return { code: BoxParser.ERR_NOT_ENOUGH_DATA };
			}
			size = stream.readUint64();
			hdr_size += 8;
		} else if (size === 0) {
			/* box extends till the end of file */
			if (type !== "mdat") {
				throw "Unlimited box size not supported";
			}
		}
		if (parentSize && size > parentSize) {
			Log.error("BoxParser", "Box of type "+type+" has a size "+size+" greater than its container size "+parentSize);
			return { code: BoxParser.ERR_NOT_ENOUGH_DATA, type: type, size: size, hdr_size: hdr_size, start: start };
		}
		if (start + size > stream.getEndPosition()) {
			stream.seek(start);
			Log.warn("BoxParser", "Not enough data in stream to parse the entire \""+type+"\" box");
			return { code: BoxParser.ERR_NOT_ENOUGH_DATA, type: type, size: size, hdr_size: hdr_size, start: start };
		}
		if (headerOnly) {
			return { code: BoxParser.OK, type: type, size: size, hdr_size: hdr_size, start: start };
		} else {
			if (BoxParser[type+"Box"]) {
				box = new BoxParser[type+"Box"](size);
			} else {
				if (type !== "uuid") {
					Log.warn("BoxParser", "Unknown box type: "+type);
				}
				box = new BoxParser.Box(type, size);
				if (uuid) {
					box.uuid = uuid;
				}
			}
		}
		box.hdr_size = hdr_size;
		/* recording the position of the box in the input stream */
		box.start = start;
		if (box.write === BoxParser.Box.prototype.write && box.type !== "mdat") {
			Log.warn("BoxParser", box.type+" box writing not yet implemented, keeping unparsed data in memory for later write");
			box.parseDataAndRewind(stream);
		}
		box.parse(stream);
		diff = stream.getPosition() - (box.start+box.size);
		if (diff < 0) {
			Log.warn("BoxParser", "Parsing of box "+box.type+" did not read the entire indicated box data size (missing "+(-diff)+" bytes), seeking forward");
			stream.seek(box.start+box.size);
		} else if (diff > 0) {
			Log.error("BoxParser", "Parsing of box "+box.type+" read "+diff+" more bytes than the indicated box data size, seeking backwards");
			stream.seek(box.start+box.size);
		}
		return { code: BoxParser.OK, box: box, size: box.size };
	}
	
	BoxParser.Box.prototype.parse = function(stream) {
		if (this.type != "mdat") {
			this.data = stream.readUint8Array(this.size-this.hdr_size);
		} else {
			if (this.size === 0) {
				stream.seek(stream.getEndPosition());
			} else {
				stream.seek(this.start+this.size);
			}
		}
	}
	
	/* Used to parse a box without consuming its data, to allow detailled parsing
	   Useful for boxes for which a write method is not yet implemented */
	BoxParser.Box.prototype.parseDataAndRewind = function(stream) {
		this.data = stream.readUint8Array(this.size-this.hdr_size);
		// rewinding
		stream.position -= this.size-this.hdr_size;
	}
	
	BoxParser.FullBox.prototype.parseDataAndRewind = function(stream) {
		this.parseFullHeader(stream);
		this.data = stream.readUint8Array(this.size-this.hdr_size);
		// restore the header size as if the full header had not been parsed
		this.hdr_size -= 4;
		// rewinding
		stream.position -= this.size-this.hdr_size;
	}
	
	BoxParser.FullBox.prototype.parseFullHeader = function (stream) {
		this.version = stream.readUint8();
		this.flags = stream.readUint24();
		this.hdr_size += 4;
	}
	
	BoxParser.FullBox.prototype.parse = function (stream) {
		this.parseFullHeader(stream);
		this.data = stream.readUint8Array(this.size-this.hdr_size);
	}
	
	BoxParser.ContainerBox.prototype.parse = function(stream) {
		var ret;
		var box;
		while (stream.getPosition() < this.start+this.size) {
			ret = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));
			if (ret.code === BoxParser.OK) {
				box = ret.box;
				/* store the box in the 'boxes' array to preserve box order (for offset) but also store box in a property for more direct access */
				this.boxes.push(box);
				if (this.subBoxNames && this.subBoxNames.indexOf(box.type) != -1) {
					this[this.subBoxNames[this.subBoxNames.indexOf(box.type)]+"s"].push(box);
				} else {
					this[box.type] = box;
				}
			} else {
				return;
			}
		} 
	}
	
	BoxParser.Box.prototype.parseLanguage = function(stream) {
		this.language = stream.readUint16();
		var chars = [];
		chars[0] = (this.language>>10)&0x1F;
		chars[1] = (this.language>>5)&0x1F;
		chars[2] = (this.language)&0x1F;
		this.languageString = String.fromCharCode(chars[0]+0x60, chars[1]+0x60, chars[2]+0x60);
	}
	
	// file:src/parsing/TrackGroup.js
	BoxParser.TrackGroupTypeBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.track_group_id = stream.readUint32();
	}
	
	// file:src/parsing/TrakReference.js
	BoxParser.TrackReferenceTypeBox = function(type, size, hdr_size, start) {
		BoxParser.Box.call(this, type, size);
		this.hdr_size = hdr_size;
		this.start = start;
	}
	BoxParser.TrackReferenceTypeBox.prototype = new BoxParser.Box();
	BoxParser.TrackReferenceTypeBox.prototype.parse = function(stream) {
		this.track_ids = stream.readUint32Array((this.size-this.hdr_size)/4);
	}
	
	// file:src/parsing/avcC.js
	BoxParser.avcCBox.prototype.parse = function(stream) {
		var i;
		var nb_nalus;
		var length;
		var toparse;
		this.configurationVersion = stream.readUint8();
		this.AVCProfileIndication = stream.readUint8();
		this.profile_compatibility = stream.readUint8();
		this.AVCLevelIndication = stream.readUint8();
		this.lengthSizeMinusOne = (stream.readUint8() & 0x3);
		nb_nalus = (stream.readUint8() & 0x1F);
		toparse = this.size - this.hdr_size - 6;
		this.SPS = new Array(nb_nalus); 
		for (i = 0; i < nb_nalus; i++) {
			length = stream.readUint16();
			this.SPS[i] = stream.readUint8Array(length);
			toparse -= 2+length;
		}
		nb_nalus = stream.readUint8();
		toparse--;
		this.PPS = new Array(nb_nalus); 
		for (i = 0; i < nb_nalus; i++) {
			length = stream.readUint16();
			this.PPS[i] = stream.readUint8Array(length);
			toparse -= 2+length;
		}
		if (toparse>0) {
			this.ext = stream.readUint8Array(toparse);
		}
	}
	
	// file:src/parsing/btrt.js
	BoxParser.btrtBox.prototype.parse = function(stream) {
		this.bufferSizeDB = stream.readUint32();
		this.maxBitrate = stream.readUint32();
		this.avgBitrate = stream.readUint32();
	}
	
	// file:src/parsing/co64.js
	BoxParser.co64Box.prototype.parse = function(stream) {
		var entry_count;
		var i;
		this.parseFullHeader(stream);
		entry_count = stream.readUint32();
		this.chunk_offsets = [];
		if (this.version === 0) {
			for(i=0; i<entry_count; i++) {
				this.chunk_offsets.push(stream.readUint64());
			}
		}
	}
	
	// file:src/parsing/cprt.js
	BoxParser.cprtBox.prototype.parse = function (stream) {
		this.parseFullHeader(stream);
		this.parseLanguage(stream);
		this.notice = stream.readCString();
	}
	
	// file:src/parsing/cslg.js
	BoxParser.cslgBox.prototype.parse = function(stream) {
		var entry_count;
		this.parseFullHeader(stream);
		if (this.version === 0) {
			this.compositionToDTSShift = stream.readInt32(); /* signed */
			this.leastDecodeToDisplayDelta = stream.readInt32(); /* signed */
			this.greatestDecodeToDisplayDelta = stream.readInt32(); /* signed */
			this.compositionStartTime = stream.readInt32(); /* signed */
			this.compositionEndTime = stream.readInt32(); /* signed */
		}
	}
	
	// file:src/parsing/ctts.js
	BoxParser.cttsBox.prototype.parse = function(stream) {
		var entry_count;
		var i;
		this.parseFullHeader(stream);
		entry_count = stream.readUint32();
		this.sample_counts = [];
		this.sample_offsets = [];
		if (this.version === 0) {
			for(i=0; i<entry_count; i++) {
				this.sample_counts.push(stream.readUint32());
				/* some files are buggy and declare version=0 while using signed offsets. 
				   The likelyhood of using the most significant bit in a 32-bits time offset is very low,
				   so using signed value here as well */ 
				this.sample_offsets.push(stream.readInt32());
			}
		} else if (this.version == 1) {
			for(i=0; i<entry_count; i++) {
				this.sample_counts.push(stream.readUint32());
				this.sample_offsets.push(stream.readInt32()); /* signed */
			}
		} 
	}
	
	// file:src/parsing/dimm.js
	BoxParser.dimmBox.prototype.parse = function(stream) {
		this.bytessent = stream.readUint64();
	}
	
	// file:src/parsing/dmax.js
	BoxParser.dmaxBox.prototype.parse = function(stream) {
		this.time = stream.readUint32();
	}
	
	// file:src/parsing/dmed.js
	BoxParser.dmedBox.prototype.parse = function(stream) {
		this.bytessent = stream.readUint64();
	}
	
	// file:src/parsing/dref.js
	BoxParser.drefBox.prototype.parse = function(stream) {
		var ret;
		var box;
		this.parseFullHeader(stream);
		this.entries = [];
		var entry_count = stream.readUint32();
		for (var i = 0; i < entry_count; i++) {
			ret = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));
			if (ret.code === BoxParser.OK) {
				box = ret.box;
				this.entries.push(box);
			} else {
				return;
			}
		}
	}
	
	// file:src/parsing/drep.js
	BoxParser.drepBox.prototype.parse = function(stream) {
		this.bytessent = stream.readUint64();
	}
	
	// file:src/parsing/elng.js
	BoxParser.elngBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.extended_language = stream.readString(this.size-this.hdr_size);
	}
	
	// file:src/parsing/elst.js
	BoxParser.elstBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.entries = [];
		var entry_count = stream.readUint32();
		for (var i = 0; i < entry_count; i++) {
			var entry = {};
			this.entries.push(entry);
			if (this.version === 1) {
				entry.segment_duration = stream.readUint64();
				entry.media_time = stream.readInt64();
			} else {
				entry.segment_duration = stream.readUint32();
				entry.media_time = stream.readInt32();
			}
			entry.media_rate_integer = stream.readInt16();
			entry.media_rate_fraction = stream.readInt16();
		}
	}
	
	// file:src/parsing/emsg.js
	BoxParser.emsgBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.scheme_id_uri 				= stream.readCString();
		this.value 						= stream.readCString();
		this.timescale 					= stream.readUint32();
		this.presentation_time_delta 	= stream.readUint32();
		this.event_duration			 	= stream.readUint32();
		this.id 						= stream.readUint32();
		var message_size = this.size - this.hdr_size - (4*4 + (this.scheme_id_uri.length+1) + (this.value.length+1));
		this.message_data = stream.readUint8Array(message_size);
	}
	
	// file:src/parsing/esds.js
	BoxParser.esdsBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		var esd_data = stream.readUint8Array(this.size-this.hdr_size);
		if (typeof MPEG4DescriptorParser !== "undefined") {
			var esd_parser = new MPEG4DescriptorParser();
			this.esd = esd_parser.parseOneDescriptor(new DataStream(esd_data.buffer, 0, DataStream.BIG_ENDIAN));
		} 
	}
	
	// file:src/parsing/frma.js
	BoxParser.frmaBox.prototype.parse = function(stream) {
		this.data_format = stream.readString(4);
	}
	
	// file:src/parsing/ftyp.js
	BoxParser.ftypBox.prototype.parse = function(stream) {
		var toparse = this.size - this.hdr_size;
		this.major_brand = stream.readString(4);
		this.minor_version = stream.readUint32();
		toparse -= 8;
		this.compatible_brands = [];
		var i = 0;
		while (toparse>=4) {
			this.compatible_brands[i] = stream.readString(4);
			toparse -= 4;
			i++;
		}
	}
	
	// file:src/parsing/hdlr.js
	BoxParser.hdlrBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		if (this.version === 0) {
			this.componentType = stream.readString(4);
			this.componentSubType = stream.readString(4);
			stream.readUint32Array(3);
			this.name = stream.readCString(this.size-this.hdr_size-20);
	        if (this.name[this.name.length-1]==='\0') {
	            this.name = this.name.slice(0,-1);
	        }
		} else {
			this.data = stream.readUint8Array(this.size-this.hdr_size);
		}
	}
	
	// file:src/parsing/hvcC.js
	BoxParser.hvcCBox.prototype.parse = function(stream) {
		var i, j;
		var nb_nalus;
		var length;
		var tmp_byte;
		this.configurationVersion = stream.readUint8();
		tmp_byte = stream.readUint8();
		this.general_profile_space = tmp_byte >> 6;
		this.general_tier_flag = (tmp_byte & 0x20) >> 5;
		this.general_profile_idc = (tmp_byte & 0x1F);
		this.general_profile_compatibility = stream.readUint32();
		this.general_constraint_indicator = stream.readUint8Array(6);
		this.general_level_idc = stream.readUint8();
		this.min_spatial_segmentation_idc = stream.readUint16() & 0xFFF;
		this.parallelismType = (stream.readUint8() & 0x3);
		this.chromaFormat = (stream.readUint8() & 0x3);
		this.bitDepthLumaMinus8 = (stream.readUint8() & 0x7);
		this.bitDepthChromaMinus8 = (stream.readUint8() & 0x7);
		this.avgFrameRate = stream.readUint16();
		tmp_byte = stream.readUint8();
		this.constantFrameRate = (tmp_byte >> 6);
		this.numTemporalLayers = (tmp_byte & 0XD) >> 3;
		this.temporalIdNested = (tmp_byte & 0X4) >> 2;
		this.lengthSizeMinusOne = (tmp_byte & 0X3);
	
		this.nalu_arrays = [];
		var numOfArrays = stream.readUint8();
		for (i = 0; i < numOfArrays; i++) {
			var nalu_array = [];
			this.nalu_arrays.push(nalu_array);
			tmp_byte = stream.readUint8()
			nalu_array.completeness = (tmp_byte & 0x80) >> 7;
			nalu_array.nalu_type = tmp_byte & 0x3F;
			var numNalus = stream.readUint16();
			for (j = 0; j < numNalus; j++) {
				var nalu = {}
				nalu_array.push(nalu);
				length = stream.readUint16();
				nalu.data   = stream.readUint8Array(length);
			}
		}
	}
	
	// file:src/parsing/iinf.js
	BoxParser.iinfBox.prototype.parse = function(stream) {
		var ret;
		this.parseFullHeader(stream);
		if (this.version === 0) {
			this.entry_count = stream.readUint16();
		} else {
			this.entry_count = stream.readUint32();
		}
		this.item_infos = [];
		for (var i = 0; i < this.entry_count; i++) {
			ret = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));
			if (ret.code === BoxParser.OK) {
				if (ret.box.type !== "infe") {
					Log.error("BoxParser", "Expected 'infe' box, got "+ret.box.type);
				}
				this.item_infos[i] = ret.box;
			} else {
				return;
			}
		}
	}
	
	// file:src/parsing/iloc.js
	BoxParser.ilocBox.prototype.parse = function(stream) {
		var byte;
		this.parseFullHeader(stream);
		byte = stream.readUint8();
		this.offset_size = (byte >> 4) & 0xF;
		this.length_size = byte & 0xF;
		byte = stream.readUint8();
		this.base_offset_size = (byte >> 4) & 0xF;
		if (this.version === 1 || this.version === 2) {
			this.index_size = byte & 0xF;
		} else {
			this.index_size = 0;		
			// reserved = byte & 0xF;
		}
		this.items = [];
		var item_count = 0;
		if (this.version < 2) {
			item_count = stream.readUint16();
		} else if (this.version === 2) {
			item_count = stream.readUint32();
		} else {
			throw "version of iloc box not supported";
		}
		for (var i = 0; i < item_count; i++) {
			var item = {};
			this.items.push(item);
			if (this.version < 2) {
				item.item_ID = stream.readUint16();
			} else if (this.version === 2) {
				item.item_ID = stream.readUint16();
			} else {
				throw "version of iloc box not supported";
			}
			if (this.version === 1 || this.version === 2) {
				item.construction_method = (stream.readUint16() & 0xF);
			} 
			item.data_reference_index = stream.readUint16();
			switch(this.base_offset_size) {
				case 0:
					item.base_offset = 0;
					break;
				case 4:
					item.base_offset = stream.readUint32();
					break;
				case 8:
					item.base_offset = stream.readUint64();
					break;
				default:
					throw "Error reading base offset size";
			}
			var extent_count = stream.readUint16();
			item.extents = [];
			for (var j=0; j < extent_count; j++) {
				var extent = {};
				item.extents.push(extent);
				if (this.version === 1 || this.version === 2) {
					switch(this.index_size) {
						case 0:
							extent.extent_index = 0;
							break;
						case 4:
							extent.extent_index = stream.readUint32();
							break;
						case 8:
							extent.extent_index = stream.readUint64();
							break;
						default:
							throw "Error reading extent index";
					}
				}
				switch(this.offset_size) {
					case 0:
						extent.extent_offset = 0;
						break;
					case 4:
						extent.extent_offset = stream.readUint32();
						break;
					case 8:
						extent.extent_offset = stream.readUint64();
						break;
					default:
						throw "Error reading extent index";
				}
				switch(this.length_size) {
					case 0:
						extent.extent_length = 0;
						break;
					case 4:
						extent.extent_length = stream.readUint32();
						break;
					case 8:
						extent.extent_length = stream.readUint64();
						break;
					default:
						throw "Error reading extent index";
				}
			}
		}
	}
	
	// file:src/parsing/infe.js
	BoxParser.infeBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		if (this.version === 0 || this.version === 1) {
			this.item_ID = stream.readUint16();
			this.item_protection_index = stream.readUint16();
			this.item_name = stream.readCString();
			this.content_type = stream.readCString();
			this.content_encoding = stream.readCString();
		}
		if (this.version === 1) {
			this.extension_type = stream.readString(4);
			Log.warn("BoxParser", "Cannot parse extension type");
			stream.seek(this.start+this.size);
			return;
		}
		if (this.version >= 2) {
			if (this.version === 2) {
				this.item_ID = stream.readUint16();
			} else if (this.version === 3) {
				this.item_ID = stream.readUint32();
			}
			this.item_protection_index = stream.readUint16();
			this.item_type = stream.readString(4);
			this.name = stream.readCString();
			if (this.item_type === "mime") {
				this.content_type = stream.readCString();
				this.content_encoding = stream.readCString();
			} else if (this.item_type === "uri ") {
				this.item_uri_type = stream.readCString();
			}
		}
	}
	// file:src/parsing/iref.js
	BoxParser.irefBox = function(size) {
		BoxParser.FullBox.call(this, "iref", size);
		this.references = [];
	}	
	BoxParser.irefBox.prototype = new BoxParser.FullBox();
	BoxParser.irefBox.prototype.parse = function(stream) {
		var ret;
		var entryCount;
		var box;
		this.parseFullHeader(stream);
	
		while (stream.getPosition() < this.start+this.size) {
			ret = BoxParser.parseOneBox(stream, true, this.size - (stream.getPosition() - this.start));
			if (ret.code === BoxParser.OK) {
				if (this.version === 0) {
					box = new BoxParser.SingleItemTypeReferenceBox(ret.type, ret.size, ret.hdr_size, ret.start);
				} else {
					box = new BoxParser.SingleItemTypeReferenceBoxLarge(ret.type, ret.size, ret.hdr_size, ret.start);
				}
				if (box.write === BoxParser.Box.prototype.write && box.type !== "mdat") {
					Log.warn("BoxParser", box.type+" box writing not yet implemented, keeping unparsed data in memory for later write");
					box.parseDataAndRewind(stream);
				}
				box.parse(stream);
				this.references.push(box);
			} else {
				return;
			}
		}
	}
	// file:src/parsing/kind.js
	BoxParser.kindBox = function(size) {
		BoxParser.FullBox.call(this, "kind", size);
		this.schemeURI = "";
		this.value = "";
	}	
	BoxParser.kindBox.prototype = new BoxParser.FullBox();
	BoxParser.kindBox.prototype.parse = function(stream) {
		var ret;
		this.parseFullHeader(stream);
		this.schemeURI = stream.readCString();
		this.value = stream.readCString();
	}
	// file:src/parsing/leva.js
	BoxParser.levaBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		var count = stream.readUint8();
		this.levels = [];
		for (var i = 0; i < count; i++) {
			var level = {};
			this.levels[i] = level;
			level.track_ID = stream.readUint32();
			var tmp_byte = stream.readUint8();
			level.padding_flag = tmp_byte >> 7;
			level.assignment_type = tmp_byte & 0x7F;
			switch (level.assignment_type) {
				case 0:
					level.grouping_type = stream.readUint32();
					break;
				case 1:
					level.grouping_type = stream.readUint32();
					level.grouping_type_parameter = stream.readUint32();
					break;
				case 2:
					break;
				case 3:
					break;
				case 4:
					level.sub_track_id = stream.readUint32();
					break;
				default:
					Log.warn("BoxParser", "Unknown leva assignement type");
			}
		}
	}
	
	// file:src/parsing/maxr.js
	BoxParser.maxrBox.prototype.parse = function(stream) {
		this.period = stream.readUint32();
		this.bytes = stream.readUint32();
	}
	
	// file:src/parsing/mdhd.js
	BoxParser.mdhdBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		if (this.version == 1) {
			this.creation_time = stream.readUint64();
			this.modification_time = stream.readUint64();
			this.timescale = stream.readUint32();
			this.duration = stream.readUint64();
		} else {
			this.creation_time = stream.readUint32();
			this.modification_time = stream.readUint32();
			this.timescale = stream.readUint32();
			this.duration = stream.readUint32();
		}
		this.parseLanguage(stream);
		stream.readUint16();
	}
	
	// file:src/parsing/mehd.js
	BoxParser.mehdBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);	
		if (this.flags | 0x1) {
			Log.warn("BoxParser", "mehd box incorrectly uses flags set to 1, converting version to 1");
			this.version = 1;
		}
		if (this.version == 1) {
			this.fragment_duration = stream.readUint64();
		} else {
			this.fragment_duration = stream.readUint32();
		}
	}
	
	// file:src/parsing/meta.js
	BoxParser.metaBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.boxes = [];
		BoxParser.ContainerBox.prototype.parse.call(this, stream);
	}
	// file:src/parsing/mfhd.js
	BoxParser.mfhdBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.sequence_number = stream.readUint32();
	}
	
	// file:src/parsing/mfro.js
	BoxParser.mfroBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this._size = stream.readUint32();
	}
	
	// file:src/parsing/mvhd.js
	BoxParser.mvhdBox.prototype.parse = function(stream) {
		this.flags = 0;
		this.parseFullHeader(stream);
		if (this.version == 1) {
			this.creation_time = stream.readUint64();
			this.modification_time = stream.readUint64();
			this.timescale = stream.readUint32();
			this.duration = stream.readUint64();
		} else {
			this.creation_time = stream.readUint32();
			this.modification_time = stream.readUint32();
			this.timescale = stream.readUint32();
			this.duration = stream.readUint32();
		}
		this.rate = stream.readUint32();
		this.volume = stream.readUint16()>>8;
		stream.readUint16();
		stream.readUint32Array(2);
		this.matrix = stream.readUint32Array(9);
		stream.readUint32Array(6);
		this.next_track_id = stream.readUint32();
	}
	
	// file:src/parsing/npck.js
	BoxParser.npckBox.prototype.parse = function(stream) {
		this.packetssent = stream.readUint32();
	}
	
	// file:src/parsing/nump.js
	BoxParser.numpBox.prototype.parse = function(stream) {
		this.packetssent = stream.readUint64();
	}
	
	// file:src/parsing/padb.js
	BoxParser.padbBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		var sample_count = stream.readUint32();
		this.padbits = [];
		for (var i = 0; i < Math.floor((sample_count+1)/2); i++) {
			this.padbits = stream.readUint8();
		}
	}
	
	// file:src/parsing/payl.js
	BoxParser.paylBox.prototype.parse = function(stream) {
		this.text = stream.readString(this.size - this.hdr_size);
	}
	
	// file:src/parsing/payt.js
	BoxParser.paytBox.prototype.parse = function(stream) {
		this.payloadID = stream.readUint32();
		var count = stream.readUint8();
		this.rtpmap_string = stream.readString(count);
	}
	
	// file:src/parsing/pdin.js
	BoxParser.pdinBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		var count = (this.size - this.hdr_size)/8;
		this.rate = [];
		this.initial_delay = [];
		for (var i = 0; i < count; i++) {
			this.rate[i] = stream.readUint32();
			this.initial_delay[i] = stream.readUint32();
		}
	}
	
	// file:src/parsing/pitm.js
	BoxParser.pitmBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		if (this.version === 0) {
			this.item_id = stream.readUint16();
		} else {
			this.item_id = stream.readUint32();
		}
	}
	
	// file:src/parsing/pmax.js
	BoxParser.pmaxBox.prototype.parse = function(stream) {
		this.bytes = stream.readUint32();
	}
	
	// file:src/parsing/prft.js
	BoxParser.prftBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.ref_track_id = stream.readUint32();
		this.ntp_timestamp = stream.readUint64();
		if (this.version === 0) {
			this.media_time = stream.readUint32();
		} else {
			this.media_time = stream.readUint64();
		}
	}
	
	// file:src/parsing/pssh.js
	BoxParser.psshBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.system_id = stream.readUint8Array(16);
		if (this.version > 0) {
			var count = stream.readUint32();
			this.kid = [];
			for (var i = 0; i < count; i++) {
				this.kid[i] = stream.readUint8Array(16);
			}
		} 
		var datasize = stream.readUint32();
		if (datasize > 0) {
			this.data = stream.readUint8Array(datasize);
		}
	}
	
	// file:src/parsing/rtp.js
	BoxParser["rtp Box"].prototype.parse = function(stream) {
		this.descriptionformat = stream.readString(4);
		this.sdptext = stream.readString(this.size - this.hdr_size - 4);
	}
	
	// file:src/parsing/saio.js
	BoxParser.saioBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		if (this.flags & 0x1) {
			this.aux_info_type = stream.readUint32();
			this.aux_info_type_parameter = stream.readUint32();
		}
		var count = stream.readUint32();
		this.offset = [];
		for (var i = 0; i < count; i++) {
			if (this.version === 0) {
				this.offset[i] = stream.readUint32();
			} else {
				this.offset[i] = stream.readUint64();
			}
		}
	}
	// file:src/parsing/saiz.js
	BoxParser.saizBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		if (this.flags & 0x1) {
			this.aux_info_type = stream.readUint32();
			this.aux_info_type_parameter = stream.readUint32();
		}
		this.default_sample_info_size = stream.readUint8();
		var count = stream.readUint32();
		this.sample_info_size = [];
		if (this.default_sample_info_size === 0) {	
			for (var i = 0; i < count; i++) {
				this.sample_info_size[i] = stream.readUint8();
			}
		}
	}
	
	// file:src/parsing/sampleentries/mett.js
	BoxParser.mettSampleEntry.prototype.parse = function(stream) {
		this.parseHeader(stream);
		this.content_encoding = stream.readCString();
		this.mime_format = stream.readCString();
		this.parseFooter(stream);
	}
	
	// file:src/parsing/sampleentries/metx.js
	BoxParser.metxSampleEntry.prototype.parse = function(stream) {
		this.parseHeader(stream);
		this.content_encoding = stream.readCString();
		this.namespace = stream.readCString();
		this.schema_location = stream.readCString();
		this.parseFooter(stream);
	}
	
	// file:src/parsing/sampleentries/sampleentry.js
	BoxParser.SampleEntry.prototype.parseHeader = function(stream) {
		stream.readUint8Array(6);
		this.data_reference_index = stream.readUint16();
		this.hdr_size += 8;
	}
	
	BoxParser.SampleEntry.prototype.parse = function(stream) {
		this.parseHeader(stream);
		this.data = stream.readUint8Array(this.size - this.hdr_size);
	}
	
	BoxParser.SampleEntry.prototype.parseDataAndRewind = function(stream) {
		this.parseHeader(stream);
		this.data = stream.readUint8Array(this.size - this.hdr_size);
		// restore the header size as if the sample entry header had not been parsed
		this.hdr_size -= 8;
		// rewinding
		stream.position -= this.size-this.hdr_size;
	}
	
	BoxParser.SampleEntry.prototype.parseFooter = function(stream) {
		var ret;
		var box;
		while (stream.getPosition() < this.start+this.size) {
			ret = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));
			if (ret.code === BoxParser.OK) {
				box = ret.box;
	            if (box) {
	                this.boxes.push(box);
	                this[box.type] = box;
	            } else {
	                // encountered terminator box
	                stream.position = this.start + this.size;
	            }
			} else {
				return;
			}
		}	
	}
	
	BoxParser.VisualSampleEntry.prototype.parse = function(stream) {
		this.parseHeader(stream);
		stream.readUint16(); 
		stream.readUint16();
		stream.readUint32Array(3);
		this.width = stream.readUint16();
		this.height = stream.readUint16();
		this.horizresolution = stream.readUint32();
		this.vertresolution = stream.readUint32();
		stream.readUint32();
		this.frame_count = stream.readUint16();
		this.compressorname = stream.readString(32);
		this.depth = stream.readUint16();
		stream.readUint16();
		this.parseFooter(stream);
	}
	
	BoxParser.AudioSampleEntry.prototype.parse = function(stream) {
	    this.parseHeader(stream);
	    this.version = stream.readUint16();
	    this.revision = stream.readUint16();
	    this.vendor = stream.readUint32();
	    this.channel_count = stream.readUint16();
	    this.samplesize = stream.readUint16();
	    this.compressionId = stream.readInt16();
	    this.packetSize = stream.readUint16();
	    this.samplerate = (stream.readUint32() / (1 << 16));
	    if (this.version == 1) {
	        this.samplesPerPacket = stream.readUint32();
	        this.bytesPerPacket = stream.readUint32();
	        this.bytesPerFrame = stream.readUint32();
	        this.bytesPerSample = stream.readUint32();
	    }
	    this.parseFooter(stream);
	}
	
	// file:src/parsing/sampleentries/sbtt.js
	BoxParser.sbttSampleEntry.prototype.parse = function(stream) {
		this.parseHeader(stream);
		this.content_encoding = stream.readCString();
		this.mime_format = stream.readCString();
		this.parseFooter(stream);
	}
	
	// file:src/parsing/sampleentries/stpp.js
	BoxParser.stppSampleEntry.prototype.parse = function(stream) {
		this.parseHeader(stream);
		this.namespace = stream.readCString();
		this.schema_location = stream.readCString();
		this.auxiliary_mime_types = stream.readCString();
		this.parseFooter(stream);
	}
	
	// file:src/parsing/sampleentries/stxt.js
	BoxParser.stxtSampleEntry.prototype.parse = function(stream) {
		this.parseHeader(stream);
		this.content_encoding = stream.readCString();
		this.mime_format = stream.readCString();
		this.parseFooter(stream);
	}
	
	// file:src/parsing/sampleentries/tx3g.js
	BoxParser.tx3gSampleEntry.prototype.parse = function(stream) {
		this.parseHeader(stream);
		this.displayFlags = stream.readUint32();
		this.horizontal_justification = stream.readInt8();
		this.vertical_justification = stream.readInt8();
		this.bg_color_rgba = stream.readUint8Array(4);
		this.box_record = stream.readInt16Array(4);
		this.style_record = stream.readUint8Array(12);
		this.parseFooter(stream);
	}
	// file:src/parsing/sampleentries/wvtt.js
	BoxParser.wvttSampleEntry.prototype.parse = function(stream) {
		this.parseHeader(stream);
		this.parseFooter(stream);
	}
	
	// file:src/parsing/samplegroups/alst.js
	BoxParser.alstSampleGroupEntry.prototype.parse = function(stream) {
		var i;
		var roll_count = stream.readUint16();
		this.first_output_sample = stream.readUint16();
		this.sample_offset = [];
		for (i = 0; i < roll_count; i++) {
			this.sample_offset[i] = stream.readUint32();
		}
		var remaining = this.description_length - 4 - 4*roll_count;
		this.num_output_samples = [];
		this.num_total_samples = [];
		for (i = 0; i < remaining/4; i++) {
			this.num_output_samples[i] = stream.readUint16();
			this.num_total_samples[i] = stream.readUint16();
		}
	}
	
	// file:src/parsing/samplegroups/avll.js
	BoxParser.avllSampleGroupEntry.prototype.parse = function(stream) {
		this.layerNumber = stream.readUint8();
		this.accurateStatisticsFlag = stream.readUint8();
		this.avgBitRate = stream.readUint16();
		this.avgFrameRate = stream.readUint16();
	}
	
	// file:src/parsing/samplegroups/avss.js
	BoxParser.avssSampleGroupEntry.prototype.parse = function(stream) {
		this.subSequenceIdentifier = stream.readUint16();
		this.layerNumber = stream.readUint8();
		var tmp_byte = stream.readUint8();
		this.durationFlag = tmp_byte >> 7;
		this.avgRateFlag = (tmp_byte >> 6) & 0x1;
		if (this.durationFlag) {
			this.duration = stream.readUint32();
		}
		if (this.avgRateFlag) {
			this.accurateStatisticsFlag = stream.readUint8();
			this.avgBitRate = stream.readUint16();
			this.avgFrameRate = stream.readUint16();
		}
		this.dependency = [];
		var numReferences = stream.readUint8();
		for (var i = 0; i < numReferences; i++) {
			var dependencyInfo = {};
			this.dependency.push(dependencyInfo);
			dependencyInfo.subSeqDirectionFlag = stream.readUint8();
			dependencyInfo.layerNumber = stream.readUint8();
			dependencyInfo.subSequenceIdentifier = stream.readUint16();
		}
	}
	
	// file:src/parsing/samplegroups/dtrt.js
	BoxParser.dtrtSampleGroupEntry.prototype.parse = function(stream) {
		Log.warn("BoxParser", "Sample Group type: "+this.grouping_type+" not fully parsed");
	}
	
	// file:src/parsing/samplegroups/mvif.js
	BoxParser.mvifSampleGroupEntry.prototype.parse = function(stream) {
		Log.warn("BoxParser", "Sample Group type: "+this.grouping_type+" not fully parsed");
	}
	
	// file:src/parsing/samplegroups/prol.js
	BoxParser.prolSampleGroupEntry.prototype.parse= function(stream) {
		this.roll_distance = stream.readInt16();
	}
	
	// file:src/parsing/samplegroups/rap.js
	BoxParser["rap SampleGroupEntry"].prototype.parse = function(stream) {
		var tmp_byte = stream.readUint8();
		this.num_leading_samples_known = tmp_byte >> 7;
		this.num_leading_samples = tmp_byte & 0x7F;
	}
	
	// file:src/parsing/samplegroups/rash.js
	BoxParser.rashSampleGroupEntry.prototype.parse = function(stream) {
		this.operation_point_count = stream.readUint16();
		if (this.description_length !== 2+(this.operation_point_count === 1?2:this.operation_point_count*6)+9) {
			Log.warn("BoxParser", "Mismatch in "+this.grouping_type+" sample group length");
			this.data =  stream.readUint8Array(this.description_length-2);
		} else {
			if (this.operation_point_count === 1) {
				this.target_rate_share = stream.readUint16();
			} else {
				this.target_rate_share = [];
				this.available_bitrate = [];
				for (var i = 0; i < this.operation_point_count; i++) {
					this.available_bitrate[i] = stream.readUint32();
					this.target_rate_share[i] = stream.readUint16();
				}
			}
			this.maximum_bitrate = stream.readUint32();
			this.minimum_bitrate = stream.readUint32();
			this.discard_priority = stream.readUint8();
		}
	}
	
	// file:src/parsing/samplegroups/roll.js
	BoxParser.rollSampleGroupEntry.prototype.parse = function(stream) {
		this.roll_distance = stream.readInt16();
	}
	
	// file:src/parsing/samplegroups/samplegroup.js
	BoxParser.SampleGroupEntry.prototype.parse = function(stream) {
		Log.warn("BoxParser", "Unknown Sample Group type: "+this.grouping_type);
		this.data =  stream.readUint8Array(this.description_length);
	}
	
	// file:src/parsing/samplegroups/scif.js
	BoxParser.scifSampleGroupEntry.prototype.parse = function(stream) {
		Log.warn("BoxParser", "Sample Group type: "+this.grouping_type+" not fully parsed");
	}
	
	// file:src/parsing/samplegroups/scnm.js
	BoxParser.scnmSampleGroupEntry.prototype.parse = function(stream) {
		Log.warn("BoxParser", "Sample Group type: "+this.grouping_type+" not fully parsed");
	}
	
	// file:src/parsing/samplegroups/stsa.js
	BoxParser.stsaSampleGroupEntry.prototype.parse = function(stream) {
		Log.warn("BoxParser", "Sample Group type: "+this.grouping_type+" not fully parsed");
	}
	
	// file:src/parsing/samplegroups/sync.js
	BoxParser.syncSampleGroupEntry.prototype.parse = function(stream) {
		var tmp_byte = stream.readUint8();
		this.NAL_unit_type = tmp_byte & 0x3F;
	}
	
	// file:src/parsing/samplegroups/tele.js
	BoxParser.teleSampleGroupEntry.prototype.parse = function(stream) {
		var tmp_byte = stream.readUint8();
		this.level_independently_decodable = tmp_byte >> 7;
	}
	
	// file:src/parsing/samplegroups/tsas.js
	BoxParser.tsasSampleGroupEntry.prototype.parse = function(stream) {
		Log.warn("BoxParser", "Sample Group type: "+this.grouping_type+" not fully parsed");
	}
	
	// file:src/parsing/samplegroups/tscl.js
	BoxParser.tsclSampleGroupEntry.prototype.parse = function(stream) {
		Log.warn("BoxParser", "Sample Group type: "+this.grouping_type+" not fully parsed");
	}
	
	// file:src/parsing/samplegroups/vipr.js
	BoxParser.viprSampleGroupEntry.prototype.parse = function(stream) {
		Log.warn("BoxParser", "Sample Group type: "+this.grouping_type+" not fully parsed");
	}
	
	// file:src/parsing/sbgp.js
	BoxParser.sbgpBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.grouping_type = stream.readString(4);
		if (this.version === 1) {
			this.grouping_type_parameter = stream.readUint32();
		} else {
			this.grouping_type_parameter = 0;
		}
		this.entries = [];
		var entry_count = stream.readUint32();
		for (var i = 0; i < entry_count; i++) {
			var entry = {};
			this.entries.push(entry);
			entry.sample_count = stream.readInt32();
			entry.group_description_index = stream.readInt32();
		}
	}
	
	// file:src/parsing/schm.js
	BoxParser.schmBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.scheme_type = stream.readString(4);
		this.scheme_version = stream.readUint32();
		if (this.flags & 0x000001) {
			this.scheme_uri = stream.readString(this.size - this.hdr_size - 8);
		}
	}
	
	// file:src/parsing/sdp.js
	BoxParser["sdp Box"].prototype.parse = function(stream) {
		this.sdptext = stream.readString(this.size - this.hdr_size);
	}
	
	// file:src/parsing/sdtp.js
	BoxParser.sdtpBox.prototype.parse = function(stream) {
		var tmp_byte;
		this.parseFullHeader(stream);
		var count = (this.size - this.hdr_size);
		this.is_leading = [];
		this.sample_depends_on = [];
		this.sample_is_depended_on = [];
		this.sample_has_redundancy = [];
		for (var i = 0; i < count; i++) {
			tmp_byte = stream.readUint8();
			this.is_leading[i] = tmp_byte >> 6;
			this.sample_depends_on[i] = (tmp_byte >> 4) & 0x3;
			this.sample_is_depended_on[i] = (tmp_byte >> 2) & 0x3;
			this.sample_has_redundancy[i] = tmp_byte & 0x3;
		}
	}
	
	// file:src/parsing/sgpd.js
	BoxParser.sgpdBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.grouping_type = stream.readString(4);
		Log.debug("BoxParser", "Found Sample Groups of type "+this.grouping_type);
		if (this.version === 1) {
			this.default_length = stream.readUint32();
		} else {
			this.default_length = 0;		
		}
		if (this.version >= 2) {
			this.default_group_description_index = stream.readUint32();
		}
		this.entries = [];
		var entry_count = stream.readUint32();
		for (var i = 0; i < entry_count; i++) {
			var entry;
			if (BoxParser[this.grouping_type+"SampleGroupEntry"]) {
				entry = new BoxParser[this.grouping_type+"SampleGroupEntry"](this.grouping_type);	
			}  else {
				entry = new BoxParser.SampleGroupEntry(this.grouping_type);	
			}
			this.entries.push(entry);
			if (this.version === 1) {
				if (this.default_length === 0) {
					entry.description_length = stream.readUint32();
				} else {
					entry.description_length = this.default_length;
				}
			} else {
				entry.description_length = this.default_length;			
			}
			if (entry.write === BoxParser.SampleGroupEntry.prototype.write) {
				Log.warn("BoxParser", " SampleEntry for type "+this.grouping_type+" writing not yet implemented, keeping unparsed data in memory for later write");
				// storing data
				entry.data = stream.readUint8Array(entry.description_length);
				// rewinding
				stream.position -= entry.description_length;
			}
			entry.parse(stream);
		}
	}
	
	// file:src/parsing/sidx.js
	BoxParser.sidxBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.reference_ID = stream.readUint32();
		this.timescale = stream.readUint32();
		if (this.version === 0) {
			this.earliest_presentation_time = stream.readUint32();
			this.first_offset = stream.readUint32();
		} else {
			this.earliest_presentation_time = stream.readUint64();
			this.first_offset = stream.readUint64();
		}
		stream.readUint16();
		this.references = [];
		var count = stream.readUint16();
		for (var i = 0; i < count; i++) {
			var ref = {};
			this.references.push(ref);
			var tmp_32 = stream.readUint32();
			ref.reference_type = (tmp_32 >> 31) & 0x1;
			ref.referenced_size = tmp_32 & 0x7FFFFFFF;
			ref.subsegment_duration = stream.readUint32();
			tmp_32 = stream.readUint32();
			ref.starts_with_SAP = (tmp_32 >> 31) & 0x1;
			ref.SAP_type = (tmp_32 >> 28) & 0x7;
			ref.SAP_delta_time = tmp_32 & 0xFFFFFFF;
		}
	}
	
	// file:src/parsing/singleitemtypereference.js
	BoxParser.SingleItemTypeReferenceBox = function(type, size, hdr_size, start) {
		BoxParser.Box.call(this, type, size);
		this.hdr_size = hdr_size;
		this.start = start;
	}
	BoxParser.SingleItemTypeReferenceBox.prototype = new BoxParser.Box();
	BoxParser.SingleItemTypeReferenceBox.prototype.parse = function(stream) {
		this.from_item_ID = stream.readUint16();
		var count =  stream.readUint16();
		this.references = [];
		for(var i = 0; i < count; i++) {
			this.references[i] = stream.readUint16();
		}
	}
	
	// file:src/parsing/singleitemtypereferencelarge.js
	BoxParser.SingleItemTypeReferenceBoxLarge = function(type, size, hdr_size, start) {
		BoxParser.Box.call(this, type, size);
		this.hdr_size = hdr_size;
		this.start = start;
	}
	BoxParser.SingleItemTypeReferenceBoxLarge.prototype = new BoxParser.Box();
	BoxParser.SingleItemTypeReferenceBoxLarge.prototype.parse = function(stream) {
		this.from_item_ID = stream.readUint32();
		var count =  stream.readUint16();
		this.references = [];
		for(var i = 0; i < count; i++) {
			this.references[i] = stream.readUint32();
		}
	}
	
	// file:src/parsing/ssix.js
	BoxParser.ssixBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.subsegments = [];
		var subsegment_count = stream.readUint32();
		for (var i = 0; i < subsegment_count; i++) {
			var subsegment = {};
			this.subsegments.push(subsegment);
			subsegment.ranges = [];
			var range_count = stream.readUint32();
			for (var j = 0; j < range_count; j++) {
				var range = {};
				subsegment.ranges.push(range);
				range.level = stream.readUint8();
				range.range_size = stream.readUint24();
			}
		}
	}
	
	// file:src/parsing/stco.js
	BoxParser.stcoBox.prototype.parse = function(stream) {
		var entry_count;
		this.parseFullHeader(stream);
		entry_count = stream.readUint32();
		if (this.version === 0) {
			this.chunk_offsets = stream.readUint32Array(entry_count);
		}
	}
	
	// file:src/parsing/stdp.js
	BoxParser.stdpBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		var count = (this.size - this.hdr_size)/2;
		this.priority = [];
		for (var i = 0; i < count; i++) {
			this.priority[i] = stream.readUint16();
		}
	}
	
	// file:src/parsing/stri.js
	BoxParser.striBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.switch_group = stream.readUint16();
		this.alternate_group = stream.readUint16();
		this.sub_track_id = stream.readUint32();
		var count = (this.size - this.hdr_size - 8)/4;
		this.attribute_list = [];
		for (var i = 0; i < count; i++) {
			this.attribute_list[i] = stream.readUint32();
		}
	}
	
	// file:src/parsing/stsc.js
	BoxParser.stscBox.prototype.parse = function(stream) {
		var entry_count;
		var i;
		this.parseFullHeader(stream);
		entry_count = stream.readUint32();
		this.first_chunk = [];
		this.samples_per_chunk = [];
		this.sample_description_index = [];
		if (this.version === 0) {
			for(i=0; i<entry_count; i++) {
				this.first_chunk.push(stream.readUint32());
				this.samples_per_chunk.push(stream.readUint32());
				this.sample_description_index.push(stream.readUint32());
			}
		}
	}
	
	// file:src/parsing/stsd.js
	BoxParser.stsdBox = function(size) {
		BoxParser.FullBox.call(this, "stsd", size);
		this.entries = [];
	};
	BoxParser.stsdBox.prototype = new BoxParser.FullBox();
	BoxParser.stsdBox.prototype.parse = function(stream) {
		var i;
		var ret;
		var entryCount;
		var box;
		this.parseFullHeader(stream);
		entryCount = stream.readUint32();
		for (i = 1; i <= entryCount; i++) {
			ret = BoxParser.parseOneBox(stream, true, this.size - (stream.getPosition() - this.start));
			if (ret.code === BoxParser.OK) {
				if (BoxParser[ret.type+"SampleEntry"]) {
					box = new BoxParser[ret.type+"SampleEntry"](ret.size);
					box.hdr_size = ret.hdr_size;
					box.start = ret.start;
				} else {
					Log.warn("BoxParser", "Unknown sample entry type: "+ret.type);
					box = new BoxParser.SampleEntry(ret.type, ret.size, ret.hdr_size, ret.start);
				}
				if (box.write === BoxParser.SampleEntry.prototype.write) {
					Log.warn("BoxParser", box.type+" box writing not yet implemented, keeping unparsed data in memory for later write");
					box.parseDataAndRewind(stream);
				}
				box.parse(stream);
				this.entries.push(box);
			} else {
				return;
			}
		} 
	}
	
	// file:src/parsing/stsg.js
	BoxParser.stsgBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.grouping_type = stream.readUint32();
		var count = stream.readUint16();
		this.group_description_index = [];
		for (var i = 0; i < count; i++) {
			this.group_description_index[i] = stream.readUint32();
		}
	}
	
	// file:src/parsing/stsh.js
	BoxParser.stshBox.prototype.parse = function(stream) {
		var entry_count;
		var i;
		this.parseFullHeader(stream);
		entry_count = stream.readUint32();
		this.shadowed_sample_numbers = [];
		this.sync_sample_numbers = [];
		if (this.version === 0) {
			for(i=0; i<entry_count; i++) {
				this.shadowed_sample_numbers.push(stream.readUint32());
				this.sync_sample_numbers.push(stream.readUint32());
			}
		}
	}
	
	// file:src/parsing/stss.js
	BoxParser.stssBox.prototype.parse = function(stream) {
		var i;
		var entry_count;
		this.parseFullHeader(stream);
		entry_count = stream.readUint32();
		if (this.version === 0) {
			this.sample_numbers = [];
			for(i=0; i<entry_count; i++) {
				this.sample_numbers.push(stream.readUint32());
			}
		}
	}
	
	// file:src/parsing/stsz.js
	BoxParser.stszBox.prototype.parse = function(stream) {
		var i;
		this.parseFullHeader(stream);
		this.sample_sizes = [];
		if (this.version === 0) {
			this.sample_size = stream.readUint32();
			this.sample_count = stream.readUint32();
			if (this.sample_size === 0) {
				this.sample_sizes = stream.readUint32Array(this.sample_count);
			} else {
				for (i = 0; i < this.sample_count; i++) {
					this.sample_sizes[i] = this.sample_size;
				}		
			}
		}
	}
	
	// file:src/parsing/stts.js
	BoxParser.sttsBox.prototype.parse = function(stream) {
		var entry_count;
		var i;
		var delta;
		this.parseFullHeader(stream);
		entry_count = stream.readUint32();
		this.sample_counts = [];
		this.sample_deltas = [];
		if (this.version === 0) {
			for(i=0; i<entry_count; i++) {
				this.sample_counts.push(stream.readUint32());
				delta = stream.readInt32();
				if (delta < 0) {
					Log.warn("BoxParser", "File uses negative stts sample delta, using value 1 instead, sync may be lost!");
					delta = 1;
				}
				this.sample_deltas.push(delta);
			}
		}
	}
	
	// file:src/parsing/stvi.js
	BoxParser.stviBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		var tmp32 = stream.readUint32();
		this.single_view_allowed = tmp32 & 0x3;
		this.stereo_scheme = stream.readUint32();
		var length = stream.readUint32();
		this.stereo_indication_type = stream.readString(length);
		var ret;
		var box;
		this.boxes = [];
		while (stream.getPosition() < this.start+this.size) {
			ret = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));
			if (ret.code === BoxParser.OK) {
				box = ret.box;
				this.boxes.push(box);
				this[box.type] = box;
			} else {
				return;
			}
		}		
	}
	
	// file:src/parsing/styp.js
	BoxParser.stypBox.prototype.parse = function(stream) {
		BoxParser.ftypBox.prototype.parse.call(this, stream);
	}
	
	// file:src/parsing/stz2.js
	BoxParser.stz2Box.prototype.parse = function(stream) {
		var i;
		var sample_size;
		var sample_count;
		this.parseFullHeader(stream);
		this.sample_sizes = [];
		if (this.version === 0) {
			this.reserved = stream.readUint24();
			this.field_size = stream.readUint8();
			sample_count = stream.readUint32();
			if (this.field_size === 4) {
				for (i = 0; i < sample_count; i+=2) {
					var tmp = stream.readUint8();
					this.sample_sizes[i] = (tmp >> 4) & 0xF;
					this.sample_sizes[i+1] = tmp & 0xF;
				}		
			} else if (this.field_size === 8) {
				for (i = 0; i < sample_count; i++) {
					this.sample_sizes[i] = stream.readUint8();
				}		
			} else if (this.field_size === 16) {
				for (i = 0; i < sample_count; i++) {
					this.sample_sizes[i] = stream.readUint16();
				}		
			} else {
				Log.error("BoxParser", "Error in length field in stz2 box");
			}
		}
	}
	
	// file:src/parsing/subs.js
	BoxParser.subsBox.prototype.parse = function(stream) {
		var i,j;
		var entry_count;
		var subsample_count;
		this.parseFullHeader(stream);
		entry_count = stream.readUint32();
		this.entries = [];
		for (i = 0; i < entry_count; i++) {
			var sampleInfo = {};
			this.entries[i] = sampleInfo;
			sampleInfo.sample_delta = stream.readUint32();
			sampleInfo.subsamples = [];
			subsample_count = stream.readUint16();
			if (subsample_count>0) {
				for (j = 0; j < subsample_count; j++) {
					var subsample = {};
					sampleInfo.subsamples.push(subsample);
					if (this.version == 1) {
						subsample.size = stream.readUint32();
					} else {
						subsample.size = stream.readUint16();
					}
					subsample.priority = stream.readUint8();
					subsample.discardable = stream.readUint8();
					subsample.codec_specific_parameters = stream.readUint32();
				}
			}
		}
	}
	
	// file:src/parsing/tfdt.js
	BoxParser.tfdtBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		if (this.version == 1) {
			this.baseMediaDecodeTime = stream.readUint64();
		} else {
			this.baseMediaDecodeTime = stream.readUint32();
		}
	}
	
	// file:src/parsing/tfhd.js
	BoxParser.tfhdBox.prototype.parse = function(stream) {
		var readBytes = 0;
		this.parseFullHeader(stream);
		this.track_id = stream.readUint32();
		if (this.size - this.hdr_size > readBytes && (this.flags & BoxParser.TFHD_FLAG_BASE_DATA_OFFSET)) {
			this.base_data_offset = stream.readUint64();
			readBytes += 8;
		} else {
			this.base_data_offset = 0;
		}
		if (this.size - this.hdr_size > readBytes && (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DESC)) {
			this.default_sample_description_index = stream.readUint32();
			readBytes += 4;
		} else {
			this.default_sample_description_index = 0;
		}
		if (this.size - this.hdr_size > readBytes && (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DUR)) {
			this.default_sample_duration = stream.readUint32();
			readBytes += 4;
		} else {
			this.default_sample_duration = 0;
		}
		if (this.size - this.hdr_size > readBytes && (this.flags & BoxParser.TFHD_FLAG_SAMPLE_SIZE)) {
			this.default_sample_size = stream.readUint32();
			readBytes += 4;
		} else {
			this.default_sample_size = 0;
		}
		if (this.size - this.hdr_size > readBytes && (this.flags & BoxParser.TFHD_FLAG_SAMPLE_FLAGS)) {
			this.default_sample_flags = stream.readUint32();
			readBytes += 4;
		} else {
			this.default_sample_flags = 0;
		}
	}
	
	// file:src/parsing/tfra.js
	BoxParser.tfraBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.track_ID = stream.readUint32();
		stream.readUint24();
		var tmp_byte = stream.readUint8();
		this.length_size_of_traf_num = (tmp_byte >> 4) & 0x3;
		this.length_size_of_trun_num = (tmp_byte >> 2) & 0x3;
		this.length_size_of_sample_num = (tmp_byte) & 0x3;
		this.entries = [];
		var number_of_entries = stream.readUint32();
		for (var i = 0; i < number_of_entries; i++) {
			if (this.version === 1) {
				this.time = stream.readUint64();
				this.moof_offset = stream.readUint64();
			} else {
				this.time = stream.readUint32();
				this.moof_offset = stream.readUint32();
			}
			this.traf_number = stream["readUint"+(8*(this.length_size_of_traf_num+1))]();
			this.trun_number = stream["readUint"+(8*(this.length_size_of_trun_num+1))]();
			this.sample_number = stream["readUint"+(8*(this.length_size_of_sample_num+1))]();
		}
	}
	
	// file:src/parsing/tkhd.js
	BoxParser.tkhdBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		if (this.version == 1) {
			this.creation_time = stream.readUint64();
			this.modification_time = stream.readUint64();
			this.track_id = stream.readUint32();
			stream.readUint32();
			this.duration = stream.readUint64();
		} else {
			this.creation_time = stream.readUint32();
			this.modification_time = stream.readUint32();
			this.track_id = stream.readUint32();
			stream.readUint32();
			this.duration = stream.readUint32();
		}
		stream.readUint32Array(2);
		this.layer = stream.readInt16();
		this.alternate_group = stream.readInt16();
		this.volume = stream.readInt16()>>8;
		stream.readUint16();
		this.matrix = stream.readInt32Array(9);
		this.width = stream.readUint32();
		this.height = stream.readUint32();
	}
	
	// file:src/parsing/tmax.js
	BoxParser.tmaxBox.prototype.parse = function(stream) {
		this.time = stream.readUint32();
	}
	
	// file:src/parsing/tmin.js
	BoxParser.tminBox.prototype.parse = function(stream) {
		this.time = stream.readUint32();
	}
	
	// file:src/parsing/totl.js
	BoxParser.totlBox.prototype.parse = function(stream) {
		this.bytessent = stream.readUint32();
	}
	
	// file:src/parsing/tpay.js
	BoxParser.tpayBox.prototype.parse = function(stream) {
		this.bytessent = stream.readUint32();
	}
	
	// file:src/parsing/tpyl.js
	BoxParser.tpylBox.prototype.parse = function(stream) {
		this.bytessent = stream.readUint64();
	}
	
	// file:src/parsing/tref.js
	BoxParser.trefBox.prototype.parse = function(stream) {
		var ret;
		var box;
		while (stream.getPosition() < this.start+this.size) {
			ret = BoxParser.parseOneBox(stream, true, this.size - (stream.getPosition() - this.start));
			if (ret.code === BoxParser.OK) {
				box = new BoxParser.TrackReferenceTypeBox(ret.type, ret.size, ret.hdr_size, ret.start);
				if (box.write === BoxParser.Box.prototype.write && box.type !== "mdat") {
					Log.warn("BoxParser", box.type+" box writing not yet implemented, keeping unparsed data in memory for later write");
					box.parseDataAndRewind(stream);
				}
				box.parse(stream);
				this.boxes.push(box);			
			} else {
				return;
			}
		}
	}
	
	// file:src/parsing/trep.js
	BoxParser.trepBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.track_ID = stream.readUint32();
		this.boxes = [];
		while (stream.getPosition() < this.start+this.size) {
			ret = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));
			if (ret.code === BoxParser.OK) {
				box = ret.box;
				this.boxes.push(box);		
			} else {
				return;
			}
		}
	}
	
	// file:src/parsing/trex.js
	BoxParser.trexBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.track_id = stream.readUint32();
		this.default_sample_description_index = stream.readUint32();
		this.default_sample_duration = stream.readUint32();
		this.default_sample_size = stream.readUint32();
		this.default_sample_flags = stream.readUint32();
	}
	
	// file:src/parsing/trpy.js
	BoxParser.trpyBox.prototype.parse = function(stream) {
		this.bytessent = stream.readUint64();
	}
	
	// file:src/parsing/trun.js
	BoxParser.trunBox.prototype.parse = function(stream) {
		var readBytes = 0;
		this.parseFullHeader(stream);
		this.sample_count = stream.readUint32();
		readBytes+= 4;
		if (this.size - this.hdr_size > readBytes && (this.flags & BoxParser.TRUN_FLAGS_DATA_OFFSET) ) {
			this.data_offset = stream.readInt32(); //signed
			readBytes += 4;
		} else {
			this.data_offset = 0;
		}
		if (this.size - this.hdr_size > readBytes && (this.flags & BoxParser.TRUN_FLAGS_FIRST_FLAG) ) {
			this.first_sample_flags = stream.readUint32();
			readBytes += 4;
		} else {
			this.first_sample_flags = 0;
		}
		this.sample_duration = [];
		this.sample_size = [];
		this.sample_flags = [];
		this.sample_composition_time_offset = [];
		if (this.size - this.hdr_size > readBytes) {
			for (var i = 0; i < this.sample_count; i++) {
				if (this.flags & BoxParser.TRUN_FLAGS_DURATION) {
					this.sample_duration[i] = stream.readUint32();
				}
				if (this.flags & BoxParser.TRUN_FLAGS_SIZE) {
					this.sample_size[i] = stream.readUint32();
				}
				if (this.flags & BoxParser.TRUN_FLAGS_FLAGS) {
					this.sample_flags[i] = stream.readUint32();
				}
				if (this.flags & BoxParser.TRUN_FLAGS_CTS_OFFSET) {
					if (this.version === 0) {
						this.sample_composition_time_offset[i] = stream.readUint32();
					} else {
						this.sample_composition_time_offset[i] = stream.readInt32(); //signed
					}
				}
			}
		}
	}
	
	// file:src/parsing/tsel.js
	BoxParser.tselBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.switch_group = stream.readUint32();
		var count = (this.size - this.hdr_size - 4)/4;
		this.attribute_list = [];
		for (var i = 0; i < count; i++) {
			this.attribute_list[i] = stream.readUint32();
		}
	}
	
	// file:src/parsing/txtC.js
	BoxParser.txtCBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.config = stream.readCString();
	}
	
	// file:src/parsing/url.js
	BoxParser["url Box"].prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		if (this.flags !== 0x000001) {
			this.location = stream.readCString();
		} 
	}
	
	// file:src/parsing/urn.js
	BoxParser["urn Box"].prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.name = stream.readCString();
		if (this.size - this.hdr_size - this.name.length - 1 > 0) {
			this.location = stream.readCString();
		}
	}
	
	// file:src/parsing/vmhd.js
	BoxParser.vmhdBox.prototype.parse = function(stream) {
		this.parseFullHeader(stream);
		this.graphicsmode = stream.readUint16();
		this.opcolor = stream.readUint16Array(3);
	}
	
	// file:src/parsing/vttC.js
	BoxParser.vttCBox.prototype.parse = function(stream) {
		this.text = stream.readString(this.size - this.hdr_size);
	}
	
	// file:src/box-write.js
	/* 
	 * Copyright (c) Telecom ParisTech/TSI/MM/GPAC Cyril Concolato
	 * License: BSD-3-Clause (see LICENSE file)
	 */
	BoxParser.Box.prototype.writeHeader = function(stream, msg) {
		this.size += 8;
		if (this.size > MAX_SIZE) {
			this.size += 8;
		}
		if (this.type === "uuid") {
			this.size += 16;
		}
		Log.debug("BoxWriter", "Writing box "+this.type+" of size: "+this.size+" at position "+stream.getPosition()+(msg || ""));
		if (this.size > MAX_SIZE) {
			stream.writeUint32(1);
		} else {
			this.sizePosition = stream.getPosition();
			stream.writeUint32(this.size);
		}
		stream.writeString(this.type, null, 4);
		if (this.type === "uuid") {
			stream.writeUint8Array(this.uuid);
		}
		if (this.size > MAX_SIZE) {
			stream.writeUint64(this.size);
		} 
	}
	
	BoxParser.FullBox.prototype.writeHeader = function(stream) {
		this.size += 4;
		BoxParser.Box.prototype.writeHeader.call(this, stream, " v="+this.version+" f="+this.flags);
		stream.writeUint8(this.version);
		stream.writeUint24(this.flags);
	}
	
	BoxParser.Box.prototype.write = function(stream) {
		if (this.type === "mdat") {
			/* TODO: fix this */
			if (this.data) {
				this.size = this.data.length;
				this.writeHeader(stream);
				stream.writeUint8Array(this.data);
			}
		} else {
			this.size = (this.data ? this.data.length : 0);
			this.writeHeader(stream);
			if (this.data) {
				stream.writeUint8Array(this.data);
			}
		}
	}
	
	BoxParser.ContainerBox.prototype.write = function(stream) {
		this.size = 0;
		this.writeHeader(stream);
		for (var i=0; i<this.boxes.length; i++) {
			if (this.boxes[i]) {
				this.boxes[i].write(stream);
				this.size += this.boxes[i].size;
			}
		}
		/* adjusting the size, now that all sub-boxes are known */
		Log.debug("BoxWriter", "Adjusting box "+this.type+" with new size "+this.size);
		stream.adjustUint32(this.sizePosition, this.size);
	}
	
	BoxParser.TrackReferenceTypeBox.prototype.write = function(stream) {
		this.size = this.track_ids.length*4;
		this.writeHeader(stream);
		stream.writeUint32Array(this.track_ids);
	}
	
	// file:src/writing/avcC.js
	BoxParser.avcCBox.prototype.write = function(stream) {
		var i;
		this.size = 7;
		for (i = 0; i < this.SPS.length; i++) {
			this.size += 2+this.SPS[i].length;
		}
		for (i = 0; i < this.PPS.length; i++) {
			this.size += 2+this.PPS[i].length;
		}
		if (this.ext) {
			this.size += this.ext.length;
		}
		this.writeHeader(stream);
		stream.writeUint8(this.configurationVersion);
		stream.writeUint8(this.AVCProfileIndication);
		stream.writeUint8(this.profile_compatibility);
		stream.writeUint8(this.AVCLevelIndication);
		stream.writeUint8(this.lengthSizeMinusOne + (63<<2));
		stream.writeUint8(this.SPS.length + (7<<5));
		for (i = 0; i < this.SPS.length; i++) {
			stream.writeUint16(this.SPS[i].length);
			stream.writeUint8Array(this.SPS[i]);
		}
		stream.writeUint8(this.PPS.length);
		for (i = 0; i < this.PPS.length; i++) {
			stream.writeUint16(this.PPS[i].length);
			stream.writeUint8Array(this.PPS[i]);
		}	
		if (this.ext) {
			stream.writeUint8Array(this.ext);
		}
	}
	
	// file:src/writing/co64.js
	BoxParser.co64Box.prototype.write = function(stream) {
		var i;
		this.version = 0;
		this.flags = 0;
		this.size = 4+8*this.chunk_offsets.length;
		this.writeHeader(stream);
		stream.writeUint32(this.chunk_offsets.length);
		for(i=0; i<this.chunk_offsets.length; i++) {
			stream.writeUint64(this.chunk_offsets[i]);
		}
	}
	
	// file:src/writing/cslg.js
	BoxParser.cslgBox.prototype.write = function(stream) {
		var i;
		this.version = 0;
		this.flags = 0;
		this.size = 4*5;
		this.writeHeader(stream);
		stream.writeInt32(this.compositionToDTSShift);
		stream.writeInt32(this.leastDecodeToDisplayDelta);
		stream.writeInt32(this.greatestDecodeToDisplayDelta);
		stream.writeInt32(this.compositionStartTime);
		stream.writeInt32(this.compositionEndTime);
	}
	
	// file:src/writing/ctts.js
	BoxParser.cttsBox.prototype.write = function(stream) {
		var i;
		this.version = 0;
		this.flags = 0;
		this.size = 4+8*this.sample_counts.length;
		this.writeHeader(stream);
		stream.writeUint32(this.sample_counts.length);
		for(i=0; i<this.sample_counts.length; i++) {
			stream.writeUint32(this.sample_counts[i]);
			if (this.version === 1) {
				stream.writeInt32(this.sample_offsets[i]); /* signed */
			} else {			
				stream.writeUint32(this.sample_offsets[i]); /* unsigned */
			}
		}
	}
	
	// file:src/writing/dref.js
	BoxParser.drefBox.prototype.write = function(stream) {
		this.version = 0;
		this.flags = 0;
		this.size = 4; //
		this.writeHeader(stream);
		stream.writeUint32(this.entries.length);
		for (var i = 0; i < this.entries.length; i++) {
			this.entries[i].write(stream);
			this.size += this.entries[i].size;
		}	
		/* adjusting the size, now that all sub-boxes are known */
		Log.debug("BoxWriter", "Adjusting box "+this.type+" with new size "+this.size);
		stream.adjustUint32(this.sizePosition, this.size);
	}
	
	// file:src/writing/elng.js
	BoxParser.elngBox.prototype.write = function(stream) {
		this.version = 0;	
		this.flags = 0;
		this.size = this.extended_language.length;
		this.writeHeader(stream);
		stream.writeString(this.extended_language);
	}
	
	// file:src/writing/elst.js
	BoxParser.elstBox.prototype.write = function(stream) {
		this.version = 0;	
		this.flags = 0;
		this.size = 4+12*this.entries.length;
		this.writeHeader(stream);
		stream.writeUint32(this.entries.length);
		for (var i = 0; i < this.entries.length; i++) {
			var entry = this.entries[i];
			stream.writeUint32(entry.segment_duration);
			stream.writeInt32(entry.media_time);
			stream.writeInt16(entry.media_rate_integer);
			stream.writeInt16(entry.media_rate_fraction);
		}
	}
	
	// file:src/writing/emsg.js
	BoxParser.emsgBox.prototype.write = function(stream) {
		this.version = 0;	
		this.flags = 0;
		this.size = 4*4+this.message_data.length+(this.scheme_id_uri.length+1)+(this.value.length+1);
		this.writeHeader(stream);
		stream.writeCString(this.scheme_id_uri);
		stream.writeCString(this.value);
		stream.writeUint32(this.timescale);
		stream.writeUint32(this.presentation_time_delta);
		stream.writeUint32(this.event_duration);
		stream.writeUint32(this.id);
		stream.writeUint8Array(this.message_data);
	}
	
	// file:src/writing/ftyp.js
	BoxParser.ftypBox.prototype.write = function(stream) {
		this.size = 8+4*this.compatible_brands.length;
		this.writeHeader(stream);
		stream.writeString(this.major_brand, null, 4);
		stream.writeUint32(this.minor_version);
		for (var i = 0; i < this.compatible_brands.length; i++) {
			stream.writeString(this.compatible_brands[i], null, 4);
		}
	}
	
	// file:src/writing/hdlr.js
	BoxParser.hdlrBox.prototype.write = function(stream) {
		this.size = 5*4+this.name.length+1;
		this.version = 0;
		this.flags = 0;
		this.writeHeader(stream);
		stream.writeString(this.componentType, null, 4);
		stream.writeString(this.componentSubType, null, 4);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeCString(this.name);
	}
	
	// file:src/writing/kind.js
	BoxParser.kindBox.prototype.write = function(stream) {
		this.version = 0;	
		this.flags = 0;
		this.size = (this.schemeURI.length+1)+(this.value.length+1);
		this.writeHeader(stream);
		stream.writeCString(this.schemeURI);
		stream.writeCString(this.value);
	}
	
	// file:src/writing/mdhd.js
	BoxParser.mdhdBox.prototype.write = function(stream) {
		this.size = 4*4+2*2;
		this.flags = 0;
		this.version = 0;
		this.writeHeader(stream);
		stream.writeUint32(this.creation_time);
		stream.writeUint32(this.modification_time);
		stream.writeUint32(this.timescale);
		stream.writeUint32(this.duration);
		stream.writeUint16(this.language);
		stream.writeUint16(0);
	}
	
	// file:src/writing/mehd.js
	BoxParser.mehdBox.prototype.write = function(stream) {
		this.version = 0;
		this.flags = 0;
		this.size = 4;
		this.writeHeader(stream);
		stream.writeUint32(this.fragment_duration);
	}
	
	// file:src/writing/mfhd.js
	BoxParser.mfhdBox.prototype.write = function(stream) {
		this.version = 0;
		this.flags = 0;
		this.size = 4;
		this.writeHeader(stream);
		stream.writeUint32(this.sequence_number);
	}
	
	// file:src/writing/mvhd.js
	BoxParser.mvhdBox.prototype.write = function(stream) {
		this.version = 0;
		this.flags = 0;
		this.size = 23*4+2*2;
		this.writeHeader(stream);
		stream.writeUint32(this.creation_time);
		stream.writeUint32(this.modification_time);
		stream.writeUint32(this.timescale);
		stream.writeUint32(this.duration);
		stream.writeUint32(this.rate);
		stream.writeUint16(this.volume<<8);
		stream.writeUint16(0);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeUint32Array(this.matrix);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeUint32(this.next_track_id);
	}
	
	// file:src/writing/sampleentry.js
	BoxParser.SampleEntry.prototype.writeHeader = function(stream) {
		this.size = 8;
		BoxParser.Box.prototype.writeHeader.call(this, stream);
		stream.writeUint8(0);
		stream.writeUint8(0);
		stream.writeUint8(0);
		stream.writeUint8(0);
		stream.writeUint8(0);
		stream.writeUint8(0);
		stream.writeUint16(this.data_reference_index);
	}
	
	BoxParser.SampleEntry.prototype.writeFooter = function(stream) {
		for (var i=0; i<this.boxes.length; i++) {
			this.boxes[i].write(stream);
			this.size += this.boxes[i].size;
		}
		Log.debug("BoxWriter", "Adjusting box "+this.type+" with new size "+this.size);
		stream.adjustUint32(this.sizePosition, this.size);	
	}
	
	BoxParser.SampleEntry.prototype.write = function(stream) {
		this.writeHeader(stream);
		stream.writeUint8Array(this.data);
		this.size += this.data.length;
		Log.debug("BoxWriter", "Adjusting box "+this.type+" with new size "+this.size);
		stream.adjustUint32(this.sizePosition, this.size);	
	}
	
	BoxParser.VisualSampleEntry.prototype.write = function(stream) {
		this.writeHeader(stream);
		this.size += 2*7+6*4+32;
		stream.writeUint16(0); 
		stream.writeUint16(0);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeUint16(this.width);
		stream.writeUint16(this.height);
		stream.writeUint32(this.horizresolution);
		stream.writeUint32(this.vertresolution);
		stream.writeUint32(0);
		stream.writeUint16(this.frame_count);
		stream.writeString(this.compressorname, null, 32);
		stream.writeUint16(this.depth);
		stream.writeInt16(-1);
		this.writeFooter(stream);
	}
	
	BoxParser.AudioSampleEntry.prototype.write = function(stream) {
		this.writeHeader(stream);
	    this.size += 2+2+4;
	    stream.writeUint16(this.version);
	    stream.writeUint16(this.revision);
		stream.writeUint32(this.vendor);
	    if (!this.version) { // version == 0
	        this.size += 2*4+4;
	        stream.writeUint16(this.channel_count);
	        stream.writeUint16(this.samplesize);
	        stream.writeUint16(0);
	        stream.writeUint16(0);
	        stream.writeUint32(this.samplerate<<16);
	    } else if (this.version == 1) {
	        this.size += 2*4+4*5;
	        stream.writeUint16(this.channel_count);
	        stream.writeUint16(this.samplesize);
	        stream.writeInt16(this.compressionId);
	        stream.writeUint16(this.packetSize);
	        stream.writeUint32(this.samplerate<<16);
	        stream.writeUint32(this.samplesPerPacket);
	        stream.writeUint32(this.bytesPerPacket);
	        stream.writeUint32(this.bytesPerFrame);
	        stream.writeUint32(this.bytesPerSample);
	    }
		this.writeFooter(stream);
	}
	// file:src/writing/samplegroups/samplegroup.js
	BoxParser.SampleGroupEntry.prototype.write = function(stream) {
		stream.writeUint8Array(this.data);
	}
	
	// file:src/writing/sbgp.js
	BoxParser.sbgpBox.prototype.write = function(stream) {
		this.version = 1;	
		this.flags = 0;
		this.size = 12+8*this.entries.length;
		this.writeHeader(stream);
		stream.writeString(this.grouping_type, null, 4);
		stream.writeUint32(this.grouping_type_parameter);
		stream.writeUint32(this.entries.length);
		for (var i = 0; i < this.entries.length; i++) {
			var entry = this.entries[i];
			stream.writeInt32(entry.sample_count);
			stream.writeInt32(entry.group_description_index);
		}
	}
	
	// file:src/writing/sgpd.js
	BoxParser.sgpdBox.prototype.write = function(stream) {
		var i;
		var entry;
		// leave version as read
		// this.version;
		this.flags = 0;
		this.size = 12;
		for (i = 0; i < this.entries.length; i++) {
			entry = this.entries[i];
			if (this.version === 1) {
				if (this.default_length === 0) {
					this.size += 4;
				}
				this.size += entry.data.length;
			}
		}
		this.writeHeader(stream);
		stream.writeString(this.grouping_type, null, 4);
		if (this.version === 1) {
			stream.writeUint32(this.default_length);
		}
		if (this.version >= 2) {
			stream.writeUint32(this.default_sample_description_index);
		}
		stream.writeUint32(this.entries.length);
		for (i = 0; i < this.entries.length; i++) {
			entry = this.entries[i];
			if (this.version === 1) {
				if (this.default_length === 0) {
					stream.writeUint32(entry.description_length);
				}
			}
			entry.write(stream);
		}
	}
	
	
	// file:src/writing/sidx.js
	BoxParser.sidxBox.prototype.write = function(stream) {
		this.version = 0;	
		this.flags = 0;
		this.size = 4*4+2+2+12*this.references.length;
		this.writeHeader(stream);
		stream.writeUint32(this.reference_ID);
		stream.writeUint32(this.timescale);
		stream.writeUint32(this.earliest_presentation_time);
		stream.writeUint32(this.first_offset);
		stream.writeUint16(0);
		stream.writeUint16(this.references.length);
		for (var i = 0; i < this.references.length; i++) {
			var ref = this.references[i];
			stream.writeUint32(ref.reference_type << 31 | ref.referenced_size);
			stream.writeUint32(ref.subsegment_duration);
			stream.writeUint32(ref.starts_with_SAP << 31 | ref.SAP_type << 28 | ref.SAP_delta_time);
		}
	}
	
	// file:src/writing/stco.js
	BoxParser.stcoBox.prototype.write = function(stream) {
		this.version = 0;
		this.flags = 0;
		this.size = 4+4*this.chunk_offsets.length;
		this.writeHeader(stream);
		stream.writeUint32(this.chunk_offsets.length);
		stream.writeUint32Array(this.chunk_offsets);
	}
	
	// file:src/writing/stsc.js
	BoxParser.stscBox.prototype.write = function(stream) {
		var i;
		this.version = 0;
		this.flags = 0;
		this.size = 4+12*this.first_chunk.length;
		this.writeHeader(stream);
		stream.writeUint32(this.first_chunk.length);
		for(i=0; i<this.first_chunk.length; i++) {
			stream.writeUint32(this.first_chunk[i]);
			stream.writeUint32(this.samples_per_chunk[i]);
			stream.writeUint32(this.sample_description_index[i]);
		}
	}
	
	// file:src/writing/stsd.js
	BoxParser.stsdBox.prototype.write = function(stream) {
		var i;
		this.version = 0;
		this.flags = 0;
		this.size = 0;
		this.writeHeader(stream);
		stream.writeUint32(this.entries.length);
		this.size += 4;
		for (i = 0; i < this.entries.length; i++) {
			this.entries[i].write(stream);
			this.size += this.entries[i].size;
		}
		/* adjusting the size, now that all sub-boxes are known */
		Log.debug("BoxWriter", "Adjusting box "+this.type+" with new size "+this.size);
		stream.adjustUint32(this.sizePosition, this.size);
	}
	
	// file:src/writing/stsh.js
	BoxParser.stshBox.prototype.write = function(stream) {
		var i;
		this.version = 0;
		this.flags = 0;
		this.size = 4+8*this.shadowed_sample_numbers.length;
		this.writeHeader(stream);
		stream.writeUint32(this.shadowed_sample_numbers.length);
		for(i=0; i<this.shadowed_sample_numbers.length; i++) {
			stream.writeUint32(this.shadowed_sample_numbers[i]);
			stream.writeUint32(this.sync_sample_numbers[i]);
		}
	}
	
	// file:src/writing/stss.js
	BoxParser.stssBox.prototype.write = function(stream) {
		this.version = 0;
		this.flags = 0;
		this.size = 4+4*this.sample_numbers.length;
		this.writeHeader(stream);
		stream.writeUint32(this.sample_numbers.length);
		stream.writeUint32Array(this.sample_numbers);
	}
	
	// file:src/writing/stsz.js
	BoxParser.stszBox.prototype.write = function(stream) {
		var i;
		var constant = true;
		this.version = 0;
		this.flags = 0;
		if (this.sample_sizes.length > 0) {
			i = 0;
			while (i+1 < this.sample_sizes.length) {
				if (this.sample_sizes[i+1] !==  this.sample_sizes[0]) {
					constant = false;
					break;
				} else {
					i++;
				}
			}
		} else {
			constant = false;
		}
		this.size = 8;
		if (!constant) {
			this.size += 4*this.sample_sizes.length;
		}
		this.writeHeader(stream);
		if (!constant) {
			stream.writeUint32(0);
		} else {
			stream.writeUint32(this.sample_sizes[0]);
		}
		stream.writeUint32(this.sample_sizes.length);
		if (!constant) {
			stream.writeUint32Array(this.sample_sizes);
		}	
	}
	
	// file:src/writing/stts.js
	BoxParser.sttsBox.prototype.write = function(stream) {
		var i;
		this.version = 0;
		this.flags = 0;
		this.size = 4+8*this.sample_counts.length;
		this.writeHeader(stream);
		stream.writeUint32(this.sample_counts.length);
		for(i=0; i<this.sample_counts.length; i++) {
			stream.writeUint32(this.sample_counts[i]);
			stream.writeUint32(this.sample_deltas[i]);
		}
	}
	
	// file:src/writing/tfdt.js
	BoxParser.tfdtBox.prototype.write = function(stream) {
		this.flags = 0;
		this.size = 4;
		if (this.version === 1) {
			this.size += 4;
		}
		this.writeHeader(stream);
		if (this.version === 1) {
			stream.writeUint64(this.baseMediaDecodeTime);
		} else {
			stream.writeUint32(this.baseMediaDecodeTime); 
		}
	}
	
	// file:src/writing/tfhd.js
	BoxParser.tfhdBox.prototype.write = function(stream) {
		this.version = 0;
		this.size = 4;
		if (this.flags & BoxParser.TFHD_FLAG_BASE_DATA_OFFSET) {
			this.size += 8;
		}
		if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DESC) {
			this.size += 4;
		}
		if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DUR) {
			this.size += 4;
		}
		if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_SIZE) {
			this.size += 4;
		}
		if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_FLAGS) {
			this.size += 4;
		}
		this.writeHeader(stream);
		stream.writeUint32(this.track_id);
		if (this.flags & BoxParser.TFHD_FLAG_BASE_DATA_OFFSET) {
			stream.writeUint64(this.base_data_offset);
		}
		if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DESC) {
			stream.writeUint32(this.default_sample_description_index);
		}
		if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DUR) {
			stream.writeUint32(this.default_sample_duration);
		}
		if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_SIZE) {
			stream.writeUint32(this.default_sample_size);
		}
		if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_FLAGS) {
			stream.writeUint32(this.default_sample_flags);
		}
	}
	
	// file:src/writing/tkhd.js
	BoxParser.tkhdBox.prototype.write = function(stream) {
		this.version = 0;
		//this.flags = 0;
		this.size = 4*18+2*4;
		this.writeHeader(stream);
		stream.writeUint32(this.creation_time);
		stream.writeUint32(this.modification_time);
		stream.writeUint32(this.track_id);
		stream.writeUint32(0);
		stream.writeUint32(this.duration);
		stream.writeUint32(0);
		stream.writeUint32(0);
		stream.writeInt16(this.layer);
		stream.writeInt16(this.alternate_group);
		stream.writeInt16(this.volume<<8);
		stream.writeUint16(0);
		stream.writeInt32Array(this.matrix);
		stream.writeUint32(this.width);
		stream.writeUint32(this.height);
	}
	
	// file:src/writing/trex.js
	BoxParser.trexBox.prototype.write = function(stream) {
		this.version = 0;
		this.flags = 0;
		this.size = 4*5;
		this.writeHeader(stream);
		stream.writeUint32(this.track_id);
		stream.writeUint32(this.default_sample_description_index);
		stream.writeUint32(this.default_sample_duration);
		stream.writeUint32(this.default_sample_size);
		stream.writeUint32(this.default_sample_flags);
	}
	
	// file:src/writing/trun.js
	BoxParser.trunBox.prototype.write = function(stream) {
		this.version = 0;
		this.size = 4;
		if (this.flags & BoxParser.TRUN_FLAGS_DATA_OFFSET) {
			this.size += 4;
		}
		if (this.flags & BoxParser.TRUN_FLAGS_FIRST_FLAG) {
			this.size += 4;
		}
		if (this.flags & BoxParser.TRUN_FLAGS_DURATION) {
			this.size += 4*this.sample_duration.length;
		}
		if (this.flags & BoxParser.TRUN_FLAGS_SIZE) {
			this.size += 4*this.sample_size.length;
		}
		if (this.flags & BoxParser.TRUN_FLAGS_FLAGS) {
			this.size += 4*this.sample_flags.length;
		}
		if (this.flags & BoxParser.TRUN_FLAGS_CTS_OFFSET) {
			this.size += 4*this.sample_composition_time_offset.length;
		}
		this.writeHeader(stream);
		stream.writeUint32(this.sample_count);
		if (this.flags & BoxParser.TRUN_FLAGS_DATA_OFFSET) {
			this.data_offset_position = stream.getPosition();
			stream.writeInt32(this.data_offset); //signed
		}
		if (this.flags & BoxParser.TRUN_FLAGS_FIRST_FLAG) {
			stream.writeUint32(this.first_sample_flags);
		}
		for (var i = 0; i < this.sample_count; i++) {
			if (this.flags & BoxParser.TRUN_FLAGS_DURATION) {
				stream.writeUint32(this.sample_duration[i]);
			}
			if (this.flags & BoxParser.TRUN_FLAGS_SIZE) {
				stream.writeUint32(this.sample_size[i]);
			}
			if (this.flags & BoxParser.TRUN_FLAGS_FLAGS) {
				stream.writeUint32(this.sample_flags[i]);
			}
			if (this.flags & BoxParser.TRUN_FLAGS_CTS_OFFSET) {
				if (this.version === 0) {
					stream.writeUint32(this.sample_composition_time_offset[i]);
				} else {
					stream.writeInt32(this.sample_composition_time_offset[i]); //signed
				}
			}
		}		
	}
	
	// file:src/writing/url.js
	BoxParser["url Box"].prototype.write = function(stream) {
		this.version = 0;	
		if (this.location) {
			this.flags = 0;
			this.size = this.location.length+1;
		} else {
			this.flags = 0x000001;
			this.size = 0;
		}
		this.writeHeader(stream);
		if (this.location) {
			stream.writeCString(this.location);
		}
	}
	
	// file:src/writing/urn.js
	BoxParser["urn Box"].prototype.write = function(stream) {
		this.version = 0;	
		this.flags = 0;
		this.size = this.name.length+1+(this.location ? this.location.length+1 : 0);
		this.writeHeader(stream);
		stream.writeCString(this.name);
		if (this.location) {
			stream.writeCString(this.location);
		}
	}
	
	// file:src/writing/vmhd.js
	BoxParser.vmhdBox.prototype.write = function(stream) {
		var i;
		this.version = 0;
		this.flags = 1;
		this.size = 8;
		this.writeHeader(stream);
		stream.writeUint16(this.graphicsmode);
		stream.writeUint16Array(this.opcolor);
	}
	
	// file:src/box-unpack.js
	/* 
	 * Copyright (c) Telecom ParisTech/TSI/MM/GPAC Cyril Concolato
	 * License: BSD-3-Clause (see LICENSE file)
	 */
	BoxParser.cttsBox.prototype.unpack = function(samples) {
		var i, j, k;
		k = 0;
		for (i = 0; i < this.sample_counts.length; i++) {
			for (j = 0; j < this.sample_counts[i]; j++) {
				samples[k].pts = samples[k].dts + this.sample_offsets[i];
				k++;
			}
		}
	}
	
	BoxParser.sttsBox.prototype.unpack = function(samples) {
		var i, j, k;
		k = 0;
		for (i = 0; i < this.sample_counts.length; i++) {
			for (j = 0; j < this.sample_counts[i]; j++) {
				if (k === 0) {
					samples[k].dts = 0;
				} else {
					samples[k].dts = samples[k-1].dts + this.sample_deltas[i];
				}
				k++;
			}
		}
	}
	
	BoxParser.stcoBox.prototype.unpack = function(samples) {
		var i;
		for (i = 0; i < this.chunk_offsets.length; i++) {
			samples[i].offset = this.chunk_offsets[i];
		}
	}
	
	BoxParser.stscBox.prototype.unpack = function(samples) {
		var i, j, k, l, m;
		l = 0;
		m = 0;
		for (i = 0; i < this.first_chunk.length; i++) {
			for (j = 0; j < (i+1 < this.first_chunk.length ? this.first_chunk[i+1] : Infinity); j++) {
				m++;
				for (k = 0; k < this.samples_per_chunk[i]; k++) {
					if (samples[l]) {
						samples[l].description_index = this.sample_description_index[i];
						samples[l].chunk_index = m;
					} else {
						return;
					}
					l++;
				}			
			}
		}
	}
	
	BoxParser.stszBox.prototype.unpack = function(samples) {
		var i;
		for (i = 0; i < this.sample_sizes.length; i++) {
			samples[i].size = this.sample_sizes[i];
		}
	}
	// file:src/text-mp4.js
	/* 
	 * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato
	 * License: BSD-3-Clause (see LICENSE file)
	 */
	var VTTin4Parser = function() {	
	}
	
	VTTin4Parser.prototype.parseSample = function(data) {
		var cues, cue;
		var stream = new MP4BoxStream(data.buffer);
		cues = [];
		while (!stream.isEos()) {
			cue = BoxParser.parseOneBox(stream, false);
			if (cue.code === BoxParser.OK && cue.box.type === "vttc") {
				cues.push(cue.box);
			}		
		}
		return cues;
	}
	
	VTTin4Parser.prototype.getText = function (startTime, endTime, data) {
		function pad(n, width, z) {
		  z = z || '0';
		  n = n + '';
		  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
		}
		function secToTimestamp(insec) {
			var h = Math.floor(insec/3600);
			var m = Math.floor((insec - h*3600)/60);
			var s = Math.floor(insec - h*3600 - m*60);
			var ms = Math.floor((insec - h*3600 - m*60 - s)*1000);
			return ""+pad(h, 2)+":"+pad(m,2)+":"+pad(s, 2)+"."+pad(ms, 3);
		}
		var cues = this.parseSample(data);
		var string = "";
		for (var i = 0; i < cues.length; i++) {
			var cueIn4 = cues[i];
			string += secToTimestamp(startTime)+" --> "+secToTimestamp(endTime)+"\r\n";
			string += cueIn4.payl.text;
		}
		return string;
	}
	
	var XMLSubtitlein4Parser = function() {	
	}
	
	XMLSubtitlein4Parser.prototype.parseSample = function(sample) {
		var res = {};	
		var i;
		res.resources = [];
		var stream = new MP4BoxStream(sample.data.buffer);
		if (!sample.subsamples || sample.subsamples.length === 0) {
			res.documentString = stream.readString(sample.data.length);
		} else {
			res.documentString = stream.readString(sample.subsamples[0].size);
			if (sample.subsamples.length > 1) {
				for (i = 1; i < sample.subsamples.length; i++) {
					res.resources[i] = stream.readUint8Array(sample.subsamples[i].size);
				}
			}
		}
		res.document = (new DOMParser()).parseFromString(res.documentString, "application/xml");
		return res;
	}
	
	var Textin4Parser = function() {	
	}
	
	Textin4Parser.prototype.parseSample = function(sample) {
		var textString;
		var stream = new MP4BoxStream(sample.data.buffer);
		textString = stream.readString(sample.data.length);
		return textString;
	}
	
	Textin4Parser.prototype.parseConfig = function(data) {
		var textString;
		var stream = new MP4BoxStream(data.buffer);
		stream.readUint32(); // version & flags
		textString = stream.readCString();
		return textString;
	}
	// file:src/isofile.js
	/* 
	 * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato
	 * License: BSD-3-Clause (see LICENSE file)
	 */
	var ISOFile = function (stream) {
		/* MutiBufferStream object used to parse boxes */
		this.stream = stream;
		/* Array of all boxes (in order) found in the file */
		this.boxes = [];
		/* Array of all mdats */
		this.mdats = [];
		/* Array of all moofs */
		this.moofs = [];
		/* Boolean indicating if the file is compatible with progressive parsing (moov first) */
		this.isProgressive = false;
		/* Boolean used to fire moov start event only once */
		this.moovStartFound = false;
	}
	
	ISOFile.prototype.parse = function() {
		var found;
		var ret;
		var box;
		var parseBoxHeadersOnly = false;
	
		if (this.restoreParsePosition)	{
			if (!this.restoreParsePosition()) {
				return;
			}
		}
	
		while (true) {
			
			if (this.hasIncompleteMdat && this.hasIncompleteMdat()) {
				if (this.processIncompleteMdat()) {
					continue;
				} else {
					return;
				}
			} else {
				if (this.saveParsePosition)	{
					this.saveParsePosition();
				}
				ret = BoxParser.parseOneBox(this.stream, parseBoxHeadersOnly);
				if (ret.code === BoxParser.ERR_NOT_ENOUGH_DATA) {		
					if (this.processIncompleteBox) {
						if (this.processIncompleteBox(ret)) {
							continue;
						} else {
							return;
						}
					} else {
						return;
					}
				} else {
					/* the box is entirely parsed */
					box = ret.box;
					/* store the box in the 'boxes' array to preserve box order (for file rewrite if needed)  */
					this.boxes.push(box);
					/* but also store box in a property for more direct access */
					switch (box.type) {
						case "mdat":
							this.mdats.push(box);
							break;
						case "moof":
							this.moofs.push(box);
							break;
						case "moov":					
							this.moovStartFound = true;
							if (this.mdats.length === 0) {
								this.isProgressive = true;
							}
							/* no break */
							/* falls through */
						default:
							if (this[box.type] !== undefined) {
								Log.warn("ISOFile", "Duplicate Box of type: "+box.type+", overriding previous occurrence");
							}
							this[box.type] = box;
							break;
					}
					if (this.updateUsedBytes) {
						this.updateUsedBytes(box, ret);					
					}
				}
			}
		}
	}
	
	/* Find and return specific boxes using recursion and early return */
	ISOFile.prototype.getBox = function(type) {
	  var result = this.getBoxes(type, true);
	  return (result.length ? result[0] : null);  
	}
	
	ISOFile.prototype.getBoxes = function(type, returnEarly) {
	  var result = [];
	  ISOFile._sweep.call(this, type, result, returnEarly);
	  return result;
	}
	
	ISOFile._sweep = function(type, result, returnEarly) {
	  if (this.type && this.type == type) result.push(this);
	  for (var box in this.boxes) {
	    if (result.length && returnEarly) return;
	    ISOFile._sweep.call(this.boxes[box], type, result, returnEarly);
	  }
	}
	
	if (true) {
		exports.ISOFile = ISOFile;	
	}
	// file:src/isofile-advanced-parsing.js
	/* position in the current buffer of the beginning of the last box parsed */
	ISOFile.prototype.lastBoxStartPosition = 0;
	/* indicator if the parsing is stuck in the middle of an mdat box */
	ISOFile.prototype.parsingMdat = null;
	/* next file position that the parser needs:
	    - 0 until the first buffer (i.e. fileStart ===0) has been received 
	    - otherwise, the next box start until the moov box has been parsed
	    - otherwise, the position of the next sample to fetch
	 */
	ISOFile.prototype.nextParsePosition = 0;
	/* keep mdat data */
	ISOFile.prototype.discardMdatData = false;
	
	ISOFile.prototype.processIncompleteBox = function(ret) {
		var box;
		var merged;
		var found;
		
		/* we did not have enough bytes in the current buffer to parse the entire box */
		if (ret.type === "mdat") { 
			/* we had enough bytes to get its type and size and it's an 'mdat' */
			
			/* special handling for mdat boxes, since we don't actually need to parse it linearly 
			   we create the box */
			box = new BoxParser[ret.type+"Box"](ret.size);	
			this.parsingMdat = box;
			this.boxes.push(box);
			this.mdats.push(box);			
			box.start = ret.start;
			box.hdr_size = ret.hdr_size;
			this.stream.addUsedBytes(box.hdr_size);
	
			/* indicate that the parsing should start from the end of the box */
			this.lastBoxStartPosition = box.start + box.size;
	 		/* let's see if we have the end of the box in the other buffers */
			found = this.stream.seek(box.start + box.size, false, this.discardMdatData);
			if (found) {
				/* found the end of the box */
				this.parsingMdat = null;
				/* let's see if we can parse more in this buffer */
				return true;
			} else {
				/* 'mdat' end not found in the existing buffers */
				/* determine the next position in the file to start parsing from */
				if (!this.moovStartFound) {
					/* moov not find yet, 
					   the file probably has 'mdat' at the beginning, and 'moov' at the end, 
					   indicate that the downloader should not try to download those bytes now */
					this.nextParsePosition = box.start + box.size;
				} else {
					/* we have the start of the moov box, 
					   the next bytes should try to complete the current 'mdat' */
					this.nextParsePosition = this.stream.findEndContiguousBuf();
				}
				/* not much we can do, wait for more buffers to arrive */
				return false;
			}
		} else {
			/* box is incomplete, we may not even know its type */
			if (ret.type === "moov") { 
				/* the incomplete box is a 'moov' box */
				this.moovStartFound = true;
				if (this.mdats.length === 0) {
					this.isProgressive = true;
				}
			}
			/* either it's not an mdat box (and we need to parse it, we cannot skip it)
			   (TODO: we could skip 'free' boxes ...)
				   or we did not have enough data to parse the type and size of the box, 
			   we try to concatenate the current buffer with the next buffer to restart parsing */
			merged = (this.stream.mergeNextBuffer ? this.stream.mergeNextBuffer() : false);
			if (merged) {
				/* The next buffer was contiguous, the merging succeeded,
				   we can now continue parsing, 
				   the next best position to parse is at the end of this new buffer */
				this.nextParsePosition = this.stream.getEndPosition();
				return true;
			} else {
				/* we cannot concatenate existing buffers because they are not contiguous or because there is no additional buffer */
				/* The next best position to parse is still at the end of this old buffer */
				if (!ret.type) {
					/* There were not enough bytes in the buffer to parse the box type and length,
					   the next fetch should retrieve those missing bytes, i.e. the next bytes after this buffer */
					this.nextParsePosition = this.stream.getEndPosition();
				} else {
					/* we had enough bytes to parse size and type of the incomplete box
					   if we haven't found yet the moov box, skip this one and try the next one 
					   if we have found the moov box, let's continue linear parsing */
					if (this.moovStartFound) {
						this.nextParsePosition = this.stream.getEndPosition();
					} else {
						this.nextParsePosition = this.stream.getPosition() + ret.size;
					}
				}
				return false;
			}
		}
	}
	
	ISOFile.prototype.hasIncompleteMdat = function () {
		return (this.parsingMdat !== null);
	}
	
	ISOFile.prototype.processIncompleteMdat = function () {
		var box;
		var found;
		
		/* we are in the parsing of an incomplete mdat box */
		box = this.parsingMdat;
	
		found = this.stream.seek(box.start + box.size, false, this.discardMdatData);
		if (found) {
			Log.debug("ISOFile", "Found 'mdat' end in buffered data");
			/* the end of the mdat has been found */ 
			this.parsingMdat = null;
			/* we can parse more in this buffer */
			return true;
		} else {
			/* we don't have the end of this mdat yet, 
			   indicate that the next byte to fetch is the end of the buffers we have so far, 
			   return and wait for more buffer to come */
			this.nextParsePosition = this.stream.findEndContiguousBuf();
			return false;
		}
	}
	
	ISOFile.prototype.restoreParsePosition = function() {
		/* Reposition at the start position of the previous box not entirely parsed */
		return this.stream.seek(this.lastBoxStartPosition, true, this.discardMdatData);
	}
	
	ISOFile.prototype.saveParsePosition = function() {
		/* remember the position of the box start in case we need to roll back (if the box is incomplete) */
		this.lastBoxStartPosition = this.stream.getPosition();	
	}
	
	ISOFile.prototype.updateUsedBytes = function(box, ret) {
		if (this.stream.addUsedBytes) {
			if (box.type === "mdat") {
				/* for an mdat box, only its header is considered used, other bytes will be used when sample data is requested */
				this.stream.addUsedBytes(box.hdr_size);
				if (this.discardMdatData) {
					this.stream.addUsedBytes(box.size-box.hdr_size);
				}
			} else {
				/* for all other boxes, the entire box data is considered used */
				this.stream.addUsedBytes(box.size);
			}	
		}
	}
	// file:src/isofile-advanced-creation.js
	ISOFile.prototype.add = BoxParser.Box.prototype.add;
	
	ISOFile.prototype.init = function () {
		var moov = this.add("moov");
		moov.add("mvhd").set("timescale",600)
						.set("rate", 1)
						.set("creation_time", 0)
						.set("modification_time", 0)
						.set("duration", 0)
						.set("volume", 1)
						.set("matrix", [ 0, 0, 0, 0, 0, 0, 0, 0, 0])
						.set("next_track_id", 1);
		moov.add("mvex");
		return this;
	}
	
	ISOFile.prototype.addTrack = function (_options) {
		if (!this.moov) {
			this.init();
		}
	
		var options = _options || {}; 
		options.width = options.width || 320;
		options.height = options.height || 320;
		options.id = options.id || this.moov.mvhd.next_track_id;
		options.type = options.type || "avc1";
	
		var trak = this.moov.add("trak");
		this.moov.mvhd.next_track_id = options.id+1;
		trak.add("tkhd").set("creation_time",0)
						.set("modification_time", 0)
						.set("track_id", options.id)
						.set("duration", 0)
						.set("layer", 0)
						.set("alternate_group", 0)
						.set("volume", 1)
						.set("matrix", [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
						.set("width", options.width)
						.set("height", options.height);
	
		var mdia = trak.add("mdia");
		mdia.add("mdhd").set("creation_time", 0)
						.set("modification_time", 0)
						.set("timescale", options.timescale || 1)
						.set("duration", 0)
						.set("language", options.language || 0);
	
		mdia.add("hdlr").set("handler", options.hdlr || "vide")
						.set("name", options.name || "Track created with MP4Box.js");
	
		mdia.add("elng").set("extended_language", options.language || "fr-FR");
	
		var minf = mdia.add("minf");
		var sample_entry = new BoxParser[options.type+"SampleEntry"]();
		var media_type = "";
		for (var i = 0; i < BoxParser.sampleEntryCodes.length; i++) {
			var code = BoxParser.sampleEntryCodes[i];
			if (code.types.indexOf(options.type) > -1) {
				media_type = code.prefix;
				break;
			}
		}
		switch(media_type) {
			case "Visual":
				minf.add("vmhd").set("graphicsmode",0).set("opcolor", [ 0, 0, 0 ]);
				sample_entry.set("width", options.width)
							.set("height", options.height)
							.set("horizresolution", 0x48<<16)
							.set("vertresolution", 0x48<<16)
							.set("frame_count", 1)
							.set("compressorname", options.type+" Compressor")
							.set("depth", 0x18);
				sample_entry.add("avcC").set("SPS", [])
										.set("PPS", [])
										.set("configurationVersion", 0)
										.set("AVCProfileIndication",0)
										.set("profile_compatibility", 0)
										.set("AVCLevelIndication" ,0)
										.set("lengthSizeMinusOne", 0);
				break;
			case "Audio":
				minf.add("smhd");
				break;
			case "Hint":
				minf.add("hmhd");
				break;
			case "Subtitle":
				minf.add("sthd");
				break;
			case "Metadata":
				minf.add("nmhd");
				break;
			case "System":
				minf.add("nmhd");
				break;
			default:
				minf.add("nmhd");
				break;
		}
		minf.add("dinf").add("dref").addEntry((new BoxParser["url Box"]()).set("flags", 0x1));
		var stbl = mdia.add("stbl");
		stbl.add("stsd").addEntry(sample_entry);
		stbl.add("stts").set("sample_counts", [])
						.set("sample_deltas", []);
		stbl.add("stsc").set("first_chunk", [])
						.set("samples_per_chunk", [])
						.set("sample_description_index", []);
	
		this.moov.mvex.add("trex").set("track_id", options.id)
								  .set("default_sample_description_index", options.default_sample_description_index || 0)
								  .set("default_sample_duration", options.default_sample_duration || 0)
								  .set("default_sample_size", options.default_sample_size || 0)
								  .set("default_sample_flags", options.default_sample_flags || 0);
		return trak;
	}
	
	ISOFile.prototype.getBuffer = function() {
		var stream = new DataStream();
		stream.endianness = DataStream.BIG_ENDIAN;
		this.write(stream);
		return stream.buffer;
	}
	
	ISOFile.prototype.addSample = function (trak, data, options) {
		
	}// file:src/isofile-sample-processing.js
	/* Index of the last moof box received */
	ISOFile.prototype.lastMoofIndex = 0;
	
	/* size of the buffers allocated for samples */
	ISOFile.prototype.samplesDataSize = 0;
	
	/* Resets all sample tables */
	ISOFile.prototype.resetTables = function () {
		var i;
		var trak, stco, stsc, stsz, stts, ctts, stss;
		this.initial_duration = this.moov.mvhd.duration;
		this.moov.mvhd.duration = 0;
		for (i = 0; i < this.moov.traks.length; i++) {
			trak = this.moov.traks[i];
			trak.tkhd.duration = 0;
			trak.mdia.mdhd.duration = 0;
			stco = trak.mdia.minf.stbl.stco || trak.mdia.minf.stbl.co64;
			stco.chunk_offsets = [];
			stsc = trak.mdia.minf.stbl.stsc;
			stsc.first_chunk = [];
			stsc.samples_per_chunk = [];
			stsc.sample_description_index = [];
			stsz = trak.mdia.minf.stbl.stsz || trak.mdia.minf.stbl.stz2;
			stsz.sample_sizes = [];
			stts = trak.mdia.minf.stbl.stts;
			stts.sample_counts = [];
			stts.sample_deltas = [];
			ctts = trak.mdia.minf.stbl.ctts;
			if (ctts) {
				ctts.sample_counts = [];
				ctts.sample_offsets = [];
			}
			stss = trak.mdia.minf.stbl.stss;
			var k = trak.mdia.minf.stbl.boxes.indexOf(stss);
			if (k != -1) trak.mdia.minf.stbl.boxes[k] = null;
		}
	}
	
	ISOFile.initSampleGroups = function(trak, traf, sbgps, trak_sgpds, traf_sgpds) {
		var l;
		var k;
		var sample_groups_info;
		var sample_group_info;
		var sample_group_key;
		function SampleGroupInfo(_type, _parameter, _sbgp) {
			this.grouping_type = _type;
			this.grouping_type_parameter = _parameter;
			this.sbgp = _sbgp;
			this.last_sample_in_run = -1;
			this.entry_index = -1;		
		}
		if (traf) {
			traf.sample_groups_info = [];
		} 
		if (!trak.sample_groups_info) {
			trak.sample_groups_info = [];
		}
		for (k = 0; k < sbgps.length; k++) {
			sample_group_key = sbgps[k].grouping_type +"/"+ sbgps[k].grouping_type_parameter;
			sample_group_info = new SampleGroupInfo(sbgps[k].grouping_type, sbgps[k].grouping_type_parameter, sbgps[k]);
			if (traf) {
				traf.sample_groups_info[sample_group_key] = sample_group_info;
			}
			if (!trak.sample_groups_info[sample_group_key]) {
				trak.sample_groups_info[sample_group_key] = sample_group_info;
			}
			for (l=0; l <trak_sgpds.length; l++) {
				if (trak_sgpds[l].grouping_type === sbgps[k].grouping_type) {
					sample_group_info.description = trak_sgpds[l];
					sample_group_info.description.used = true;
				}
			}
			if (traf_sgpds) {
				for (l=0; l <traf_sgpds.length; l++) {
					if (traf_sgpds[l].grouping_type === sbgps[k].grouping_type) {
						sample_group_info.fragment_description = traf_sgpds[l];
						sample_group_info.fragment_description.used = true;
						sample_group_info.is_fragment = true;
					}
				}			
			}
		}
		if (!traf) {
			for (k = 0; k < trak_sgpds.length; k++) {
				if (!trak_sgpds[k].used && trak_sgpds[k].version >= 2) {
					sample_group_key = trak_sgpds[k].grouping_type +"/0";
					sample_group_info = new SampleGroupInfo(trak_sgpds[k].grouping_type, 0);
					if (!trak.sample_groups_info[sample_group_key]) {
						trak.sample_groups_info[sample_group_key] = sample_group_info;
					}
				}
			}
		} else {
			if (traf_sgpds) {
				for (k = 0; k < traf_sgpds.length; k++) {
					if (!traf_sgpds[k].used && traf_sgpds[k].version >= 2) {
						sample_group_key = traf_sgpds[k].grouping_type +"/0";
						sample_group_info = new SampleGroupInfo(traf_sgpds[k].grouping_type, 0);
						sample_group_info.is_fragment = true;
						if (!traf.sample_groups_info[sample_group_key]) {
							traf.sample_groups_info[sample_group_key] = sample_group_info;
						}
					}
				}
			}
		}
	}
	
	ISOFile.setSampleGroupProperties = function(trak, sample, sample_number, sample_groups_info) {
		var k;
		var index;
		sample.sample_groups = [];
		for (k in sample_groups_info) {
			sample.sample_groups[k] = {};
			sample.sample_groups[k].grouping_type = sample_groups_info[k].grouping_type;
			sample.sample_groups[k].grouping_type_parameter = sample_groups_info[k].grouping_type_parameter;
			if (sample_number >= sample_groups_info[k].last_sample_in_run) {
				if (sample_groups_info[k].last_sample_in_run < 0) {
					sample_groups_info[k].last_sample_in_run = 0;
				}
				sample_groups_info[k].entry_index++;	
				if (sample_groups_info[k].entry_index <= sample_groups_info[k].sbgp.entries.length - 1) {
					sample_groups_info[k].last_sample_in_run += sample_groups_info[k].sbgp.entries[sample_groups_info[k].entry_index].sample_count;
				}
			}
			if (sample_groups_info[k].entry_index <= sample_groups_info[k].sbgp.entries.length - 1) {
				sample.sample_groups[k].group_description_index = sample_groups_info[k].sbgp.entries[sample_groups_info[k].entry_index].group_description_index;
			} else {
				sample.sample_groups[k].group_description_index = -1; // special value for not defined
			}
			if (sample.sample_groups[k].group_description_index !== 0) {
				var description;
				if (sample_groups_info[k].fragment_description) {
					description = sample_groups_info[k].fragment_description;
				} else {
					description = sample_groups_info[k].description;
				}
				if (sample.sample_groups[k].group_description_index > 0) {
					if (sample.sample_groups[k].group_description_index > 65535) {
						index = (sample.sample_groups[k].group_description_index >> 16)-1;
					} else {
						index = sample.sample_groups[k].group_description_index-1;
					}
					if (description && index >= 0) {
						sample.sample_groups[k].description = description.entries[index];
					}
				} else {
					if (description && description.version >= 2) {
						if (description.default_group_description_index > 0) {								
							sample.sample_groups[k].description = description.entries[description.default_group_description_index-1];
						}
					}
				}
			}
		}
	}
	
	ISOFile.process_sdtp = function (sdtp, sample, number) {
		if (!sample) {
			return;
		}
		if (sdtp) {
			sample.is_leading = sdtp.is_leading[number];
			sample.depends_on = sdtp.sample_depends_on[number];
			sample.is_depended_on = sdtp.sample_is_depended_on[number];
			sample.has_redundancy = sdtp.sample_has_redundancy[number];
		} else {
			sample.is_leading = 0;
			sample.depends_on = 0;
			sample.is_depended_on = 0
			sample.has_redundancy = 0;
		}	
	}
	
	/* Build initial sample list from  sample tables */
	ISOFile.prototype.buildSampleLists = function() {	
		var i, j, k;
		var trak, stco, stsc, stsz, stts, ctts, stss, stsd, subs, sbgps, sgpds, stdp;
		var chunk_run_index, chunk_index, last_chunk_in_run, offset_in_chunk, last_sample_in_chunk;
		var last_sample_in_stts_run, stts_run_index, last_sample_in_ctts_run, ctts_run_index, last_stss_index, last_subs_index, subs_entry_index, last_subs_sample_index;
		for (i = 0; i < this.moov.traks.length; i++) {
			trak = this.moov.traks[i];
			trak.samples = [];
			trak.samples_duration = 0;
			trak.samples_size = 0;
			stco = trak.mdia.minf.stbl.stco || trak.mdia.minf.stbl.co64;
			stsc = trak.mdia.minf.stbl.stsc;
			stsz = trak.mdia.minf.stbl.stsz || trak.mdia.minf.stbl.stz2;
			stts = trak.mdia.minf.stbl.stts;
			ctts = trak.mdia.minf.stbl.ctts;
			stss = trak.mdia.minf.stbl.stss;
			stsd = trak.mdia.minf.stbl.stsd;
			subs = trak.mdia.minf.stbl.subs;
			stdp = trak.mdia.minf.stbl.stdp;
			sbgps = trak.mdia.minf.stbl.sbgps;
			sgpds = trak.mdia.minf.stbl.sgpds;
			
			last_sample_in_stts_run = -1;
			stts_run_index = -1;
			last_sample_in_ctts_run = -1;
			ctts_run_index = -1;
			last_stss_index = 0;
			subs_entry_index = 0;
			last_subs_sample_index = 0;		
	
			ISOFile.initSampleGroups(trak, null, sbgps, sgpds);
	
			if (typeof stsz === "undefined") {
				continue;
			}
	
			/* we build the samples one by one and compute their properties */
			for (j = 0; j < stsz.sample_sizes.length; j++) {
				var sample = {};
				sample.number = j;
				sample.track_id = trak.tkhd.track_id;
				sample.timescale = trak.mdia.mdhd.timescale;
				sample.alreadyRead = 0;
				trak.samples[j] = sample;
				/* size can be known directly */
				sample.size = stsz.sample_sizes[j];
				trak.samples_size += sample.size;
				/* computing chunk-based properties (offset, sample description index)*/
				if (j === 0) {				
					chunk_index = 1; /* the first sample is in the first chunk (chunk indexes are 1-based) */
					chunk_run_index = 0; /* the first chunk is the first entry in the first_chunk table */
					sample.chunk_index = chunk_index;
					sample.chunk_run_index = chunk_run_index;
					last_sample_in_chunk = stsc.samples_per_chunk[chunk_run_index];
					offset_in_chunk = 0;
	
					/* Is there another entry in the first_chunk table ? */
					if (chunk_run_index + 1 < stsc.first_chunk.length) {
						/* The last chunk in the run is the chunk before the next first chunk */
						last_chunk_in_run = stsc.first_chunk[chunk_run_index+1]-1; 	
					} else {
						/* There is only one entry in the table, it is valid for all future chunks*/
						last_chunk_in_run = Infinity;
					}
				} else {
					if (j < last_sample_in_chunk) {
						/* the sample is still in the current chunk */
						sample.chunk_index = chunk_index;
						sample.chunk_run_index = chunk_run_index;
					} else {
						/* the sample is in the next chunk */
						chunk_index++;
						sample.chunk_index = chunk_index;
						/* reset the accumulated offset in the chunk */
						offset_in_chunk = 0;
						if (chunk_index <= last_chunk_in_run) {
							/* stay in the same entry of the first_chunk table */
							/* chunk_run_index unmodified */
						} else {
							chunk_run_index++;
							/* Is there another entry in the first_chunk table ? */
							if (chunk_run_index + 1 < stsc.first_chunk.length) {
								/* The last chunk in the run is the chunk before the next first chunk */
								last_chunk_in_run = stsc.first_chunk[chunk_run_index+1]-1; 	
							} else {
								/* There is only one entry in the table, it is valid for all future chunks*/
								last_chunk_in_run = Infinity;
							}
							
						}
						sample.chunk_run_index = chunk_run_index;
						last_sample_in_chunk += stsc.samples_per_chunk[chunk_run_index];
					}
				}
	
				sample.description_index = stsc.sample_description_index[sample.chunk_run_index]-1;
				sample.description = stsd.entries[sample.description_index];
				sample.offset = stco.chunk_offsets[sample.chunk_index-1] + offset_in_chunk; /* chunk indexes are 1-based */
				offset_in_chunk += sample.size;
	
				/* setting dts, cts, duration and rap flags */
				if (j > last_sample_in_stts_run) {
					stts_run_index++;
					if (last_sample_in_stts_run < 0) {
						last_sample_in_stts_run = 0;
					}
					last_sample_in_stts_run += stts.sample_counts[stts_run_index];				
				}
				if (j > 0) {
					trak.samples[j-1].duration = stts.sample_deltas[stts_run_index];
					trak.samples_duration += trak.samples[j-1].duration;
					sample.dts = trak.samples[j-1].dts + trak.samples[j-1].duration;
				} else {
					sample.dts = 0;
				}
				if (ctts) {
					if (j >= last_sample_in_ctts_run) {
						ctts_run_index++;
						if (last_sample_in_ctts_run < 0) {
							last_sample_in_ctts_run = 0;
						}
						last_sample_in_ctts_run += ctts.sample_counts[ctts_run_index];				
					}
					sample.cts = trak.samples[j].dts + ctts.sample_offsets[ctts_run_index];
				} else {
					sample.cts = sample.dts;
				}
				if (stss) {
					if (j == stss.sample_numbers[last_stss_index] - 1) { // sample numbers are 1-based
						sample.is_sync = true;
						last_stss_index++;
					} else {
						sample.is_sync = false;				
					}
				} else {
					sample.is_sync = true;
				}
				ISOFile.process_sdtp(trak.mdia.minf.stbl.sdtp, sample, sample.number);
				if (stdp) {
					sample.degradation_priority = stdp.priority[j];
				} else {
					sample.degradation_priority = 0;
				}
				if (subs) {
					if (subs.entries[subs_entry_index].sample_delta + last_subs_sample_index == j) {
						sample.subsamples = subs.entries[subs_entry_index].subsamples;
						last_subs_sample_index += subs.entries[subs_entry_index].sample_delta;
					}
				}
				if (sbgps.length > 0 || sgpds.length > 0) {
					ISOFile.setSampleGroupProperties(trak, sample, j, trak.sample_groups_info);
				}
			}
			if (j>0) {
				trak.samples[j-1].duration = Math.max(trak.mdia.mdhd.duration - trak.samples[j-1].dts, 0);
				trak.samples_duration += trak.samples[j-1].duration;
			}
		}
	}
	
	/* Update sample list when new 'moof' boxes are received */
	ISOFile.prototype.updateSampleLists = function() {	
		var i, j, k;
		var default_sample_description_index, default_sample_duration, default_sample_size, default_sample_flags;
		var last_run_position;
		var box, moof, traf, trak, trex;
		var sample;
		var sample_flags;
		
		if (this.moov === undefined) {
			return;
		}
		/* if the input file is fragmented and fetched in multiple downloads, we need to update the list of samples */
		while (this.lastMoofIndex < this.moofs.length) {
			box = this.moofs[this.lastMoofIndex];
			this.lastMoofIndex++;
			if (box.type == "moof") {
				moof = box;
				for (i = 0; i < moof.trafs.length; i++) {
					traf = moof.trafs[i];
					trak = this.getTrackById(traf.tfhd.track_id);
					trex = this.getTrexById(traf.tfhd.track_id);
					if (traf.tfhd.flags & BoxParser.TFHD_FLAG_SAMPLE_DESC) {
						default_sample_description_index = traf.tfhd.default_sample_description_index;
					} else {
						default_sample_description_index = (trex ? trex.default_sample_description_index: 1);
					}
					if (traf.tfhd.flags & BoxParser.TFHD_FLAG_SAMPLE_DUR) {
						default_sample_duration = traf.tfhd.default_sample_duration;
					} else {
						default_sample_duration = (trex ? trex.default_sample_duration : 0);
					}
					if (traf.tfhd.flags & BoxParser.TFHD_FLAG_SAMPLE_SIZE) {
						default_sample_size = traf.tfhd.default_sample_size;
					} else {
						default_sample_size = (trex ? trex.default_sample_size : 0);
					}
					if (traf.tfhd.flags & BoxParser.TFHD_FLAG_SAMPLE_FLAGS) {
						default_sample_flags = traf.tfhd.default_sample_flags;
					} else {
						default_sample_flags = (trex ? trex.default_sample_flags : 0);
					}
					traf.sample_number = 0;
					/* process sample groups */
					if (traf.sbgps.length > 0) {
						ISOFile.initSampleGroups(trak, traf, traf.sbgps, trak.mdia.minf.stbl.sgpds, traf.sgpds);
					}
					for (j = 0; j < traf.truns.length; j++) {
						var trun = traf.truns[j];
						for (k = 0; k < trun.sample_count; k++) {
							sample = {};
							sample.number_in_traf = traf.sample_number;
							traf.sample_number++;
				            sample.number = trak.samples.length;
							traf.first_sample_index = trak.samples.length;
							trak.samples.push(sample);
							sample.track_id = trak.tkhd.track_id;
							sample.timescale = trak.mdia.mdhd.timescale;
							sample.description_index = default_sample_description_index-1;
							sample.description = trak.mdia.minf.stbl.stsd.entries[sample.description_index];
							sample.size = default_sample_size;
							if (trun.flags & BoxParser.TRUN_FLAGS_SIZE) {
								sample.size = trun.sample_size[k];
							}
							trak.samples_size += sample.size;
							sample.duration = default_sample_duration;
							if (trun.flags & BoxParser.TRUN_FLAGS_DURATION) {
								sample.duration = trun.sample_duration[k];
							}
							trak.samples_duration += sample.duration;
							if (trak.first_traf_merged || k > 0) {
								sample.dts = trak.samples[trak.samples.length-2].dts+trak.samples[trak.samples.length-2].duration;
							} else {
								if (traf.tfdt) {
									sample.dts = traf.tfdt.baseMediaDecodeTime;
								} else {
									sample.dts = 0;
								}
								trak.first_traf_merged = true;
							}
							sample.cts = sample.dts;
							if (trun.flags & BoxParser.TRUN_FLAGS_CTS_OFFSET) {
								sample.cts = sample.dts + trun.sample_composition_time_offset[k];
							}
							sample_flags = default_sample_flags;
							if (trun.flags & BoxParser.TRUN_FLAGS_FLAGS) {
								sample_flags = trun.sample_flags[k];
							} else if (k === 0 && (trun.flags & BoxParser.TRUN_FLAGS_FIRST_FLAG)) {
								sample_flags = trun.first_sample_flags;
							}
							sample.is_sync = ((sample_flags >> 16 & 0x1) ? false : true);
							sample.is_leading = (sample_flags >> 26 & 0x3);
							sample.depends_on = (sample_flags >> 24 & 0x3);
							sample.is_depended_on = (sample_flags >> 22 & 0x3);
							sample.has_redundancy = (sample_flags >> 20 & 0x3);
							sample.degradation_priority = (sample_flags & 0xFFFF);
							ISOFile.process_sdtp(traf.sdtp, sample, sample.number_in_traf);
							var bdop = (traf.tfhd.flags & BoxParser.TFHD_FLAG_BASE_DATA_OFFSET) ? true : false;
							var dbim = (traf.tfhd.flags & BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF) ? true : false;
							var dop = (trun.flags & BoxParser.TRUN_FLAGS_DATA_OFFSET) ? true : false;
							var bdo = 0;
							if (!bdop) {
								if (!dbim) {
									if (j === 0) { // the first track in the movie fragment
										bdo = moof.start; // the position of the first byte of the enclosing Movie Fragment Box
									} else {
										bdo = last_run_position; // end of the data defined by the preceding *track* (irrespective of the track id) fragment in the moof
									}
								} else {
									bdo = moof.start;
								}
							} else {
								bdo = traf.tfhd.base_data_offset;
							}
							if (j === 0 && k === 0) {
								if (dop) {
									sample.offset = bdo + trun.data_offset; // If the data-offset is present, it is relative to the base-data-offset established in the track fragment header
								} else {
									sample.offset = bdo; // the data for this run starts the base-data-offset defined by the track fragment header
								}
							} else {
								sample.offset = last_run_position; // this run starts immediately after the data of the previous run
							}
							last_run_position = sample.offset + sample.size;
							if (traf.sbgps.length > 0 || traf.sgpds.length > 0 ||
								trak.mdia.minf.stbl.sbgps.length > 0 || trak.mdia.minf.stbl.sgpds.length > 0) {
								ISOFile.setSampleGroupProperties(trak, sample, sample.number_in_traf, traf.sample_groups_info);
							}
						}
					}
					if (traf.subs) {
						trak.has_fragment_subsamples = true;
						var sample_index = traf.first_sample_index;
						for (j = 0; j < traf.subs.entries.length; j++) {
							sample_index += traf.subs.entries[j].sample_delta;
							sample = trak.samples[sample_index-1];
							sample.subsamples = traf.subs.entries[j].subsamples;
						}					
					}
				}
			}
		}	
	}
	
	/* Try to get sample data for a given sample:
	   returns null if not found
	   returns the same sample if already requested
	 */
	ISOFile.prototype.getSample = function(trak, sampleNum) {	
		var buffer;
		var sample = trak.samples[sampleNum];
		
		if (!this.moov) {
			return null;
		}
	
		if (!sample.data) {
			/* Not yet fetched */
			sample.data = new Uint8Array(sample.size);
			sample.alreadyRead = 0;
			this.samplesDataSize += sample.size;
			Log.debug("ISOFile", "Allocating sample #"+sampleNum+" on track #"+trak.tkhd.track_id+" of size "+sample.size+" (total: "+this.samplesDataSize+")");
		} else if (sample.alreadyRead == sample.size) {
			/* Already fetched entirely */
			return sample;
		}
	
		/* The sample has only been partially fetched, we need to check in all buffers */
		var index =	this.stream.findPosition(true, sample.offset + sample.alreadyRead, false);
		if (index > -1) {
			buffer = this.stream.buffers[index];
			var lengthAfterStart = buffer.byteLength - (sample.offset + sample.alreadyRead - buffer.fileStart);
			if (sample.size - sample.alreadyRead <= lengthAfterStart) {
				/* the (rest of the) sample is entirely contained in this buffer */
	
				Log.debug("ISOFile","Getting sample #"+sampleNum+" data (alreadyRead: "+sample.alreadyRead+" offset: "+
					(sample.offset+sample.alreadyRead - buffer.fileStart)+" read size: "+(sample.size - sample.alreadyRead)+" full size: "+sample.size+")");
	
				DataStream.memcpy(sample.data.buffer, sample.alreadyRead, 
				                  buffer, sample.offset+sample.alreadyRead - buffer.fileStart, sample.size - sample.alreadyRead);
	
				/* update the number of bytes used in this buffer and check if it needs to be removed */
				buffer.usedBytes += sample.size - sample.alreadyRead;
				this.stream.logBufferLevel();
	
				sample.alreadyRead = sample.size;
	
				return sample;
			} else {
				/* the sample does not end in this buffer */				
				
				Log.debug("ISOFile","Getting sample #"+sampleNum+" partial data (alreadyRead: "+sample.alreadyRead+" offset: "+
					(sample.offset+sample.alreadyRead - buffer.fileStart)+" read size: "+lengthAfterStart+" full size: "+sample.size+")");
				
				DataStream.memcpy(sample.data.buffer, sample.alreadyRead, 
				                  buffer, sample.offset+sample.alreadyRead - buffer.fileStart, lengthAfterStart);
				sample.alreadyRead += lengthAfterStart;
	
				/* update the number of bytes used in this buffer and check if it needs to be removed */
				buffer.usedBytes += lengthAfterStart;
				this.stream.logBufferLevel();
				return null;
			}
		} else {
			return null;
		}
	}
	
	/* Release the memory used to store the data of the sample */
	ISOFile.prototype.releaseSample = function(trak, sampleNum) {	
		var sample = trak.samples[sampleNum];
		if (sample.data) {
			this.samplesDataSize -= sample.size;
			sample.data = null;
			sample.alreadyRead = 0;
			return sample.size;
		} else {
			return 0;
		}
	}
	
	ISOFile.prototype.getAllocatedSampleDataSize = function() {
		return this.samplesDataSize;
	}
	
	/* Builds the MIME Type 'codecs' sub-parameters for the whole file */
	ISOFile.prototype.getCodecs = function() {	
		var i;
		var codecs = "";
		for (i = 0; i < this.moov.traks.length; i++) {
			var trak = this.moov.traks[i];
			if (i>0) {
				codecs+=","; 
			}
			codecs += trak.mdia.minf.stbl.stsd.entries[0].getCodec();		
		}
		return codecs;
	}
	
	/* Helper function */
	ISOFile.prototype.getTrexById = function(id) {	
		var i;
		if (!this.moov || !this.moov.mvex) return null;
		for (i = 0; i < this.moov.mvex.trexs.length; i++) {
			var trex = this.moov.mvex.trexs[i];
			if (trex.track_id == id) return trex;
		}
		return null;
	}
	
	/* Helper function */
	ISOFile.prototype.getTrackById = function(id) {
		if (this.moov === undefined) {
			return null;
		}
		for (var j = 0; j < this.moov.traks.length; j++) {
			var trak = this.moov.traks[j];
			if (trak.tkhd.track_id == id) return trak;
		}
		return null;
	}
	// file:src/isofile-item-processing.js
	ISOFile.prototype.items = [];
	/* size of the buffers allocated for samples */
	ISOFile.prototype.itemsDataSize = 0;
	
	ISOFile.prototype.flattenItemInfo = function() {	
		var items = this.items;
		var i, j;
		var item;
		var meta = this.meta;
		if (meta === null || meta === undefined) return;
		if (meta.hdlr === undefined) return;
		if (meta.iinf === undefined) return;
		for (i = 0; i < meta.iinf.item_infos.length; i++) {
			item = {};
			item.id = meta.iinf.item_infos[i].item_ID;
			items[item.id] = item;
			item.ref_to = [];
			item.name = meta.iinf.item_infos[i].item_name;
			if (meta.iinf.item_infos[i].protection_index > 0) {
				item.protection = meta.ipro.protections[meta.iinf.item_infos[i].protection_index-1];
			}
			if (meta.iinf.item_infos[i].item_type) {
				item.type = meta.iinf.item_infos[i].item_type;
			} else {
				item.type = "mime";
			}
			item.content_type = meta.iinf.item_infos[i].content_type;
			item.content_encoding = meta.iinf.item_infos[i].content_encoding;
		}
		if (meta.iloc) {
			for(i = 0; i < meta.iloc.items.length; i++) {
				var offset;
				var itemloc = meta.iloc.items[i];
				item = items[itemloc.item_ID];
				if (itemloc.data_reference_index !== 0) {
					Log.warn("Item storage with reference to other files: not supported");
					item.source = meta.dinf.boxes[itemloc.data_reference_index-1];
				}
				if (itemloc.construction_method !== undefined) {
					Log.warn("Item storage with construction_method : not supported");
					switch(itemloc.construction_method) {
						case 0: // offset into the file referenced by the data reference index
						break;
						case 1: // offset into the idat box of this meta box
						break;
						case 2: // offset into another item
						break;
					}
				} else {
					item.extents = [];
					item.size = 0;
					for (j = 0; j < itemloc.extents.length; j++) {
						item.extents[j] = {};
						item.extents[j].offset = itemloc.extents[j].extent_offset + itemloc.base_offset;
						item.extents[j].length = itemloc.extents[j].extent_length;
						item.extents[j].alreadyRead = 0;
						item.size += item.extents[j].length;
					}
				}
			}
		}
		if (meta.pitm) {
			items[meta.pitm.item_id].primary = true;
		}
		if (meta.iref) {
			for (i=0; i <meta.iref.references.length; i++) {
				var ref = meta.iref.references[i];
				for (j=0; j<ref.references.length; j++) {
					items[ref.from_item_ID].ref_to.push({type: ref.type, id: ref.references[j]});
				}
			}
		}
	}
	
	ISOFile.prototype.getItem = function(item_id) {	
		var buffer;
		var item;
		
		if (!this.meta) {
			return null;
		}
	
	 	item = this.items[item_id];
		if (!item.data && item.size) {
			/* Not yet fetched */
			item.data = new Uint8Array(item.size);
			item.alreadyRead = 0;
			this.itemsDataSize += item.size;
			Log.debug("ISOFile", "Allocating item #"+item_id+" of size "+item.size+" (total: "+this.itemsDataSize+")");
		} else if (item.alreadyRead === item.size) {
			/* Already fetched entirely */
			return item;
		}
	
		/* The item has only been partially fetched, we need to check in all buffers to find the remaining extents*/
		
		for (var i = 0; i < item.extents.length; i++) {
			var extent = item.extents[i];
			if (extent.alreadyRead === extent.length) {
				continue;
			} else {
				var index =	this.stream.findPosition(true, extent.offset + extent.alreadyRead, false);
				if (index > -1) {
					buffer = this.stream.buffers[index];
					var lengthAfterStart = buffer.byteLength - (extent.offset + extent.alreadyRead - buffer.fileStart);
					if (extent.length - extent.alreadyRead <= lengthAfterStart) {
						/* the (rest of the) extent is entirely contained in this buffer */
	
						Log.debug("ISOFile","Getting item #"+item_id+" extent #"+i+" data (alreadyRead: "+extent.alreadyRead+
							" offset: "+(extent.offset+extent.alreadyRead - buffer.fileStart)+" read size: "+(extent.length - extent.alreadyRead)+
							" full extent size: "+extent.length+" full item size: "+item.size+")");
	
						DataStream.memcpy(item.data.buffer, item.alreadyRead, 
						                  buffer, extent.offset+extent.alreadyRead - buffer.fileStart, extent.length - extent.alreadyRead);
	
						/* update the number of bytes used in this buffer and check if it needs to be removed */
						buffer.usedBytes += extent.length - extent.alreadyRead;
						this.stream.logBufferLevel();
	
						extent.alreadyRead = extent.length;
						item.alreadyRead += extent.length;
					} else {
						/* the sample does not end in this buffer */				
						
						Log.debug("ISOFile","Getting item #"+item_id+" extent #"+i+" partial data (alreadyRead: "+extent.alreadyRead+" offset: "+
							(extent.offset+extent.alreadyRead - buffer.fileStart)+" read size: "+lengthAfterStart+
							" full extent size: "+extent.length+" full item size: "+item.size+")");
						
						DataStream.memcpy(item.data.buffer, item.alreadyRead, 
						                  buffer, extent.offset+extent.alreadyRead - buffer.fileStart, lengthAfterStart);
						extent.alreadyRead += lengthAfterStart;
						item.alreadyRead += lengthAfterStart;
	
						/* update the number of bytes used in this buffer and check if it needs to be removed */
						buffer.usedBytes += lengthAfterStart;
						this.stream.logBufferLevel();
						return null;
					}
				} else {
					return null;
				}
			}
		}
		if (item.alreadyRead === item.size) {
			/* fetched entirely */
			return item;
		} else {
			return null;
		}
	}
	
	/* Release the memory used to store the data of the item */
	ISOFile.prototype.releaseItem = function(item_id) {	
		var item = this.items[item_id];
		if (item.data) {
			this.itemsDataSize -= item.size;
			item.data = null;
			item.alreadyRead = 0;
			for (var i = 0; i < item.extents.length; i++) {
				var extent = item.extents[i];
				extent.alreadyRead = 0;
			}
			return item.size;
		} else {
			return 0;
		}
	}
	
	
	ISOFile.prototype.processItems = function(callback) {
		for(var i in this.items) {
			var item = this.items[i];
			this.getItem(item.id);
			if (callback && !item.sent) {
				callback(item);
				item.sent = true;
				item.data = null;
			}
		}
	}
	
	ISOFile.prototype.hasItem = function(name) {
		for(var i in this.items) {
			var item = this.items[i];
			if (item.name === name) {
				return item.id;
			}
		}
		return -1;
	}
	
	ISOFile.prototype.getMetaHandler = function() {
		if (!this.meta) {
			return null;
		} else {
			return this.meta.hdlr.componentSubType;
		}
	}
	
	ISOFile.prototype.getPrimaryItem = function() {
		if (!this.meta || !this.meta.pitm) {
			return null;
		} else {
			return this.getItem(this.meta.pitm.item_id);
		}
	}
	
	// file:src/isofile-write.js
	/* Rewrite the entire file */
	ISOFile.prototype.write = function(outstream) {
		for (var i=0; i<this.boxes.length; i++) {
			this.boxes[i].write(outstream);
		}
	}
	
	/* Modify the file and create the initialization segment */
	ISOFile.writeInitializationSegment = function(ftyp, moov, total_duration, sample_duration) {
		var i;
		var index;
		var mehd;
		var trex;
		var box;
		Log.debug("ISOFile", "Generating initialization segment");
	
		var stream = new DataStream();
		stream.endianness = DataStream.BIG_ENDIAN;
		ftyp.write(stream);
		
		/* we can now create the new mvex box */
		var mvex = moov.add("mvex");
		if (total_duration) {
			mvex.add("mehd").set("fragment_duration", total_duration);
		}
		for (i = 0; i < moov.traks.length; i++) {
			mvex.add("trex").set("track_id", moov.traks[i].tkhd.track_id)
							.set("default_sample_description_index", 1)
							.set("default_sample_duration", sample_duration)
							.set("default_sample_size", 0)
							.set("default_sample_flags", 1<<16)
		}
		moov.write(stream);
	
		return stream.buffer;
	
	}
	// file:src/mp4box.js
	/* 
	 * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato
	 * License: BSD-3-Clause (see LICENSE file)
	 */
	var MP4Box = function (_keepMdatData) {
		/* MultiBufferStream to parse chunked file data */
		this.inputStream = new MultiBufferStream();
		/* Boolean indicating if bytes containing media data should be kept in memory */
		this.keepMdatData = (_keepMdatData !== undefined ? _keepMdatData : true);
		/* ISOFile object containing the parsed boxes */
		this.inputIsoFile = new ISOFile(this.inputStream);
		this.inputIsoFile.discardMdatData = (this.keepMdatData ? false : true);
		/* Callback called when the moov parsing starts */
		this.onMoovStart = null;
		/* Boolean keeping track of the call to onMoovStart, to avoid double calls */
		this.moovStartSent = false;
		/* Callback called when the moov is entirely parsed */
		this.onReady = null;
		/* Boolean keeping track of the call to onReady, to avoid double calls */
		this.readySent = false;	
		/* Callback to call when segments are ready */
		this.onSegment = null;
		/* Callback to call when samples are ready */
		this.onSamples = null;
		/* Callback to call when there is an error in the parsing or processing of samples */	
		this.onError = null;
		/* Boolean indicating if the moov box run-length encoded tables of sample information have been processed */
		this.sampleListBuilt = false;
		/* Array of Track objects for which fragmentation of samples is requested */
		this.fragmentedTracks = [];
		/* Array of Track objects for which extraction of samples is requested */
		this.extractedTracks = [];
		/* Boolean indicating that fragmention is ready */
		this.isFragmentationInitialized = false;
		/* Boolean indicating that fragmented has started */
		this.sampleProcessingStarted = false;
		/* Number of the next 'moof' to generate when fragmenting */
		this.nextMoofNumber = 0;
		/* Boolean indicating if the initial list of items has been produced */
		this.itemListBuilt = false;
	}
	
	MP4Box.prototype.setSegmentOptions = function(id, user, options) {
		var trak = this.inputIsoFile.getTrackById(id);
		if (trak) {
			var fragTrack = {};
			this.fragmentedTracks.push(fragTrack);
			fragTrack.id = id;
			fragTrack.user = user;
			fragTrack.trak = trak;
			trak.nextSample = 0;
			fragTrack.segmentStream = null;
			fragTrack.nb_samples = 1000;
			fragTrack.rapAlignement = true;
			if (options) {
				if (options.nbSamples) fragTrack.nb_samples = options.nbSamples;
				if (options.rapAlignement) fragTrack.rapAlignement = options.rapAlignement;
			}
		}
	}
	
	MP4Box.prototype.unsetSegmentOptions = function(id) {
		var index = -1;
		for (var i = 0; i < this.fragmentedTracks.length; i++) {
			var fragTrack = this.fragmentedTracks[i];
			if (fragTrack.id == id) {
				index = i;
			}
		}
		if (index > -1) {
			this.fragmentedTracks.splice(index, 1);
		}
	}
	
	MP4Box.prototype.setExtractionOptions = function(id, user, options) {
		var trak = this.inputIsoFile.getTrackById(id);
		if (trak) {
			var extractTrack = {};
			this.extractedTracks.push(extractTrack);
			extractTrack.id = id;
			extractTrack.user = user;
			extractTrack.trak = trak;
			trak.nextSample = 0;
			extractTrack.nb_samples = 1000;
			extractTrack.samples = [];
			if (options) {
				if (options.nbSamples) extractTrack.nb_samples = options.nbSamples;
			}
		}
	}
	
	MP4Box.prototype.unsetExtractionOptions = function(id) {
		var index = -1;
		for (var i = 0; i < this.extractedTracks.length; i++) {
			var extractTrack = this.extractedTracks[i];
			if (extractTrack.id == id) {
				index = i;
			}
		}
		if (index > -1) {
			this.extractedTracks.splice(index, 1);
		}
	}
	
	MP4Box.prototype.createSingleSampleMoof = function(sample) {
		var moof = new BoxParser.moofBox();
		moof.add("mfhd").set("sequence_number", this.nextMoofNumber);
		this.nextMoofNumber++;
		var traf = moof.add("traf");
		traf.add("tfhd").set("track_id", sample.track_id)
						.set("flags", BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF);
		traf.add("tfdt").set("baseMediaDecodeTime", sample.dts);
		traf.add("trun").set("flags", BoxParser.TRUN_FLAGS_DATA_OFFSET | BoxParser.TRUN_FLAGS_DURATION | 
					 				  BoxParser.TRUN_FLAGS_SIZE | BoxParser.TRUN_FLAGS_FLAGS | 
					 				  BoxParser.TRUN_FLAGS_CTS_OFFSET)
						.set("data_offset",0)
						.set("first_sample_flags",0)
						.set("sample_count",1)
						.set("sample_duration",[sample.duration])
						.set("sample_size",[sample.size])
						.set("sample_flags",[0])
						.set("sample_composition_time_offset", [sample.cts - sample.dts]);
		return moof;
	}
	
	MP4Box.prototype.createFragment = function(input, track_id, sampleNumber, stream_) {
		var trak = this.inputIsoFile.getTrackById(track_id);
		var sample = this.inputIsoFile.getSample(trak, sampleNumber);
		if (sample == null) {
			sample = trak.samples[sampleNumber];
			if (this.nextSeekPosition) {
				this.nextSeekPosition = Math.min(sample.offset+sample.alreadyRead,this.nextSeekPosition);
			} else {
				this.nextSeekPosition = trak.samples[sampleNumber].offset+sample.alreadyRead;
			}
			return null;
		}
		
		var stream = stream_ || new DataStream();
		stream.endianness = DataStream.BIG_ENDIAN;
	
		var moof = this.createSingleSampleMoof(sample);
		moof.write(stream);
	
		/* adjusting the data_offset now that the moof size is known*/
		moof.trafs[0].truns[0].data_offset = moof.size+8; //8 is mdat header
		Log.debug("MP4Box", "Adjusting data_offset with new value "+moof.trafs[0].truns[0].data_offset);
		stream.adjustUint32(moof.trafs[0].truns[0].data_offset_position, moof.trafs[0].truns[0].data_offset);
			
		var mdat = new BoxParser.mdatBox();
		mdat.data = sample.data;
		mdat.write(stream);
		return stream;
	}
	
	MP4Box.prototype.processSamples = function() {
		var i;
		var trak;
		if (!this.sampleProcessingStarted) return;
	
		/* For each track marked for fragmentation, 
		   check if the next sample is there (i.e. if the sample information is known (i.e. moof has arrived) and if it has been downloaded) 
		   and create a fragment with it */
		if (this.isFragmentationInitialized && this.onSegment !== null) {
			for (i = 0; i < this.fragmentedTracks.length; i++) {
				var fragTrak = this.fragmentedTracks[i];
				trak = fragTrak.trak;
				while (trak.nextSample < trak.samples.length && this.sampleProcessingStarted) {				
					/* The sample information is there (either because the file is not fragmented and this is not the last sample, 
					or because the file is fragmented and the moof for that sample has been received */
					Log.debug("MP4Box", "Creating media fragment on track #"+fragTrak.id +" for sample "+trak.nextSample); 
					var result = this.createFragment(this.inputIsoFile, fragTrak.id, trak.nextSample, fragTrak.segmentStream);
					if (result) {
						fragTrak.segmentStream = result;
						trak.nextSample++;
					} else {
						/* The fragment could not be created because the media data is not there (not downloaded), wait for it */
						break;
					}
					/* A fragment is created by sample, but the segment is the accumulation in the buffer of these fragments.
					   It is flushed only as requested by the application (nb_samples) to avoid too many callbacks */
					if (trak.nextSample % fragTrak.nb_samples === 0 || trak.nextSample >= trak.samples.length) {
						Log.info("MP4Box", "Sending fragmented data on track #"+fragTrak.id+" for samples ["+Math.max(0,trak.nextSample-fragTrak.nb_samples)+","+(trak.nextSample-1)+"]"); 
						Log.info("MP4Box", "Sample data size in memory: "+this.inputIsoFile.getAllocatedSampleDataSize()); 			
						if (this.onSegment) {
							this.onSegment(fragTrak.id, fragTrak.user, fragTrak.segmentStream.buffer, trak.nextSample);
						}
						/* force the creation of a new buffer */
						fragTrak.segmentStream = null;
						if (fragTrak !== this.fragmentedTracks[i]) {
							/* make sure we can stop fragmentation if needed */
							break;
						}
					}
				}
			}
		}
	
		if (this.onSamples !== null) {
			/* For each track marked for data export, 
			   check if the next sample is there (i.e. has been downloaded) and send it */
			for (i = 0; i < this.extractedTracks.length; i++) {
				var extractTrak = this.extractedTracks[i];
				trak = extractTrak.trak;
				while (trak.nextSample < trak.samples.length && this.sampleProcessingStarted) {				
					Log.debug("MP4Box", "Exporting on track #"+extractTrak.id +" sample #"+trak.nextSample);
					var sample = this.inputIsoFile.getSample(trak, trak.nextSample);
					if (sample) {
						trak.nextSample++;
						extractTrak.samples.push(sample);
					} else {
						break;
					}
					if (trak.nextSample % extractTrak.nb_samples === 0 || trak.nextSample >= trak.samples.length) {
						Log.debug("MP4Box", "Sending samples on track #"+extractTrak.id+" for sample "+trak.nextSample); 
						if (this.onSamples) {
							this.onSamples(extractTrak.id, extractTrak.user, extractTrak.samples);
						}
						extractTrak.samples = [];
						if (extractTrak !== this.extractedTracks[i]) {
							/* check if the extraction needs to be stopped */
							break;
						}
					}
				}
			}
		}
	}
	
	MP4Box.prototype.checkBuffer = function (ab) {
		if (ab === null || ab === undefined) {
			throw("Buffer must be defined and non empty");
		}	
		if (ab.fileStart === undefined) {
			throw("Buffer must have a fileStart property");
		}	
		if (ab.byteLength === 0) {
			Log.warn("MP4Box", "Ignoring empty buffer (fileStart: "+ab.fileStart+")");
			this.inputStream.logBufferLevel();
			return false;
		}
		Log.info("MP4Box", "Processing buffer (fileStart: "+ab.fileStart+")");
	
		/* mark the bytes in the buffer as not being used yet */
		ab.usedBytes = 0;
		this.inputStream.insertBuffer(ab);
		this.inputStream.logBufferLevel();
	
		if (!this.inputStream.initialized()) {
			Log.warn("MP4Box", "Not ready to start parsing");
			return false;
		}
		return true;
	}
	
	/* Processes a new ArrayBuffer (with a fileStart property)
	   Returns the next expected file position, or undefined if not ready to parse */
	MP4Box.prototype.appendBuffer = function(ab) {
		var nextFileStart;
		if (this.checkBuffer) {
			if (!this.checkBuffer(ab)) {
				return;
			}
		}
	
		/* Parse whatever is in the existing buffers */
		this.inputIsoFile.parse();
	
		/* Check if the moovStart callback needs to be called */
		if (this.inputIsoFile.moovStartFound && !this.moovStartSent) {
			this.moovStartSent = true;
			if (this.onMoovStart) this.onMoovStart();
		}
	
		if (this.inputIsoFile.moov) {
			/* A moov box has been entirely parsed */
			
			if (this.processSamples) {
				/* if this is the first call after the moov is found we initialize the list of samples (may be empty in fragmented files) */
				if (!this.sampleListBuilt) {
					this.inputIsoFile.buildSampleLists();
					this.sampleListBuilt = true;
				} 
	
				/* We update the sample information if there are any new moof boxes */
				this.inputIsoFile.updateSampleLists();
			}
			
			/* If the application needs to be informed that the 'moov' has been found, 
			   we create the information object and callback the application */
			if (this.onReady && !this.readySent) {
				this.readySent = true;
				this.onReady(this.getInfo());
			}
	
			if (this.processSamples) {
				/* See if any sample extraction or segment creation needs to be done with the available samples */
				this.processSamples();
			}
	
			/* Inform about the best range to fetch next */
			if (this.nextSeekPosition) {
				nextFileStart = this.nextSeekPosition;
				this.nextSeekPosition = undefined;
			} else {
				nextFileStart = this.inputIsoFile.nextParsePosition;
			}		
			if (this.inputStream.getEndFilePositionAfter) {
				nextFileStart = this.inputStream.getEndFilePositionAfter(nextFileStart);
			}
		} else {
			if (this.inputIsoFile !== null) {
				/* moov has not been parsed but the first buffer was received, 
				   the next fetch should probably be the next box start */
				nextFileStart = this.inputIsoFile.nextParsePosition;
			} else {
				/* No valid buffer has been parsed yet, we cannot know what to parse next */
				nextFileStart = 0;
			}
		}	
		if (this.inputIsoFile.meta) {
			if (this.inputIsoFile.flattenItemInfo && !this.itemListBuilt) {
				this.inputIsoFile.flattenItemInfo();
				this.itemListBuilt = true;
			}
			if (this.inputIsoFile.processItems) {
				this.inputIsoFile.processItems(this.onItem);
			}
		}
	
		if (this.inputStream.cleanBuffers) {
			Log.info("MP4Box", "Done processing buffer (fileStart: "+ab.fileStart+") - next buffer to fetch should have a fileStart position of "+nextFileStart);
			this.inputStream.logBufferLevel();
			this.inputStream.cleanBuffers();
			this.inputStream.logBufferLevel(true);
			Log.info("MP4Box", "Sample data size in memory: "+this.inputIsoFile.getAllocatedSampleDataSize()); 			
		}
		return nextFileStart;
	}
	
	MP4Box.prototype.getInfo = function() {
		var i, j;
		var movie = {};
		var trak;
		var track;
		var sample_desc;
		var _1904 = (new Date(4, 0, 1, 0, 0, 0, 0).getTime());
	
		if (this.inputIsoFile.moov) {
			movie.hasMoov = true;
			movie.duration = this.inputIsoFile.moov.mvhd.duration;
			movie.timescale = this.inputIsoFile.moov.mvhd.timescale;
			movie.isFragmented = (this.inputIsoFile.moov.mvex != null);
			if (movie.isFragmented && this.inputIsoFile.moov.mvex.mehd) {
				movie.fragment_duration = this.inputIsoFile.moov.mvex.mehd.fragment_duration;
			} 
			movie.isProgressive = this.inputIsoFile.isProgressive;
			movie.hasIOD = (this.inputIsoFile.moov.iods != null);
			movie.brands = []; 
			movie.brands.push(this.inputIsoFile.ftyp.major_brand);
			movie.brands = movie.brands.concat(this.inputIsoFile.ftyp.compatible_brands);
			movie.created = new Date(_1904+this.inputIsoFile.moov.mvhd.creation_time*1000);
			movie.modified = new Date(_1904+this.inputIsoFile.moov.mvhd.modification_time*1000);
			movie.tracks = [];
			movie.audioTracks = [];
			movie.videoTracks = [];
			movie.subtitleTracks = [];
			movie.metadataTracks = [];
			movie.hintTracks = [];
			movie.otherTracks = [];
			for (i = 0; i < this.inputIsoFile.moov.traks.length; i++) {
				trak = this.inputIsoFile.moov.traks[i];
				sample_desc = trak.mdia.minf.stbl.stsd.entries[0];
				track = {};
				movie.tracks.push(track);
				track.id = trak.tkhd.track_id;
				track.name = trak.mdia.hdlr.name;
				track.references = [];
				if (trak.tref) {
					for (j = 0; j < trak.tref.boxes.length; j++) {
						ref = {};
						track.references.push(ref);
						ref.type = trak.tref.boxes[j].type;
						ref.track_ids = trak.tref.boxes[j].track_ids;
					}
				}
				if (trak.edts) {
					track.edits = trak.edts.elst.entries;
				}
				track.created = new Date(_1904+trak.tkhd.creation_time*1000);
				track.modified = new Date(_1904+trak.tkhd.modification_time*1000);
				track.movie_duration = trak.tkhd.duration;
				track.movie_timescale = movie.timescale;
				track.layer = trak.tkhd.layer;
				track.alternate_group = trak.tkhd.alternate_group;
				track.volume = trak.tkhd.volume;
				track.matrix = trak.tkhd.matrix;
				track.track_width = trak.tkhd.width/(1<<16);
				track.track_height = trak.tkhd.height/(1<<16);
				track.timescale = trak.mdia.mdhd.timescale;
				track.cts_shift = trak.mdia.minf.stbl.cslg;
				track.duration = trak.mdia.mdhd.duration;
				track.samples_duration = trak.samples_duration;
				track.codec = sample_desc.getCodec();	
				track.kind = (trak.udta && trak.udta.kinds.length ? trak.udta.kinds[0] : { schemeURI: "", value: ""});
				track.language = (trak.mdia.elng ? trak.mdia.elng.extended_language : trak.mdia.mdhd.languageString);
				track.nb_samples = trak.samples.length;
				track.size = trak.samples_size;
				track.bitrate = (track.size*8*track.timescale)/track.samples_duration;
				if (sample_desc.isAudio()) {
					track.type = "audio";
					movie.audioTracks.push(track);
					track.audio = {};
					track.audio.sample_rate = sample_desc.getSampleRate();		
					track.audio.channel_count = sample_desc.getChannelCount();		
					track.audio.sample_size = sample_desc.getSampleSize();		
				} else if (sample_desc.isVideo()) {
					track.type = "video";
					movie.videoTracks.push(track);
					track.video = {};
					track.video.width = sample_desc.getWidth();		
					track.video.height = sample_desc.getHeight();		
				} else if (sample_desc.isSubtitle()) {
					track.type = "subtitles";
					movie.subtitleTracks.push(track);
				} else if (sample_desc.isHint()) {
					track.type = "metadata";
					movie.hintTracks.push(track);
				} else if (sample_desc.isMetadata()) {
					track.type = "metadata";
					movie.metadataTracks.push(track);
				} else {
					track.type = "metadata";
					movie.otherTracks.push(track);
				}
			}
		} else {
			movie.hasMoov = false;
		}
		movie.mime = "";
		if (movie.videoTracks.length > 0) {
			movie.mime += 'video/mp4; codecs=\"';
		} else if (movie.audioTracks.length > 0) {
			movie.mime += 'audio/mp4; codecs=\"';
		} else {
			movie.mime += 'application/mp4; codecs=\"';
		}
		for (i = 0; i < movie.tracks.length; i++) {
			if (i !== 0) movie.mime += ',';
			movie.mime+= movie.tracks[i].codec;
		}
		movie.mime += '\"; profiles=\"';
		movie.mime += this.inputIsoFile.ftyp.compatible_brands.join();
		movie.mime += '\"';
		return movie;
	}
	
	MP4Box.prototype.writeFile = function() {
		var stream = new DataStream();
		stream.endianness = DataStream.BIG_ENDIAN;
		this.inputIsoFile.write(stream);
		return stream.buffer;
	}
	
	MP4Box.prototype.initializeSegmentation = function() {
		var i;
		var j;
		var box;
		var initSegs;
		var trak;
		var seg;
		if (this.onSegment === null) {
			Log.warn("MP4Box", "No segmentation callback set!");
		}
		if (!this.isFragmentationInitialized) {
			this.isFragmentationInitialized = true;		
			this.nextMoofNumber = 0;
			this.inputIsoFile.resetTables();
		}	
		initSegs = [];	
		for (i = 0; i < this.fragmentedTracks.length; i++) {
			var moov = new BoxParser.moovBox();
			moov.mvhd = this.inputIsoFile.moov.mvhd;
		    moov.boxes.push(moov.mvhd);
			trak = this.inputIsoFile.getTrackById(this.fragmentedTracks[i].id);
			moov.boxes.push(trak);
			moov.traks.push(trak);
			seg = {};
			seg.id = trak.tkhd.track_id;
			seg.user = this.fragmentedTracks[i].user;
			seg.buffer = ISOFile.writeInitializationSegment(this.inputIsoFile.ftyp, moov, (this.inputIsoFile.moov.mvex && this.inputIsoFile.moov.mvex.mehd ? this.inputIsoFile.moov.mvex.mehd.fragment_duration: undefined), (this.inputIsoFile.moov.traks[i].samples.length>0 ? this.inputIsoFile.moov.traks[i].samples[0].duration: 0));
			initSegs.push(seg);
		}
		return initSegs;
	}
	
	/* Called by the application to release the resources associated to samples already forwarded to the application */
	MP4Box.prototype.releaseUsedSamples = function (id, sampleNum) {
		var size = 0;
		var trak = this.inputIsoFile.getTrackById(id);
		if (!trak.lastValidSample) trak.lastValidSample = 0;
		for (var i = trak.lastValidSample; i < sampleNum; i++) {
			size+=this.inputIsoFile.releaseSample(trak, i);
		}
		Log.info("MP4Box", "Track #"+id+" released samples up to "+sampleNum+" (released size: "+size+", remaining: "+this.inputIsoFile.samplesDataSize+")");
		trak.lastValidSample = sampleNum;
	}
	
	/* Called by the application to flush the remaining samples, once the download is finished */
	MP4Box.prototype.flush = function() {
		Log.info("MP4Box", "Flushing remaining samples");
		this.inputIsoFile.updateSampleLists();
		this.processSamples();
		this.inputStream.cleanBuffers();
		this.inputStream.logBufferLevel(true);
	}
	
	/* Finds the byte offset for a given time on a given track
	   also returns the time of the previous rap */
	MP4Box.prototype.seekTrack = function(time, useRap, trak) {
		var j;
		var sample;
		var seek_offset = Infinity;
		var rap_seek_sample_num = 0;
		var seek_sample_num = 0;
		var timescale;
		
		if (trak.samples.length === 0) {
			Log.info("MP4Box", "No sample in track, cannot seek! Using time "+Log.getDurationString(0, 1) +" and offset: "+0);
			return { offset: 0, time: 0 };
		} 
	
		for (j = 0; j < trak.samples.length; j++) {
			sample = trak.samples[j];
			if (j === 0) {
				seek_sample_num = 0;
				timescale = sample.timescale;
			} else if (sample.cts > time * sample.timescale) {
				seek_sample_num = j-1;
				break;
			} 
			if (useRap && sample.is_sync) {
				rap_seek_sample_num = j;
			}
		}
		if (useRap) {
			seek_sample_num = rap_seek_sample_num;
		}
		time = trak.samples[seek_sample_num].cts;
		trak.nextSample = seek_sample_num;
		while (trak.samples[seek_sample_num].alreadyRead === trak.samples[seek_sample_num].size) {
			seek_sample_num++;
		}
		seek_offset = trak.samples[seek_sample_num].offset+trak.samples[seek_sample_num].alreadyRead;
		Log.info("MP4Box", "Seeking to "+(useRap ? "RAP": "")+" sample #"+trak.nextSample+" on track "+trak.tkhd.track_id+", time "+Log.getDurationString(time, timescale) +" and offset: "+seek_offset);
		return { offset: seek_offset, time: time/timescale };
	}
	
	/* Finds the byte offset in the file corresponding to the given time or to the time of the previous RAP */
	MP4Box.prototype.seek = function(time, useRap) {
		var moov = this.inputIsoFile.moov;
		var trak;
		var trak_seek_info;
		var i;
		var seek_info = { offset: Infinity, time: Infinity };
		if (!this.inputIsoFile.moov) {
			throw "Cannot seek: moov not received!";
		} else {
			for (i = 0; i<moov.traks.length; i++) {
				trak = moov.traks[i];			
				trak_seek_info = this.seekTrack(time, useRap, trak);
				if (trak_seek_info.offset < seek_info.offset) {
					seek_info.offset = trak_seek_info.offset;
				}
				if (trak_seek_info.time < seek_info.time) {
					seek_info.time = trak_seek_info.time;
				}
			}
			Log.info("MP4Box", "Seeking at time "+Log.getDurationString(seek_info.time, 1)+" needs a buffer with a fileStart position of "+seek_info.offset);
			if (seek_info.offset === Infinity) {
				/* No sample info, in all tracks, cannot seek */
				seek_info = { offset: this.inputIsoFile.nextParsePosition, time: 0 };
			} else {
				/* check if the seek position is already in some buffer and
				 in that case return the end of that buffer (or of the last contiguous buffer) */
				/* TODO: Should wait until append operations are done */
				seek_info.offset = this.inputStream.getEndFilePositionAfter(seek_info.offset);
			}
			Log.info("MP4Box", "Adjusted seek position (after checking data already in buffer): "+seek_info.offset);
			return seek_info;
		}
	}
	
	MP4Box.prototype.getTrackSamplesInfo = function(track_id) {
		var track = this.inputIsoFile.getTrackById(track_id);
		if (track) {
			return track.samples;
		} else {
			return;
		}
	}
	
	MP4Box.prototype.getTrackSample = function(track_id, number) {
		var track = this.inputIsoFile.getTrackById(track_id);
		var sample = this.inputIsoFile.getSample(track, number);
		return sample;	
	}
	
	MP4Box.prototype.start = function() {
		this.sampleProcessingStarted = true;
		this.processSamples();
	}
	
	MP4Box.prototype.stop = function() {
		this.sampleProcessingStarted = false;
	}
	
	if (true) {
		exports.MP4Box = MP4Box;	
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global, process) {// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.
	
	;(function (undefined) {
	
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };
	
	  function checkGlobal(value) {
	    return (value && value.Object === Object) ? value : null;
	  }
	
	  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;
	  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;
	  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === 'object' && global);
	  var freeSelf = checkGlobal(objectTypes[typeof self] && self);
	  var freeWindow = checkGlobal(objectTypes[typeof window] && window);
	  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;
	  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
	  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();
	
	  var Rx = {
	    internals: {},
	    config: {
	      Promise: root.Promise
	    },
	    helpers: { }
	  };
	
	  // Defaults
	  var noop = Rx.helpers.noop = function () { },
	    identity = Rx.helpers.identity = function (x) { return x; },
	    defaultNow = Rx.helpers.defaultNow = Date.now,
	    defaultComparer = Rx.helpers.defaultComparer = function (x, y) { return isEqual(x, y); },
	    defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) { return x > y ? 1 : (x < y ? -1 : 0); },
	    defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) { return x.toString(); },
	    defaultError = Rx.helpers.defaultError = function (err) { throw err; },
	    isPromise = Rx.helpers.isPromise = function (p) { return !!p && typeof p.subscribe !== 'function' && typeof p.then === 'function'; },
	    isFunction = Rx.helpers.isFunction = (function () {
	
	      var isFn = function (value) {
	        return typeof value == 'function' || false;
	      };
	
	      // fallback for older versions of Chrome and Safari
	      if (isFn(/x/)) {
	        isFn = function(value) {
	          return typeof value == 'function' && toString.call(value) == '[object Function]';
	        };
	      }
	
	      return isFn;
	    }());
	
	  function cloneArray(arr) { for(var a = [], i = 0, len = arr.length; i < len; i++) { a.push(arr[i]); } return a;}
	
	  var errorObj = {e: {}};
	  
	  function tryCatcherGen(tryCatchTarget) {
	    return function tryCatcher() {
	      try {
	        return tryCatchTarget.apply(this, arguments);
	      } catch (e) {
	        errorObj.e = e;
	        return errorObj;
	      }
	    };
	  }
	
	  var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {
	    if (!isFunction(fn)) { throw new TypeError('fn must be a function'); }
	    return tryCatcherGen(fn);
	  };
	
	  function thrower(e) {
	    throw e;
	  }
	
	  Rx.config.longStackSupport = false;
	  var hasStacks = false, stacks = tryCatch(function () { throw new Error(); })();
	  hasStacks = !!stacks.e && !!stacks.e.stack;
	
	  // All code after this point will be filtered from stack traces reported by RxJS
	  var rStartingLine = captureLine(), rFileName;
	
	  var STACK_JUMP_SEPARATOR = 'From previous event:';
	
	  function makeStackTraceLong(error, observable) {
	    // If possible, transform the error stack trace by removing Node and RxJS
	    // cruft, then concatenating with the stack trace of `observable`.
	    if (hasStacks &&
	        observable.stack &&
	        typeof error === 'object' &&
	        error !== null &&
	        error.stack &&
	        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	    ) {
	      var stacks = [];
	      for (var o = observable; !!o; o = o.source) {
	        if (o.stack) {
	          stacks.unshift(o.stack);
	        }
	      }
	      stacks.unshift(error.stack);
	
	      var concatedStacks = stacks.join('\n' + STACK_JUMP_SEPARATOR + '\n');
	      error.stack = filterStackString(concatedStacks);
	    }
	  }
	
	  function filterStackString(stackString) {
	    var lines = stackString.split('\n'), desiredLines = [];
	    for (var i = 0, len = lines.length; i < len; i++) {
	      var line = lines[i];
	
	      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	        desiredLines.push(line);
	      }
	    }
	    return desiredLines.join('\n');
	  }
	
	  function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	    if (!fileNameAndLineNumber) {
	      return false;
	    }
	    var fileName = fileNameAndLineNumber[0], lineNumber = fileNameAndLineNumber[1];
	
	    return fileName === rFileName &&
	      lineNumber >= rStartingLine &&
	      lineNumber <= rEndingLine;
	  }
	
	  function isNodeFrame(stackLine) {
	    return stackLine.indexOf('(module.js:') !== -1 ||
	      stackLine.indexOf('(node.js:') !== -1;
	  }
	
	  function captureLine() {
	    if (!hasStacks) { return; }
	
	    try {
	      throw new Error();
	    } catch (e) {
	      var lines = e.stack.split('\n');
	      var firstLine = lines[0].indexOf('@') > 0 ? lines[1] : lines[2];
	      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	      if (!fileNameAndLineNumber) { return; }
	
	      rFileName = fileNameAndLineNumber[0];
	      return fileNameAndLineNumber[1];
	    }
	  }
	
	  function getFileNameAndLineNumber(stackLine) {
	    // Named functions: 'at functionName (filename:lineNumber:columnNumber)'
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) { return [attempt1[1], Number(attempt1[2])]; }
	
	    // Anonymous functions: 'at filename:lineNumber:columnNumber'
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) { return [attempt2[1], Number(attempt2[2])]; }
	
	    // Firefox style: 'function@filename:lineNumber or @filename:lineNumber'
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) { return [attempt3[1], Number(attempt3[2])]; }
	  }
	
	  var EmptyError = Rx.EmptyError = function() {
	    this.message = 'Sequence contains no elements.';
	    Error.call(this);
	  };
	  EmptyError.prototype = Object.create(Error.prototype);
	  EmptyError.prototype.name = 'EmptyError';
	
	  var ObjectDisposedError = Rx.ObjectDisposedError = function() {
	    this.message = 'Object has been disposed';
	    Error.call(this);
	  };
	  ObjectDisposedError.prototype = Object.create(Error.prototype);
	  ObjectDisposedError.prototype.name = 'ObjectDisposedError';
	
	  var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function () {
	    this.message = 'Argument out of range';
	    Error.call(this);
	  };
	  ArgumentOutOfRangeError.prototype = Object.create(Error.prototype);
	  ArgumentOutOfRangeError.prototype.name = 'ArgumentOutOfRangeError';
	
	  var NotSupportedError = Rx.NotSupportedError = function (message) {
	    this.message = message || 'This operation is not supported';
	    Error.call(this);
	  };
	  NotSupportedError.prototype = Object.create(Error.prototype);
	  NotSupportedError.prototype.name = 'NotSupportedError';
	
	  var NotImplementedError = Rx.NotImplementedError = function (message) {
	    this.message = message || 'This operation is not implemented';
	    Error.call(this);
	  };
	  NotImplementedError.prototype = Object.create(Error.prototype);
	  NotImplementedError.prototype.name = 'NotImplementedError';
	
	  var notImplemented = Rx.helpers.notImplemented = function () {
	    throw new NotImplementedError();
	  };
	
	  var notSupported = Rx.helpers.notSupported = function () {
	    throw new NotSupportedError();
	  };
	
	  // Shim in iterator support
	  var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) ||
	    '_es6shim_iterator_';
	  // Bug for mozilla version
	  if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
	    $iterator$ = '@@iterator';
	  }
	
	  var doneEnumerator = Rx.doneEnumerator = { done: true, value: undefined };
	
	  var isIterable = Rx.helpers.isIterable = function (o) {
	    return o && o[$iterator$] !== undefined;
	  };
	
	  var isArrayLike = Rx.helpers.isArrayLike = function (o) {
	    return o && o.length !== undefined;
	  };
	
	  Rx.helpers.iterator = $iterator$;
	
	  var bindCallback = Rx.internals.bindCallback = function (func, thisArg, argCount) {
	    if (typeof thisArg === 'undefined') { return func; }
	    switch(argCount) {
	      case 0:
	        return function() {
	          return func.call(thisArg)
	        };
	      case 1:
	        return function(arg) {
	          return func.call(thisArg, arg);
	        };
	      case 2:
	        return function(value, index) {
	          return func.call(thisArg, value, index);
	        };
	      case 3:
	        return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	    }
	
	    return function() {
	      return func.apply(thisArg, arguments);
	    };
	  };
	
	  /** Used to determine if values are of the language type Object */
	  var dontEnums = ['toString',
	    'toLocaleString',
	    'valueOf',
	    'hasOwnProperty',
	    'isPrototypeOf',
	    'propertyIsEnumerable',
	    'constructor'],
	  dontEnumsLength = dontEnums.length;
	
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
	
	var objectProto = Object.prototype,
	    hasOwnProperty = objectProto.hasOwnProperty,
	    objToString = objectProto.toString,
	    MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
	
	var keys = Object.keys || (function() {
	    var hasOwnProperty = Object.prototype.hasOwnProperty,
	        hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),
	        dontEnums = [
	          'toString',
	          'toLocaleString',
	          'valueOf',
	          'hasOwnProperty',
	          'isPrototypeOf',
	          'propertyIsEnumerable',
	          'constructor'
	        ],
	        dontEnumsLength = dontEnums.length;
	
	    return function(obj) {
	      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
	        throw new TypeError('Object.keys called on non-object');
	      }
	
	      var result = [], prop, i;
	
	      for (prop in obj) {
	        if (hasOwnProperty.call(obj, prop)) {
	          result.push(prop);
	        }
	      }
	
	      if (hasDontEnumBug) {
	        for (i = 0; i < dontEnumsLength; i++) {
	          if (hasOwnProperty.call(obj, dontEnums[i])) {
	            result.push(dontEnums[i]);
	          }
	        }
	      }
	      return result;
	    };
	  }());
	
	function equalObjects(object, other, equalFunc, isLoose, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;
	
	  if (objLength !== othLength && !isLoose) {
	    return false;
	  }
	  var index = objLength, key;
	  while (index--) {
	    key = objProps[index];
	    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  var skipCtor = isLoose;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key],
	        result;
	
	    if (!(result === undefined ? equalFunc(objValue, othValue, isLoose, stackA, stackB) : result)) {
	      return false;
	    }
	    skipCtor || (skipCtor = key === 'constructor');
	  }
	  if (!skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;
	
	    if (objCtor !== othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor === 'function' && objCtor instanceof objCtor &&
	          typeof othCtor === 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      return +object === +other;
	
	    case errorTag:
	      return object.name === other.name && object.message === other.message;
	
	    case numberTag:
	      return (object !== +object) ?
	        other !== +other :
	        object === +other;
	
	    case regexpTag:
	    case stringTag:
	      return object === (other + '');
	  }
	  return false;
	}
	
	var isObject = Rx.internals.isObject = function(value) {
	  var type = typeof value;
	  return !!value && (type === 'object' || type === 'function');
	};
	
	function isObjectLike(value) {
	  return !!value && typeof value === 'object';
	}
	
	function isLength(value) {
	  return typeof value === 'number' && value > -1 && value % 1 === 0 && value <= MAX_SAFE_INTEGER;
	}
	
	var isHostObject = (function() {
	  try {
	    Object({ 'toString': 0 } + '');
	  } catch(e) {
	    return function() { return false; };
	  }
	  return function(value) {
	    return typeof value.toString !== 'function' && typeof (value + '') === 'string';
	  };
	}());
	
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}
	
	var isArray = Array.isArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) === arrayTag;
	};
	
	function arraySome (array, predicate) {
	  var index = -1,
	      length = array.length;
	
	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	function equalArrays(array, other, equalFunc, isLoose, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length;
	
	  if (arrLength !== othLength && !(isLoose && othLength > arrLength)) {
	    return false;
	  }
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index],
	        result;
	
	    if (result !== undefined) {
	      if (result) {
	        continue;
	      }
	      return false;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isLoose) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, isLoose, stackA, stackB);
	          })) {
	        return false;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, isLoose, stackA, stackB))) {
	      return false;
	    }
	  }
	  return true;
	}
	
	function baseIsEqualDeep(object, other, equalFunc, isLoose, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;
	
	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag === argsTag) {
	      objTag = objectTag;
	    } else if (objTag !== objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag === argsTag) {
	      othTag = objectTag;
	    }
	  }
	  var objIsObj = objTag === objectTag && !isHostObject(object),
	      othIsObj = othTag === objectTag && !isHostObject(other),
	      isSameTag = objTag === othTag;
	
	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  if (!isLoose) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, isLoose, stackA, stackB);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  // For more information on detecting circular references see https://es5.github.io/#JO.
	  stackA || (stackA = []);
	  stackB || (stackB = []);
	
	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] === object) {
	      return stackB[length] === other;
	    }
	  }
	  // Add `object` and `other` to the stack of traversed objects.
	  stackA.push(object);
	  stackB.push(other);
	
	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, isLoose, stackA, stackB);
	
	  stackA.pop();
	  stackB.pop();
	
	  return result;
	}
	
	function baseIsEqual(value, other, isLoose, stackA, stackB) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, isLoose, stackA, stackB);
	}
	
	var isEqual = Rx.internals.isEqual = function (value, other) {
	  return baseIsEqual(value, other);
	};
	
	  var hasProp = {}.hasOwnProperty,
	      slice = Array.prototype.slice;
	
	  var inherits = Rx.internals.inherits = function (child, parent) {
	    function __() { this.constructor = child; }
	    __.prototype = parent.prototype;
	    child.prototype = new __();
	  };
	
	  var addProperties = Rx.internals.addProperties = function (obj) {
	    for(var sources = [], i = 1, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
	    for (var idx = 0, ln = sources.length; idx < ln; idx++) {
	      var source = sources[idx];
	      for (var prop in source) {
	        obj[prop] = source[prop];
	      }
	    }
	  };
	
	  // Rx Utils
	  var addRef = Rx.internals.addRef = function (xs, r) {
	    return new AnonymousObservable(function (observer) {
	      return new BinaryDisposable(r.getDisposable(), xs.subscribe(observer));
	    });
	  };
	
	  function arrayInitialize(count, factory) {
	    var a = new Array(count);
	    for (var i = 0; i < count; i++) {
	      a[i] = factory();
	    }
	    return a;
	  }
	
	  function IndexedItem(id, value) {
	    this.id = id;
	    this.value = value;
	  }
	
	  IndexedItem.prototype.compareTo = function (other) {
	    var c = this.value.compareTo(other.value);
	    c === 0 && (c = this.id - other.id);
	    return c;
	  };
	
	  var PriorityQueue = Rx.internals.PriorityQueue = function (capacity) {
	    this.items = new Array(capacity);
	    this.length = 0;
	  };
	
	  var priorityProto = PriorityQueue.prototype;
	  priorityProto.isHigherPriority = function (left, right) {
	    return this.items[left].compareTo(this.items[right]) < 0;
	  };
	
	  priorityProto.percolate = function (index) {
	    if (index >= this.length || index < 0) { return; }
	    var parent = index - 1 >> 1;
	    if (parent < 0 || parent === index) { return; }
	    if (this.isHigherPriority(index, parent)) {
	      var temp = this.items[index];
	      this.items[index] = this.items[parent];
	      this.items[parent] = temp;
	      this.percolate(parent);
	    }
	  };
	
	  priorityProto.heapify = function (index) {
	    +index || (index = 0);
	    if (index >= this.length || index < 0) { return; }
	    var left = 2 * index + 1,
	        right = 2 * index + 2,
	        first = index;
	    if (left < this.length && this.isHigherPriority(left, first)) {
	      first = left;
	    }
	    if (right < this.length && this.isHigherPriority(right, first)) {
	      first = right;
	    }
	    if (first !== index) {
	      var temp = this.items[index];
	      this.items[index] = this.items[first];
	      this.items[first] = temp;
	      this.heapify(first);
	    }
	  };
	
	  priorityProto.peek = function () { return this.items[0].value; };
	
	  priorityProto.removeAt = function (index) {
	    this.items[index] = this.items[--this.length];
	    this.items[this.length] = undefined;
	    this.heapify();
	  };
	
	  priorityProto.dequeue = function () {
	    var result = this.peek();
	    this.removeAt(0);
	    return result;
	  };
	
	  priorityProto.enqueue = function (item) {
	    var index = this.length++;
	    this.items[index] = new IndexedItem(PriorityQueue.count++, item);
	    this.percolate(index);
	  };
	
	  priorityProto.remove = function (item) {
	    for (var i = 0; i < this.length; i++) {
	      if (this.items[i].value === item) {
	        this.removeAt(i);
	        return true;
	      }
	    }
	    return false;
	  };
	  PriorityQueue.count = 0;
	
	  /**
	   * Represents a group of disposable resources that are disposed together.
	   * @constructor
	   */
	  var CompositeDisposable = Rx.CompositeDisposable = function () {
	    var args = [], i, len;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      len = arguments.length;
	      args = new Array(len);
	      for(i = 0; i < len; i++) { args[i] = arguments[i]; }
	    }
	    this.disposables = args;
	    this.isDisposed = false;
	    this.length = args.length;
	  };
	
	  var CompositeDisposablePrototype = CompositeDisposable.prototype;
	
	  /**
	   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
	   * @param {Mixed} item Disposable to add.
	   */
	  CompositeDisposablePrototype.add = function (item) {
	    if (this.isDisposed) {
	      item.dispose();
	    } else {
	      this.disposables.push(item);
	      this.length++;
	    }
	  };
	
	  /**
	   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
	   * @param {Mixed} item Disposable to remove.
	   * @returns {Boolean} true if found; false otherwise.
	   */
	  CompositeDisposablePrototype.remove = function (item) {
	    var shouldDispose = false;
	    if (!this.isDisposed) {
	      var idx = this.disposables.indexOf(item);
	      if (idx !== -1) {
	        shouldDispose = true;
	        this.disposables.splice(idx, 1);
	        this.length--;
	        item.dispose();
	      }
	    }
	    return shouldDispose;
	  };
	
	  /**
	   *  Disposes all disposables in the group and removes them from the group.
	   */
	  CompositeDisposablePrototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      var len = this.disposables.length, currentDisposables = new Array(len);
	      for(var i = 0; i < len; i++) { currentDisposables[i] = this.disposables[i]; }
	      this.disposables = [];
	      this.length = 0;
	
	      for (i = 0; i < len; i++) {
	        currentDisposables[i].dispose();
	      }
	    }
	  };
	
	  /**
	   * Provides a set of static methods for creating Disposables.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   */
	  var Disposable = Rx.Disposable = function (action) {
	    this.isDisposed = false;
	    this.action = action || noop;
	  };
	
	  /** Performs the task of cleaning up resources. */
	  Disposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.action();
	      this.isDisposed = true;
	    }
	  };
	
	  /**
	   * Creates a disposable object that invokes the specified action when disposed.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   * @return {Disposable} The disposable object that runs the given action upon disposal.
	   */
	  var disposableCreate = Disposable.create = function (action) { return new Disposable(action); };
	
	  /**
	   * Gets the disposable that does nothing when disposed.
	   */
	  var disposableEmpty = Disposable.empty = { dispose: noop };
	
	  /**
	   * Validates whether the given object is a disposable
	   * @param {Object} Object to test whether it has a dispose method
	   * @returns {Boolean} true if a disposable object, else false.
	   */
	  var isDisposable = Disposable.isDisposable = function (d) {
	    return d && isFunction(d.dispose);
	  };
	
	  var checkDisposed = Disposable.checkDisposed = function (disposable) {
	    if (disposable.isDisposed) { throw new ObjectDisposedError(); }
	  };
	
	  var disposableFixup = Disposable._fixup = function (result) {
	    return isDisposable(result) ? result : disposableEmpty;
	  };
	
	  // Single assignment
	  var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = function () {
	    this.isDisposed = false;
	    this.current = null;
	  };
	  SingleAssignmentDisposable.prototype.getDisposable = function () {
	    return this.current;
	  };
	  SingleAssignmentDisposable.prototype.setDisposable = function (value) {
	    if (this.current) { throw new Error('Disposable has already been assigned'); }
	    var shouldDispose = this.isDisposed;
	    !shouldDispose && (this.current = value);
	    shouldDispose && value && value.dispose();
	  };
	  SingleAssignmentDisposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      var old = this.current;
	      this.current = null;
	      old && old.dispose();
	    }
	  };
	
	  // Multiple assignment disposable
	  var SerialDisposable = Rx.SerialDisposable = function () {
	    this.isDisposed = false;
	    this.current = null;
	  };
	  SerialDisposable.prototype.getDisposable = function () {
	    return this.current;
	  };
	  SerialDisposable.prototype.setDisposable = function (value) {
	    var shouldDispose = this.isDisposed;
	    if (!shouldDispose) {
	      var old = this.current;
	      this.current = value;
	    }
	    old && old.dispose();
	    shouldDispose && value && value.dispose();
	  };
	  SerialDisposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      var old = this.current;
	      this.current = null;
	    }
	    old && old.dispose();
	  };
	
	  var BinaryDisposable = Rx.BinaryDisposable = function (first, second) {
	    this._first = first;
	    this._second = second;
	    this.isDisposed = false;
	  };
	
	  BinaryDisposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      var old1 = this._first;
	      this._first = null;
	      old1 && old1.dispose();
	      var old2 = this._second;
	      this._second = null;
	      old2 && old2.dispose();
	    }
	  };
	
	  var NAryDisposable = Rx.NAryDisposable = function (disposables) {
	    this._disposables = disposables;
	    this.isDisposed = false;
	  };
	
	  NAryDisposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      for (var i = 0, len = this._disposables.length; i < len; i++) {
	        this._disposables[i].dispose();
	      }
	      this._disposables.length = 0;
	    }
	  };
	
	  /**
	   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
	   */
	  var RefCountDisposable = Rx.RefCountDisposable = (function () {
	
	    function InnerDisposable(disposable) {
	      this.disposable = disposable;
	      this.disposable.count++;
	      this.isInnerDisposed = false;
	    }
	
	    InnerDisposable.prototype.dispose = function () {
	      if (!this.disposable.isDisposed && !this.isInnerDisposed) {
	        this.isInnerDisposed = true;
	        this.disposable.count--;
	        if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
	          this.disposable.isDisposed = true;
	          this.disposable.underlyingDisposable.dispose();
	        }
	      }
	    };
	
	    /**
	     * Initializes a new instance of the RefCountDisposable with the specified disposable.
	     * @constructor
	     * @param {Disposable} disposable Underlying disposable.
	      */
	    function RefCountDisposable(disposable) {
	      this.underlyingDisposable = disposable;
	      this.isDisposed = false;
	      this.isPrimaryDisposed = false;
	      this.count = 0;
	    }
	
	    /**
	     * Disposes the underlying disposable only when all dependent disposables have been disposed
	     */
	    RefCountDisposable.prototype.dispose = function () {
	      if (!this.isDisposed && !this.isPrimaryDisposed) {
	        this.isPrimaryDisposed = true;
	        if (this.count === 0) {
	          this.isDisposed = true;
	          this.underlyingDisposable.dispose();
	        }
	      }
	    };
	
	    /**
	     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
	     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
	     */
	    RefCountDisposable.prototype.getDisposable = function () {
	      return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
	    };
	
	    return RefCountDisposable;
	  })();
	
	  function ScheduledDisposable(scheduler, disposable) {
	    this.scheduler = scheduler;
	    this.disposable = disposable;
	    this.isDisposed = false;
	  }
	
	  function scheduleItem(s, self) {
	    if (!self.isDisposed) {
	      self.isDisposed = true;
	      self.disposable.dispose();
	    }
	  }
	
	  ScheduledDisposable.prototype.dispose = function () {
	    this.scheduler.schedule(this, scheduleItem);
	  };
	
	  var ScheduledItem = Rx.internals.ScheduledItem = function (scheduler, state, action, dueTime, comparer) {
	    this.scheduler = scheduler;
	    this.state = state;
	    this.action = action;
	    this.dueTime = dueTime;
	    this.comparer = comparer || defaultSubComparer;
	    this.disposable = new SingleAssignmentDisposable();
	  };
	
	  ScheduledItem.prototype.invoke = function () {
	    this.disposable.setDisposable(this.invokeCore());
	  };
	
	  ScheduledItem.prototype.compareTo = function (other) {
	    return this.comparer(this.dueTime, other.dueTime);
	  };
	
	  ScheduledItem.prototype.isCancelled = function () {
	    return this.disposable.isDisposed;
	  };
	
	  ScheduledItem.prototype.invokeCore = function () {
	    return disposableFixup(this.action(this.scheduler, this.state));
	  };
	
	  /** Provides a set of static properties to access commonly used schedulers. */
	  var Scheduler = Rx.Scheduler = (function () {
	
	    function Scheduler() { }
	
	    /** Determines whether the given object is a scheduler */
	    Scheduler.isScheduler = function (s) {
	      return s instanceof Scheduler;
	    };
	
	    var schedulerProto = Scheduler.prototype;
	
	    /**
	   * Schedules an action to be executed.
	   * @param state State passed to the action to be executed.
	   * @param {Function} action Action to be executed.
	   * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	   */
	    schedulerProto.schedule = function (state, action) {
	      throw new NotImplementedError();
	    };
	
	  /**
	   * Schedules an action to be executed after dueTime.
	   * @param state State passed to the action to be executed.
	   * @param {Function} action Action to be executed.
	   * @param {Number} dueTime Relative time after which to execute the action.
	   * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	   */
	    schedulerProto.scheduleFuture = function (state, dueTime, action) {
	      var dt = dueTime;
	      dt instanceof Date && (dt = dt - this.now());
	      dt = Scheduler.normalize(dt);
	
	      if (dt === 0) { return this.schedule(state, action); }
	
	      return this._scheduleFuture(state, dt, action);
	    };
	
	    schedulerProto._scheduleFuture = function (state, dueTime, action) {
	      throw new NotImplementedError();
	    };
	
	    /** Gets the current time according to the local machine's system clock. */
	    Scheduler.now = defaultNow;
	
	    /** Gets the current time according to the local machine's system clock. */
	    Scheduler.prototype.now = defaultNow;
	
	    /**
	     * Normalizes the specified TimeSpan value to a positive value.
	     * @param {Number} timeSpan The time span value to normalize.
	     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
	     */
	    Scheduler.normalize = function (timeSpan) {
	      timeSpan < 0 && (timeSpan = 0);
	      return timeSpan;
	    };
	
	    return Scheduler;
	  }());
	
	  var normalizeTime = Scheduler.normalize, isScheduler = Scheduler.isScheduler;
	
	  (function (schedulerProto) {
	
	    function invokeRecImmediate(scheduler, pair) {
	      var state = pair[0], action = pair[1], group = new CompositeDisposable();
	      action(state, innerAction);
	      return group;
	
	      function innerAction(state2) {
	        var isAdded = false, isDone = false;
	
	        var d = scheduler.schedule(state2, scheduleWork);
	        if (!isDone) {
	          group.add(d);
	          isAdded = true;
	        }
	
	        function scheduleWork(_, state3) {
	          if (isAdded) {
	            group.remove(d);
	          } else {
	            isDone = true;
	          }
	          action(state3, innerAction);
	          return disposableEmpty;
	        }
	      }
	    }
	
	    function invokeRecDate(scheduler, pair) {
	      var state = pair[0], action = pair[1], group = new CompositeDisposable();
	      action(state, innerAction);
	      return group;
	
	      function innerAction(state2, dueTime1) {
	        var isAdded = false, isDone = false;
	
	        var d = scheduler.scheduleFuture(state2, dueTime1, scheduleWork);
	        if (!isDone) {
	          group.add(d);
	          isAdded = true;
	        }
	
	        function scheduleWork(_, state3) {
	          if (isAdded) {
	            group.remove(d);
	          } else {
	            isDone = true;
	          }
	          action(state3, innerAction);
	          return disposableEmpty;
	        }
	      }
	    }
	
	    /**
	     * Schedules an action to be executed recursively.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursive = function (state, action) {
	      return this.schedule([state, action], invokeRecImmediate);
	    };
	
	    /**
	     * Schedules an action to be executed recursively after a specified relative or absolute due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number | Date} dueTime Relative or absolute time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveFuture = function (state, dueTime, action) {
	      return this.scheduleFuture([state, action], dueTime, invokeRecDate);
	    };
	
	  }(Scheduler.prototype));
	
	  (function (schedulerProto) {
	
	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    schedulerProto.schedulePeriodic = function(state, period, action) {
	      if (typeof root.setInterval === 'undefined') { throw new NotSupportedError(); }
	      period = normalizeTime(period);
	      var s = state, id = root.setInterval(function () { s = action(s); }, period);
	      return disposableCreate(function () { root.clearInterval(id); });
	    };
	
	  }(Scheduler.prototype));
	
	  (function (schedulerProto) {
	    /**
	     * Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
	     * @param {Function} handler Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.
	     * @returns {Scheduler} Wrapper around the original scheduler, enforcing exception handling.
	     */
	    schedulerProto.catchError = schedulerProto['catch'] = function (handler) {
	      return new CatchScheduler(this, handler);
	    };
	  }(Scheduler.prototype));
	
	  var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function () {
	    function createTick(self) {
	      return function tick(command, recurse) {
	        recurse(0, self._period);
	        var state = tryCatch(self._action)(self._state);
	        if (state === errorObj) {
	          self._cancel.dispose();
	          thrower(state.e);
	        }
	        self._state = state;
	      };
	    }
	
	    function SchedulePeriodicRecursive(scheduler, state, period, action) {
	      this._scheduler = scheduler;
	      this._state = state;
	      this._period = period;
	      this._action = action;
	    }
	
	    SchedulePeriodicRecursive.prototype.start = function () {
	      var d = new SingleAssignmentDisposable();
	      this._cancel = d;
	      d.setDisposable(this._scheduler.scheduleRecursiveFuture(0, this._period, createTick(this)));
	
	      return d;
	    };
	
	    return SchedulePeriodicRecursive;
	  }());
	
	  /** Gets a scheduler that schedules work immediately on the current thread. */
	   var ImmediateScheduler = (function (__super__) {
	    inherits(ImmediateScheduler, __super__);
	    function ImmediateScheduler() {
	      __super__.call(this);
	    }
	
	    ImmediateScheduler.prototype.schedule = function (state, action) {
	      return disposableFixup(action(this, state));
	    };
	
	    return ImmediateScheduler;
	  }(Scheduler));
	
	  var immediateScheduler = Scheduler.immediate = new ImmediateScheduler();
	
	  /**
	   * Gets a scheduler that schedules work as soon as possible on the current thread.
	   */
	  var CurrentThreadScheduler = (function (__super__) {
	    var queue;
	
	    function runTrampoline () {
	      while (queue.length > 0) {
	        var item = queue.dequeue();
	        !item.isCancelled() && item.invoke();
	      }
	    }
	
	    inherits(CurrentThreadScheduler, __super__);
	    function CurrentThreadScheduler() {
	      __super__.call(this);
	    }
	
	    CurrentThreadScheduler.prototype.schedule = function (state, action) {
	      var si = new ScheduledItem(this, state, action, this.now());
	
	      if (!queue) {
	        queue = new PriorityQueue(4);
	        queue.enqueue(si);
	
	        var result = tryCatch(runTrampoline)();
	        queue = null;
	        if (result === errorObj) { thrower(result.e); }
	      } else {
	        queue.enqueue(si);
	      }
	      return si.disposable;
	    };
	
	    CurrentThreadScheduler.prototype.scheduleRequired = function () { return !queue; };
	
	    return CurrentThreadScheduler;
	  }(Scheduler));
	
	  var currentThreadScheduler = Scheduler.currentThread = new CurrentThreadScheduler();
	
	  var scheduleMethod, clearMethod;
	
	  var localTimer = (function () {
	    var localSetTimeout, localClearTimeout = noop;
	    if (!!root.setTimeout) {
	      localSetTimeout = root.setTimeout;
	      localClearTimeout = root.clearTimeout;
	    } else if (!!root.WScript) {
	      localSetTimeout = function (fn, time) {
	        root.WScript.Sleep(time);
	        fn();
	      };
	    } else {
	      throw new NotSupportedError();
	    }
	
	    return {
	      setTimeout: localSetTimeout,
	      clearTimeout: localClearTimeout
	    };
	  }());
	  var localSetTimeout = localTimer.setTimeout,
	    localClearTimeout = localTimer.clearTimeout;
	
	  (function () {
	
	    var nextHandle = 1, tasksByHandle = {}, currentlyRunning = false;
	
	    clearMethod = function (handle) {
	      delete tasksByHandle[handle];
	    };
	
	    function runTask(handle) {
	      if (currentlyRunning) {
	        localSetTimeout(function () { runTask(handle); }, 0);
	      } else {
	        var task = tasksByHandle[handle];
	        if (task) {
	          currentlyRunning = true;
	          var result = tryCatch(task)();
	          clearMethod(handle);
	          currentlyRunning = false;
	          if (result === errorObj) { thrower(result.e); }
	        }
	      }
	    }
	
	    var reNative = new RegExp('^' +
	      String(toString)
	        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
	        .replace(/toString| for [^\]]+/g, '.*?') + '$'
	    );
	
	    var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' &&
	      !reNative.test(setImmediate) && setImmediate;
	
	    function postMessageSupported () {
	      // Ensure not in a worker
	      if (!root.postMessage || root.importScripts) { return false; }
	      var isAsync = false, oldHandler = root.onmessage;
	      // Test for async
	      root.onmessage = function () { isAsync = true; };
	      root.postMessage('', '*');
	      root.onmessage = oldHandler;
	
	      return isAsync;
	    }
	
	    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
	    if (isFunction(setImmediate)) {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        setImmediate(function () { runTask(id); });
	
	        return id;
	      };
	    } else if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        process.nextTick(function () { runTask(id); });
	
	        return id;
	      };
	    } else if (postMessageSupported()) {
	      var MSG_PREFIX = 'ms.rx.schedule' + Math.random();
	
	      var onGlobalPostMessage = function (event) {
	        // Only if we're a match to avoid any other global events
	        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
	          runTask(event.data.substring(MSG_PREFIX.length));
	        }
	      };
	
	      root.addEventListener('message', onGlobalPostMessage, false);
	
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        root.postMessage(MSG_PREFIX + id, '*');
	        return id;
	      };
	    } else if (!!root.MessageChannel) {
	      var channel = new root.MessageChannel();
	
	      channel.port1.onmessage = function (e) { runTask(e.data); };
	
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        channel.port2.postMessage(id);
	        return id;
	      };
	    } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {
	
	      scheduleMethod = function (action) {
	        var scriptElement = root.document.createElement('script');
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	
	        scriptElement.onreadystatechange = function () {
	          runTask(id);
	          scriptElement.onreadystatechange = null;
	          scriptElement.parentNode.removeChild(scriptElement);
	          scriptElement = null;
	        };
	        root.document.documentElement.appendChild(scriptElement);
	        return id;
	      };
	
	    } else {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        localSetTimeout(function () {
	          runTask(id);
	        }, 0);
	
	        return id;
	      };
	    }
	  }());
	
	  /**
	   * Gets a scheduler that schedules work via a timed callback based upon platform.
	   */
	   var DefaultScheduler = (function (__super__) {
	     inherits(DefaultScheduler, __super__);
	     function DefaultScheduler() {
	       __super__.call(this);
	     }
	
	     function scheduleAction(disposable, action, scheduler, state) {
	       return function schedule() {
	         disposable.setDisposable(Disposable._fixup(action(scheduler, state)));
	       };
	     }
	
	     function ClearDisposable(id) {
	       this._id = id;
	       this.isDisposed = false;
	     }
	
	     ClearDisposable.prototype.dispose = function () {
	       if (!this.isDisposed) {
	         this.isDisposed = true;
	         clearMethod(this._id);
	       }
	     };
	
	     function LocalClearDisposable(id) {
	       this._id = id;
	       this.isDisposed = false;
	     }
	
	     LocalClearDisposable.prototype.dispose = function () {
	       if (!this.isDisposed) {
	         this.isDisposed = true;
	         localClearTimeout(this._id);
	       }
	     };
	
	    DefaultScheduler.prototype.schedule = function (state, action) {
	      var disposable = new SingleAssignmentDisposable(),
	          id = scheduleMethod(scheduleAction(disposable, action, this, state));
	      return new BinaryDisposable(disposable, new ClearDisposable(id));
	    };
	
	    DefaultScheduler.prototype._scheduleFuture = function (state, dueTime, action) {
	      if (dueTime === 0) { return this.schedule(state, action); }
	      var disposable = new SingleAssignmentDisposable(),
	          id = localSetTimeout(scheduleAction(disposable, action, this, state), dueTime);
	      return new BinaryDisposable(disposable, new LocalClearDisposable(id));
	    };
	
	    function scheduleLongRunning(state, action, disposable) {
	      return function () { action(state, disposable); };
	    }
	
	    DefaultScheduler.prototype.scheduleLongRunning = function (state, action) {
	      var disposable = disposableCreate(noop);
	      scheduleMethod(scheduleLongRunning(state, action, disposable));
	      return disposable;
	    };
	
	    return DefaultScheduler;
	  }(Scheduler));
	
	  var defaultScheduler = Scheduler['default'] = Scheduler.async = new DefaultScheduler();
	
	  var CatchScheduler = (function (__super__) {
	    inherits(CatchScheduler, __super__);
	
	    function CatchScheduler(scheduler, handler) {
	      this._scheduler = scheduler;
	      this._handler = handler;
	      this._recursiveOriginal = null;
	      this._recursiveWrapper = null;
	      __super__.call(this);
	    }
	
	    CatchScheduler.prototype.schedule = function (state, action) {
	      return this._scheduler.schedule(state, this._wrap(action));
	    };
	
	    CatchScheduler.prototype._scheduleFuture = function (state, dueTime, action) {
	      return this._scheduler.schedule(state, dueTime, this._wrap(action));
	    };
	
	    CatchScheduler.prototype.now = function () { return this._scheduler.now(); };
	
	    CatchScheduler.prototype._clone = function (scheduler) {
	        return new CatchScheduler(scheduler, this._handler);
	    };
	
	    CatchScheduler.prototype._wrap = function (action) {
	      var parent = this;
	      return function (self, state) {
	        var res = tryCatch(action)(parent._getRecursiveWrapper(self), state);
	        if (res === errorObj) {
	          if (!parent._handler(res.e)) { thrower(res.e); }
	          return disposableEmpty;
	        }
	        return disposableFixup(res);
	      };
	    };
	
	    CatchScheduler.prototype._getRecursiveWrapper = function (scheduler) {
	      if (this._recursiveOriginal !== scheduler) {
	        this._recursiveOriginal = scheduler;
	        var wrapper = this._clone(scheduler);
	        wrapper._recursiveOriginal = scheduler;
	        wrapper._recursiveWrapper = wrapper;
	        this._recursiveWrapper = wrapper;
	      }
	      return this._recursiveWrapper;
	    };
	
	    CatchScheduler.prototype.schedulePeriodic = function (state, period, action) {
	      var self = this, failed = false, d = new SingleAssignmentDisposable();
	
	      d.setDisposable(this._scheduler.schedulePeriodic(state, period, function (state1) {
	        if (failed) { return null; }
	        var res = tryCatch(action)(state1);
	        if (res === errorObj) {
	          failed = true;
	          if (!self._handler(res.e)) { thrower(res.e); }
	          d.dispose();
	          return null;
	        }
	        return res;
	      }));
	
	      return d;
	    };
	
	    return CatchScheduler;
	  }(Scheduler));
	
	  /**
	   *  Represents a notification to an observer.
	   */
	  var Notification = Rx.Notification = (function () {
	    function Notification() {
	
	    }
	
	    Notification.prototype._accept = function (onNext, onError, onCompleted) {
	      throw new NotImplementedError();
	    };
	
	    Notification.prototype._acceptObserver = function (onNext, onError, onCompleted) {
	      throw new NotImplementedError();
	    };
	
	    /**
	     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
	     * @param {Function | Observer} observerOrOnNext Function to invoke for an OnNext notification or Observer to invoke the notification on..
	     * @param {Function} onError Function to invoke for an OnError notification.
	     * @param {Function} onCompleted Function to invoke for an OnCompleted notification.
	     * @returns {Any} Result produced by the observation.
	     */
	    Notification.prototype.accept = function (observerOrOnNext, onError, onCompleted) {
	      return observerOrOnNext && typeof observerOrOnNext === 'object' ?
	        this._acceptObserver(observerOrOnNext) :
	        this._accept(observerOrOnNext, onError, onCompleted);
	    };
	
	    /**
	     * Returns an observable sequence with a single notification.
	     *
	     * @memberOf Notifications
	     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
	     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
	     */
	    Notification.prototype.toObservable = function (scheduler) {
	      var self = this;
	      isScheduler(scheduler) || (scheduler = immediateScheduler);
	      return new AnonymousObservable(function (o) {
	        return scheduler.schedule(self, function (_, notification) {
	          notification._acceptObserver(o);
	          notification.kind === 'N' && o.onCompleted();
	        });
	      });
	    };
	
	    return Notification;
	  })();
	
	  var OnNextNotification = (function (__super__) {
	    inherits(OnNextNotification, __super__);
	    function OnNextNotification(value) {
	      this.value = value;
	      this.kind = 'N';
	    }
	
	    OnNextNotification.prototype._accept = function (onNext) {
	      return onNext(this.value);
	    };
	
	    OnNextNotification.prototype._acceptObserver = function (o) {
	      return o.onNext(this.value);
	    };
	
	    OnNextNotification.prototype.toString = function () {
	      return 'OnNext(' + this.value + ')';
	    };
	
	    return OnNextNotification;
	  }(Notification));
	
	  var OnErrorNotification = (function (__super__) {
	    inherits(OnErrorNotification, __super__);
	    function OnErrorNotification(error) {
	      this.error = error;
	      this.kind = 'E';
	    }
	
	    OnErrorNotification.prototype._accept = function (onNext, onError) {
	      return onError(this.error);
	    };
	
	    OnErrorNotification.prototype._acceptObserver = function (o) {
	      return o.onError(this.error);
	    };
	
	    OnErrorNotification.prototype.toString = function () {
	      return 'OnError(' + this.error + ')';
	    };
	
	    return OnErrorNotification;
	  }(Notification));
	
	  var OnCompletedNotification = (function (__super__) {
	    inherits(OnCompletedNotification, __super__);
	    function OnCompletedNotification() {
	      this.kind = 'C';
	    }
	
	    OnCompletedNotification.prototype._accept = function (onNext, onError, onCompleted) {
	      return onCompleted();
	    };
	
	    OnCompletedNotification.prototype._acceptObserver = function (o) {
	      return o.onCompleted();
	    };
	
	    OnCompletedNotification.prototype.toString = function () {
	      return 'OnCompleted()';
	    };
	
	    return OnCompletedNotification;
	  }(Notification));
	
	  /**
	   * Creates an object that represents an OnNext notification to an observer.
	   * @param {Any} value The value contained in the notification.
	   * @returns {Notification} The OnNext notification containing the value.
	   */
	  var notificationCreateOnNext = Notification.createOnNext = function (value) {
	    return new OnNextNotification(value);
	  };
	
	  /**
	   * Creates an object that represents an OnError notification to an observer.
	   * @param {Any} error The exception contained in the notification.
	   * @returns {Notification} The OnError notification containing the exception.
	   */
	  var notificationCreateOnError = Notification.createOnError = function (error) {
	    return new OnErrorNotification(error);
	  };
	
	  /**
	   * Creates an object that represents an OnCompleted notification to an observer.
	   * @returns {Notification} The OnCompleted notification.
	   */
	  var notificationCreateOnCompleted = Notification.createOnCompleted = function () {
	    return new OnCompletedNotification();
	  };
	
	  /**
	   * Supports push-style iteration over an observable sequence.
	   */
	  var Observer = Rx.Observer = function () { };
	
	  /**
	   *  Creates a notification callback from an observer.
	   * @returns The action that forwards its input notification to the underlying observer.
	   */
	  Observer.prototype.toNotifier = function () {
	    var observer = this;
	    return function (n) { return n.accept(observer); };
	  };
	
	  /**
	   *  Hides the identity of an observer.
	   * @returns An observer that hides the identity of the specified observer.
	   */
	  Observer.prototype.asObserver = function () {
	    var self = this;
	    return new AnonymousObserver(
	      function (x) { self.onNext(x); },
	      function (err) { self.onError(err); },
	      function () { self.onCompleted(); });
	  };
	
	  /**
	   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
	   *  If a violation is detected, an Error is thrown from the offending observer method call.
	   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.
	   */
	  Observer.prototype.checked = function () { return new CheckedObserver(this); };
	
	  /**
	   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
	   * @param {Function} [onNext] Observer's OnNext action implementation.
	   * @param {Function} [onError] Observer's OnError action implementation.
	   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
	   * @returns {Observer} The observer object implemented using the given actions.
	   */
	  var observerCreate = Observer.create = function (onNext, onError, onCompleted) {
	    onNext || (onNext = noop);
	    onError || (onError = defaultError);
	    onCompleted || (onCompleted = noop);
	    return new AnonymousObserver(onNext, onError, onCompleted);
	  };
	
	  /**
	   *  Creates an observer from a notification callback.
	   * @param {Function} handler Action that handles a notification.
	   * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
	   */
	  Observer.fromNotifier = function (handler, thisArg) {
	    var cb = bindCallback(handler, thisArg, 1);
	    return new AnonymousObserver(function (x) {
	      return cb(notificationCreateOnNext(x));
	    }, function (e) {
	      return cb(notificationCreateOnError(e));
	    }, function () {
	      return cb(notificationCreateOnCompleted());
	    });
	  };
	
	  /**
	   * Schedules the invocation of observer methods on the given scheduler.
	   * @param {Scheduler} scheduler Scheduler to schedule observer messages on.
	   * @returns {Observer} Observer whose messages are scheduled on the given scheduler.
	   */
	  Observer.prototype.notifyOn = function (scheduler) {
	    return new ObserveOnObserver(scheduler, this);
	  };
	
	  Observer.prototype.makeSafe = function(disposable) {
	    return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);
	  };
	
	  /**
	   * Abstract base class for implementations of the Observer class.
	   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
	   */
	  var AbstractObserver = Rx.internals.AbstractObserver = (function (__super__) {
	    inherits(AbstractObserver, __super__);
	
	    /**
	     * Creates a new observer in a non-stopped state.
	     */
	    function AbstractObserver() {
	      this.isStopped = false;
	    }
	
	    // Must be implemented by other observers
	    AbstractObserver.prototype.next = notImplemented;
	    AbstractObserver.prototype.error = notImplemented;
	    AbstractObserver.prototype.completed = notImplemented;
	
	    /**
	     * Notifies the observer of a new element in the sequence.
	     * @param {Any} value Next element in the sequence.
	     */
	    AbstractObserver.prototype.onNext = function (value) {
	      !this.isStopped && this.next(value);
	    };
	
	    /**
	     * Notifies the observer that an exception has occurred.
	     * @param {Any} error The error that has occurred.
	     */
	    AbstractObserver.prototype.onError = function (error) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(error);
	      }
	    };
	
	    /**
	     * Notifies the observer of the end of the sequence.
	     */
	    AbstractObserver.prototype.onCompleted = function () {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.completed();
	      }
	    };
	
	    /**
	     * Disposes the observer, causing it to transition to the stopped state.
	     */
	    AbstractObserver.prototype.dispose = function () { this.isStopped = true; };
	
	    AbstractObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(e);
	        return true;
	      }
	
	      return false;
	    };
	
	    return AbstractObserver;
	  }(Observer));
	
	  /**
	   * Class to create an Observer instance from delegate-based implementations of the on* methods.
	   */
	  var AnonymousObserver = Rx.AnonymousObserver = (function (__super__) {
	    inherits(AnonymousObserver, __super__);
	
	    /**
	     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
	     * @param {Any} onNext Observer's OnNext action implementation.
	     * @param {Any} onError Observer's OnError action implementation.
	     * @param {Any} onCompleted Observer's OnCompleted action implementation.
	     */
	    function AnonymousObserver(onNext, onError, onCompleted) {
	      __super__.call(this);
	      this._onNext = onNext;
	      this._onError = onError;
	      this._onCompleted = onCompleted;
	    }
	
	    /**
	     * Calls the onNext action.
	     * @param {Any} value Next element in the sequence.
	     */
	    AnonymousObserver.prototype.next = function (value) {
	      this._onNext(value);
	    };
	
	    /**
	     * Calls the onError action.
	     * @param {Any} error The error that has occurred.
	     */
	    AnonymousObserver.prototype.error = function (error) {
	      this._onError(error);
	    };
	
	    /**
	     *  Calls the onCompleted action.
	     */
	    AnonymousObserver.prototype.completed = function () {
	      this._onCompleted();
	    };
	
	    return AnonymousObserver;
	  }(AbstractObserver));
	
	  var CheckedObserver = (function (__super__) {
	    inherits(CheckedObserver, __super__);
	
	    function CheckedObserver(observer) {
	      __super__.call(this);
	      this._observer = observer;
	      this._state = 0; // 0 - idle, 1 - busy, 2 - done
	    }
	
	    var CheckedObserverPrototype = CheckedObserver.prototype;
	
	    CheckedObserverPrototype.onNext = function (value) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onNext).call(this._observer, value);
	      this._state = 0;
	      res === errorObj && thrower(res.e);
	    };
	
	    CheckedObserverPrototype.onError = function (err) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onError).call(this._observer, err);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };
	
	    CheckedObserverPrototype.onCompleted = function () {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onCompleted).call(this._observer);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };
	
	    CheckedObserverPrototype.checkAccess = function () {
	      if (this._state === 1) { throw new Error('Re-entrancy detected'); }
	      if (this._state === 2) { throw new Error('Observer completed'); }
	      if (this._state === 0) { this._state = 1; }
	    };
	
	    return CheckedObserver;
	  }(Observer));
	
	  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (__super__) {
	    inherits(ScheduledObserver, __super__);
	
	    function ScheduledObserver(scheduler, observer) {
	      __super__.call(this);
	      this.scheduler = scheduler;
	      this.observer = observer;
	      this.isAcquired = false;
	      this.hasFaulted = false;
	      this.queue = [];
	      this.disposable = new SerialDisposable();
	    }
	
	    function enqueueNext(observer, x) { return function () { observer.onNext(x); }; }
	    function enqueueError(observer, e) { return function () { observer.onError(e); }; }
	    function enqueueCompleted(observer) { return function () { observer.onCompleted(); }; }
	
	    ScheduledObserver.prototype.next = function (x) {
	      this.queue.push(enqueueNext(this.observer, x));
	    };
	
	    ScheduledObserver.prototype.error = function (e) {
	      this.queue.push(enqueueError(this.observer, e));
	    };
	
	    ScheduledObserver.prototype.completed = function () {
	      this.queue.push(enqueueCompleted(this.observer));
	    };
	
	
	    function scheduleMethod(state, recurse) {
	      var work;
	      if (state.queue.length > 0) {
	        work = state.queue.shift();
	      } else {
	        state.isAcquired = false;
	        return;
	      }
	      var res = tryCatch(work)();
	      if (res === errorObj) {
	        state.queue = [];
	        state.hasFaulted = true;
	        return thrower(res.e);
	      }
	      recurse(state);
	    }
	
	    ScheduledObserver.prototype.ensureActive = function () {
	      var isOwner = false;
	      if (!this.hasFaulted && this.queue.length > 0) {
	        isOwner = !this.isAcquired;
	        this.isAcquired = true;
	      }
	      isOwner &&
	        this.disposable.setDisposable(this.scheduler.scheduleRecursive(this, scheduleMethod));
	    };
	
	    ScheduledObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.disposable.dispose();
	    };
	
	    return ScheduledObserver;
	  }(AbstractObserver));
	
	  var ObserveOnObserver = (function (__super__) {
	    inherits(ObserveOnObserver, __super__);
	
	    function ObserveOnObserver(scheduler, observer, cancel) {
	      __super__.call(this, scheduler, observer);
	      this._cancel = cancel;
	    }
	
	    ObserveOnObserver.prototype.next = function (value) {
	      __super__.prototype.next.call(this, value);
	      this.ensureActive();
	    };
	
	    ObserveOnObserver.prototype.error = function (e) {
	      __super__.prototype.error.call(this, e);
	      this.ensureActive();
	    };
	
	    ObserveOnObserver.prototype.completed = function () {
	      __super__.prototype.completed.call(this);
	      this.ensureActive();
	    };
	
	    ObserveOnObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this._cancel && this._cancel.dispose();
	      this._cancel = null;
	    };
	
	    return ObserveOnObserver;
	  })(ScheduledObserver);
	
	  var observableProto;
	
	  /**
	   * Represents a push-style collection.
	   */
	  var Observable = Rx.Observable = (function () {
	
	    function makeSubscribe(self, subscribe) {
	      return function (o) {
	        var oldOnError = o.onError;
	        o.onError = function (e) {
	          makeStackTraceLong(e, self);
	          oldOnError.call(o, e);
	        };
	
	        return subscribe.call(self, o);
	      };
	    }
	
	    function Observable() {
	      if (Rx.config.longStackSupport && hasStacks) {
	        var oldSubscribe = this._subscribe;
	        var e = tryCatch(thrower)(new Error()).e;
	        this.stack = e.stack.substring(e.stack.indexOf('\n') + 1);
	        this._subscribe = makeSubscribe(this, oldSubscribe);
	      }
	    }
	
	    observableProto = Observable.prototype;
	
	    /**
	    * Determines whether the given object is an Observable
	    * @param {Any} An object to determine whether it is an Observable
	    * @returns {Boolean} true if an Observable, else false.
	    */
	    Observable.isObservable = function (o) {
	      return o && isFunction(o.subscribe);
	    };
	
	    /**
	     *  Subscribes an o to the observable sequence.
	     *  @param {Mixed} [oOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
	     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
	     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
	     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribe = observableProto.forEach = function (oOrOnNext, onError, onCompleted) {
	      return this._subscribe(typeof oOrOnNext === 'object' ?
	        oOrOnNext :
	        observerCreate(oOrOnNext, onError, onCompleted));
	    };
	
	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onNext The function to invoke on each element in the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnNext = function (onNext, thisArg) {
	      return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function(x) { onNext.call(thisArg, x); } : onNext));
	    };
	
	    /**
	     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
	     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnError = function (onError, thisArg) {
	      return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function(e) { onError.call(thisArg, e); } : onError));
	    };
	
	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnCompleted = function (onCompleted, thisArg) {
	      return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function() { onCompleted.call(thisArg); } : onCompleted));
	    };
	
	    return Observable;
	  })();
	
	  var ObservableBase = Rx.ObservableBase = (function (__super__) {
	    inherits(ObservableBase, __super__);
	
	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber :
	        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }
	
	    function setDisposable(s, state) {
	      var ado = state[0], self = state[1];
	      var sub = tryCatch(self.subscribeCore).call(self, ado);
	      if (sub === errorObj && !ado.fail(errorObj.e)) { thrower(errorObj.e); }
	      ado.setDisposable(fixSubscriber(sub));
	    }
	
	    function ObservableBase() {
	      __super__.call(this);
	    }
	
	    ObservableBase.prototype._subscribe = function (o) {
	      var ado = new AutoDetachObserver(o), state = [ado, this];
	
	      if (currentThreadScheduler.scheduleRequired()) {
	        currentThreadScheduler.schedule(state, setDisposable);
	      } else {
	        setDisposable(null, state);
	      }
	      return ado;
	    };
	
	    ObservableBase.prototype.subscribeCore = notImplemented;
	
	    return ObservableBase;
	  }(Observable));
	
	var FlatMapObservable = Rx.FlatMapObservable = (function(__super__) {
	
	    inherits(FlatMapObservable, __super__);
	
	    function FlatMapObservable(source, selector, resultSelector, thisArg) {
	      this.resultSelector = isFunction(resultSelector) ? resultSelector : null;
	      this.selector = bindCallback(isFunction(selector) ? selector : function() { return selector; }, thisArg, 3);
	      this.source = source;
	      __super__.call(this);
	    }
	
	    FlatMapObservable.prototype.subscribeCore = function(o) {
	      return this.source.subscribe(new InnerObserver(o, this.selector, this.resultSelector, this));
	    };
	
	    inherits(InnerObserver, AbstractObserver);
	    function InnerObserver(observer, selector, resultSelector, source) {
	      this.i = 0;
	      this.selector = selector;
	      this.resultSelector = resultSelector;
	      this.source = source;
	      this.o = observer;
	      AbstractObserver.call(this);
	    }
	
	    InnerObserver.prototype._wrapResult = function(result, x, i) {
	      return this.resultSelector ?
	        result.map(function(y, i2) { return this.resultSelector(x, y, i, i2); }, this) :
	        result;
	    };
	
	    InnerObserver.prototype.next = function(x) {
	      var i = this.i++;
	      var result = tryCatch(this.selector)(x, i, this.source);
	      if (result === errorObj) { return this.o.onError(result.e); }
	
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = Observable.from(result));
	      this.o.onNext(this._wrapResult(result, x, i));
	    };
	
	    InnerObserver.prototype.error = function(e) { this.o.onError(e); };
	
	    InnerObserver.prototype.completed = function() { this.o.onCompleted(); };
	
	    return FlatMapObservable;
	
	}(ObservableBase));
	
	  var Enumerable = Rx.internals.Enumerable = function () { };
	
	  function IsDisposedDisposable(state) {
	    this._s = state;
	    this.isDisposed = false;
	  }
	
	  IsDisposedDisposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      this._s.isDisposed = true;
	    }
	  };
	
	  var ConcatEnumerableObservable = (function(__super__) {
	    inherits(ConcatEnumerableObservable, __super__);
	    function ConcatEnumerableObservable(sources) {
	      this.sources = sources;
	      __super__.call(this);
	    }
	
	    function scheduleMethod(state, recurse) {
	      if (state.isDisposed) { return; }
	      var currentItem = tryCatch(state.e.next).call(state.e);
	      if (currentItem === errorObj) { return state.o.onError(currentItem.e); }
	      if (currentItem.done) { return state.o.onCompleted(); }
	
	      // Check if promise
	      var currentValue = currentItem.value;
	      isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	      var d = new SingleAssignmentDisposable();
	      state.subscription.setDisposable(d);
	      d.setDisposable(currentValue.subscribe(new InnerObserver(state, recurse)));
	    }
	
	    ConcatEnumerableObservable.prototype.subscribeCore = function (o) {
	      var subscription = new SerialDisposable();
	      var state = {
	        isDisposed: false,
	        o: o,
	        subscription: subscription,
	        e: this.sources[$iterator$]()
	      };
	
	      var cancelable = currentThreadScheduler.scheduleRecursive(state, scheduleMethod);
	      return new NAryDisposable([subscription, cancelable, new IsDisposedDisposable(state)]);
	    };
	
	    function InnerObserver(state, recurse) {
	      this._state = state;
	      this._recurse = recurse;
	      AbstractObserver.call(this);
	    }
	
	    inherits(InnerObserver, AbstractObserver);
	
	    InnerObserver.prototype.next = function (x) { this._state.o.onNext(x); };
	    InnerObserver.prototype.error = function (e) { this._state.o.onError(e); };
	    InnerObserver.prototype.completed = function () { this._recurse(this._state); };
	
	    return ConcatEnumerableObservable;
	  }(ObservableBase));
	
	  Enumerable.prototype.concat = function () {
	    return new ConcatEnumerableObservable(this);
	  };
	
	  var CatchErrorObservable = (function(__super__) {
	    function CatchErrorObservable(sources) {
	      this.sources = sources;
	      __super__.call(this);
	    }
	
	    inherits(CatchErrorObservable, __super__);
	
	    function scheduleMethod(state, recurse) {
	      if (state.isDisposed) { return; }
	      var currentItem = tryCatch(state.e.next).call(state.e);
	      if (currentItem === errorObj) { return state.o.onError(currentItem.e); }
	      if (currentItem.done) { return state.lastError !== null ? state.o.onError(state.lastError) : state.o.onCompleted(); }
	
	      var currentValue = currentItem.value;
	      isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	      var d = new SingleAssignmentDisposable();
	      state.subscription.setDisposable(d);
	      d.setDisposable(currentValue.subscribe(new InnerObserver(state, recurse)));
	    }
	
	    CatchErrorObservable.prototype.subscribeCore = function (o) {
	      var subscription = new SerialDisposable();
	      var state = {
	        isDisposed: false,
	        e: this.sources[$iterator$](),
	        subscription: subscription,
	        lastError: null,
	        o: o
	      };
	
	      var cancelable = currentThreadScheduler.scheduleRecursive(state, scheduleMethod);
	      return new NAryDisposable([subscription, cancelable, new IsDisposedDisposable(state)]);
	    };
	
	    function InnerObserver(state, recurse) {
	      this._state = state;
	      this._recurse = recurse;
	      AbstractObserver.call(this);
	    }
	
	    inherits(InnerObserver, AbstractObserver);
	
	    InnerObserver.prototype.next = function (x) { this._state.o.onNext(x); };
	    InnerObserver.prototype.error = function (e) { this._state.lastError = e; this._recurse(this._state); };
	    InnerObserver.prototype.completed = function () { this._state.o.onCompleted(); };
	
	    return CatchErrorObservable;
	  }(ObservableBase));
	
	  Enumerable.prototype.catchError = function () {
	    return new CatchErrorObservable(this);
	  };
	
	  var RepeatEnumerable = (function (__super__) {
	    inherits(RepeatEnumerable, __super__);
	    function RepeatEnumerable(v, c) {
	      this.v = v;
	      this.c = c == null ? -1 : c;
	    }
	
	    RepeatEnumerable.prototype[$iterator$] = function () {
	      return new RepeatEnumerator(this);
	    };
	
	    function RepeatEnumerator(p) {
	      this.v = p.v;
	      this.l = p.c;
	    }
	
	    RepeatEnumerator.prototype.next = function () {
	      if (this.l === 0) { return doneEnumerator; }
	      if (this.l > 0) { this.l--; }
	      return { done: false, value: this.v };
	    };
	
	    return RepeatEnumerable;
	  }(Enumerable));
	
	  var enumerableRepeat = Enumerable.repeat = function (value, repeatCount) {
	    return new RepeatEnumerable(value, repeatCount);
	  };
	
	  var OfEnumerable = (function(__super__) {
	    inherits(OfEnumerable, __super__);
	    function OfEnumerable(s, fn, thisArg) {
	      this.s = s;
	      this.fn = fn ? bindCallback(fn, thisArg, 3) : null;
	    }
	    OfEnumerable.prototype[$iterator$] = function () {
	      return new OfEnumerator(this);
	    };
	
	    function OfEnumerator(p) {
	      this.i = -1;
	      this.s = p.s;
	      this.l = this.s.length;
	      this.fn = p.fn;
	    }
	
	    OfEnumerator.prototype.next = function () {
	     return ++this.i < this.l ?
	       { done: false, value: !this.fn ? this.s[this.i] : this.fn(this.s[this.i], this.i, this.s) } :
	       doneEnumerator;
	    };
	
	    return OfEnumerable;
	  }(Enumerable));
	
	  var enumerableOf = Enumerable.of = function (source, selector, thisArg) {
	    return new OfEnumerable(source, selector, thisArg);
	  };
	
	var ObserveOnObservable = (function (__super__) {
	  inherits(ObserveOnObservable, __super__);
	  function ObserveOnObservable(source, s) {
	    this.source = source;
	    this._s = s;
	    __super__.call(this);
	  }
	
	  ObserveOnObservable.prototype.subscribeCore = function (o) {
	    return this.source.subscribe(new ObserveOnObserver(this._s, o));
	  };
	
	  return ObserveOnObservable;
	}(ObservableBase));
	
	   /**
	   *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
	   *
	   *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
	   *  that require to be run on a scheduler, use subscribeOn.
	   *
	   *  @param {Scheduler} scheduler Scheduler to notify observers on.
	   *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.
	   */
	  observableProto.observeOn = function (scheduler) {
	    return new ObserveOnObservable(this, scheduler);
	  };
	
	  var SubscribeOnObservable = (function (__super__) {
	    inherits(SubscribeOnObservable, __super__);
	    function SubscribeOnObservable(source, s) {
	      this.source = source;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    function scheduleMethod(scheduler, state) {
	      var source = state[0], d = state[1], o = state[2];
	      d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(o)));
	    }
	
	    SubscribeOnObservable.prototype.subscribeCore = function (o) {
	      var m = new SingleAssignmentDisposable(), d = new SerialDisposable();
	      d.setDisposable(m);
	      m.setDisposable(this._s.schedule([this.source, d, o], scheduleMethod));
	      return d;
	    };
	
	    return SubscribeOnObservable;
	  }(ObservableBase));
	
	   /**
	   *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
	   *  see the remarks section for more information on the distinction between subscribeOn and observeOn.
	
	   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
	   *  callbacks on a scheduler, use observeOn.
	
	   *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.
	   *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.
	   */
	  observableProto.subscribeOn = function (scheduler) {
	    return new SubscribeOnObservable(this, scheduler);
	  };
	
	  var FromPromiseObservable = (function(__super__) {
	    inherits(FromPromiseObservable, __super__);
	    function FromPromiseObservable(p, s) {
	      this._p = p;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    function scheduleNext(s, state) {
	      var o = state[0], data = state[1];
	      o.onNext(data);
	      o.onCompleted();
	    }
	
	    function scheduleError(s, state) {
	      var o = state[0], err = state[1];
	      o.onError(err);
	    }
	
	    FromPromiseObservable.prototype.subscribeCore = function(o) {
	      var sad = new SingleAssignmentDisposable(), self = this, p = this._p;
	
	      if (isFunction(p)) {
	        p = tryCatch(p)();
	        if (p === errorObj) {
	          o.onError(p.e);
	          return sad;
	        }
	      }
	
	      p
	        .then(function (data) {
	          sad.setDisposable(self._s.schedule([o, data], scheduleNext));
	        }, function (err) {
	          sad.setDisposable(self._s.schedule([o, err], scheduleError));
	        });
	
	      return sad;
	    };
	
	    return FromPromiseObservable;
	  }(ObservableBase));
	
	  /**
	  * Converts a Promise to an Observable sequence
	  * @param {Promise} An ES6 Compliant promise.
	  * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
	  */
	  var observableFromPromise = Observable.fromPromise = function (promise, scheduler) {
	    scheduler || (scheduler = defaultScheduler);
	    return new FromPromiseObservable(promise, scheduler);
	  };
	
	  /*
	   * Converts an existing observable sequence to an ES6 Compatible Promise
	   * @example
	   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
	   *
	   * // With config
	   * Rx.config.Promise = RSVP.Promise;
	   * var promise = Rx.Observable.return(42).toPromise();
	   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
	   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
	   */
	  observableProto.toPromise = function (promiseCtor) {
	    promiseCtor || (promiseCtor = Rx.config.Promise);
	    if (!promiseCtor) { throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise'); }
	    var source = this;
	    return new promiseCtor(function (resolve, reject) {
	      // No cancellation can be done
	      var value;
	      source.subscribe(function (v) {
	        value = v;
	      }, reject, function () {
	        resolve(value);
	      });
	    });
	  };
	
	  var ToArrayObservable = (function(__super__) {
	    inherits(ToArrayObservable, __super__);
	    function ToArrayObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    ToArrayObservable.prototype.subscribeCore = function(o) {
	      return this.source.subscribe(new InnerObserver(o));
	    };
	
	    inherits(InnerObserver, AbstractObserver);
	    function InnerObserver(o) {
	      this.o = o;
	      this.a = [];
	      AbstractObserver.call(this);
	    }
	    
	    InnerObserver.prototype.next = function (x) { this.a.push(x); };
	    InnerObserver.prototype.error = function (e) { this.o.onError(e);  };
	    InnerObserver.prototype.completed = function () { this.o.onNext(this.a); this.o.onCompleted(); };
	
	    return ToArrayObservable;
	  }(ObservableBase));
	
	  /**
	  * Creates an array from an observable sequence.
	  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.
	  */
	  observableProto.toArray = function () {
	    return new ToArrayObservable(this);
	  };
	
	  /**
	   *  Creates an observable sequence from a specified subscribe method implementation.
	   * @example
	   *  var res = Rx.Observable.create(function (observer) { return function () { } );
	   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );
	   *  var res = Rx.Observable.create(function (observer) { } );
	   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
	   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
	   */
	  Observable.create = function (subscribe, parent) {
	    return new AnonymousObservable(subscribe, parent);
	  };
	
	  var Defer = (function(__super__) {
	    inherits(Defer, __super__);
	    function Defer(factory) {
	      this._f = factory;
	      __super__.call(this);
	    }
	
	    Defer.prototype.subscribeCore = function (o) {
	      var result = tryCatch(this._f)();
	      if (result === errorObj) { return observableThrow(result.e).subscribe(o);}
	      isPromise(result) && (result = observableFromPromise(result));
	      return result.subscribe(o);
	    };
	
	    return Defer;
	  }(ObservableBase));
	
	  /**
	   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
	   *
	   * @example
	   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });
	   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
	   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
	   */
	  var observableDefer = Observable.defer = function (observableFactory) {
	    return new Defer(observableFactory);
	  };
	
	  var EmptyObservable = (function(__super__) {
	    inherits(EmptyObservable, __super__);
	    function EmptyObservable(scheduler) {
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    EmptyObservable.prototype.subscribeCore = function (observer) {
	      var sink = new EmptySink(observer, this.scheduler);
	      return sink.run();
	    };
	
	    function EmptySink(observer, scheduler) {
	      this.observer = observer;
	      this.scheduler = scheduler;
	    }
	
	    function scheduleItem(s, state) {
	      state.onCompleted();
	      return disposableEmpty;
	    }
	
	    EmptySink.prototype.run = function () {
	      var state = this.observer;
	      return this.scheduler === immediateScheduler ?
	        scheduleItem(null, state) :
	        this.scheduler.schedule(state, scheduleItem);
	    };
	
	    return EmptyObservable;
	  }(ObservableBase));
	
	  var EMPTY_OBSERVABLE = new EmptyObservable(immediateScheduler);
	
	  /**
	   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
	   *
	   * @example
	   *  var res = Rx.Observable.empty();
	   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);
	   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
	   * @returns {Observable} An observable sequence with no elements.
	   */
	  var observableEmpty = Observable.empty = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return scheduler === immediateScheduler ? EMPTY_OBSERVABLE : new EmptyObservable(scheduler);
	  };
	
	  var FromObservable = (function(__super__) {
	    inherits(FromObservable, __super__);
	    function FromObservable(iterable, fn, scheduler) {
	      this._iterable = iterable;
	      this._fn = fn;
	      this._scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    function createScheduleMethod(o, it, fn) {
	      return function loopRecursive(i, recurse) {
	        var next = tryCatch(it.next).call(it);
	        if (next === errorObj) { return o.onError(next.e); }
	        if (next.done) { return o.onCompleted(); }
	
	        var result = next.value;
	
	        if (isFunction(fn)) {
	          result = tryCatch(fn)(result, i);
	          if (result === errorObj) { return o.onError(result.e); }
	        }
	
	        o.onNext(result);
	        recurse(i + 1);
	      };
	    }
	
	    FromObservable.prototype.subscribeCore = function (o) {
	      var list = Object(this._iterable),
	          it = getIterable(list);
	
	      return this._scheduler.scheduleRecursive(0, createScheduleMethod(o, it, this._fn));
	    };
	
	    return FromObservable;
	  }(ObservableBase));
	
	  var maxSafeInteger = Math.pow(2, 53) - 1;
	
	  function StringIterable(s) {
	    this._s = s;
	  }
	
	  StringIterable.prototype[$iterator$] = function () {
	    return new StringIterator(this._s);
	  };
	
	  function StringIterator(s) {
	    this._s = s;
	    this._l = s.length;
	    this._i = 0;
	  }
	
	  StringIterator.prototype[$iterator$] = function () {
	    return this;
	  };
	
	  StringIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._s.charAt(this._i++) } : doneEnumerator;
	  };
	
	  function ArrayIterable(a) {
	    this._a = a;
	  }
	
	  ArrayIterable.prototype[$iterator$] = function () {
	    return new ArrayIterator(this._a);
	  };
	
	  function ArrayIterator(a) {
	    this._a = a;
	    this._l = toLength(a);
	    this._i = 0;
	  }
	
	  ArrayIterator.prototype[$iterator$] = function () {
	    return this;
	  };
	
	  ArrayIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._a[this._i++] } : doneEnumerator;
	  };
	
	  function numberIsFinite(value) {
	    return typeof value === 'number' && root.isFinite(value);
	  }
	
	  function isNan(n) {
	    return n !== n;
	  }
	
	  function getIterable(o) {
	    var i = o[$iterator$], it;
	    if (!i && typeof o === 'string') {
	      it = new StringIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i && o.length !== undefined) {
	      it = new ArrayIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i) { throw new TypeError('Object is not iterable'); }
	    return o[$iterator$]();
	  }
	
	  function sign(value) {
	    var number = +value;
	    if (number === 0) { return number; }
	    if (isNaN(number)) { return number; }
	    return number < 0 ? -1 : 1;
	  }
	
	  function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) { return 0; }
	    if (len === 0 || !numberIsFinite(len)) { return len; }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) { return 0; }
	    if (len > maxSafeInteger) { return maxSafeInteger; }
	    return len;
	  }
	
	  /**
	  * This method creates a new Observable sequence from an array-like or iterable object.
	  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.
	  * @param {Function} [mapFn] Map function to call on every element of the array.
	  * @param {Any} [thisArg] The context to use calling the mapFn if provided.
	  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.
	  */
	  var observableFrom = Observable.from = function (iterable, mapFn, thisArg, scheduler) {
	    if (iterable == null) {
	      throw new Error('iterable cannot be null.')
	    }
	    if (mapFn && !isFunction(mapFn)) {
	      throw new Error('mapFn when provided must be a function');
	    }
	    if (mapFn) {
	      var mapper = bindCallback(mapFn, thisArg, 2);
	    }
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromObservable(iterable, mapper, scheduler);
	  }
	
	  var FromArrayObservable = (function(__super__) {
	    inherits(FromArrayObservable, __super__);
	    function FromArrayObservable(args, scheduler) {
	      this._args = args;
	      this._scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    function scheduleMethod(o, args) {
	      var len = args.length;
	      return function loopRecursive (i, recurse) {
	        if (i < len) {
	          o.onNext(args[i]);
	          recurse(i + 1);
	        } else {
	          o.onCompleted();
	        }
	      };
	    }
	
	    FromArrayObservable.prototype.subscribeCore = function (o) {
	      return this._scheduler.scheduleRecursive(0, scheduleMethod(o, this._args));
	    };
	
	    return FromArrayObservable;
	  }(ObservableBase));
	
	  /**
	  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
	  * @deprecated use Observable.from or Observable.of
	  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
	  */
	  var observableFromArray = Observable.fromArray = function (array, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler)
	  };
	
	  var GenerateObservable = (function (__super__) {
	    inherits(GenerateObservable, __super__);
	    function GenerateObservable(state, cndFn, itrFn, resFn, s) {
	      this._initialState = state;
	      this._cndFn = cndFn;
	      this._itrFn = itrFn;
	      this._resFn = resFn;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    function scheduleRecursive(state, recurse) {
	      if (state.first) {
	        state.first = false;
	      } else {
	        state.newState = tryCatch(state.self._itrFn)(state.newState);
	        if (state.newState === errorObj) { return state.o.onError(state.newState.e); }
	      }
	      var hasResult = tryCatch(state.self._cndFn)(state.newState);
	      if (hasResult === errorObj) { return state.o.onError(hasResult.e); }
	      if (hasResult) {
	        var result = tryCatch(state.self._resFn)(state.newState);
	        if (result === errorObj) { return state.o.onError(result.e); }
	        state.o.onNext(result);
	        recurse(state);
	      } else {
	        state.o.onCompleted();
	      }
	    }
	
	    GenerateObservable.prototype.subscribeCore = function (o) {
	      var state = {
	        o: o,
	        self: this,
	        first: true,
	        newState: this._initialState
	      };
	      return this._s.scheduleRecursive(state, scheduleRecursive);
	    };
	
	    return GenerateObservable;
	  }(ObservableBase));
	
	  /**
	   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generate = function (initialState, condition, iterate, resultSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new GenerateObservable(initialState, condition, iterate, resultSelector, scheduler);
	  };
	
	  function observableOf (scheduler, array) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler);
	  }
	
	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.of = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return new FromArrayObservable(args, currentThreadScheduler);
	  };
	
	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.ofWithScheduler = function (scheduler) {
	    var len = arguments.length, args = new Array(len - 1);
	    for(var i = 1; i < len; i++) { args[i - 1] = arguments[i]; }
	    return new FromArrayObservable(args, scheduler);
	  };
	
	  /**
	   * Creates an Observable sequence from changes to an array using Array.observe.
	   * @param {Array} array An array to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an array from Array.observe.
	   */
	  Observable.ofArrayChanges = function(array) {
	    if (!Array.isArray(array)) { throw new TypeError('Array.observe only accepts arrays.'); }
	    if (typeof Array.observe !== 'function' && typeof Array.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
	    return new AnonymousObservable(function(observer) {
	      function observerFn(changes) {
	        for(var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }
	      
	      Array.observe(array, observerFn);
	
	      return function () {
	        Array.unobserve(array, observerFn);
	      };
	    });
	  };
	
	  /**
	   * Creates an Observable sequence from changes to an object using Object.observe.
	   * @param {Object} obj An object to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an object from Object.observe.
	   */
	  Observable.ofObjectChanges = function(obj) {
	    if (obj == null) { throw new TypeError('object must not be null or undefined.'); }
	    if (typeof Object.observe !== 'function' && typeof Object.unobserve !== 'function') { throw new TypeError('Object.observe is not supported on your platform') }
	    return new AnonymousObservable(function(observer) {
	      function observerFn(changes) {
	        for(var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }
	
	      Object.observe(obj, observerFn);
	
	      return function () {
	        Object.unobserve(obj, observerFn);
	      };
	    });
	  };
	
	  var NeverObservable = (function(__super__) {
	    inherits(NeverObservable, __super__);
	    function NeverObservable() {
	      __super__.call(this);
	    }
	
	    NeverObservable.prototype.subscribeCore = function (observer) {
	      return disposableEmpty;
	    };
	
	    return NeverObservable;
	  }(ObservableBase));
	
	  var NEVER_OBSERVABLE = new NeverObservable();
	
	  /**
	   * Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
	   * @returns {Observable} An observable sequence whose observers will never get called.
	   */
	  var observableNever = Observable.never = function () {
	    return NEVER_OBSERVABLE;
	  };
	
	  var PairsObservable = (function(__super__) {
	    inherits(PairsObservable, __super__);
	    function PairsObservable(o, scheduler) {
	      this._o = o;
	      this._keys = Object.keys(o);
	      this._scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    function scheduleMethod(o, obj, keys) {
	      return function loopRecursive(i, recurse) {
	        if (i < keys.length) {
	          var key = keys[i];
	          o.onNext([key, obj[key]]);
	          recurse(i + 1);
	        } else {
	          o.onCompleted();
	        }
	      };
	    }
	
	    PairsObservable.prototype.subscribeCore = function (o) {
	      return this._scheduler.scheduleRecursive(0, scheduleMethod(o, this._o, this._keys));
	    };
	
	    return PairsObservable;
	  }(ObservableBase));
	
	  /**
	   * Convert an object into an observable sequence of [key, value] pairs.
	   * @param {Object} obj The object to inspect.
	   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	   * @returns {Observable} An observable sequence of [key, value] pairs from the object.
	   */
	  Observable.pairs = function (obj, scheduler) {
	    scheduler || (scheduler = currentThreadScheduler);
	    return new PairsObservable(obj, scheduler);
	  };
	
	    var RangeObservable = (function(__super__) {
	    inherits(RangeObservable, __super__);
	    function RangeObservable(start, count, scheduler) {
	      this.start = start;
	      this.rangeCount = count;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    function loopRecursive(start, count, o) {
	      return function loop (i, recurse) {
	        if (i < count) {
	          o.onNext(start + i);
	          recurse(i + 1);
	        } else {
	          o.onCompleted();
	        }
	      };
	    }
	
	    RangeObservable.prototype.subscribeCore = function (o) {
	      return this.scheduler.scheduleRecursive(
	        0,
	        loopRecursive(this.start, this.rangeCount, o)
	      );
	    };
	
	    return RangeObservable;
	  }(ObservableBase));
	
	  /**
	  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
	  * @param {Number} start The value of the first integer in the sequence.
	  * @param {Number} count The number of sequential integers to generate.
	  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
	  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
	  */
	  Observable.range = function (start, count, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new RangeObservable(start, count, scheduler);
	  };
	
	  var RepeatObservable = (function(__super__) {
	    inherits(RepeatObservable, __super__);
	    function RepeatObservable(value, repeatCount, scheduler) {
	      this.value = value;
	      this.repeatCount = repeatCount == null ? -1 : repeatCount;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    RepeatObservable.prototype.subscribeCore = function (observer) {
	      var sink = new RepeatSink(observer, this);
	      return sink.run();
	    };
	
	    return RepeatObservable;
	  }(ObservableBase));
	
	  function RepeatSink(observer, parent) {
	    this.observer = observer;
	    this.parent = parent;
	  }
	
	  RepeatSink.prototype.run = function () {
	    var observer = this.observer, value = this.parent.value;
	    function loopRecursive(i, recurse) {
	      if (i === -1 || i > 0) {
	        observer.onNext(value);
	        i > 0 && i--;
	      }
	      if (i === 0) { return observer.onCompleted(); }
	      recurse(i);
	    }
	
	    return this.parent.scheduler.scheduleRecursive(this.parent.repeatCount, loopRecursive);
	  };
	
	  /**
	   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
	   * @param {Mixed} value Element to repeat.
	   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
	   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
	   */
	  Observable.repeat = function (value, repeatCount, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new RepeatObservable(value, repeatCount, scheduler);
	  };
	
	  var JustObservable = (function(__super__) {
	    inherits(JustObservable, __super__);
	    function JustObservable(value, scheduler) {
	      this._value = value;
	      this._scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    JustObservable.prototype.subscribeCore = function (o) {
	      var state = [this._value, o];
	      return this._scheduler === immediateScheduler ?
	        scheduleItem(null, state) :
	        this._scheduler.schedule(state, scheduleItem);
	    };
	
	    function scheduleItem(s, state) {
	      var value = state[0], observer = state[1];
	      observer.onNext(value);
	      observer.onCompleted();
	      return disposableEmpty;
	    }
	
	    return JustObservable;
	  }(ObservableBase));
	
	  /**
	   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
	   *  There is an alias called 'just' or browsers <IE9.
	   * @param {Mixed} value Single element in the resulting observable sequence.
	   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence containing the single specified element.
	   */
	  var observableReturn = Observable['return'] = Observable.just = function (value, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new JustObservable(value, scheduler);
	  };
	
	  var ThrowObservable = (function(__super__) {
	    inherits(ThrowObservable, __super__);
	    function ThrowObservable(error, scheduler) {
	      this._error = error;
	      this._scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    ThrowObservable.prototype.subscribeCore = function (o) {
	      var state = [this._error, o];
	      return this._scheduler === immediateScheduler ?
	        scheduleItem(null, state) :
	        this._scheduler.schedule(state, scheduleItem);
	    };
	
	    function scheduleItem(s, state) {
	      var e = state[0], o = state[1];
	      o.onError(e);
	      return disposableEmpty;
	    }
	
	    return ThrowObservable;
	  }(ObservableBase));
	
	  /**
	   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
	   *  There is an alias to this method called 'throwError' for browsers <IE9.
	   * @param {Mixed} error An object used for the sequence's termination.
	   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
	   */
	  var observableThrow = Observable['throw'] = function (error, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new ThrowObservable(error, scheduler);
	  };
	
	  var UsingObservable = (function (__super__) {
	    inherits(UsingObservable, __super__);
	    function UsingObservable(resFn, obsFn) {
	      this._resFn = resFn;
	      this._obsFn = obsFn;
	      __super__.call(this);
	    }
	
	    UsingObservable.prototype.subscribeCore = function (o) {
	      var disposable = disposableEmpty;
	      var resource = tryCatch(this._resFn)();
	      if (resource === errorObj) {
	        return new BinaryDisposable(observableThrow(resource.e).subscribe(o), disposable);
	      }
	      resource && (disposable = resource);
	      var source = tryCatch(this._obsFn)(resource);
	      if (source === errorObj) {
	        return new BinaryDisposable(observableThrow(source.e).subscribe(o), disposable);
	      }
	      return new BinaryDisposable(source.subscribe(o), disposable);
	    };
	
	    return UsingObservable;
	  }(ObservableBase));
	
	  /**
	   * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
	   * @param {Function} resourceFactory Factory function to obtain a resource object.
	   * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.
	   * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.
	   */
	  Observable.using = function (resourceFactory, observableFactory) {
	    return new UsingObservable(resourceFactory, observableFactory);
	  };
	
	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   * @param {Observable} rightSource Second observable sequence or Promise.
	   * @returns {Observable} {Observable} An observable sequence that surfaces either of the given sequences, whichever reacted first.
	   */
	  observableProto.amb = function (rightSource) {
	    var leftSource = this;
	    return new AnonymousObservable(function (observer) {
	      var choice,
	        leftChoice = 'L', rightChoice = 'R',
	        leftSubscription = new SingleAssignmentDisposable(),
	        rightSubscription = new SingleAssignmentDisposable();
	
	      isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));
	
	      function choiceL() {
	        if (!choice) {
	          choice = leftChoice;
	          rightSubscription.dispose();
	        }
	      }
	
	      function choiceR() {
	        if (!choice) {
	          choice = rightChoice;
	          leftSubscription.dispose();
	        }
	      }
	
	      var leftSubscribe = observerCreate(
	        function (left) {
	          choiceL();
	          choice === leftChoice && observer.onNext(left);
	        },
	        function (e) {
	          choiceL();
	          choice === leftChoice && observer.onError(e);
	        },
	        function () {
	          choiceL();
	          choice === leftChoice && observer.onCompleted();
	        }
	      );
	      var rightSubscribe = observerCreate(
	        function (right) {
	          choiceR();
	          choice === rightChoice && observer.onNext(right);
	        },
	        function (e) {
	          choiceR();
	          choice === rightChoice && observer.onError(e);
	        },
	        function () {
	          choiceR();
	          choice === rightChoice && observer.onCompleted();
	        }
	      );
	
	      leftSubscription.setDisposable(leftSource.subscribe(leftSubscribe));
	      rightSubscription.setDisposable(rightSource.subscribe(rightSubscribe));
	
	      return new BinaryDisposable(leftSubscription, rightSubscription);
	    });
	  };
	
	  function amb(p, c) { return p.amb(c); }
	
	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   * @returns {Observable} An observable sequence that surfaces any of the given sequences, whichever reacted first.
	   */
	  Observable.amb = function () {
	    var acc = observableNever(), items;
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      var len = arguments.length;
	      items = new Array(items);
	      for(var i = 0; i < len; i++) { items[i] = arguments[i]; }
	    }
	    for (var i = 0, len = items.length; i < len; i++) {
	      acc = amb(acc, items[i]);
	    }
	    return acc;
	  };
	
	  var CatchObservable = (function (__super__) {
	    inherits(CatchObservable, __super__);
	    function CatchObservable(source, fn) {
	      this.source = source;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    CatchObservable.prototype.subscribeCore = function (o) {
	      var d1 = new SingleAssignmentDisposable(), subscription = new SerialDisposable();
	      subscription.setDisposable(d1);
	      d1.setDisposable(this.source.subscribe(new CatchObserver(o, subscription, this._fn)));
	      return subscription;
	    };
	
	    return CatchObservable;
	  }(ObservableBase));
	
	  var CatchObserver = (function(__super__) {
	    inherits(CatchObserver, __super__);
	    function CatchObserver(o, s, fn) {
	      this._o = o;
	      this._s = s;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    CatchObserver.prototype.next = function (x) { this._o.onNext(x); };
	    CatchObserver.prototype.completed = function () { return this._o.onCompleted(); };
	    CatchObserver.prototype.error = function (e) {
	      var result = tryCatch(this._fn)(e);
	      if (result === errorObj) { return this._o.onError(result.e); }
	      isPromise(result) && (result = observableFromPromise(result));
	
	      var d = new SingleAssignmentDisposable();
	      this._s.setDisposable(d);
	      d.setDisposable(result.subscribe(this._o));
	    };
	
	    return CatchObserver;
	  }(AbstractObserver));
	
	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
	   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
	   */
	  observableProto['catch'] = function (handlerOrSecond) {
	    return isFunction(handlerOrSecond) ? new CatchObservable(this, handlerOrSecond) : observableCatch([this, handlerOrSecond]);
	  };
	
	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.
	   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
	   */
	  var observableCatch = Observable['catch'] = function () {
	    var items;
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      var len = arguments.length;
	      items = new Array(len);
	      for(var i = 0; i < len; i++) { items[i] = arguments[i]; }
	    }
	    return enumerableOf(items).catchError();
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   * This can be in the form of an argument list of observables or an array.
	   *
	   * @example
	   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.combineLatest = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    if (Array.isArray(args[0])) {
	      args[0].unshift(this);
	    } else {
	      args.unshift(this);
	    }
	    return combineLatest.apply(this, args);
	  };
	
	  function falseFactory() { return false; }
	  function argumentsToArray() {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return args;
	  }
	
	  var CombineLatestObservable = (function(__super__) {
	    inherits(CombineLatestObservable, __super__);
	    function CombineLatestObservable(params, cb) {
	      this._params = params;
	      this._cb = cb;
	      __super__.call(this);
	    }
	
	    CombineLatestObservable.prototype.subscribeCore = function(observer) {
	      var len = this._params.length,
	          subscriptions = new Array(len);
	
	      var state = {
	        hasValue: arrayInitialize(len, falseFactory),
	        hasValueAll: false,
	        isDone: arrayInitialize(len, falseFactory),
	        values: new Array(len)
	      };
	
	      for (var i = 0; i < len; i++) {
	        var source = this._params[i], sad = new SingleAssignmentDisposable();
	        subscriptions[i] = sad;
	        isPromise(source) && (source = observableFromPromise(source));
	        sad.setDisposable(source.subscribe(new CombineLatestObserver(observer, i, this._cb, state)));
	      }
	
	      return new NAryDisposable(subscriptions);
	    };
	
	    return CombineLatestObservable;
	  }(ObservableBase));
	
	  var CombineLatestObserver = (function (__super__) {
	    inherits(CombineLatestObserver, __super__);
	    function CombineLatestObserver(o, i, cb, state) {
	      this._o = o;
	      this._i = i;
	      this._cb = cb;
	      this._state = state;
	      __super__.call(this);
	    }
	
	    function notTheSame(i) {
	      return function (x, j) {
	        return j !== i;
	      };
	    }
	
	    CombineLatestObserver.prototype.next = function (x) {
	      this._state.values[this._i] = x;
	      this._state.hasValue[this._i] = true;
	      if (this._state.hasValueAll || (this._state.hasValueAll = this._state.hasValue.every(identity))) {
	        var res = tryCatch(this._cb).apply(null, this._state.values);
	        if (res === errorObj) { return this._o.onError(res.e); }
	        this._o.onNext(res);
	      } else if (this._state.isDone.filter(notTheSame(this._i)).every(identity)) {
	        this._o.onCompleted();
	      }
	    };
	
	    CombineLatestObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    CombineLatestObserver.prototype.completed = function () {
	      this._state.isDone[this._i] = true;
	      this._state.isDone.every(identity) && this._o.onCompleted();
	    };
	
	    return CombineLatestObserver;
	  }(AbstractObserver));
	
	  /**
	  * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	  *
	  * @example
	  * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	  * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	  * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	  */
	  var combineLatest = Observable.combineLatest = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
	    Array.isArray(args[0]) && (args = args[0]);
	    return new CombineLatestObservable(args, resultSelector);
	  };
	
	  /**
	   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  observableProto.concat = function () {
	    for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	    args.unshift(this);
	    return observableConcat.apply(null, args);
	  };
	
	  var ConcatObserver = (function(__super__) {
	    inherits(ConcatObserver, __super__);
	    function ConcatObserver(s, fn) {
	      this._s = s;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    ConcatObserver.prototype.next = function (x) { this._s.o.onNext(x); };
	    ConcatObserver.prototype.error = function (e) { this._s.o.onError(e); };
	    ConcatObserver.prototype.completed = function () { this._s.i++; this._fn(this._s); };
	
	    return ConcatObserver;
	  }(AbstractObserver));
	
	  var ConcatObservable = (function(__super__) {
	    inherits(ConcatObservable, __super__);
	    function ConcatObservable(sources) {
	      this._sources = sources;
	      __super__.call(this);
	    }
	
	    function scheduleRecursive (state, recurse) {
	      if (state.disposable.isDisposed) { return; }
	      if (state.i === state.sources.length) { return state.o.onCompleted(); }
	
	      // Check if promise
	      var currentValue = state.sources[state.i];
	      isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	      var d = new SingleAssignmentDisposable();
	      state.subscription.setDisposable(d);
	      d.setDisposable(currentValue.subscribe(new ConcatObserver(state, recurse)));
	    }
	
	    ConcatObservable.prototype.subscribeCore = function(o) {
	      var subscription = new SerialDisposable();
	      var disposable = disposableCreate(noop);
	      var state = {
	        o: o,
	        i: 0,
	        subscription: subscription,
	        disposable: disposable,
	        sources: this._sources
	      };
	
	      var cancelable = immediateScheduler.scheduleRecursive(state, scheduleRecursive);
	      return new NAryDisposable([subscription, disposable, cancelable]);
	    };
	
	    return ConcatObservable;
	  }(ObservableBase));
	
	  /**
	   * Concatenates all the observable sequences.
	   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  var observableConcat = Observable.concat = function () {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      args = new Array(arguments.length);
	      for(var i = 0, len = arguments.length; i < len; i++) { args[i] = arguments[i]; }
	    }
	    return new ConcatObservable(args);
	  };
	
	  /**
	   * Concatenates an observable sequence of observable sequences.
	   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.
	   */
	  observableProto.concatAll = function () {
	    return this.merge(1);
	  };
	
	  var MergeObservable = (function (__super__) {
	    inherits(MergeObservable, __super__);
	
	    function MergeObservable(source, maxConcurrent) {
	      this.source = source;
	      this.maxConcurrent = maxConcurrent;
	      __super__.call(this);
	    }
	
	    MergeObservable.prototype.subscribeCore = function(observer) {
	      var g = new CompositeDisposable();
	      g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
	      return g;
	    };
	
	    return MergeObservable;
	
	  }(ObservableBase));
	
	  var MergeObserver = (function (__super__) {
	    function MergeObserver(o, max, g) {
	      this.o = o;
	      this.max = max;
	      this.g = g;
	      this.done = false;
	      this.q = [];
	      this.activeCount = 0;
	      __super__.call(this);
	    }
	
	    inherits(MergeObserver, __super__);
	
	    MergeObserver.prototype.handleSubscribe = function (xs) {
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);
	      isPromise(xs) && (xs = observableFromPromise(xs));
	      sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
	    };
	
	    MergeObserver.prototype.next = function (innerSource) {
	      if(this.activeCount < this.max) {
	        this.activeCount++;
	        this.handleSubscribe(innerSource);
	      } else {
	        this.q.push(innerSource);
	      }
	    };
	    MergeObserver.prototype.error = function (e) { this.o.onError(e); };
	    MergeObserver.prototype.completed = function () { this.done = true; this.activeCount === 0 && this.o.onCompleted(); };
	
	    function InnerObserver(parent, sad) {
	      this.parent = parent;
	      this.sad = sad;
	      __super__.call(this);
	    }
	
	    inherits(InnerObserver, __super__);
	
	    InnerObserver.prototype.next = function (x) { this.parent.o.onNext(x); };
	    InnerObserver.prototype.error = function (e) { this.parent.o.onError(e); };
	    InnerObserver.prototype.completed = function () {
	      this.parent.g.remove(this.sad);
	      if (this.parent.q.length > 0) {
	        this.parent.handleSubscribe(this.parent.q.shift());
	      } else {
	        this.parent.activeCount--;
	        this.parent.done && this.parent.activeCount === 0 && this.parent.o.onCompleted();
	      }
	    };
	
	    return MergeObserver;
	  }(AbstractObserver));
	
	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
	  * Or merges two observable sequences into a single observable sequence.
	  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.merge = function (maxConcurrentOrOther) {
	    return typeof maxConcurrentOrOther !== 'number' ?
	      observableMerge(this, maxConcurrentOrOther) :
	      new MergeObservable(this, maxConcurrentOrOther);
	  };
	
	  /**
	   * Merges all the observable sequences into a single observable sequence.
	   * The scheduler is optional and if not specified, the immediate scheduler is used.
	   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.
	   */
	  var observableMerge = Observable.merge = function () {
	    var scheduler, sources = [], i, len = arguments.length;
	    if (!arguments[0]) {
	      scheduler = immediateScheduler;
	      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
	    } else if (isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
	    } else {
	      scheduler = immediateScheduler;
	      for(i = 0; i < len; i++) { sources.push(arguments[i]); }
	    }
	    if (Array.isArray(sources[0])) {
	      sources = sources[0];
	    }
	    return observableOf(scheduler, sources).mergeAll();
	  };
	
	  var MergeAllObservable = (function (__super__) {
	    inherits(MergeAllObservable, __super__);
	
	    function MergeAllObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    MergeAllObservable.prototype.subscribeCore = function (o) {
	      var g = new CompositeDisposable(), m = new SingleAssignmentDisposable();
	      g.add(m);
	      m.setDisposable(this.source.subscribe(new MergeAllObserver(o, g)));
	      return g;
	    };
	
	    return MergeAllObservable;
	  }(ObservableBase));
	
	  var MergeAllObserver = (function (__super__) {
	    function MergeAllObserver(o, g) {
	      this.o = o;
	      this.g = g;
	      this.done = false;
	      __super__.call(this);
	    }
	
	    inherits(MergeAllObserver, __super__);
	
	    MergeAllObserver.prototype.next = function(innerSource) {
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);
	      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	      sad.setDisposable(innerSource.subscribe(new InnerObserver(this, sad)));
	    };
	
	    MergeAllObserver.prototype.error = function (e) {
	      this.o.onError(e);
	    };
	
	    MergeAllObserver.prototype.completed = function () {
	      this.done = true;
	      this.g.length === 1 && this.o.onCompleted();
	    };
	
	    function InnerObserver(parent, sad) {
	      this.parent = parent;
	      this.sad = sad;
	      __super__.call(this);
	    }
	
	    inherits(InnerObserver, __super__);
	
	    InnerObserver.prototype.next = function (x) {
	      this.parent.o.onNext(x);
	    };
	    InnerObserver.prototype.error = function (e) {
	      this.parent.o.onError(e);
	    };
	    InnerObserver.prototype.completed = function () {
	      this.parent.g.remove(this.sad);
	      this.parent.done && this.parent.g.length === 1 && this.parent.o.onCompleted();
	    };
	
	    return MergeAllObserver;
	  }(AbstractObserver));
	
	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.mergeAll = function () {
	    return new MergeAllObservable(this);
	  };
	
	  var CompositeError = Rx.CompositeError = function(errors) {
	    this.innerErrors = errors;
	    this.message = 'This contains multiple errors. Check the innerErrors';
	    Error.call(this);
	  };
	  CompositeError.prototype = Object.create(Error.prototype);
	  CompositeError.prototype.name = 'CompositeError';
	
	  var MergeDelayErrorObservable = (function(__super__) {
	    inherits(MergeDelayErrorObservable, __super__);
	    function MergeDelayErrorObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    MergeDelayErrorObservable.prototype.subscribeCore = function (o) {
	      var group = new CompositeDisposable(),
	        m = new SingleAssignmentDisposable(),
	        state = { isStopped: false, errors: [], o: o };
	
	      group.add(m);
	      m.setDisposable(this.source.subscribe(new MergeDelayErrorObserver(group, state)));
	
	      return group;
	    };
	
	    return MergeDelayErrorObservable;
	  }(ObservableBase));
	
	  var MergeDelayErrorObserver = (function(__super__) {
	    inherits(MergeDelayErrorObserver, __super__);
	    function MergeDelayErrorObserver(group, state) {
	      this._group = group;
	      this._state = state;
	      __super__.call(this);
	    }
	
	    function setCompletion(o, errors) {
	      if (errors.length === 0) {
	        o.onCompleted();
	      } else if (errors.length === 1) {
	        o.onError(errors[0]);
	      } else {
	        o.onError(new CompositeError(errors));
	      }
	    }
	
	    MergeDelayErrorObserver.prototype.next = function (x) {
	      var inner = new SingleAssignmentDisposable();
	      this._group.add(inner);
	
	      // Check for promises support
	      isPromise(x) && (x = observableFromPromise(x));
	      inner.setDisposable(x.subscribe(new InnerObserver(inner, this._group, this._state)));
	    };
	
	    MergeDelayErrorObserver.prototype.error = function (e) {
	      this._state.errors.push(e);
	      this._state.isStopped = true;
	      this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
	    };
	
	    MergeDelayErrorObserver.prototype.completed = function () {
	      this._state.isStopped = true;
	      this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
	    };
	
	    inherits(InnerObserver, __super__);
	    function InnerObserver(inner, group, state) {
	      this._inner = inner;
	      this._group = group;
	      this._state = state;
	      __super__.call(this);
	    }
	
	    InnerObserver.prototype.next = function (x) { this._state.o.onNext(x); };
	    InnerObserver.prototype.error = function (e) {
	      this._state.errors.push(e);
	      this._group.remove(this._inner);
	      this._state.isStopped && this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
	    };
	    InnerObserver.prototype.completed = function () {
	      this._group.remove(this._inner);
	      this._state.isStopped && this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
	    };
	
	    return MergeDelayErrorObserver;
	  }(AbstractObserver));
	
	  /**
	  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to
	  * receive all successfully emitted items from all of the source Observables without being interrupted by
	  * an error notification from one of them.
	  *
	  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an
	  * error via the Observer's onError, mergeDelayError will refrain from propagating that
	  * error notification until all of the merged Observables have finished emitting items.
	  * @param {Array | Arguments} args Arguments or an array to merge.
	  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable
	  */
	  Observable.mergeDelayError = function() {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      var len = arguments.length;
	      args = new Array(len);
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    }
	    var source = observableOf(null, args);
	    return new MergeDelayErrorObservable(source);
	  };
	
	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.
	   * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.
	   */
	  observableProto.onErrorResumeNext = function (second) {
	    if (!second) { throw new Error('Second observable is required'); }
	    return onErrorResumeNext([this, second]);
	  };
	
	  var OnErrorResumeNextObservable = (function(__super__) {
	    inherits(OnErrorResumeNextObservable, __super__);
	    function OnErrorResumeNextObservable(sources) {
	      this.sources = sources;
	      __super__.call(this);
	    }
	
	    function scheduleMethod(state, recurse) {
	      if (state.pos < state.sources.length) {
	        var current = state.sources[state.pos++];
	        isPromise(current) && (current = observableFromPromise(current));
	        var d = new SingleAssignmentDisposable();
	        state.subscription.setDisposable(d);
	        d.setDisposable(current.subscribe(new OnErrorResumeNextObserver(state, recurse)));
	      } else {
	        state.o.onCompleted();
	      }
	    }
	
	    OnErrorResumeNextObservable.prototype.subscribeCore = function (o) {
	      var subscription = new SerialDisposable(),
	          state = {pos: 0, subscription: subscription, o: o, sources: this.sources },
	          cancellable = immediateScheduler.scheduleRecursive(state, scheduleMethod);
	
	      return new BinaryDisposable(subscription, cancellable);
	    };
	
	    return OnErrorResumeNextObservable;
	  }(ObservableBase));
	
	  var OnErrorResumeNextObserver = (function(__super__) {
	    inherits(OnErrorResumeNextObserver, __super__);
	    function OnErrorResumeNextObserver(state, recurse) {
	      this._state = state;
	      this._recurse = recurse;
	      __super__.call(this);
	    }
	
	    OnErrorResumeNextObserver.prototype.next = function (x) { this._state.o.onNext(x); };
	    OnErrorResumeNextObserver.prototype.error = function () { this._recurse(this._state); };
	    OnErrorResumeNextObserver.prototype.completed = function () { this._recurse(this._state); };
	
	    return OnErrorResumeNextObserver;
	  }(AbstractObserver));
	
	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.
	   */
	  var onErrorResumeNext = Observable.onErrorResumeNext = function () {
	    var sources = [];
	    if (Array.isArray(arguments[0])) {
	      sources = arguments[0];
	    } else {
	      var len = arguments.length;
	      sources = new Array(len);
	      for(var i = 0; i < len; i++) { sources[i] = arguments[i]; }
	    }
	    return new OnErrorResumeNextObservable(sources);
	  };
	
	  var SkipUntilObservable = (function(__super__) {
	    inherits(SkipUntilObservable, __super__);
	
	    function SkipUntilObservable(source, other) {
	      this._s = source;
	      this._o = isPromise(other) ? observableFromPromise(other) : other;
	      this._open = false;
	      __super__.call(this);
	    }
	
	    SkipUntilObservable.prototype.subscribeCore = function(o) {
	      var leftSubscription = new SingleAssignmentDisposable();
	      leftSubscription.setDisposable(this._s.subscribe(new SkipUntilSourceObserver(o, this)));
	
	      isPromise(this._o) && (this._o = observableFromPromise(this._o));
	
	      var rightSubscription = new SingleAssignmentDisposable();
	      rightSubscription.setDisposable(this._o.subscribe(new SkipUntilOtherObserver(o, this, rightSubscription)));
	
	      return new BinaryDisposable(leftSubscription, rightSubscription);
	    };
	
	    return SkipUntilObservable;
	  }(ObservableBase));
	
	  var SkipUntilSourceObserver = (function(__super__) {
	    inherits(SkipUntilSourceObserver, __super__);
	    function SkipUntilSourceObserver(o, p) {
	      this._o = o;
	      this._p = p;
	      __super__.call(this);
	    }
	
	    SkipUntilSourceObserver.prototype.next = function (x) {
	      this._p._open && this._o.onNext(x);
	    };
	
	    SkipUntilSourceObserver.prototype.error = function (err) {
	      this._o.onError(err);
	    };
	
	    SkipUntilSourceObserver.prototype.onCompleted = function () {
	      this._p._open && this._o.onCompleted();
	    };
	
	    return SkipUntilSourceObserver;
	  }(AbstractObserver));
	
	  var SkipUntilOtherObserver = (function(__super__) {
	    inherits(SkipUntilOtherObserver, __super__);
	    function SkipUntilOtherObserver(o, p, r) {
	      this._o = o;
	      this._p = p;
	      this._r = r;
	      __super__.call(this);
	    }
	
	    SkipUntilOtherObserver.prototype.next = function () {
	      this._p._open = true;
	      this._r.dispose();
	    };
	
	    SkipUntilOtherObserver.prototype.error = function (err) {
	      this._o.onError(err);
	    };
	
	    SkipUntilOtherObserver.prototype.onCompleted = function () {
	      this._r.dispose();
	    };
	
	    return SkipUntilOtherObserver;
	  }(AbstractObserver));
	
	  /**
	   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
	   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
	   */
	  observableProto.skipUntil = function (other) {
	    return new SkipUntilObservable(this, other);
	  };
	
	  var SwitchObservable = (function(__super__) {
	    inherits(SwitchObservable, __super__);
	    function SwitchObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    SwitchObservable.prototype.subscribeCore = function (o) {
	      var inner = new SerialDisposable(), s = this.source.subscribe(new SwitchObserver(o, inner));
	      return new BinaryDisposable(s, inner);
	    };
	
	    inherits(SwitchObserver, AbstractObserver);
	    function SwitchObserver(o, inner) {
	      this.o = o;
	      this.inner = inner;
	      this.stopped = false;
	      this.latest = 0;
	      this.hasLatest = false;
	      AbstractObserver.call(this);
	    }
	
	    SwitchObserver.prototype.next = function (innerSource) {
	      var d = new SingleAssignmentDisposable(), id = ++this.latest;
	      this.hasLatest = true;
	      this.inner.setDisposable(d);
	      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	      d.setDisposable(innerSource.subscribe(new InnerObserver(this, id)));
	    };
	
	    SwitchObserver.prototype.error = function (e) {
	      this.o.onError(e);
	    };
	
	    SwitchObserver.prototype.completed = function () {
	      this.stopped = true;
	      !this.hasLatest && this.o.onCompleted();
	    };
	
	    inherits(InnerObserver, AbstractObserver);
	    function InnerObserver(parent, id) {
	      this.parent = parent;
	      this.id = id;
	      AbstractObserver.call(this);
	    }
	    InnerObserver.prototype.next = function (x) {
	      this.parent.latest === this.id && this.parent.o.onNext(x);
	    };
	
	    InnerObserver.prototype.error = function (e) {
	      this.parent.latest === this.id && this.parent.o.onError(e);
	    };
	
	    InnerObserver.prototype.completed = function () {
	      if (this.parent.latest === this.id) {
	        this.parent.hasLatest = false;
	        this.parent.stopped && this.parent.o.onCompleted();
	      }
	    };
	
	    return SwitchObservable;
	  }(ObservableBase));
	
	  /**
	  * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	  * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	  */
	  observableProto['switch'] = observableProto.switchLatest = function () {
	    return new SwitchObservable(this);
	  };
	
	  var TakeUntilObservable = (function(__super__) {
	    inherits(TakeUntilObservable, __super__);
	
	    function TakeUntilObservable(source, other) {
	      this.source = source;
	      this.other = isPromise(other) ? observableFromPromise(other) : other;
	      __super__.call(this);
	    }
	
	    TakeUntilObservable.prototype.subscribeCore = function(o) {
	      return new BinaryDisposable(
	        this.source.subscribe(o),
	        this.other.subscribe(new TakeUntilObserver(o))
	      );
	    };
	
	    return TakeUntilObservable;
	  }(ObservableBase));
	
	  var TakeUntilObserver = (function(__super__) {
	    inherits(TakeUntilObserver, __super__);
	    function TakeUntilObserver(o) {
	      this._o = o;
	      __super__.call(this);
	    }
	
	    TakeUntilObserver.prototype.next = function () {
	      this._o.onCompleted();
	    };
	
	    TakeUntilObserver.prototype.error = function (err) {
	      this._o.onError(err);
	    };
	
	    TakeUntilObserver.prototype.onCompleted = noop;
	
	    return TakeUntilObserver;
	  }(AbstractObserver));
	
	  /**
	   * Returns the values from the source observable sequence until the other observable sequence produces a value.
	   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
	   */
	  observableProto.takeUntil = function (other) {
	    return new TakeUntilObservable(this, other);
	  };
	
	  function falseFactory() { return false; }
	  function argumentsToArray() {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return args;
	  }
	
	  var WithLatestFromObservable = (function(__super__) {
	    inherits(WithLatestFromObservable, __super__);
	    function WithLatestFromObservable(source, sources, resultSelector) {
	      this._s = source;
	      this._ss = sources;
	      this._cb = resultSelector;
	      __super__.call(this);
	    }
	
	    WithLatestFromObservable.prototype.subscribeCore = function (o) {
	      var len = this._ss.length;
	      var state = {
	        hasValue: arrayInitialize(len, falseFactory),
	        hasValueAll: false,
	        values: new Array(len)
	      };
	
	      var n = this._ss.length, subscriptions = new Array(n + 1);
	      for (var i = 0; i < n; i++) {
	        var other = this._ss[i], sad = new SingleAssignmentDisposable();
	        isPromise(other) && (other = observableFromPromise(other));
	        sad.setDisposable(other.subscribe(new WithLatestFromOtherObserver(o, i, state)));
	        subscriptions[i] = sad;
	      }
	
	      var outerSad = new SingleAssignmentDisposable();
	      outerSad.setDisposable(this._s.subscribe(new WithLatestFromSourceObserver(o, this._cb, state)));
	      subscriptions[n] = outerSad;
	
	      return new NAryDisposable(subscriptions);
	    };
	
	    return WithLatestFromObservable;
	  }(ObservableBase));
	
	  var WithLatestFromOtherObserver = (function (__super__) {
	    inherits(WithLatestFromOtherObserver, __super__);
	    function WithLatestFromOtherObserver(o, i, state) {
	      this._o = o;
	      this._i = i;
	      this._state = state;
	      __super__.call(this);
	    }
	
	    WithLatestFromOtherObserver.prototype.next = function (x) {
	      this._state.values[this._i] = x;
	      this._state.hasValue[this._i] = true;
	      this._state.hasValueAll = this._state.hasValue.every(identity);
	    };
	
	    WithLatestFromOtherObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    WithLatestFromOtherObserver.prototype.completed = noop;
	
	    return WithLatestFromOtherObserver;
	  }(AbstractObserver));
	
	  var WithLatestFromSourceObserver = (function (__super__) {
	    inherits(WithLatestFromSourceObserver, __super__);
	    function WithLatestFromSourceObserver(o, cb, state) {
	      this._o = o;
	      this._cb = cb;
	      this._state = state;
	      __super__.call(this);
	    }
	
	    WithLatestFromSourceObserver.prototype.next = function (x) {
	      var allValues = [x].concat(this._state.values);
	      if (!this._state.hasValueAll) { return; }
	      var res = tryCatch(this._cb).apply(null, allValues);
	      if (res === errorObj) { return this._o.onError(res.e); }
	      this._o.onNext(res);
	    };
	
	    WithLatestFromSourceObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    WithLatestFromSourceObserver.prototype.completed = function () {
	      this._o.onCompleted();
	    };
	
	    return WithLatestFromSourceObserver;
	  }(AbstractObserver));
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.withLatestFrom = function () {
	    if (arguments.length === 0) { throw new Error('invalid arguments'); }
	
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
	    Array.isArray(args[0]) && (args = args[0]);
	
	    return new WithLatestFromObservable(this, args, resultSelector);
	  };
	
	  function falseFactory() { return false; }
	  function emptyArrayFactory() { return []; }
	
	  var ZipObservable = (function(__super__) {
	    inherits(ZipObservable, __super__);
	    function ZipObservable(sources, resultSelector) {
	      this._s = sources;
	      this._cb = resultSelector;
	      __super__.call(this);
	    }
	
	    ZipObservable.prototype.subscribeCore = function(observer) {
	      var n = this._s.length,
	          subscriptions = new Array(n),
	          done = arrayInitialize(n, falseFactory),
	          q = arrayInitialize(n, emptyArrayFactory);
	
	      for (var i = 0; i < n; i++) {
	        var source = this._s[i], sad = new SingleAssignmentDisposable();
	        subscriptions[i] = sad;
	        isPromise(source) && (source = observableFromPromise(source));
	        sad.setDisposable(source.subscribe(new ZipObserver(observer, i, this, q, done)));
	      }
	
	      return new NAryDisposable(subscriptions);
	    };
	
	    return ZipObservable;
	  }(ObservableBase));
	
	  var ZipObserver = (function (__super__) {
	    inherits(ZipObserver, __super__);
	    function ZipObserver(o, i, p, q, d) {
	      this._o = o;
	      this._i = i;
	      this._p = p;
	      this._q = q;
	      this._d = d;
	      __super__.call(this);
	    }
	
	    function notEmpty(x) { return x.length > 0; }
	    function shiftEach(x) { return x.shift(); }
	    function notTheSame(i) {
	      return function (x, j) {
	        return j !== i;
	      };
	    }
	
	    ZipObserver.prototype.next = function (x) {
	      this._q[this._i].push(x);
	      if (this._q.every(notEmpty)) {
	        var queuedValues = this._q.map(shiftEach);
	        var res = tryCatch(this._p._cb).apply(null, queuedValues);
	        if (res === errorObj) { return this._o.onError(res.e); }
	        this._o.onNext(res);
	      } else if (this._d.filter(notTheSame(this._i)).every(identity)) {
	        this._o.onCompleted();
	      }
	    };
	
	    ZipObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    ZipObserver.prototype.completed = function () {
	      this._d[this._i] = true;
	      this._d.every(identity) && this._o.onCompleted();
	    };
	
	    return ZipObserver;
	  }(AbstractObserver));
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
	   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
	   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
	   */
	  observableProto.zip = function () {
	    if (arguments.length === 0) { throw new Error('invalid arguments'); }
	
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
	    Array.isArray(args[0]) && (args = args[0]);
	
	    var parent = this;
	    args.unshift(parent);
	
	    return new ZipObservable(args, resultSelector);
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
	   * @param arguments Observable sources.
	   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  Observable.zip = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    if (Array.isArray(args[0])) {
	      args = isFunction(args[1]) ? args[0].concat(args[1]) : args[0];
	    }
	    var first = args.shift();
	    return first.zip.apply(first, args);
	  };
	
	function falseFactory() { return false; }
	function emptyArrayFactory() { return []; }
	function argumentsToArray() {
	  var len = arguments.length, args = new Array(len);
	  for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	  return args;
	}
	
	var ZipIterableObservable = (function(__super__) {
	  inherits(ZipIterableObservable, __super__);
	  function ZipIterableObservable(sources, cb) {
	    this.sources = sources;
	    this._cb = cb;
	    __super__.call(this);
	  }
	
	  ZipIterableObservable.prototype.subscribeCore = function (o) {
	    var sources = this.sources, len = sources.length, subscriptions = new Array(len);
	
	    var state = {
	      q: arrayInitialize(len, emptyArrayFactory),
	      done: arrayInitialize(len, falseFactory),
	      cb: this._cb,
	      o: o
	    };
	
	    for (var i = 0; i < len; i++) {
	      (function (i) {
	        var source = sources[i], sad = new SingleAssignmentDisposable();
	        (isArrayLike(source) || isIterable(source)) && (source = observableFrom(source));
	
	        subscriptions[i] = sad;
	        sad.setDisposable(source.subscribe(new ZipIterableObserver(state, i)));
	      }(i));
	    }
	
	    return new NAryDisposable(subscriptions);
	  };
	
	  return ZipIterableObservable;
	}(ObservableBase));
	
	var ZipIterableObserver = (function (__super__) {
	  inherits(ZipIterableObserver, __super__);
	  function ZipIterableObserver(s, i) {
	    this._s = s;
	    this._i = i;
	    __super__.call(this);
	  }
	
	  function notEmpty(x) { return x.length > 0; }
	  function shiftEach(x) { return x.shift(); }
	  function notTheSame(i) {
	    return function (x, j) {
	      return j !== i;
	    };
	  }
	
	  ZipIterableObserver.prototype.next = function (x) {
	    this._s.q[this._i].push(x);
	    if (this._s.q.every(notEmpty)) {
	      var queuedValues = this._s.q.map(shiftEach),
	          res = tryCatch(this._s.cb).apply(null, queuedValues);
	      if (res === errorObj) { return this._s.o.onError(res.e); }
	      this._s.o.onNext(res);
	    } else if (this._s.done.filter(notTheSame(this._i)).every(identity)) {
	      this._s.o.onCompleted();
	    }
	  };
	
	  ZipIterableObserver.prototype.error = function (e) { this._s.o.onError(e); };
	
	  ZipIterableObserver.prototype.completed = function () {
	    this._s.done[this._i] = true;
	    this._s.done.every(identity) && this._s.o.onCompleted();
	  };
	
	  return ZipIterableObserver;
	}(AbstractObserver));
	
	/**
	 * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
	 * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
	 * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
	 */
	observableProto.zipIterable = function () {
	  if (arguments.length === 0) { throw new Error('invalid arguments'); }
	
	  var len = arguments.length, args = new Array(len);
	  for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	  var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
	
	  var parent = this;
	  args.unshift(parent);
	  return new ZipIterableObservable(args, resultSelector);
	};
	
	  function asObservable(source) {
	    return function subscribe(o) { return source.subscribe(o); };
	  }
	
	  /**
	   *  Hides the identity of an observable sequence.
	   * @returns {Observable} An observable sequence that hides the identity of the source sequence.
	   */
	  observableProto.asObservable = function () {
	    return new AnonymousObservable(asObservable(this), this);
	  };
	
	  function toArray(x) { return x.toArray(); }
	  function notEmpty(x) { return x.length > 0; }
	
	  /**
	   *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
	   * @param {Number} count Length of each buffer.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.
	   * @returns {Observable} An observable sequence of buffers.
	   */
	  observableProto.bufferWithCount = observableProto.bufferCount = function (count, skip) {
	    typeof skip !== 'number' && (skip = count);
	    return this.windowWithCount(count, skip)
	      .flatMap(toArray)
	      .filter(notEmpty);
	  };
	
	  var DematerializeObservable = (function (__super__) {
	    inherits(DematerializeObservable, __super__);
	    function DematerializeObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    DematerializeObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new DematerializeObserver(o));
	    };
	
	    return DematerializeObservable;
	  }(ObservableBase));
	
	  var DematerializeObserver = (function (__super__) {
	    inherits(DematerializeObserver, __super__);
	
	    function DematerializeObserver(o) {
	      this._o = o;
	      __super__.call(this);
	    }
	
	    DematerializeObserver.prototype.next = function (x) { x.accept(this._o); };
	    DematerializeObserver.prototype.error = function (e) { this._o.onError(e); };
	    DematerializeObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return DematerializeObserver;
	  }(AbstractObserver));
	
	  /**
	   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
	   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
	   */
	  observableProto.dematerialize = function () {
	    return new DematerializeObservable(this);
	  };
	
	  var DistinctUntilChangedObservable = (function(__super__) {
	    inherits(DistinctUntilChangedObservable, __super__);
	    function DistinctUntilChangedObservable(source, keyFn, comparer) {
	      this.source = source;
	      this.keyFn = keyFn;
	      this.comparer = comparer;
	      __super__.call(this);
	    }
	
	    DistinctUntilChangedObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new DistinctUntilChangedObserver(o, this.keyFn, this.comparer));
	    };
	
	    return DistinctUntilChangedObservable;
	  }(ObservableBase));
	
	  var DistinctUntilChangedObserver = (function(__super__) {
	    inherits(DistinctUntilChangedObserver, __super__);
	    function DistinctUntilChangedObserver(o, keyFn, comparer) {
	      this.o = o;
	      this.keyFn = keyFn;
	      this.comparer = comparer;
	      this.hasCurrentKey = false;
	      this.currentKey = null;
	      __super__.call(this);
	    }
	
	    DistinctUntilChangedObserver.prototype.next = function (x) {
	      var key = x, comparerEquals;
	      if (isFunction(this.keyFn)) {
	        key = tryCatch(this.keyFn)(x);
	        if (key === errorObj) { return this.o.onError(key.e); }
	      }
	      if (this.hasCurrentKey) {
	        comparerEquals = tryCatch(this.comparer)(this.currentKey, key);
	        if (comparerEquals === errorObj) { return this.o.onError(comparerEquals.e); }
	      }
	      if (!this.hasCurrentKey || !comparerEquals) {
	        this.hasCurrentKey = true;
	        this.currentKey = key;
	        this.o.onNext(x);
	      }
	    };
	    DistinctUntilChangedObserver.prototype.error = function(e) {
	      this.o.onError(e);
	    };
	    DistinctUntilChangedObserver.prototype.completed = function () {
	      this.o.onCompleted();
	    };
	
	    return DistinctUntilChangedObserver;
	  }(AbstractObserver));
	
	  /**
	  *  Returns an observable sequence that contains only distinct contiguous elements according to the keyFn and the comparer.
	  * @param {Function} [keyFn] A function to compute the comparison key for each element. If not provided, it projects the value.
	  * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
	  * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
	  */
	  observableProto.distinctUntilChanged = function (keyFn, comparer) {
	    comparer || (comparer = defaultComparer);
	    return new DistinctUntilChangedObservable(this, keyFn, comparer);
	  };
	
	  var TapObservable = (function(__super__) {
	    inherits(TapObservable,__super__);
	    function TapObservable(source, observerOrOnNext, onError, onCompleted) {
	      this.source = source;
	      this._oN = observerOrOnNext;
	      this._oE = onError;
	      this._oC = onCompleted;
	      __super__.call(this);
	    }
	
	    TapObservable.prototype.subscribeCore = function(o) {
	      return this.source.subscribe(new InnerObserver(o, this));
	    };
	
	    inherits(InnerObserver, AbstractObserver);
	    function InnerObserver(o, p) {
	      this.o = o;
	      this.t = !p._oN || isFunction(p._oN) ?
	        observerCreate(p._oN || noop, p._oE || noop, p._oC || noop) :
	        p._oN;
	      this.isStopped = false;
	      AbstractObserver.call(this);
	    }
	    InnerObserver.prototype.next = function(x) {
	      var res = tryCatch(this.t.onNext).call(this.t, x);
	      if (res === errorObj) { this.o.onError(res.e); }
	      this.o.onNext(x);
	    };
	    InnerObserver.prototype.error = function(err) {
	      var res = tryCatch(this.t.onError).call(this.t, err);
	      if (res === errorObj) { return this.o.onError(res.e); }
	      this.o.onError(err);
	    };
	    InnerObserver.prototype.completed = function() {
	      var res = tryCatch(this.t.onCompleted).call(this.t);
	      if (res === errorObj) { return this.o.onError(res.e); }
	      this.o.onCompleted();
	    };
	
	    return TapObservable;
	  }(ObservableBase));
	
	  /**
	  *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
	  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	  * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an o.
	  * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	  * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	  * @returns {Observable} The source sequence with the side-effecting behavior applied.
	  */
	  observableProto['do'] = observableProto.tap = observableProto.doAction = function (observerOrOnNext, onError, onCompleted) {
	    return new TapObservable(this, observerOrOnNext, onError, onCompleted);
	  };
	
	  /**
	  *  Invokes an action for each element in the observable sequence.
	  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	  * @param {Function} onNext Action to invoke for each element in the observable sequence.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} The source sequence with the side-effecting behavior applied.
	  */
	  observableProto.doOnNext = observableProto.tapOnNext = function (onNext, thisArg) {
	    return this.tap(typeof thisArg !== 'undefined' ? function (x) { onNext.call(thisArg, x); } : onNext);
	  };
	
	  /**
	  *  Invokes an action upon exceptional termination of the observable sequence.
	  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	  * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} The source sequence with the side-effecting behavior applied.
	  */
	  observableProto.doOnError = observableProto.tapOnError = function (onError, thisArg) {
	    return this.tap(noop, typeof thisArg !== 'undefined' ? function (e) { onError.call(thisArg, e); } : onError);
	  };
	
	  /**
	  *  Invokes an action upon graceful termination of the observable sequence.
	  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	  * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} The source sequence with the side-effecting behavior applied.
	  */
	  observableProto.doOnCompleted = observableProto.tapOnCompleted = function (onCompleted, thisArg) {
	    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function () { onCompleted.call(thisArg); } : onCompleted);
	  };
	
	  var FinallyObservable = (function (__super__) {
	    inherits(FinallyObservable, __super__);
	    function FinallyObservable(source, fn, thisArg) {
	      this.source = source;
	      this._fn = bindCallback(fn, thisArg, 0);
	      __super__.call(this);
	    }
	
	    FinallyObservable.prototype.subscribeCore = function (o) {
	      var d = tryCatch(this.source.subscribe).call(this.source, o);
	      if (d === errorObj) {
	        this._fn();
	        thrower(d.e);
	      }
	
	      return new FinallyDisposable(d, this._fn);
	    };
	
	    function FinallyDisposable(s, fn) {
	      this.isDisposed = false;
	      this._s = s;
	      this._fn = fn;
	    }
	    FinallyDisposable.prototype.dispose = function () {
	      if (!this.isDisposed) {
	        var res = tryCatch(this._s.dispose).call(this._s);
	        this._fn();
	        res === errorObj && thrower(res.e);
	      }
	    };
	
	    return FinallyObservable;
	
	  }(ObservableBase));
	
	  /**
	   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
	   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
	   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.
	   */
	  observableProto['finally'] = function (action, thisArg) {
	    return new FinallyObservable(this, action, thisArg);
	  };
	
	  var IgnoreElementsObservable = (function(__super__) {
	    inherits(IgnoreElementsObservable, __super__);
	
	    function IgnoreElementsObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    IgnoreElementsObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new InnerObserver(o));
	    };
	
	    function InnerObserver(o) {
	      this.o = o;
	      this.isStopped = false;
	    }
	    InnerObserver.prototype.onNext = noop;
	    InnerObserver.prototype.onError = function (err) {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(err);
	      }
	    };
	    InnerObserver.prototype.onCompleted = function () {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.o.onCompleted();
	      }
	    };
	    InnerObserver.prototype.dispose = function() { this.isStopped = true; };
	    InnerObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.observer.onError(e);
	        return true;
	      }
	
	      return false;
	    };
	
	    return IgnoreElementsObservable;
	  }(ObservableBase));
	
	  /**
	   *  Ignores all elements in an observable sequence leaving only the termination messages.
	   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.
	   */
	  observableProto.ignoreElements = function () {
	    return new IgnoreElementsObservable(this);
	  };
	
	  var MaterializeObservable = (function (__super__) {
	    inherits(MaterializeObservable, __super__);
	    function MaterializeObservable(source, fn) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    MaterializeObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new MaterializeObserver(o));
	    };
	
	    return MaterializeObservable;
	  }(ObservableBase));
	
	  var MaterializeObserver = (function (__super__) {
	    inherits(MaterializeObserver, __super__);
	
	    function MaterializeObserver(o) {
	      this._o = o;
	      __super__.call(this);
	    }
	
	    MaterializeObserver.prototype.next = function (x) { this._o.onNext(notificationCreateOnNext(x)) };
	    MaterializeObserver.prototype.error = function (e) { this._o.onNext(notificationCreateOnError(e)); this._o.onCompleted(); };
	    MaterializeObserver.prototype.completed = function () { this._o.onNext(notificationCreateOnCompleted()); this._o.onCompleted(); };
	
	    return MaterializeObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Materializes the implicit notifications of an observable sequence as explicit notification values.
	   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
	   */
	  observableProto.materialize = function () {
	    return new MaterializeObservable(this);
	  };
	
	  /**
	   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
	   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
	   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.
	   */
	  observableProto.repeat = function (repeatCount) {
	    return enumerableRepeat(this, repeatCount).concat();
	  };
	
	  /**
	   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
	   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);
	   *
	   * @example
	   *  var res = retried = retry.repeat();
	   *  var res = retried = retry.repeat(2);
	   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */
	  observableProto.retry = function (retryCount) {
	    return enumerableRepeat(this, retryCount).catchError();
	  };
	
	  function repeat(value) {
	    return {
	      '@@iterator': function () {
	        return {
	          next: function () {
	            return { done: false, value: value };
	          }
	        };
	      }
	    };
	  }
	
	  var RetryWhenObservable = (function(__super__) {
	    function createDisposable(state) {
	      return {
	        isDisposed: false,
	        dispose: function () {
	          if (!this.isDisposed) {
	            this.isDisposed = true;
	            state.isDisposed = true;
	          }
	        }
	      };
	    }
	
	    function RetryWhenObservable(source, notifier) {
	      this.source = source;
	      this._notifier = notifier;
	      __super__.call(this);
	    }
	
	    inherits(RetryWhenObservable, __super__);
	
	    RetryWhenObservable.prototype.subscribeCore = function (o) {
	      var exceptions = new Subject(),
	        notifier = new Subject(),
	        handled = this._notifier(exceptions),
	        notificationDisposable = handled.subscribe(notifier);
	
	      var e = this.source['@@iterator']();
	
	      var state = { isDisposed: false },
	        lastError,
	        subscription = new SerialDisposable();
	      var cancelable = currentThreadScheduler.scheduleRecursive(null, function (_, recurse) {
	        if (state.isDisposed) { return; }
	        var currentItem = e.next();
	
	        if (currentItem.done) {
	          if (lastError) {
	            o.onError(lastError);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }
	
	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	        var outer = new SingleAssignmentDisposable();
	        var inner = new SingleAssignmentDisposable();
	        subscription.setDisposable(new BinaryDisposable(inner, outer));
	        outer.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          function (exn) {
	            inner.setDisposable(notifier.subscribe(recurse, function(ex) {
	              o.onError(ex);
	            }, function() {
	              o.onCompleted();
	            }));
	
	            exceptions.onNext(exn);
	            outer.dispose();
	          },
	          function() { o.onCompleted(); }));
	      });
	
	      return new NAryDisposable([notificationDisposable, subscription, cancelable, createDisposable(state)]);
	    };
	
	    return RetryWhenObservable;
	  }(ObservableBase));
	
	  observableProto.retryWhen = function (notifier) {
	    return new RetryWhenObservable(repeat(this), notifier);
	  };
	
	  function repeat(value) {
	    return {
	      '@@iterator': function () {
	        return {
	          next: function () {
	            return { done: false, value: value };
	          }
	        };
	      }
	    };
	  }
	
	  var RepeatWhenObservable = (function(__super__) {
	    function createDisposable(state) {
	      return {
	        isDisposed: false,
	        dispose: function () {
	          if (!this.isDisposed) {
	            this.isDisposed = true;
	            state.isDisposed = true;
	          }
	        }
	      };
	    }
	
	    function RepeatWhenObservable(source, notifier) {
	      this.source = source;
	      this._notifier = notifier;
	      __super__.call(this);
	    }
	
	    inherits(RepeatWhenObservable, __super__);
	
	    RepeatWhenObservable.prototype.subscribeCore = function (o) {
	      var completions = new Subject(),
	        notifier = new Subject(),
	        handled = this._notifier(completions),
	        notificationDisposable = handled.subscribe(notifier);
	
	      var e = this.source['@@iterator']();
	
	      var state = { isDisposed: false },
	        lastError,
	        subscription = new SerialDisposable();
	      var cancelable = currentThreadScheduler.scheduleRecursive(null, function (_, recurse) {
	        if (state.isDisposed) { return; }
	        var currentItem = e.next();
	
	        if (currentItem.done) {
	          if (lastError) {
	            o.onError(lastError);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }
	
	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	        var outer = new SingleAssignmentDisposable();
	        var inner = new SingleAssignmentDisposable();
	        subscription.setDisposable(new BinaryDisposable(inner, outer));
	        outer.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          function (exn) { o.onError(exn); },
	          function() {
	            inner.setDisposable(notifier.subscribe(recurse, function(ex) {
	              o.onError(ex);
	            }, function() {
	              o.onCompleted();
	            }));
	
	            completions.onNext(null);
	            outer.dispose();
	          }));
	      });
	
	      return new NAryDisposable([notificationDisposable, subscription, cancelable, createDisposable(state)]);
	    };
	
	    return RepeatWhenObservable;
	  }(ObservableBase));
	
	  observableProto.repeatWhen = function (notifier) {
	    return new RepeatWhenObservable(repeat(this), notifier);
	  };
	
	  var ScanObservable = (function(__super__) {
	    inherits(ScanObservable, __super__);
	    function ScanObservable(source, accumulator, hasSeed, seed) {
	      this.source = source;
	      this.accumulator = accumulator;
	      this.hasSeed = hasSeed;
	      this.seed = seed;
	      __super__.call(this);
	    }
	
	    ScanObservable.prototype.subscribeCore = function(o) {
	      return this.source.subscribe(new ScanObserver(o,this));
	    };
	
	    return ScanObservable;
	  }(ObservableBase));
	
	  var ScanObserver = (function (__super__) {
	    inherits(ScanObserver, __super__);
	    function ScanObserver(o, parent) {
	      this._o = o;
	      this._p = parent;
	      this._fn = parent.accumulator;
	      this._hs = parent.hasSeed;
	      this._s = parent.seed;
	      this._ha = false;
	      this._a = null;
	      this._hv = false;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    ScanObserver.prototype.next = function (x) {
	      !this._hv && (this._hv = true);
	      if (this._ha) {
	        this._a = tryCatch(this._fn)(this._a, x, this._i, this._p);
	      } else {
	        this._a = this._hs ? tryCatch(this._fn)(this._s, x, this._i, this._p) : x;
	        this._ha = true;
	      }
	      if (this._a === errorObj) { return this._o.onError(this._a.e); }
	      this._o.onNext(this._a);
	      this._i++;
	    };
	
	    ScanObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    ScanObserver.prototype.completed = function () {
	      !this._hv && this._hs && this._o.onNext(this._s);
	      this._o.onCompleted();
	    };
	
	    return ScanObserver;
	  }(AbstractObserver));
	
	  /**
	  *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
	  *  For aggregation behavior with no intermediate results, see Observable.aggregate.
	  * @param {Mixed} [seed] The initial accumulator value.
	  * @param {Function} accumulator An accumulator function to be invoked on each element.
	  * @returns {Observable} An observable sequence containing the accumulated values.
	  */
	  observableProto.scan = function () {
	    var hasSeed = false, seed, accumulator = arguments[0];
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[1];
	    }
	    return new ScanObservable(this, accumulator, hasSeed, seed);
	  };
	
	  var SkipLastObservable = (function (__super__) {
	    inherits(SkipLastObservable, __super__);
	    function SkipLastObservable(source, c) {
	      this.source = source;
	      this._c = c;
	      __super__.call(this);
	    }
	
	    SkipLastObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new SkipLastObserver(o, this._c));
	    };
	
	    return SkipLastObservable;
	  }(ObservableBase));
	
	  var SkipLastObserver = (function (__super__) {
	    inherits(SkipLastObserver, __super__);
	    function SkipLastObserver(o, c) {
	      this._o = o;
	      this._c = c;
	      this._q = [];
	      __super__.call(this);
	    }
	
	    SkipLastObserver.prototype.next = function (x) {
	      this._q.push(x);
	      this._q.length > this._c && this._o.onNext(this._q.shift());
	    };
	
	    SkipLastObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    SkipLastObserver.prototype.completed = function () {
	      this._o.onCompleted();
	    };
	
	    return SkipLastObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Bypasses a specified number of elements at the end of an observable sequence.
	   * @description
	   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
	   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
	   * @param count Number of elements to bypass at the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.
	   */
	  observableProto.skipLast = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    return new SkipLastObservable(this, count);
	  };
	
	  /**
	   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
	   *  @example
	   *  var res = source.startWith(1, 2, 3);
	   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
	   * @param {Arguments} args The specified values to prepend to the observable sequence
	   * @returns {Observable} The source sequence prepended with the specified values.
	   */
	  observableProto.startWith = function () {
	    var values, scheduler, start = 0;
	    if (!!arguments.length && isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      start = 1;
	    } else {
	      scheduler = immediateScheduler;
	    }
	    for(var args = [], i = start, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	    return observableConcat.apply(null, [observableFromArray(args, scheduler), this]);
	  };
	
	  var TakeLastObserver = (function (__super__) {
	    inherits(TakeLastObserver, __super__);
	    function TakeLastObserver(o, c) {
	      this._o = o;
	      this._c = c;
	      this._q = [];
	      __super__.call(this);
	    }
	
	    TakeLastObserver.prototype.next = function (x) {
	      this._q.push(x);
	      this._q.length > this._c && this._q.shift();
	    };
	
	    TakeLastObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    TakeLastObserver.prototype.completed = function () {
	      while (this._q.length > 0) { this._o.onNext(this._q.shift()); }
	      this._o.onCompleted();
	    };
	
	    return TakeLastObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Returns a specified number of contiguous elements from the end of an observable sequence.
	   * @description
	   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
	   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLast = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(new TakeLastObserver(o, count));
	    }, source);
	  };
	
	  var TakeLastBufferObserver = (function (__super__) {
	    inherits(TakeLastBufferObserver, __super__);
	    function TakeLastBufferObserver(o, c) {
	      this._o = o;
	      this._c = c;
	      this._q = [];
	      __super__.call(this);
	    }
	
	    TakeLastBufferObserver.prototype.next = function (x) {
	      this._q.push(x);
	      this._q.length > this._c && this._q.shift();
	    };
	
	    TakeLastBufferObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    TakeLastBufferObserver.prototype.completed = function () {
	      this._o.onNext(this._q);
	      this._o.onCompleted();
	    };
	
	    return TakeLastBufferObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.
	   *
	   * @description
	   *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the
	   *  source sequence, this buffer is produced on the result sequence.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLastBuffer = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(new TakeLastBufferObserver(o, count));
	    }, source);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
	   * @param {Number} count Length of each window.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithCount = observableProto.windowCount = function (count, skip) {
	    var source = this;
	    +count || (count = 0);
	    Math.abs(count) === Infinity && (count = 0);
	    if (count <= 0) { throw new ArgumentOutOfRangeError(); }
	    skip == null && (skip = count);
	    +skip || (skip = 0);
	    Math.abs(skip) === Infinity && (skip = 0);
	
	    if (skip <= 0) { throw new ArgumentOutOfRangeError(); }
	    return new AnonymousObservable(function (observer) {
	      var m = new SingleAssignmentDisposable(),
	        refCountDisposable = new RefCountDisposable(m),
	        n = 0,
	        q = [];
	
	      function createWindow () {
	        var s = new Subject();
	        q.push(s);
	        observer.onNext(addRef(s, refCountDisposable));
	      }
	
	      createWindow();
	
	      m.setDisposable(source.subscribe(
	        function (x) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
	          var c = n - count + 1;
	          c >= 0 && c % skip === 0 && q.shift().onCompleted();
	          ++n % skip === 0 && createWindow();
	        },
	        function (e) {
	          while (q.length > 0) { q.shift().onError(e); }
	          observer.onError(e);
	        },
	        function () {
	          while (q.length > 0) { q.shift().onCompleted(); }
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };
	
	  function concatMap(source, selector, thisArg) {
	    var selectorFunc = bindCallback(selector, thisArg, 3);
	    return source.map(function (x, i) {
	      var result = selectorFunc(x, i, source);
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
	      return result;
	    }).concatAll();
	  }
	
	  /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.concatMap(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the
	   * source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */
	  observableProto.selectConcat = observableProto.concatMap = function (selector, resultSelector, thisArg) {
	    if (isFunction(selector) && isFunction(resultSelector)) {
	      return this.concatMap(function (x, i) {
	        var selectorResult = selector(x, i);
	        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
	        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
	
	        return selectorResult.map(function (y, i2) {
	          return resultSelector(x, y, i, i2);
	        });
	      });
	    }
	    return isFunction(selector) ?
	      concatMap(this, selector, thisArg) :
	      concatMap(this, function () { return selector; });
	  };
	
	  /**
	   * Projects each notification of an observable sequence to an observable sequence and concats the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext, onError, onCompleted, thisArg) {
	    var source = this,
	        onNextFunc = bindCallback(onNext, thisArg, 2),
	        onErrorFunc = bindCallback(onError, thisArg, 1),
	        onCompletedFunc = bindCallback(onCompleted, thisArg, 0);
	    return new AnonymousObservable(function (observer) {
	      var index = 0;
	      return source.subscribe(
	        function (x) {
	          var result;
	          try {
	            result = onNextFunc(x, index++);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	        },
	        function (err) {
	          var result;
	          try {
	            result = onErrorFunc(err);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        },
	        function () {
	          var result;
	          try {
	            result = onCompletedFunc();
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        });
	    }, this).concatAll();
	  };
	
	  var DefaultIfEmptyObserver = (function (__super__) {
	    inherits(DefaultIfEmptyObserver, __super__);
	    function DefaultIfEmptyObserver(o, d) {
	      this._o = o;
	      this._d = d;
	      this._f = false;
	      __super__.call(this);
	    }
	
	    DefaultIfEmptyObserver.prototype.next = function (x) {
	      this._f = true;
	      this._o.onNext(x);
	    };
	
	    DefaultIfEmptyObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    DefaultIfEmptyObserver.prototype.completed = function () {
	      !this._f && this._o.onNext(this._d);
	      this._o.onCompleted();
	    };
	
	    return DefaultIfEmptyObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
	   *
	   *  var res = obs = xs.defaultIfEmpty();
	   *  2 - obs = xs.defaultIfEmpty(false);
	   *
	   * @memberOf Observable#
	   * @param defaultValue The value to return if the sequence is empty. If not provided, this defaults to null.
	   * @returns {Observable} An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.
	   */
	    observableProto.defaultIfEmpty = function (defaultValue) {
	      var source = this;
	      defaultValue === undefined && (defaultValue = null);
	      return new AnonymousObservable(function (o) {
	        return source.subscribe(new DefaultIfEmptyObserver(o, defaultValue));
	      }, source);
	    };
	
	  // Swap out for Array.findIndex
	  function arrayIndexOfComparer(array, item, comparer) {
	    for (var i = 0, len = array.length; i < len; i++) {
	      if (comparer(array[i], item)) { return i; }
	    }
	    return -1;
	  }
	
	  function HashSet(comparer) {
	    this.comparer = comparer;
	    this.set = [];
	  }
	  HashSet.prototype.push = function(value) {
	    var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
	    retValue && this.set.push(value);
	    return retValue;
	  };
	
	  var DistinctObservable = (function (__super__) {
	    inherits(DistinctObservable, __super__);
	    function DistinctObservable(source, keyFn, cmpFn) {
	      this.source = source;
	      this._keyFn = keyFn;
	      this._cmpFn = cmpFn;
	      __super__.call(this);
	    }
	
	    DistinctObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new DistinctObserver(o, this._keyFn, this._cmpFn));
	    };
	
	    return DistinctObservable;
	  }(ObservableBase));
	
	  var DistinctObserver = (function (__super__) {
	    inherits(DistinctObserver, __super__);
	    function DistinctObserver(o, keyFn, cmpFn) {
	      this._o = o;
	      this._keyFn = keyFn;
	      this._h = new HashSet(cmpFn);
	      __super__.call(this);
	    }
	
	    DistinctObserver.prototype.next = function (x) {
	      var key = x;
	      if (isFunction(this._keyFn)) {
	        key = tryCatch(this._keyFn)(x);
	        if (key === errorObj) { return this._o.onError(key.e); }
	      }
	      this._h.push(key) && this._o.onNext(x);
	    };
	
	    DistinctObserver.prototype.error = function (e) { this._o.onError(e); };
	    DistinctObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return DistinctObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
	   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.
	   *
	   * @example
	   *  var res = obs = xs.distinct();
	   *  2 - obs = xs.distinct(function (x) { return x.id; });
	   *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });
	   * @param {Function} [keySelector]  A function to compute the comparison key for each element.
	   * @param {Function} [comparer]  Used to compare items in the collection.
	   * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.
	   */
	  observableProto.distinct = function (keySelector, comparer) {
	    comparer || (comparer = defaultComparer);
	    return new DistinctObservable(this, keySelector, comparer);
	  };
	
	  /**
	   *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
	   *
	   * @example
	   *  var res = observable.groupBy(function (x) { return x.id; });
	   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });
	   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });
	   * @param {Function} keySelector A function to extract the key for each element.
	   * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.
	   * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	   */
	  observableProto.groupBy = function (keySelector, elementSelector) {
	    return this.groupByUntil(keySelector, elementSelector, observableNever);
	  };
	
	    /**
	     *  Groups the elements of an observable sequence according to a specified key selector function.
	     *  A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
	     *  key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
	     *
	     * @example
	     *  var res = observable.groupByUntil(function (x) { return x.id; }, null,  function () { return Rx.Observable.never(); });
	     *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); });
	     *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); }, function (x) { return x.toString(); });
	     * @param {Function} keySelector A function to extract the key for each element.
	     * @param {Function} durationSelector A function to signal the expiration of a group.
	     * @returns {Observable}
	     *  A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	     *  If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
	     *
	     */
	    observableProto.groupByUntil = function (keySelector, elementSelector, durationSelector) {
	      var source = this;
	      return new AnonymousObservable(function (o) {
	        var map = new Map(),
	          groupDisposable = new CompositeDisposable(),
	          refCountDisposable = new RefCountDisposable(groupDisposable),
	          handleError = function (e) { return function (item) { item.onError(e); }; };
	
	        groupDisposable.add(
	          source.subscribe(function (x) {
	            var key = tryCatch(keySelector)(x);
	            if (key === errorObj) {
	              map.forEach(handleError(key.e));
	              return o.onError(key.e);
	            }
	
	            var fireNewMapEntry = false, writer = map.get(key);
	            if (writer === undefined) {
	              writer = new Subject();
	              map.set(key, writer);
	              fireNewMapEntry = true;
	            }
	
	            if (fireNewMapEntry) {
	              var group = new GroupedObservable(key, writer, refCountDisposable),
	                durationGroup = new GroupedObservable(key, writer);
	              var duration = tryCatch(durationSelector)(durationGroup);
	              if (duration === errorObj) {
	                map.forEach(handleError(duration.e));
	                return o.onError(duration.e);
	              }
	
	              o.onNext(group);
	
	              var md = new SingleAssignmentDisposable();
	              groupDisposable.add(md);
	
	              md.setDisposable(duration.take(1).subscribe(
	                noop,
	                function (e) {
	                  map.forEach(handleError(e));
	                  o.onError(e);
	                },
	                function () {
	                  if (map['delete'](key)) { writer.onCompleted(); }
	                  groupDisposable.remove(md);
	                }));
	            }
	
	            var element = x;
	            if (isFunction(elementSelector)) {
	              element = tryCatch(elementSelector)(x);
	              if (element === errorObj) {
	                map.forEach(handleError(element.e));
	                return o.onError(element.e);
	              }
	            }
	
	            writer.onNext(element);
	        }, function (e) {
	          map.forEach(handleError(e));
	          o.onError(e);
	        }, function () {
	          map.forEach(function (item) { item.onCompleted(); });
	          o.onCompleted();
	        }));
	
	      return refCountDisposable;
	    }, source);
	  };
	
	  var MapObservable = (function (__super__) {
	    inherits(MapObservable, __super__);
	
	    function MapObservable(source, selector, thisArg) {
	      this.source = source;
	      this.selector = bindCallback(selector, thisArg, 3);
	      __super__.call(this);
	    }
	
	    function innerMap(selector, self) {
	      return function (x, i, o) { return selector.call(this, self.selector(x, i, o), i, o); };
	    }
	
	    MapObservable.prototype.internalMap = function (selector, thisArg) {
	      return new MapObservable(this.source, innerMap(selector, this), thisArg);
	    };
	
	    MapObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new InnerObserver(o, this.selector, this));
	    };
	
	    inherits(InnerObserver, AbstractObserver);
	    function InnerObserver(o, selector, source) {
	      this.o = o;
	      this.selector = selector;
	      this.source = source;
	      this.i = 0;
	      AbstractObserver.call(this);
	    }
	
	    InnerObserver.prototype.next = function(x) {
	      var result = tryCatch(this.selector)(x, this.i++, this.source);
	      if (result === errorObj) { return this.o.onError(result.e); }
	      this.o.onNext(result);
	    };
	
	    InnerObserver.prototype.error = function (e) {
	      this.o.onError(e);
	    };
	
	    InnerObserver.prototype.completed = function () {
	      this.o.onCompleted();
	    };
	
	    return MapObservable;
	
	  }(ObservableBase));
	
	  /**
	  * Projects each element of an observable sequence into a new form by incorporating the element's index.
	  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.
	  */
	  observableProto.map = observableProto.select = function (selector, thisArg) {
	    var selectorFn = typeof selector === 'function' ? selector : function () { return selector; };
	    return this instanceof MapObservable ?
	      this.internalMap(selectorFn, thisArg) :
	      new MapObservable(this, selectorFn, thisArg);
	  };
	
	  function plucker(args, len) {
	    return function mapper(x) {
	      var currentProp = x;
	      for (var i = 0; i < len; i++) {
	        var p = currentProp[args[i]];
	        if (typeof p !== 'undefined') {
	          currentProp = p;
	        } else {
	          return undefined;
	        }
	      }
	      return currentProp;
	    };
	  }
	
	  /**
	   * Retrieves the value of a specified nested property from all elements in
	   * the Observable sequence.
	   * @param {Arguments} arguments The nested properties to pluck.
	   * @returns {Observable} Returns a new Observable sequence of property values.
	   */
	  observableProto.pluck = function () {
	    var len = arguments.length, args = new Array(len);
	    if (len === 0) { throw new Error('List of properties cannot be empty.'); }
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return this.map(plucker(args, len));
	  };
	
	observableProto.flatMap = observableProto.selectMany = observableProto.mergeMap = function(selector, resultSelector, thisArg) {
	    return new FlatMapObservable(this, selector, resultSelector, thisArg).mergeAll();
	};
	
	  /**
	   * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.flatMapObserver = observableProto.selectManyObserver = function (onNext, onError, onCompleted, thisArg) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var index = 0;
	
	      return source.subscribe(
	        function (x) {
	          var result;
	          try {
	            result = onNext.call(thisArg, x, index++);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	        },
	        function (err) {
	          var result;
	          try {
	            result = onError.call(thisArg, err);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        },
	        function () {
	          var result;
	          try {
	            result = onCompleted.call(thisArg);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        });
	    }, source).mergeAll();
	  };
	
	observableProto.flatMapLatest = observableProto.switchMap = function(selector, resultSelector, thisArg) {
	    return new FlatMapObservable(this, selector, resultSelector, thisArg).switchLatest();
	};
	
	  var SkipObservable = (function(__super__) {
	    inherits(SkipObservable, __super__);
	    function SkipObservable(source, count) {
	      this.source = source;
	      this._count = count;
	      __super__.call(this);
	    }
	
	    SkipObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new SkipObserver(o, this._count));
	    };
	
	    function SkipObserver(o, c) {
	      this._o = o;
	      this._r = c;
	      AbstractObserver.call(this);
	    }
	
	    inherits(SkipObserver, AbstractObserver);
	
	    SkipObserver.prototype.next = function (x) {
	      if (this._r <= 0) {
	        this._o.onNext(x);
	      } else {
	        this._r--;
	      }
	    };
	    SkipObserver.prototype.error = function(e) { this._o.onError(e); };
	    SkipObserver.prototype.completed = function() { this._o.onCompleted(); };
	
	    return SkipObservable;
	  }(ObservableBase));
	
	  /**
	   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
	   * @param {Number} count The number of elements to skip before returning the remaining elements.
	   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.
	   */
	  observableProto.skip = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    return new SkipObservable(this, count);
	  };
	
	  var SkipWhileObservable = (function (__super__) {
	    inherits(SkipWhileObservable, __super__);
	    function SkipWhileObservable(source, fn) {
	      this.source = source;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    SkipWhileObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new SkipWhileObserver(o, this));
	    };
	
	    return SkipWhileObservable;
	  }(ObservableBase));
	
	  var SkipWhileObserver = (function (__super__) {
	    inherits(SkipWhileObserver, __super__);
	
	    function SkipWhileObserver(o, p) {
	      this._o = o;
	      this._p = p;
	      this._i = 0;
	      this._r = false;
	      __super__.call(this);
	    }
	
	    SkipWhileObserver.prototype.next = function (x) {
	      if (!this._r) {
	        var res = tryCatch(this._p._fn)(x, this._i++, this._p);
	        if (res === errorObj) { return this._o.onError(res.e); }
	        this._r = !res;
	      }
	      this._r && this._o.onNext(x);
	    };
	    SkipWhileObserver.prototype.error = function (e) { this._o.onError(e); };
	    SkipWhileObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return SkipWhileObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
	   *  The element's index is used in the logic of the predicate function.
	   *
	   *  var res = source.skipWhile(function (value) { return value < 10; });
	   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
	   */
	  observableProto.skipWhile = function (predicate, thisArg) {
	    var fn = bindCallback(predicate, thisArg, 3);
	    return new SkipWhileObservable(this, fn);
	  };
	
	  var TakeObservable = (function(__super__) {
	    inherits(TakeObservable, __super__);
	    function TakeObservable(source, count) {
	      this.source = source;
	      this._count = count;
	      __super__.call(this);
	    }
	
	    TakeObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new TakeObserver(o, this._count));
	    };
	
	    function TakeObserver(o, c) {
	      this._o = o;
	      this._c = c;
	      this._r = c;
	      AbstractObserver.call(this);
	    }
	
	    inherits(TakeObserver, AbstractObserver);
	
	    TakeObserver.prototype.next = function (x) {
	      if (this._r-- > 0) {
	        this._o.onNext(x);
	        this._r <= 0 && this._o.onCompleted();
	      }
	    };
	
	    TakeObserver.prototype.error = function (e) { this._o.onError(e); };
	    TakeObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return TakeObservable;
	  }(ObservableBase));
	
	  /**
	   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
	   * @param {Number} count The number of elements to return.
	   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
	   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.
	   */
	  observableProto.take = function (count, scheduler) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    if (count === 0) { return observableEmpty(scheduler); }
	    return new TakeObservable(this, count);
	  };
	
	  var TakeWhileObservable = (function (__super__) {
	    inherits(TakeWhileObservable, __super__);
	    function TakeWhileObservable(source, fn) {
	      this.source = source;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    TakeWhileObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new TakeWhileObserver(o, this));
	    };
	
	    return TakeWhileObservable;
	  }(ObservableBase));
	
	  var TakeWhileObserver = (function (__super__) {
	    inherits(TakeWhileObserver, __super__);
	
	    function TakeWhileObserver(o, p) {
	      this._o = o;
	      this._p = p;
	      this._i = 0;
	      this._r = true;
	      __super__.call(this);
	    }
	
	    TakeWhileObserver.prototype.next = function (x) {
	      if (this._r) {
	        this._r = tryCatch(this._p._fn)(x, this._i++, this._p);
	        if (this._r === errorObj) { return this._o.onError(this._r.e); }
	      }
	      if (this._r) {
	        this._o.onNext(x);
	      } else {
	        this._o.onCompleted();
	      }
	    };
	    TakeWhileObserver.prototype.error = function (e) { this._o.onError(e); };
	    TakeWhileObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return TakeWhileObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Returns elements from an observable sequence as long as a specified condition is true.
	   *  The element's index is used in the logic of the predicate function.
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
	   */
	  observableProto.takeWhile = function (predicate, thisArg) {
	    var fn = bindCallback(predicate, thisArg, 3);
	    return new TakeWhileObservable(this, fn);
	  };
	
	  var FilterObservable = (function (__super__) {
	    inherits(FilterObservable, __super__);
	
	    function FilterObservable(source, predicate, thisArg) {
	      this.source = source;
	      this.predicate = bindCallback(predicate, thisArg, 3);
	      __super__.call(this);
	    }
	
	    FilterObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new InnerObserver(o, this.predicate, this));
	    };
	
	    function innerPredicate(predicate, self) {
	      return function(x, i, o) { return self.predicate(x, i, o) && predicate.call(this, x, i, o); }
	    }
	
	    FilterObservable.prototype.internalFilter = function(predicate, thisArg) {
	      return new FilterObservable(this.source, innerPredicate(predicate, this), thisArg);
	    };
	
	    inherits(InnerObserver, AbstractObserver);
	    function InnerObserver(o, predicate, source) {
	      this.o = o;
	      this.predicate = predicate;
	      this.source = source;
	      this.i = 0;
	      AbstractObserver.call(this);
	    }
	
	    InnerObserver.prototype.next = function(x) {
	      var shouldYield = tryCatch(this.predicate)(x, this.i++, this.source);
	      if (shouldYield === errorObj) {
	        return this.o.onError(shouldYield.e);
	      }
	      shouldYield && this.o.onNext(x);
	    };
	
	    InnerObserver.prototype.error = function (e) {
	      this.o.onError(e);
	    };
	
	    InnerObserver.prototype.completed = function () {
	      this.o.onCompleted();
	    };
	
	    return FilterObservable;
	
	  }(ObservableBase));
	
	  /**
	  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
	  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.
	  */
	  observableProto.filter = observableProto.where = function (predicate, thisArg) {
	    return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) :
	      new FilterObservable(this, predicate, thisArg);
	  };
	
	  var ExtremaByObservable = (function (__super__) {
	    inherits(ExtremaByObservable, __super__);
	    function ExtremaByObservable(source, k, c) {
	      this.source = source;
	      this._k = k;
	      this._c = c;
	      __super__.call(this);
	    }
	
	    ExtremaByObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new ExtremaByObserver(o, this._k, this._c));
	    };
	
	    return ExtremaByObservable;
	  }(ObservableBase));
	
	  var ExtremaByObserver = (function (__super__) {
	    inherits(ExtremaByObserver, __super__);
	    function ExtremaByObserver(o, k, c) {
	      this._o = o;
	      this._k = k;
	      this._c = c;
	      this._v = null;
	      this._hv = false;
	      this._l = [];
	      __super__.call(this);
	    }
	
	    ExtremaByObserver.prototype.next = function (x) {
	      var key = tryCatch(this._k)(x);
	      if (key === errorObj) { return this._o.onError(key.e); }
	      var comparison = 0;
	      if (!this._hv) {
	        this._hv = true;
	        this._v = key;
	      } else {
	        comparison = tryCatch(this._c)(key, this._v);
	        if (comparison === errorObj) { return this._o.onError(comparison.e); }
	      }
	      if (comparison > 0) {
	        this._v = key;
	        this._l = [];
	      }
	      if (comparison >= 0) { this._l.push(x); }
	    };
	
	    ExtremaByObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    ExtremaByObserver.prototype.completed = function () {
	      this._o.onNext(this._l);
	      this._o.onCompleted();
	    };
	
	    return ExtremaByObserver;
	  }(AbstractObserver));
	
	  function firstOnly(x) {
	    if (x.length === 0) { throw new EmptyError(); }
	    return x[0];
	  }
	
	  var ReduceObservable = (function(__super__) {
	    inherits(ReduceObservable, __super__);
	    function ReduceObservable(source, accumulator, hasSeed, seed) {
	      this.source = source;
	      this.accumulator = accumulator;
	      this.hasSeed = hasSeed;
	      this.seed = seed;
	      __super__.call(this);
	    }
	
	    ReduceObservable.prototype.subscribeCore = function(observer) {
	      return this.source.subscribe(new ReduceObserver(observer,this));
	    };
	
	    return ReduceObservable;
	  }(ObservableBase));
	
	  var ReduceObserver = (function (__super__) {
	    inherits(ReduceObserver, __super__);
	    function ReduceObserver(o, parent) {
	      this._o = o;
	      this._p = parent;
	      this._fn = parent.accumulator;
	      this._hs = parent.hasSeed;
	      this._s = parent.seed;
	      this._ha = false;
	      this._a = null;
	      this._hv = false;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    ReduceObserver.prototype.next = function (x) {
	      !this._hv && (this._hv = true);
	      if (this._ha) {
	        this._a = tryCatch(this._fn)(this._a, x, this._i, this._p);
	      } else {
	        this._a = this._hs ? tryCatch(this._fn)(this._s, x, this._i, this._p) : x;
	        this._ha = true;
	      }
	      if (this._a === errorObj) { return this._o.onError(this._a.e); }
	      this._i++;
	    };
	
	    ReduceObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    ReduceObserver.prototype.completed = function () {
	      this._hv && this._o.onNext(this._a);
	      !this._hv && this._hs && this._o.onNext(this._s);
	      !this._hv && !this._hs && this._o.onError(new EmptyError());
	      this._o.onCompleted();
	    };
	
	    return ReduceObserver;
	  }(AbstractObserver));
	
	  /**
	  * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	  * For aggregation behavior with incremental intermediate results, see Observable.scan.
	  * @param {Function} accumulator An accumulator function to be invoked on each element.
	  * @param {Any} [seed] The initial accumulator value.
	  * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	  */
	  observableProto.reduce = function () {
	    var hasSeed = false, seed, accumulator = arguments[0];
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[1];
	    }
	    return new ReduceObservable(this, accumulator, hasSeed, seed);
	  };
	
	  var SomeObservable = (function (__super__) {
	    inherits(SomeObservable, __super__);
	    function SomeObservable(source, fn) {
	      this.source = source;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    SomeObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new SomeObserver(o, this._fn, this.source));
	    };
	
	    return SomeObservable;
	  }(ObservableBase));
	
	  var SomeObserver = (function (__super__) {
	    inherits(SomeObserver, __super__);
	
	    function SomeObserver(o, fn, s) {
	      this._o = o;
	      this._fn = fn;
	      this._s = s;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    SomeObserver.prototype.next = function (x) {
	      var result = tryCatch(this._fn)(x, this._i++, this._s);
	      if (result === errorObj) { return this._o.onError(result.e); }
	      if (Boolean(result)) {
	        this._o.onNext(true);
	        this._o.onCompleted();
	      }
	    };
	    SomeObserver.prototype.error = function (e) { this._o.onError(e); };
	    SomeObserver.prototype.completed = function () {
	      this._o.onNext(false);
	      this._o.onCompleted();
	    };
	
	    return SomeObserver;
	  }(AbstractObserver));
	
	  /**
	   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.
	   */
	  observableProto.some = function (predicate, thisArg) {
	    var fn = bindCallback(predicate, thisArg, 3);
	    return new SomeObservable(this, fn);
	  };
	
	  var IsEmptyObservable = (function (__super__) {
	    inherits(IsEmptyObservable, __super__);
	    function IsEmptyObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    IsEmptyObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new IsEmptyObserver(o));
	    };
	
	    return IsEmptyObservable;
	  }(ObservableBase));
	
	  var IsEmptyObserver = (function(__super__) {
	    inherits(IsEmptyObserver, __super__);
	    function IsEmptyObserver(o) {
	      this._o = o;
	      __super__.call(this);
	    }
	
	    IsEmptyObserver.prototype.next = function () {
	      this._o.onNext(false);
	      this._o.onCompleted();
	    };
	    IsEmptyObserver.prototype.error = function (e) { this._o.onError(e); };
	    IsEmptyObserver.prototype.completed = function () {
	      this._o.onNext(true);
	      this._o.onCompleted();
	    };
	
	    return IsEmptyObserver;
	  }(AbstractObserver));
	
	  /**
	   * Determines whether an observable sequence is empty.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence is empty.
	   */
	  observableProto.isEmpty = function () {
	    return new IsEmptyObservable(this);
	  };
	
	  var EveryObservable = (function (__super__) {
	    inherits(EveryObservable, __super__);
	    function EveryObservable(source, fn) {
	      this.source = source;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    EveryObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new EveryObserver(o, this._fn, this.source));
	    };
	
	    return EveryObservable;
	  }(ObservableBase));
	
	  var EveryObserver = (function (__super__) {
	    inherits(EveryObserver, __super__);
	
	    function EveryObserver(o, fn, s) {
	      this._o = o;
	      this._fn = fn;
	      this._s = s;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    EveryObserver.prototype.next = function (x) {
	      var result = tryCatch(this._fn)(x, this._i++, this._s);
	      if (result === errorObj) { return this._o.onError(result.e); }
	      if (!Boolean(result)) {
	        this._o.onNext(false);
	        this._o.onCompleted();
	      }
	    };
	    EveryObserver.prototype.error = function (e) { this._o.onError(e); };
	    EveryObserver.prototype.completed = function () {
	      this._o.onNext(true);
	      this._o.onCompleted();
	    };
	
	    return EveryObserver;
	  }(AbstractObserver));
	
	  /**
	   * Determines whether all elements of an observable sequence satisfy a condition.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.
	   */
	  observableProto.every = function (predicate, thisArg) {
	    var fn = bindCallback(predicate, thisArg, 3);
	    return new EveryObservable(this, fn);
	  };
	
	  var IncludesObservable = (function (__super__) {
	    inherits(IncludesObservable, __super__);
	    function IncludesObservable(source, elem, idx) {
	      var n = +idx || 0;
	      Math.abs(n) === Infinity && (n = 0);
	
	      this.source = source;
	      this._elem = elem;
	      this._n = n;
	      __super__.call(this);
	    }
	
	    IncludesObservable.prototype.subscribeCore = function (o) {
	      if (this._n < 0) {
	        o.onNext(false);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	
	      return this.source.subscribe(new IncludesObserver(o, this._elem, this._n));
	    };
	
	    return IncludesObservable;
	  }(ObservableBase));
	
	  var IncludesObserver = (function (__super__) {
	    inherits(IncludesObserver, __super__);
	    function IncludesObserver(o, elem, n) {
	      this._o = o;
	      this._elem = elem;
	      this._n = n;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    function comparer(a, b) {
	      return (a === 0 && b === 0) || (a === b || (isNaN(a) && isNaN(b)));
	    }
	
	    IncludesObserver.prototype.next = function (x) {
	      if (this._i++ >= this._n && comparer(x, this._elem)) {
	        this._o.onNext(true);
	        this._o.onCompleted();
	      }
	    };
	    IncludesObserver.prototype.error = function (e) { this._o.onError(e); };
	    IncludesObserver.prototype.completed = function () { this._o.onNext(false); this._o.onCompleted(); };
	
	    return IncludesObserver;
	  }(AbstractObserver));
	
	  /**
	   * Determines whether an observable sequence includes a specified element with an optional equality comparer.
	   * @param searchElement The value to locate in the source sequence.
	   * @param {Number} [fromIndex] An equality comparer to compare elements.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence includes an element that has the specified value from the given index.
	   */
	  observableProto.includes = function (searchElement, fromIndex) {
	    return new IncludesObservable(this, searchElement, fromIndex);
	  };
	
	  var CountObservable = (function (__super__) {
	    inherits(CountObservable, __super__);
	    function CountObservable(source, fn) {
	      this.source = source;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    CountObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new CountObserver(o, this._fn, this.source));
	    };
	
	    return CountObservable;
	  }(ObservableBase));
	
	  var CountObserver = (function (__super__) {
	    inherits(CountObserver, __super__);
	
	    function CountObserver(o, fn, s) {
	      this._o = o;
	      this._fn = fn;
	      this._s = s;
	      this._i = 0;
	      this._c = 0;
	      __super__.call(this);
	    }
	
	    CountObserver.prototype.next = function (x) {
	      if (this._fn) {
	        var result = tryCatch(this._fn)(x, this._i++, this._s);
	        if (result === errorObj) { return this._o.onError(result.e); }
	        Boolean(result) && (this._c++);
	      } else {
	        this._c++;
	      }
	    };
	    CountObserver.prototype.error = function (e) { this._o.onError(e); };
	    CountObserver.prototype.completed = function () {
	      this._o.onNext(this._c);
	      this._o.onCompleted();
	    };
	
	    return CountObserver;
	  }(AbstractObserver));
	
	  /**
	   * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.
	   * @example
	   * res = source.count();
	   * res = source.count(function (x) { return x > 3; });
	   * @param {Function} [predicate]A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.
	   */
	  observableProto.count = function (predicate, thisArg) {
	    var fn = bindCallback(predicate, thisArg, 3);
	    return new CountObservable(this, fn);
	  };
	
	  var IndexOfObservable = (function (__super__) {
	    inherits(IndexOfObservable, __super__);
	    function IndexOfObservable(source, e, n) {
	      this.source = source;
	      this._e = e;
	      this._n = n;
	      __super__.call(this);
	    }
	
	    IndexOfObservable.prototype.subscribeCore = function (o) {
	      if (this._n < 0) {
	        o.onNext(-1);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	
	      return this.source.subscribe(new IndexOfObserver(o, this._e, this._n));
	    };
	
	    return IndexOfObservable;
	  }(ObservableBase));
	
	  var IndexOfObserver = (function (__super__) {
	    inherits(IndexOfObserver, __super__);
	    function IndexOfObserver(o, e, n) {
	      this._o = o;
	      this._e = e;
	      this._n = n;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    IndexOfObserver.prototype.next = function (x) {
	      if (this._i >= this._n && x === this._e) {
	        this._o.onNext(this._i);
	        this._o.onCompleted();
	      }
	      this._i++;
	    };
	    IndexOfObserver.prototype.error = function (e) { this._o.onError(e); };
	    IndexOfObserver.prototype.completed = function () { this._o.onNext(-1); this._o.onCompleted(); };
	
	    return IndexOfObserver;
	  }(AbstractObserver));
	
	  /**
	   * Returns the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   * @param {Any} searchElement Element to locate in the array.
	   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
	   * @returns {Observable} And observable sequence containing the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   */
	  observableProto.indexOf = function(searchElement, fromIndex) {
	    var n = +fromIndex || 0;
	    Math.abs(n) === Infinity && (n = 0);
	    return new IndexOfObservable(this, searchElement, n);
	  };
	
	  var SumObservable = (function (__super__) {
	    inherits(SumObservable, __super__);
	    function SumObservable(source, fn) {
	      this.source = source;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    SumObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new SumObserver(o, this._fn, this.source));
	    };
	
	    return SumObservable;
	  }(ObservableBase));
	
	  var SumObserver = (function (__super__) {
	    inherits(SumObserver, __super__);
	
	    function SumObserver(o, fn, s) {
	      this._o = o;
	      this._fn = fn;
	      this._s = s;
	      this._i = 0;
	      this._c = 0;
	      __super__.call(this);
	    }
	
	    SumObserver.prototype.next = function (x) {
	      if (this._fn) {
	        var result = tryCatch(this._fn)(x, this._i++, this._s);
	        if (result === errorObj) { return this._o.onError(result.e); }
	        this._c += result;
	      } else {
	        this._c += x;
	      }
	    };
	    SumObserver.prototype.error = function (e) { this._o.onError(e); };
	    SumObserver.prototype.completed = function () {
	      this._o.onNext(this._c);
	      this._o.onCompleted();
	    };
	
	    return SumObserver;
	  }(AbstractObserver));
	
	  /**
	   * Computes the sum of a sequence of values that are obtained by invoking an optional transform function on each element of the input sequence, else if not specified computes the sum on each item in the sequence.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the sum of the values in the source sequence.
	   */
	  observableProto.sum = function (keySelector, thisArg) {
	    var fn = bindCallback(keySelector, thisArg, 3);
	    return new SumObservable(this, fn);
	  };
	
	  /**
	   * Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
	   * @example
	   * var res = source.minBy(function (x) { return x.value; });
	   * var res = source.minBy(function (x) { return x.value; }, function (x, y) { return x - y; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer] Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a minimum key value.
	   */
	  observableProto.minBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return new ExtremaByObservable(this, keySelector, function (x, y) { return comparer(x, y) * -1; });
	  };
	
	  /**
	   * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.
	   * @example
	   * var res = source.min();
	   * var res = source.min(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.
	   */
	  observableProto.min = function (comparer) {
	    return this.minBy(identity, comparer).map(firstOnly);
	  };
	
	  /**
	   * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.
	   * @example
	   * var res = source.maxBy(function (x) { return x.value; });
	   * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer]  Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.
	   */
	  observableProto.maxBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return new ExtremaByObservable(this, keySelector, comparer);
	  };
	
	  /**
	   * Returns the maximum value in an observable sequence according to the specified comparer.
	   * @example
	   * var res = source.max();
	   * var res = source.max(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the maximum element in the source sequence.
	   */
	  observableProto.max = function (comparer) {
	    return this.maxBy(identity, comparer).map(firstOnly);
	  };
	
	  var AverageObservable = (function (__super__) {
	    inherits(AverageObservable, __super__);
	    function AverageObservable(source, fn) {
	      this.source = source;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    AverageObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new AverageObserver(o, this._fn, this.source));
	    };
	
	    return AverageObservable;
	  }(ObservableBase));
	
	  var AverageObserver = (function(__super__) {
	    inherits(AverageObserver, __super__);
	    function AverageObserver(o, fn, s) {
	      this._o = o;
	      this._fn = fn;
	      this._s = s;
	      this._c = 0;
	      this._t = 0;
	      __super__.call(this);
	    }
	
	    AverageObserver.prototype.next = function (x) {
	      if(this._fn) {
	        var r = tryCatch(this._fn)(x, this._c++, this._s);
	        if (r === errorObj) { return this._o.onError(r.e); }
	        this._t += r;
	      } else {
	        this._c++;
	        this._t += x;
	      }
	    };
	    AverageObserver.prototype.error = function (e) { this._o.onError(e); };
	    AverageObserver.prototype.completed = function () {
	      if (this._c === 0) { return this._o.onError(new EmptyError()); }
	      this._o.onNext(this._t / this._c);
	      this._o.onCompleted();
	    };
	
	    return AverageObserver;
	  }(AbstractObserver));
	
	  /**
	   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the average of the sequence of values.
	   */
	  observableProto.average = function (keySelector, thisArg) {
	    var source = this, fn;
	    if (isFunction(keySelector)) {
	      fn = bindCallback(keySelector, thisArg, 3);
	    }
	    return new AverageObservable(source, fn);
	  };
	
	  /**
	   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
	   *
	   * @example
	   * var res = res = source.sequenceEqual([1,2,3]);
	   * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });
	   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));
	   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });
	   * @param {Observable} second Second observable sequence or array to compare.
	   * @param {Function} [comparer] Comparer used to compare elements of both sequences.
	   * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.
	   */
	  observableProto.sequenceEqual = function (second, comparer) {
	    var first = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var donel = false, doner = false, ql = [], qr = [];
	      var subscription1 = first.subscribe(function (x) {
	        if (qr.length > 0) {
	          var v = qr.shift();
	          var equal = tryCatch(comparer)(v, x);
	          if (equal === errorObj) { return o.onError(equal.e); }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (doner) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          ql.push(x);
	        }
	      }, function(e) { o.onError(e); }, function () {
	        donel = true;
	        if (ql.length === 0) {
	          if (qr.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (doner) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });
	
	      (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
	      isPromise(second) && (second = observableFromPromise(second));
	      var subscription2 = second.subscribe(function (x) {
	        if (ql.length > 0) {
	          var v = ql.shift();
	          var equal = tryCatch(comparer)(v, x);
	          if (equal === errorObj) { return o.onError(equal.e); }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (donel) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          qr.push(x);
	        }
	      }, function(e) { o.onError(e); }, function () {
	        doner = true;
	        if (qr.length === 0) {
	          if (ql.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (donel) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });
	      return new BinaryDisposable(subscription1, subscription2);
	    }, first);
	  };
	
	  var ElementAtObservable = (function (__super__) {
	    inherits(ElementAtObservable, __super__);
	    function ElementAtObservable(source, i, d) {
	      this.source = source;
	      this._i = i;
	      this._d = d;
	      __super__.call(this);
	    }
	
	    ElementAtObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new ElementAtObserver(o, this._i, this._d));
	    };
	
	    return ElementAtObservable;
	  }(ObservableBase));
	
	  var ElementAtObserver = (function (__super__) {
	    inherits(ElementAtObserver, __super__);
	
	    function ElementAtObserver(o, i, d) {
	      this._o = o;
	      this._i = i;
	      this._d = d;
	      __super__.call(this);
	    }
	
	    ElementAtObserver.prototype.next = function (x) {
	      if (this._i-- === 0) {
	        this._o.onNext(x);
	        this._o.onCompleted();
	      }
	    };
	    ElementAtObserver.prototype.error = function (e) { this._o.onError(e); };
	    ElementAtObserver.prototype.completed = function () {
	      if (this._d === undefined) {
	        this._o.onError(new ArgumentOutOfRangeError());
	      } else {
	        this._o.onNext(this._d);
	        this._o.onCompleted();
	      }
	    };
	
	    return ElementAtObserver;
	  }(AbstractObserver));
	
	  /**
	   * Returns the element at a specified index in a sequence or default value if not found.
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @param {Any} [defaultValue] The default value to use if elementAt does not find a value.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence.
	   */
	  observableProto.elementAt =  function (index, defaultValue) {
	    if (index < 0) { throw new ArgumentOutOfRangeError(); }
	    return new ElementAtObservable(this, index, defaultValue);
	  };
	
	  var SingleObserver = (function(__super__) {
	    inherits(SingleObserver, __super__);
	    function SingleObserver(o, obj, s) {
	      this._o = o;
	      this._obj = obj;
	      this._s = s;
	      this._i = 0;
	      this._hv = false;
	      this._v = null;
	      __super__.call(this);
	    }
	
	    SingleObserver.prototype.next = function (x) {
	      var shouldYield = false;
	      if (this._obj.predicate) {
	        var res = tryCatch(this._obj.predicate)(x, this._i++, this._s);
	        if (res === errorObj) { return this._o.onError(res.e); }
	        Boolean(res) && (shouldYield = true);
	      } else if (!this._obj.predicate) {
	        shouldYield = true;
	      }
	      if (shouldYield) {
	        if (this._hv) {
	          return this._o.onError(new Error('Sequence contains more than one matching element'));
	        }
	        this._hv = true;
	        this._v = x;
	      }
	    };
	    SingleObserver.prototype.error = function (e) { this._o.onError(e); };
	    SingleObserver.prototype.completed = function () {
	      if (this._hv) {
	        this._o.onNext(this._v);
	        this._o.onCompleted();
	      }
	      else if (this._obj.defaultValue === undefined) {
	        this._o.onError(new EmptyError());
	      } else {
	        this._o.onNext(this._obj.defaultValue);
	        this._o.onCompleted();
	      }
	    };
	
	    return SingleObserver;
	  }(AbstractObserver));
	
	
	    /**
	     * Returns the only element of an observable sequence that satisfies the condition in the optional predicate, and reports an exception if there is not exactly one element in the observable sequence.
	     * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.
	     */
	    observableProto.single = function (predicate, thisArg) {
	      var obj = {}, source = this;
	      if (typeof arguments[0] === 'object') {
	        obj = arguments[0];
	      } else {
	        obj = {
	          predicate: arguments[0],
	          thisArg: arguments[1],
	          defaultValue: arguments[2]
	        };
	      }
	      if (isFunction (obj.predicate)) {
	        var fn = obj.predicate;
	        obj.predicate = bindCallback(fn, obj.thisArg, 3);
	      }
	      return new AnonymousObservable(function (o) {
	        return source.subscribe(new SingleObserver(o, obj, source));
	      }, source);
	    };
	
	  var FirstObservable = (function (__super__) {
	    inherits(FirstObservable, __super__);
	    function FirstObservable(source, obj) {
	      this.source = source;
	      this._obj = obj;
	      __super__.call(this);
	    }
	
	    FirstObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new FirstObserver(o, this._obj, this.source));
	    };
	
	    return FirstObservable;
	  }(ObservableBase));
	
	  var FirstObserver = (function(__super__) {
	    inherits(FirstObserver, __super__);
	    function FirstObserver(o, obj, s) {
	      this._o = o;
	      this._obj = obj;
	      this._s = s;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    FirstObserver.prototype.next = function (x) {
	      if (this._obj.predicate) {
	        var res = tryCatch(this._obj.predicate)(x, this._i++, this._s);
	        if (res === errorObj) { return this._o.onError(res.e); }
	        if (Boolean(res)) {
	          this._o.onNext(x);
	          this._o.onCompleted();
	        }
	      } else if (!this._obj.predicate) {
	        this._o.onNext(x);
	        this._o.onCompleted();
	      }
	    };
	    FirstObserver.prototype.error = function (e) { this._o.onError(e); };
	    FirstObserver.prototype.completed = function () {
	      if (this._obj.defaultValue === undefined) {
	        this._o.onError(new EmptyError());
	      } else {
	        this._o.onNext(this._obj.defaultValue);
	        this._o.onCompleted();
	      }
	    };
	
	    return FirstObserver;
	  }(AbstractObserver));
	
	  /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate if present else the first item in the sequence.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate if provided, else the first item in the sequence.
	   */
	  observableProto.first = function () {
	    var obj = {}, source = this;
	    if (typeof arguments[0] === 'object') {
	      obj = arguments[0];
	    } else {
	      obj = {
	        predicate: arguments[0],
	        thisArg: arguments[1],
	        defaultValue: arguments[2]
	      };
	    }
	    if (isFunction (obj.predicate)) {
	      var fn = obj.predicate;
	      obj.predicate = bindCallback(fn, obj.thisArg, 3);
	    }
	    return new FirstObservable(this, obj);
	  };
	
	  var LastObservable = (function (__super__) {
	    inherits(LastObservable, __super__);
	    function LastObservable(source, obj) {
	      this.source = source;
	      this._obj = obj;
	      __super__.call(this);
	    }
	
	    LastObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new LastObserver(o, this._obj, this.source));
	    };
	
	    return LastObservable;
	  }(ObservableBase));
	
	  var LastObserver = (function(__super__) {
	    inherits(LastObserver, __super__);
	    function LastObserver(o, obj, s) {
	      this._o = o;
	      this._obj = obj;
	      this._s = s;
	      this._i = 0;
	      this._hv = false;
	      this._v = null;
	      __super__.call(this);
	    }
	
	    LastObserver.prototype.next = function (x) {
	      var shouldYield = false;
	      if (this._obj.predicate) {
	        var res = tryCatch(this._obj.predicate)(x, this._i++, this._s);
	        if (res === errorObj) { return this._o.onError(res.e); }
	        Boolean(res) && (shouldYield = true);
	      } else if (!this._obj.predicate) {
	        shouldYield = true;
	      }
	      if (shouldYield) {
	        this._hv = true;
	        this._v = x;
	      }
	    };
	    LastObserver.prototype.error = function (e) { this._o.onError(e); };
	    LastObserver.prototype.completed = function () {
	      if (this._hv) {
	        this._o.onNext(this._v);
	        this._o.onCompleted();
	      }
	      else if (this._obj.defaultValue === undefined) {
	        this._o.onError(new EmptyError());
	      } else {
	        this._o.onNext(this._obj.defaultValue);
	        this._o.onCompleted();
	      }
	    };
	
	    return LastObserver;
	  }(AbstractObserver));
	
	  /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate if specified, else the last element.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.
	   */
	  observableProto.last = function () {
	    var obj = {}, source = this;
	    if (typeof arguments[0] === 'object') {
	      obj = arguments[0];
	    } else {
	      obj = {
	        predicate: arguments[0],
	        thisArg: arguments[1],
	        defaultValue: arguments[2]
	      };
	    }
	    if (isFunction (obj.predicate)) {
	      var fn = obj.predicate;
	      obj.predicate = bindCallback(fn, obj.thisArg, 3);
	    }
	    return new LastObservable(this, obj);
	  };
	
	  var FindValueObserver = (function(__super__) {
	    inherits(FindValueObserver, __super__);
	    function FindValueObserver(observer, source, callback, yieldIndex) {
	      this._o = observer;
	      this._s = source;
	      this._cb = callback;
	      this._y = yieldIndex;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    FindValueObserver.prototype.next = function (x) {
	      var shouldRun = tryCatch(this._cb)(x, this._i, this._s);
	      if (shouldRun === errorObj) { return this._o.onError(shouldRun.e); }
	      if (shouldRun) {
	        this._o.onNext(this._y ? this._i : x);
	        this._o.onCompleted();
	      } else {
	        this._i++;
	      }
	    };
	
	    FindValueObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    FindValueObserver.prototype.completed = function () {
	      this._y && this._o.onNext(-1);
	      this._o.onCompleted();
	    };
	
	    return FindValueObserver;
	  }(AbstractObserver));
	
	  function findValue (source, predicate, thisArg, yieldIndex) {
	    var callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(new FindValueObserver(o, source, callback, yieldIndex));
	    }, source);
	  }
	
	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the first element that matches the conditions defined by the specified predicate, if found; otherwise, undefined.
	   */
	  observableProto.find = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, false);
	  };
	
	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns
	   * an Observable sequence with the zero-based index of the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.
	  */
	  observableProto.findIndex = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, true);
	  };
	
	  var ToSetObservable = (function (__super__) {
	    inherits(ToSetObservable, __super__);
	    function ToSetObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    ToSetObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new ToSetObserver(o));
	    };
	
	    return ToSetObservable;
	  }(ObservableBase));
	
	  var ToSetObserver = (function (__super__) {
	    inherits(ToSetObserver, __super__);
	    function ToSetObserver(o) {
	      this._o = o;
	      this._s = new root.Set();
	      __super__.call(this);
	    }
	
	    ToSetObserver.prototype.next = function (x) {
	      this._s.add(x);
	    };
	
	    ToSetObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    ToSetObserver.prototype.completed = function () {
	      this._o.onNext(this._s);
	      this._o.onCompleted();
	    };
	
	    return ToSetObserver;
	  }(AbstractObserver));
	
	  /**
	   * Converts the observable sequence to a Set if it exists.
	   * @returns {Observable} An observable sequence with a single value of a Set containing the values from the observable sequence.
	   */
	  observableProto.toSet = function () {
	    if (typeof root.Set === 'undefined') { throw new TypeError(); }
	    return new ToSetObservable(this);
	  };
	
	  var ToMapObservable = (function (__super__) {
	    inherits(ToMapObservable, __super__);
	    function ToMapObservable(source, k, e) {
	      this.source = source;
	      this._k = k;
	      this._e = e;
	      __super__.call(this);
	    }
	
	    ToMapObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new ToMapObserver(o, this._k, this._e));
	    };
	
	    return ToMapObservable;
	  }(ObservableBase));
	
	  var ToMapObserver = (function (__super__) {
	    inherits(ToMapObserver, __super__);
	    function ToMapObserver(o, k, e) {
	      this._o = o;
	      this._k = k;
	      this._e = e;
	      this._m = new root.Map();
	      __super__.call(this);
	    }
	
	    ToMapObserver.prototype.next = function (x) {
	      var key = tryCatch(this._k)(x);
	      if (key === errorObj) { return this._o.onError(key.e); }
	      var elem = x;
	      if (this._e) {
	        elem = tryCatch(this._e)(x);
	        if (elem === errorObj) { return this._o.onError(elem.e); }
	      }
	
	      this._m.set(key, elem);
	    };
	
	    ToMapObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    ToMapObserver.prototype.completed = function () {
	      this._o.onNext(this._m);
	      this._o.onCompleted();
	    };
	
	    return ToMapObserver;
	  }(AbstractObserver));
	
	  /**
	  * Converts the observable sequence to a Map if it exists.
	  * @param {Function} keySelector A function which produces the key for the Map.
	  * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.
	  * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.
	  */
	  observableProto.toMap = function (keySelector, elementSelector) {
	    if (typeof root.Map === 'undefined') { throw new TypeError(); }
	    return new ToMapObservable(this, keySelector, elementSelector);
	  };
	
	  var SliceObservable = (function (__super__) {
	    inherits(SliceObservable, __super__);
	    function SliceObservable(source, b, e) {
	      this.source = source;
	      this._b = b;
	      this._e = e;
	      __super__.call(this);
	    }
	
	    SliceObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new SliceObserver(o, this._b, this._e));
	    };
	
	    return SliceObservable;
	  }(ObservableBase));
	
	  var SliceObserver = (function (__super__) {
	    inherits(SliceObserver, __super__);
	
	    function SliceObserver(o, b, e) {
	      this._o = o;
	      this._b = b;
	      this._e = e;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    SliceObserver.prototype.next = function (x) {
	      if (this._i >= this._b) {
	        if (this._e === this._i) {
	          this._o.onCompleted();
	        } else {
	          this._o.onNext(x);
	        }
	      }
	      this._i++;
	    };
	    SliceObserver.prototype.error = function (e) { this._o.onError(e); };
	    SliceObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return SliceObserver;
	  }(AbstractObserver));
	
	  /*
	  * The slice() method returns a shallow copy of a portion of an Observable into a new Observable object.
	  * Unlike the array version, this does not support negative numbers for being or end.
	  * @param {Number} [begin] Zero-based index at which to begin extraction. If omitted, this will default to zero.
	  * @param {Number} [end] Zero-based index at which to end extraction. slice extracts up to but not including end.
	  * If omitted, this will emit the rest of the Observable object.
	  * @returns {Observable} A shallow copy of a portion of an Observable into a new Observable object.
	  */
	  observableProto.slice = function (begin, end) {
	    var start = begin || 0;
	    if (start < 0) { throw new Rx.ArgumentOutOfRangeError(); }
	    if (typeof end === 'number' && end < start) {
	      throw new Rx.ArgumentOutOfRangeError();
	    }
	    return new SliceObservable(this, start, end);
	  };
	
	  var LastIndexOfObservable = (function (__super__) {
	    inherits(LastIndexOfObservable, __super__);
	    function LastIndexOfObservable(source, e, n) {
	      this.source = source;
	      this._e = e;
	      this._n = n;
	      __super__.call(this);
	    }
	
	    LastIndexOfObservable.prototype.subscribeCore = function (o) {
	      if (this._n < 0) {
	        o.onNext(-1);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	
	      return this.source.subscribe(new LastIndexOfObserver(o, this._e, this._n));
	    };
	
	    return LastIndexOfObservable;
	  }(ObservableBase));
	
	  var LastIndexOfObserver = (function (__super__) {
	    inherits(LastIndexOfObserver, __super__);
	    function LastIndexOfObserver(o, e, n) {
	      this._o = o;
	      this._e = e;
	      this._n = n;
	      this._v = 0;
	      this._hv = false;
	      this._i = 0;
	      __super__.call(this);
	    }
	
	    LastIndexOfObserver.prototype.next = function (x) {
	      if (this._i >= this._n && x === this._e) {
	        this._hv = true;
	        this._v = this._i;
	      }
	      this._i++;
	    };
	    LastIndexOfObserver.prototype.error = function (e) { this._o.onError(e); };
	    LastIndexOfObserver.prototype.completed = function () {
	      if (this._hv) {
	        this._o.onNext(this._v);
	      } else {
	        this._o.onNext(-1);
	      }
	      this._o.onCompleted();
	    };
	
	    return LastIndexOfObserver;
	  }(AbstractObserver));
	
	  /**
	   * Returns the last index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   * @param {Any} searchElement Element to locate in the array.
	   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
	   * @returns {Observable} And observable sequence containing the last index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   */
	  observableProto.lastIndexOf = function(searchElement, fromIndex) {
	    var n = +fromIndex || 0;
	    Math.abs(n) === Infinity && (n = 0);
	    return new LastIndexOfObservable(this, searchElement, n);
	  };
	
	  Observable.wrap = function (fn) {
	    function createObservable() {
	      return Observable.spawn.call(this, fn.apply(this, arguments));
	    }
	
	    createObservable.__generatorFunction__ = fn;
	    return createObservable;
	  };
	
	  var spawn = Observable.spawn = function () {
	    var gen = arguments[0], self = this, args = [];
	    for (var i = 1, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	
	    return new AnonymousObservable(function (o) {
	      var g = new CompositeDisposable();
	
	      if (isFunction(gen)) { gen = gen.apply(self, args); }
	      if (!gen || !isFunction(gen.next)) {
	        o.onNext(gen);
	        return o.onCompleted();
	      }
	
	      function processGenerator(res) {
	        var ret = tryCatch(gen.next).call(gen, res);
	        if (ret === errorObj) { return o.onError(ret.e); }
	        next(ret);
	      }
	
	      processGenerator();
	
	      function onError(err) {
	        var ret = tryCatch(gen.next).call(gen, err);
	        if (ret === errorObj) { return o.onError(ret.e); }
	        next(ret);
	      }
	
	      function next(ret) {
	        if (ret.done) {
	          o.onNext(ret.value);
	          o.onCompleted();
	          return;
	        }
	        var obs = toObservable.call(self, ret.value);
	        var value = null;
	        var hasValue = false;
	        if (Observable.isObservable(obs)) {
	          g.add(obs.subscribe(function(val) {
	            hasValue = true;
	            value = val;
	          }, onError, function() {
	            hasValue && processGenerator(value);
	          }));
	        } else {
	          onError(new TypeError('type not supported'));
	        }
	      }
	
	      return g;
	    });
	  };
	
	  function toObservable(obj) {
	    if (!obj) { return obj; }
	    if (Observable.isObservable(obj)) { return obj; }
	    if (isPromise(obj)) { return Observable.fromPromise(obj); }
	    if (isGeneratorFunction(obj) || isGenerator(obj)) { return spawn.call(this, obj); }
	    if (isFunction(obj)) { return thunkToObservable.call(this, obj); }
	    if (isArrayLike(obj) || isIterable(obj)) { return arrayToObservable.call(this, obj); }
	    if (isObject(obj)) {return objectToObservable.call(this, obj);}
	    return obj;
	  }
	
	  function arrayToObservable (obj) {
	    return Observable.from(obj).concatMap(function(o) {
	      if(Observable.isObservable(o) || isObject(o)) {
	        return toObservable.call(null, o);
	      } else {
	        return Rx.Observable.just(o);
	      }
	    }).toArray();
	  }
	
	  function objectToObservable (obj) {
	    var results = new obj.constructor(), keys = Object.keys(obj), observables = [];
	    for (var i = 0, len = keys.length; i < len; i++) {
	      var key = keys[i];
	      var observable = toObservable.call(this, obj[key]);
	
	      if(observable && Observable.isObservable(observable)) {
	        defer(observable, key);
	      } else {
	        results[key] = obj[key];
	      }
	    }
	
	    return Observable.forkJoin.apply(Observable, observables).map(function() {
	      return results;
	    });
	
	
	    function defer (observable, key) {
	      results[key] = undefined;
	      observables.push(observable.map(function (next) {
	        results[key] = next;
	      }));
	    }
	  }
	
	  function thunkToObservable(fn) {
	    var self = this;
	    return new AnonymousObservable(function (o) {
	      fn.call(self, function () {
	        var err = arguments[0], res = arguments[1];
	        if (err) { return o.onError(err); }
	        if (arguments.length > 2) {
	          var args = [];
	          for (var i = 1, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	          res = args;
	        }
	        o.onNext(res);
	        o.onCompleted();
	      });
	    });
	  }
	
	  function isGenerator(obj) {
	    return isFunction (obj.next) && isFunction (obj['throw']);
	  }
	
	  function isGeneratorFunction(obj) {
	    var ctor = obj.constructor;
	    if (!ctor) { return false; }
	    if (ctor.name === 'GeneratorFunction' || ctor.displayName === 'GeneratorFunction') { return true; }
	    return isGenerator(ctor.prototype);
	  }
	
	  function isObject(val) {
	    return Object == val.constructor;
	  }
	
	  /**
	   * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.
	   *
	   * @example
	   * var res = Rx.Observable.start(function () { console.log('hello'); });
	   * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);
	   * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);
	   *
	   * @param {Function} func Function to run asynchronously.
	   * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   *
	   * Remarks
	   * * The function is called immediately, not during the subscription of the resulting sequence.
	   * * Multiple subscriptions to the resulting sequence can observe the function's result.
	   */
	  Observable.start = function (func, context, scheduler) {
	    return observableToAsync(func, context, scheduler)();
	  };
	
	  /**
	   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
	   * @param {Function} function Function to convert to an asynchronous function.
	   * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Function} Asynchronous function.
	   */
	  var observableToAsync = Observable.toAsync = function (func, context, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return function () {
	      var args = arguments,
	        subject = new AsyncSubject();
	
	      scheduler.schedule(null, function () {
	        var result;
	        try {
	          result = func.apply(context, args);
	        } catch (e) {
	          subject.onError(e);
	          return;
	        }
	        subject.onNext(result);
	        subject.onCompleted();
	      });
	      return subject.asObservable();
	    };
	  };
	
	function createCbObservable(fn, ctx, selector, args) {
	  var o = new AsyncSubject();
	
	  args.push(createCbHandler(o, ctx, selector));
	  fn.apply(ctx, args);
	
	  return o.asObservable();
	}
	
	function createCbHandler(o, ctx, selector) {
	  return function handler () {
	    var len = arguments.length, results = new Array(len);
	    for(var i = 0; i < len; i++) { results[i] = arguments[i]; }
	
	    if (isFunction(selector)) {
	      results = tryCatch(selector).apply(ctx, results);
	      if (results === errorObj) { return o.onError(results.e); }
	      o.onNext(results);
	    } else {
	      if (results.length <= 1) {
	        o.onNext(results[0]);
	      } else {
	        o.onNext(results);
	      }
	    }
	
	    o.onCompleted();
	  };
	}
	
	/**
	 * Converts a callback function to an observable sequence.
	 *
	 * @param {Function} fn Function with a callback as the last parameter to convert to an Observable sequence.
	 * @param {Mixed} [ctx] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	 * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
	 * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
	 */
	Observable.fromCallback = function (fn, ctx, selector) {
	  return function () {
	    typeof ctx === 'undefined' && (ctx = this); 
	
	    var len = arguments.length, args = new Array(len)
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return createCbObservable(fn, ctx, selector, args);
	  };
	};
	
	function createNodeObservable(fn, ctx, selector, args) {
	  var o = new AsyncSubject();
	
	  args.push(createNodeHandler(o, ctx, selector));
	  fn.apply(ctx, args);
	
	  return o.asObservable();
	}
	
	function createNodeHandler(o, ctx, selector) {
	  return function handler () {
	    var err = arguments[0];
	    if (err) { return o.onError(err); }
	
	    var len = arguments.length, results = [];
	    for(var i = 1; i < len; i++) { results[i - 1] = arguments[i]; }
	
	    if (isFunction(selector)) {
	      var results = tryCatch(selector).apply(ctx, results);
	      if (results === errorObj) { return o.onError(results.e); }
	      o.onNext(results);
	    } else {
	      if (results.length <= 1) {
	        o.onNext(results[0]);
	      } else {
	        o.onNext(results);
	      }
	    }
	
	    o.onCompleted();
	  };
	}
	
	/**
	 * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
	 * @param {Function} fn The function to call
	 * @param {Mixed} [ctx] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	 * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
	 * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
	 */
	Observable.fromNodeCallback = function (fn, ctx, selector) {
	  return function () {
	    typeof ctx === 'undefined' && (ctx = this); 
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return createNodeObservable(fn, ctx, selector, args);
	  };
	};
	
	  function isNodeList(el) {
	    if (root.StaticNodeList) {
	      // IE8 Specific
	      // instanceof is slower than Object#toString, but Object#toString will not work as intended in IE8
	      return el instanceof root.StaticNodeList || el instanceof root.NodeList;
	    } else {
	      return Object.prototype.toString.call(el) === '[object NodeList]';
	    }
	  }
	
	  function ListenDisposable(e, n, fn) {
	    this._e = e;
	    this._n = n;
	    this._fn = fn;
	    this._e.addEventListener(this._n, this._fn, false);
	    this.isDisposed = false;
	  }
	  ListenDisposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this._e.removeEventListener(this._n, this._fn, false);
	      this.isDisposed = true;
	    }
	  };
	
	  function createEventListener (el, eventName, handler) {
	    var disposables = new CompositeDisposable();
	
	    // Asume NodeList or HTMLCollection
	    var elemToString = Object.prototype.toString.call(el);
	    if (isNodeList(el) || elemToString === '[object HTMLCollection]') {
	      for (var i = 0, len = el.length; i < len; i++) {
	        disposables.add(createEventListener(el.item(i), eventName, handler));
	      }
	    } else if (el) {
	      disposables.add(new ListenDisposable(el, eventName, handler));
	    }
	
	    return disposables;
	  }
	
	  /**
	   * Configuration option to determine whether to use native events only
	   */
	  Rx.config.useNativeEvents = false;
	
	  var EventObservable = (function(__super__) {
	    inherits(EventObservable, __super__);
	    function EventObservable(el, name, fn) {
	      this._el = el;
	      this._n = name;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    function createHandler(o, fn) {
	      return function handler () {
	        var results = arguments[0];
	        if (isFunction(fn)) {
	          results = tryCatch(fn).apply(null, arguments);
	          if (results === errorObj) { return o.onError(results.e); }
	        }
	        o.onNext(results);
	      };
	    }
	
	    EventObservable.prototype.subscribeCore = function (o) {
	      return createEventListener(
	        this._el,
	        this._n,
	        createHandler(o, this._fn));
	    };
	
	    return EventObservable;
	  }(ObservableBase));
	
	  /**
	   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
	   * @param {Object} element The DOMElement or NodeList to attach a listener.
	   * @param {String} eventName The event name to attach the observable sequence.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
	   */
	  Observable.fromEvent = function (element, eventName, selector) {
	    // Node.js specific
	    if (element.addListener) {
	      return fromEventPattern(
	        function (h) { element.addListener(eventName, h); },
	        function (h) { element.removeListener(eventName, h); },
	        selector);
	    }
	
	    // Use only if non-native events are allowed
	    if (!Rx.config.useNativeEvents) {
	      // Handles jq, Angular.js, Zepto, Marionette, Ember.js
	      if (typeof element.on === 'function' && typeof element.off === 'function') {
	        return fromEventPattern(
	          function (h) { element.on(eventName, h); },
	          function (h) { element.off(eventName, h); },
	          selector);
	      }
	    }
	
	    return new EventObservable(element, eventName, selector).publish().refCount();
	  };
	
	  var EventPatternObservable = (function(__super__) {
	    inherits(EventPatternObservable, __super__);
	    function EventPatternObservable(add, del, fn) {
	      this._add = add;
	      this._del = del;
	      this._fn = fn;
	      __super__.call(this);
	    }
	
	    function createHandler(o, fn) {
	      return function handler () {
	        var results = arguments[0];
	        if (isFunction(fn)) {
	          results = tryCatch(fn).apply(null, arguments);
	          if (results === errorObj) { return o.onError(results.e); }
	        }
	        o.onNext(results);
	      };
	    }
	
	    EventPatternObservable.prototype.subscribeCore = function (o) {
	      var fn = createHandler(o, this._fn);
	      var returnValue = this._add(fn);
	      return new EventPatternDisposable(this._del, fn, returnValue);
	    };
	
	    function EventPatternDisposable(del, fn, ret) {
	      this._del = del;
	      this._fn = fn;
	      this._ret = ret;
	      this.isDisposed = false;
	    }
	
	    EventPatternDisposable.prototype.dispose = function () {
	      if(!this.isDisposed) {
	        isFunction(this._del) && this._del(this._fn, this._ret);
	        this.isDisposed = true;
	      }
	    };
	
	    return EventPatternObservable;
	  }(ObservableBase));
	
	  /**
	   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
	   * @param {Function} addHandler The function to add a handler to the emitter.
	   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence which wraps an event from an event emitter
	   */
	  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) {
	    return new EventPatternObservable(addHandler, removeHandler, selector).publish().refCount();
	  };
	
	  /**
	   * Invokes the asynchronous function, surfacing the result through an observable sequence.
	   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   */
	  Observable.startAsync = function (functionAsync) {
	    var promise = tryCatch(functionAsync)();
	    if (promise === errorObj) { return observableThrow(promise.e); }
	    return observableFromPromise(promise);
	  };
	
	  var PausableObservable = (function (__super__) {
	    inherits(PausableObservable, __super__);
	    function PausableObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();
	      this.paused = true;
	
	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }
	
	      __super__.call(this);
	    }
	
	    PausableObservable.prototype._subscribe = function (o) {
	      var conn = this.source.publish(),
	        subscription = conn.subscribe(o),
	        connection = disposableEmpty;
	
	      var pausable = this.pauser.startWith(!this.paused).distinctUntilChanged().subscribe(function (b) {
	        if (b) {
	          connection = conn.connect();
	        } else {
	          connection.dispose();
	          connection = disposableEmpty;
	        }
	      });
	
	      return new NAryDisposable([subscription, connection, pausable]);
	    };
	
	    PausableObservable.prototype.pause = function () {
	      this.paused = true;
	      this.controller.onNext(false);
	    };
	
	    PausableObservable.prototype.resume = function () {
	      this.paused = false;
	      this.controller.onNext(true);
	    };
	
	    return PausableObservable;
	
	  }(Observable));
	
	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausable(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausable = function (pauser) {
	    return new PausableObservable(this, pauser);
	  };
	
	  function combineLatestSource(source, subject, resultSelector) {
	    return new AnonymousObservable(function (o) {
	      var hasValue = [false, false],
	        hasValueAll = false,
	        isDone = false,
	        values = new Array(2),
	        err;
	
	      function next(x, i) {
	        values[i] = x;
	        hasValue[i] = true;
	        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
	          if (err) { return o.onError(err); }
	          var res = tryCatch(resultSelector).apply(null, values);
	          if (res === errorObj) { return o.onError(res.e); }
	          o.onNext(res);
	        }
	        isDone && values[1] && o.onCompleted();
	      }
	
	      return new BinaryDisposable(
	        source.subscribe(
	          function (x) {
	            next(x, 0);
	          },
	          function (e) {
	            if (values[1]) {
	              o.onError(e);
	            } else {
	              err = e;
	            }
	          },
	          function () {
	            isDone = true;
	            values[1] && o.onCompleted();
	          }),
	        subject.subscribe(
	          function (x) {
	            next(x, 1);
	          },
	          function (e) { o.onError(e); },
	          function () {
	            isDone = true;
	            next(true, 1);
	          })
	        );
	    }, source);
	  }
	
	  var PausableBufferedObservable = (function (__super__) {
	    inherits(PausableBufferedObservable, __super__);
	    function PausableBufferedObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();
	      this.paused = true;
	
	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }
	
	      __super__.call(this);
	    }
	
	    PausableBufferedObservable.prototype._subscribe = function (o) {
	      var q = [], previousShouldFire;
	
	      function drainQueue() { while (q.length > 0) { o.onNext(q.shift()); } }
	
	      var subscription =
	        combineLatestSource(
	          this.source,
	          this.pauser.startWith(!this.paused).distinctUntilChanged(),
	          function (data, shouldFire) {
	            return { data: data, shouldFire: shouldFire };
	          })
	          .subscribe(
	            function (results) {
	              if (previousShouldFire !== undefined && results.shouldFire !== previousShouldFire) {
	                previousShouldFire = results.shouldFire;
	                // change in shouldFire
	                if (results.shouldFire) { drainQueue(); }
	              } else {
	                previousShouldFire = results.shouldFire;
	                // new data
	                if (results.shouldFire) {
	                  o.onNext(results.data);
	                } else {
	                  q.push(results.data);
	                }
	              }
	            },
	            function (err) {
	              drainQueue();
	              o.onError(err);
	            },
	            function () {
	              drainQueue();
	              o.onCompleted();
	            }
	          );
	      return subscription;      
	    };
	
	    PausableBufferedObservable.prototype.pause = function () {
	      this.paused = true;
	      this.controller.onNext(false);
	    };
	
	    PausableBufferedObservable.prototype.resume = function () {
	      this.paused = false;
	      this.controller.onNext(true);
	    };
	
	    return PausableBufferedObservable;
	
	  }(Observable));
	
	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
	   * and yields the values that were buffered while paused.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausableBuffered = function (pauser) {
	    return new PausableBufferedObservable(this, pauser);
	  };
	
	  var ControlledObservable = (function (__super__) {
	    inherits(ControlledObservable, __super__);
	    function ControlledObservable (source, enableQueue, scheduler) {
	      __super__.call(this);
	      this.subject = new ControlledSubject(enableQueue, scheduler);
	      this.source = source.multicast(this.subject).refCount();
	    }
	
	    ControlledObservable.prototype._subscribe = function (o) {
	      return this.source.subscribe(o);
	    };
	
	    ControlledObservable.prototype.request = function (numberOfItems) {
	      return this.subject.request(numberOfItems == null ? -1 : numberOfItems);
	    };
	
	    return ControlledObservable;
	
	  }(Observable));
	
	  var ControlledSubject = (function (__super__) {
	    inherits(ControlledSubject, __super__);
	    function ControlledSubject(enableQueue, scheduler) {
	      enableQueue == null && (enableQueue = true);
	
	      __super__.call(this);
	      this.subject = new Subject();
	      this.enableQueue = enableQueue;
	      this.queue = enableQueue ? [] : null;
	      this.requestedCount = 0;
	      this.requestedDisposable = null;
	      this.error = null;
	      this.hasFailed = false;
	      this.hasCompleted = false;
	      this.scheduler = scheduler || currentThreadScheduler;
	    }
	
	    addProperties(ControlledSubject.prototype, Observer, {
	      _subscribe: function (o) {
	        return this.subject.subscribe(o);
	      },
	      onCompleted: function () {
	        this.hasCompleted = true;
	        if (!this.enableQueue || this.queue.length === 0) {
	          this.subject.onCompleted();
	          this.disposeCurrentRequest();
	        } else {
	          this.queue.push(Notification.createOnCompleted());
	        }
	      },
	      onError: function (error) {
	        this.hasFailed = true;
	        this.error = error;
	        if (!this.enableQueue || this.queue.length === 0) {
	          this.subject.onError(error);
	          this.disposeCurrentRequest();
	        } else {
	          this.queue.push(Notification.createOnError(error));
	        }
	      },
	      onNext: function (value) {
	        if (this.requestedCount <= 0) {
	          this.enableQueue && this.queue.push(Notification.createOnNext(value));
	        } else {
	          (this.requestedCount-- === 0) && this.disposeCurrentRequest();
	          this.subject.onNext(value);
	        }
	      },
	      _processRequest: function (numberOfItems) {
	        if (this.enableQueue) {
	          while (this.queue.length > 0 && (numberOfItems > 0 || this.queue[0].kind !== 'N')) {
	            var first = this.queue.shift();
	            first.accept(this.subject);
	            if (first.kind === 'N') {
	              numberOfItems--;
	            } else {
	              this.disposeCurrentRequest();
	              this.queue = [];
	            }
	          }
	        }
	
	        return numberOfItems;
	      },
	      request: function (number) {
	        this.disposeCurrentRequest();
	        var self = this;
	
	        this.requestedDisposable = this.scheduler.schedule(number,
	        function(s, i) {
	          var remaining = self._processRequest(i);
	          var stopped = self.hasCompleted || self.hasFailed;
	          if (!stopped && remaining > 0) {
	            self.requestedCount = remaining;
	
	            return disposableCreate(function () {
	              self.requestedCount = 0;
	            });
	              // Scheduled item is still in progress. Return a new
	              // disposable to allow the request to be interrupted
	              // via dispose.
	          }
	        });
	
	        return this.requestedDisposable;
	      },
	      disposeCurrentRequest: function () {
	        if (this.requestedDisposable) {
	          this.requestedDisposable.dispose();
	          this.requestedDisposable = null;
	        }
	      }
	    });
	
	    return ControlledSubject;
	  }(Observable));
	
	  /**
	   * Attaches a controller to the observable sequence with the ability to queue.
	   * @example
	   * var source = Rx.Observable.interval(100).controlled();
	   * source.request(3); // Reads 3 values
	   * @param {bool} enableQueue truthy value to determine if values should be queued pending the next request
	   * @param {Scheduler} scheduler determines how the requests will be scheduled
	   * @returns {Observable} The observable sequence which only propagates values on request.
	   */
	  observableProto.controlled = function (enableQueue, scheduler) {
	
	    if (enableQueue && isScheduler(enableQueue)) {
	      scheduler = enableQueue;
	      enableQueue = true;
	    }
	
	    if (enableQueue == null) {  enableQueue = true; }
	    return new ControlledObservable(this, enableQueue, scheduler);
	  };
	
	  var StopAndWaitObservable = (function (__super__) {
	    inherits(StopAndWaitObservable, __super__);
	    function StopAndWaitObservable (source) {
	      __super__.call(this);
	      this.source = source;
	    }
	
	    function scheduleMethod(s, self) {
	      return self.source.request(1);
	    }
	
	    StopAndWaitObservable.prototype._subscribe = function (o) {
	      this.subscription = this.source.subscribe(new StopAndWaitObserver(o, this, this.subscription));
	      return new BinaryDisposable(
	        this.subscription,
	        defaultScheduler.schedule(this, scheduleMethod)
	      );
	    };
	
	    var StopAndWaitObserver = (function (__sub__) {
	      inherits(StopAndWaitObserver, __sub__);
	      function StopAndWaitObserver (observer, observable, cancel) {
	        __sub__.call(this);
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	        this.scheduleDisposable = null;
	      }
	
	      StopAndWaitObserver.prototype.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };
	
	      StopAndWaitObserver.prototype.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      };
	
	      function innerScheduleMethod(s, self) {
	        return self.observable.source.request(1);
	      }
	
	      StopAndWaitObserver.prototype.next = function (value) {
	        this.observer.onNext(value);
	        this.scheduleDisposable = defaultScheduler.schedule(this, innerScheduleMethod);
	      };
	
	      StopAndWaitObserver.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        if (this.scheduleDisposable) {
	          this.scheduleDisposable.dispose();
	          this.scheduleDisposable = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };
	
	      return StopAndWaitObserver;
	    }(AbstractObserver));
	
	    return StopAndWaitObservable;
	  }(Observable));
	
	
	  /**
	   * Attaches a stop and wait observable to the current observable.
	   * @returns {Observable} A stop and wait observable.
	   */
	  ControlledObservable.prototype.stopAndWait = function () {
	    return new StopAndWaitObservable(this);
	  };
	
	  var WindowedObservable = (function (__super__) {
	    inherits(WindowedObservable, __super__);
	    function WindowedObservable(source, windowSize) {
	      __super__.call(this);
	      this.source = source;
	      this.windowSize = windowSize;
	    }
	
	    function scheduleMethod(s, self) {
	      return self.source.request(self.windowSize);
	    }
	
	    WindowedObservable.prototype._subscribe = function (o) {
	      this.subscription = this.source.subscribe(new WindowedObserver(o, this, this.subscription));
	      return new BinaryDisposable(
	        this.subscription,
	        defaultScheduler.schedule(this, scheduleMethod)
	      );
	    };
	
	    var WindowedObserver = (function (__sub__) {
	      inherits(WindowedObserver, __sub__);
	      function WindowedObserver(observer, observable, cancel) {
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	        this.received = 0;
	        this.scheduleDisposable = null;
	        __sub__.call(this);
	      }
	
	      WindowedObserver.prototype.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };
	
	      WindowedObserver.prototype.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      };
	
	      function innerScheduleMethod(s, self) {
	        return self.observable.source.request(self.observable.windowSize);
	      }
	
	      WindowedObserver.prototype.next = function (value) {
	        this.observer.onNext(value);
	        this.received = ++this.received % this.observable.windowSize;
	        this.received === 0 && (this.scheduleDisposable = defaultScheduler.schedule(this, innerScheduleMethod));
	      };
	
	      WindowedObserver.prototype.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        if (this.scheduleDisposable) {
	          this.scheduleDisposable.dispose();
	          this.scheduleDisposable = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };
	
	      return WindowedObserver;
	    }(AbstractObserver));
	
	    return WindowedObservable;
	  }(Observable));
	
	  /**
	   * Creates a sliding windowed observable based upon the window size.
	   * @param {Number} windowSize The number of items in the window
	   * @returns {Observable} A windowed observable based upon the window size.
	   */
	  ControlledObservable.prototype.windowed = function (windowSize) {
	    return new WindowedObservable(this, windowSize);
	  };
	
	  /**
	   * Pipes the existing Observable sequence into a Node.js Stream.
	   * @param {Stream} dest The destination Node.js stream.
	   * @returns {Stream} The destination stream.
	   */
	  observableProto.pipe = function (dest) {
	    var source = this.pausableBuffered();
	
	    function onDrain() {
	      source.resume();
	    }
	
	    dest.addListener('drain', onDrain);
	
	    source.subscribe(
	      function (x) {
	        !dest.write(x) && source.pause();
	      },
	      function (err) {
	        dest.emit('error', err);
	      },
	      function () {
	        // Hack check because STDIO is not closable
	        !dest._isStdio && dest.end();
	        dest.removeListener('drain', onDrain);
	      });
	
	    source.resume();
	
	    return dest;
	  };
	
	  var MulticastObservable = (function (__super__) {
	    inherits(MulticastObservable, __super__);
	    function MulticastObservable(source, fn1, fn2) {
	      this.source = source;
	      this._fn1 = fn1;
	      this._fn2 = fn2;
	      __super__.call(this);
	    }
	
	    MulticastObservable.prototype.subscribeCore = function (o) {
	      var connectable = this.source.multicast(this._fn1());
	      return new BinaryDisposable(this._fn2(connectable).subscribe(o), connectable.connect());
	    };
	
	    return MulticastObservable;
	  }(ObservableBase));
	
	  /**
	   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
	   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
	   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
	   *
	   * @example
	   * 1 - res = source.multicast(observable);
	   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
	   *
	   * @param {Function|Subject} subjectOrSubjectSelector
	   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
	   * Or:
	   * Subject to push source elements into.
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.multicast = function (subjectOrSubjectSelector, selector) {
	    return isFunction(subjectOrSubjectSelector) ?
	      new MulticastObservable(this, subjectOrSubjectSelector, selector) :
	      new ConnectableObservable(this, subjectOrSubjectSelector);
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of Multicast using a regular Subject.
	   *
	   * @example
	   * var resres = source.publish();
	   * var res = source.publish(function (x) { return x; });
	   *
	   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publish = function (selector) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new Subject(); }, selector) :
	      this.multicast(new Subject());
	  };
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.share = function () {
	    return this.publish().refCount();
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
	   * This operator is a specialization of Multicast using a AsyncSubject.
	   *
	   * @example
	   * var res = source.publishLast();
	   * var res = source.publishLast(function (x) { return x; });
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishLast = function (selector) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new AsyncSubject(); }, selector) :
	      this.multicast(new AsyncSubject());
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
	   * This operator is a specialization of Multicast using a BehaviorSubject.
	   *
	   * @example
	   * var res = source.publishValue(42);
	   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishValue = function (initialValueOrSelector, initialValue) {
	    return arguments.length === 2 ?
	      this.multicast(function () {
	        return new BehaviorSubject(initialValue);
	      }, initialValueOrSelector) :
	      this.multicast(new BehaviorSubject(initialValueOrSelector));
	  };
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
	   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareValue = function (initialValue) {
	    return this.publishValue(initialValue).refCount();
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of Multicast using a ReplaySubject.
	   *
	   * @example
	   * var res = source.replay(null, 3);
	   * var res = source.replay(null, 3, 500);
	   * var res = source.replay(null, 3, 500, scheduler);
	   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param windowSize [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.replay = function (selector, bufferSize, windowSize, scheduler) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new ReplaySubject(bufferSize, windowSize, scheduler); }, selector) :
	      this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
	  };
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   *
	   * @example
	   * var res = source.shareReplay(3);
	   * var res = source.shareReplay(3, 500);
	   * var res = source.shareReplay(3, 500, scheduler);
	   *
	
	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param window [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareReplay = function (bufferSize, windowSize, scheduler) {
	    return this.replay(null, bufferSize, windowSize, scheduler).refCount();
	  };
	
	  var InnerSubscription = function (s, o) {
	    this._s = s;
	    this._o = o;
	  };
	
	  InnerSubscription.prototype.dispose = function () {
	    if (!this._s.isDisposed && this._o !== null) {
	      var idx = this._s.observers.indexOf(this._o);
	      this._s.observers.splice(idx, 1);
	      this._o = null;
	    }
	  };
	
	  var RefCountObservable = (function (__super__) {
	    inherits(RefCountObservable, __super__);
	    function RefCountObservable(source) {
	      this.source = source;
	      this._count = 0;
	      this._connectableSubscription = null;
	      __super__.call(this);
	    }
	
	    RefCountObservable.prototype.subscribeCore = function (o) {
	      var subscription = this.source.subscribe(o);
	      ++this._count === 1 && (this._connectableSubscription = this.source.connect());
	      return new RefCountDisposable(this, subscription);
	    };
	
	    function RefCountDisposable(p, s) {
	      this._p = p;
	      this._s = s;
	      this.isDisposed = false;
	    }
	
	    RefCountDisposable.prototype.dispose = function () {
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        this._s.dispose();
	        --this._p._count === 0 && this._p._connectableSubscription.dispose();
	      }
	    };
	
	    return RefCountObservable;
	  }(ObservableBase));
	
	  var ConnectableObservable = Rx.ConnectableObservable = (function (__super__) {
	    inherits(ConnectableObservable, __super__);
	    function ConnectableObservable(source, subject) {
	      this.source = source;
	      this._connection = null;
	      this._source = source.asObservable();
	      this._subject = subject;
	      __super__.call(this);
	    }
	
	    function ConnectDisposable(parent, subscription) {
	      this._p = parent;
	      this._s = subscription;
	    }
	
	    ConnectDisposable.prototype.dispose = function () {
	      if (this._s) {
	        this._s.dispose();
	        this._s = null;
	        this._p._connection = null;
	      }
	    };
	
	    ConnectableObservable.prototype.connect = function () {
	      if (!this._connection) {
	        if (this._subject.isStopped) {
	          return disposableEmpty;
	        }
	        var subscription = this._source.subscribe(this._subject);
	        this._connection = new ConnectDisposable(this, subscription);
	      }
	      return this._connection;
	    };
	
	    ConnectableObservable.prototype._subscribe = function (o) {
	      return this._subject.subscribe(o);
	    };
	
	    ConnectableObservable.prototype.refCount = function () {
	      return new RefCountObservable(this);
	    };
	
	    return ConnectableObservable;
	  }(Observable));
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence. This observable sequence
	   * can be resubscribed to, even if all prior subscriptions have ended. (unlike `.publish().refCount()`)
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source.
	   */
	  observableProto.singleInstance = function() {
	    var source = this, hasObservable = false, observable;
	
	    function getObservable() {
	      if (!hasObservable) {
	        hasObservable = true;
	        observable = source['finally'](function() { hasObservable = false; }).publish().refCount();
	      }
	      return observable;
	    }
	
	    return new AnonymousObservable(function(o) {
	      return getObservable().subscribe(o);
	    });
	  };
	
	  /**
	   *  Correlates the elements of two sequences based on overlapping durations.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.join = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (o) {
	      var group = new CompositeDisposable();
	      var leftDone = false, rightDone = false;
	      var leftId = 0, rightId = 0;
	      var leftMap = new Map(), rightMap = new Map();
	      var handleError = function (e) { o.onError(e); };
	
	      group.add(left.subscribe(
	        function (value) {
	          var id = leftId++, md = new SingleAssignmentDisposable();
	
	          leftMap.set(id, value);
	          group.add(md);
	
	          var duration = tryCatch(leftDurationSelector)(value);
	          if (duration === errorObj) { return o.onError(duration.e); }
	
	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            handleError,
	            function () {
	              leftMap['delete'](id) && leftMap.size === 0 && leftDone && o.onCompleted();
	              group.remove(md);
	            }));
	
	          rightMap.forEach(function (v) {
	            var result = tryCatch(resultSelector)(value, v);
	            if (result === errorObj) { return o.onError(result.e); }
	            o.onNext(result);
	          });
	        },
	        handleError,
	        function () {
	          leftDone = true;
	          (rightDone || leftMap.size === 0) && o.onCompleted();
	        })
	      );
	
	      group.add(right.subscribe(
	        function (value) {
	          var id = rightId++, md = new SingleAssignmentDisposable();
	
	          rightMap.set(id, value);
	          group.add(md);
	
	          var duration = tryCatch(rightDurationSelector)(value);
	          if (duration === errorObj) { return o.onError(duration.e); }
	
	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            handleError,
	            function () {
	              rightMap['delete'](id) && rightMap.size === 0 && rightDone && o.onCompleted();
	              group.remove(md);
	            }));
	
	          leftMap.forEach(function (v) {
	            var result = tryCatch(resultSelector)(v, value);
	            if (result === errorObj) { return o.onError(result.e); }
	            o.onNext(result);
	          });
	        },
	        handleError,
	        function () {
	          rightDone = true;
	          (leftDone || rightMap.size === 0) && o.onCompleted();
	        })
	      );
	      return group;
	    }, left);
	  };
	
	  /**
	   *  Correlates the elements of two sequences based on overlapping durations, and groups the results.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.groupJoin = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (o) {
	      var group = new CompositeDisposable();
	      var r = new RefCountDisposable(group);
	      var leftMap = new Map(), rightMap = new Map();
	      var leftId = 0, rightId = 0;
	      var handleError = function (e) { return function (v) { v.onError(e); }; };
	
	      function handleError(e) { };
	
	      group.add(left.subscribe(
	        function (value) {
	          var s = new Subject();
	          var id = leftId++;
	          leftMap.set(id, s);
	
	          var result = tryCatch(resultSelector)(value, addRef(s, r));
	          if (result === errorObj) {
	            leftMap.forEach(handleError(result.e));
	            return o.onError(result.e);
	          }
	          o.onNext(result);
	
	          rightMap.forEach(function (v) { s.onNext(v); });
	
	          var md = new SingleAssignmentDisposable();
	          group.add(md);
	
	          var duration = tryCatch(leftDurationSelector)(value);
	          if (duration === errorObj) {
	            leftMap.forEach(handleError(duration.e));
	            return o.onError(duration.e);
	          }
	
	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            function (e) {
	              leftMap.forEach(handleError(e));
	              o.onError(e);
	            },
	            function () {
	              leftMap['delete'](id) && s.onCompleted();
	              group.remove(md);
	            }));
	        },
	        function (e) {
	          leftMap.forEach(handleError(e));
	          o.onError(e);
	        },
	        function () { o.onCompleted(); })
	      );
	
	      group.add(right.subscribe(
	        function (value) {
	          var id = rightId++;
	          rightMap.set(id, value);
	
	          var md = new SingleAssignmentDisposable();
	          group.add(md);
	
	          var duration = tryCatch(rightDurationSelector)(value);
	          if (duration === errorObj) {
	            leftMap.forEach(handleError(duration.e));
	            return o.onError(duration.e);
	          }
	
	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            function (e) {
	              leftMap.forEach(handleError(e));
	              o.onError(e);
	            },
	            function () {
	              rightMap['delete'](id);
	              group.remove(md);
	            }));
	
	          leftMap.forEach(function (v) { v.onNext(value); });
	        },
	        function (e) {
	          leftMap.forEach(handleError(e));
	          o.onError(e);
	        })
	      );
	
	      return r;
	    }, left);
	  };
	
	  function toArray(x) { return x.toArray(); }
	
	  /**
	   *  Projects each element of an observable sequence into zero or more buffers.
	   *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	   *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	   *  @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.buffer = function () {
	    return this.window.apply(this, arguments)
	      .flatMap(toArray);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more windows.
	   *
	   *  @param {Mixed} windowOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	   *  @param {Function} [windowClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	   *  @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.window = function (windowOpeningsOrClosingSelector, windowClosingSelector) {
	    if (arguments.length === 1 && typeof arguments[0] !== 'function') {
	      return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);
	    }
	    return typeof windowOpeningsOrClosingSelector === 'function' ?
	      observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) :
	      observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);
	  };
	
	  function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {
	    return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function (_, win) {
	      return win;
	    });
	  }
	
	  function observableWindowWithBoundaries(windowBoundaries) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var win = new Subject(),
	        d = new CompositeDisposable(),
	        r = new RefCountDisposable(d);
	
	      observer.onNext(addRef(win, r));
	
	      d.add(source.subscribe(function (x) {
	        win.onNext(x);
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));
	
	      isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));
	
	      d.add(windowBoundaries.subscribe(function (w) {
	        win.onCompleted();
	        win = new Subject();
	        observer.onNext(addRef(win, r));
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));
	
	      return r;
	    }, source);
	  }
	
	  function observableWindowWithClosingSelector(windowClosingSelector) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var m = new SerialDisposable(),
	        d = new CompositeDisposable(m),
	        r = new RefCountDisposable(d),
	        win = new Subject();
	      observer.onNext(addRef(win, r));
	      d.add(source.subscribe(function (x) {
	          win.onNext(x);
	      }, function (err) {
	          win.onError(err);
	          observer.onError(err);
	      }, function () {
	          win.onCompleted();
	          observer.onCompleted();
	      }));
	
	      function createWindowClose () {
	        var windowClose;
	        try {
	          windowClose = windowClosingSelector();
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	
	        isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));
	
	        var m1 = new SingleAssignmentDisposable();
	        m.setDisposable(m1);
	        m1.setDisposable(windowClose.take(1).subscribe(noop, function (err) {
	          win.onError(err);
	          observer.onError(err);
	        }, function () {
	          win.onCompleted();
	          win = new Subject();
	          observer.onNext(addRef(win, r));
	          createWindowClose();
	        }));
	      }
	
	      createWindowClose();
	      return r;
	    }, source);
	  }
	
	  var PairwiseObservable = (function (__super__) {
	    inherits(PairwiseObservable, __super__);
	    function PairwiseObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    PairwiseObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new PairwiseObserver(o));
	    };
	
	    return PairwiseObservable;
	  }(ObservableBase));
	
	  var PairwiseObserver = (function(__super__) {
	    inherits(PairwiseObserver, __super__);
	    function PairwiseObserver(o) {
	      this._o = o;
	      this._p = null;
	      this._hp = false;
	      __super__.call(this);
	    }
	
	    PairwiseObserver.prototype.next = function (x) {
	      if (this._hp) {
	        this._o.onNext([this._p, x]);
	      } else {
	        this._hp = true;
	      }
	      this._p = x;
	    };
	    PairwiseObserver.prototype.error = function (err) { this._o.onError(err); };
	    PairwiseObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return PairwiseObserver;
	  }(AbstractObserver));
	
	  /**
	   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
	   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair.
	   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.
	   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.
	   */
	  observableProto.pairwise = function () {
	    return new PairwiseObservable(this);
	  };
	
	  /**
	   * Returns two observables which partition the observations of the source by the given function.
	   * The first will trigger observations for those values for which the predicate returns true.
	   * The second will trigger observations for those values where the predicate returns false.
	   * The predicate is executed once for each subscribed observer.
	   * Both also propagate all error observations arising from the source and each completes
	   * when the source completes.
	   * @param {Function} predicate
	   *    The function to determine which output Observable will trigger a particular observation.
	   * @returns {Array}
	   *    An array of observables. The first triggers when the predicate returns true,
	   *    and the second triggers when the predicate returns false.
	  */
	  observableProto.partition = function(predicate, thisArg) {
	    var fn = bindCallback(predicate, thisArg, 3);
	    return [
	      this.filter(predicate, thisArg),
	      this.filter(function (x, i, o) { return !fn(x, i, o); })
	    ];
	  };
	
	  var WhileEnumerable = (function(__super__) {
	    inherits(WhileEnumerable, __super__);
	    function WhileEnumerable(c, s) {
	      this.c = c;
	      this.s = s;
	    }
	    WhileEnumerable.prototype[$iterator$] = function () {
	      var self = this;
	      return {
	        next: function () {
	          return self.c() ?
	           { done: false, value: self.s } :
	           { done: true, value: void 0 };
	        }
	      };
	    };
	    return WhileEnumerable;
	  }(Enumerable));
	  
	  function enumerableWhile(condition, source) {
	    return new WhileEnumerable(condition, source);
	  }  
	
	   /**
	   *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
	   *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.
	   *
	   * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.letBind = observableProto['let'] = function (func) {
	    return func(this);
	  };
	
	   /**
	   *  Determines whether an observable collection contains values. 
	   *
	   * @example
	   *  1 - res = Rx.Observable.if(condition, obs1);
	   *  2 - res = Rx.Observable.if(condition, obs1, obs2);
	   *  3 - res = Rx.Observable.if(condition, obs1, scheduler);
	   * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.
	   * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.
	   * @returns {Observable} An observable sequence which is either the thenSource or elseSource.
	   */
	  Observable['if'] = function (condition, thenSource, elseSourceOrScheduler) {
	    return observableDefer(function () {
	      elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());
	
	      isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));
	      isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));
	
	      // Assume a scheduler for empty only
	      typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));
	      return condition() ? thenSource : elseSourceOrScheduler;
	    });
	  };
	
	   /**
	   *  Concatenates the observable sequences obtained by running the specified result selector for each element in source.
	   * There is an alias for this method called 'forIn' for browsers <IE9
	   * @param {Array} sources An array of values to turn into an observable sequence.
	   * @param {Function} resultSelector A function to apply to each item in the sources array to turn it into an observable sequence.
	   * @returns {Observable} An observable sequence from the concatenated observable sequences.
	   */
	  Observable['for'] = Observable.forIn = function (sources, resultSelector, thisArg) {
	    return enumerableOf(sources, resultSelector, thisArg).concat();
	  };
	
	   /**
	   *  Repeats source as long as condition holds emulating a while loop.
	   * There is an alias for this method called 'whileDo' for browsers <IE9
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */
	  var observableWhileDo = Observable['while'] = Observable.whileDo = function (condition, source) {
	    isPromise(source) && (source = observableFromPromise(source));
	    return enumerableWhile(condition, source).concat();
	  };
	
	   /**
	   *  Repeats source as long as condition holds emulating a do while loop.
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */
	  observableProto.doWhile = function (condition) {
	    return observableConcat([this, observableWhileDo(condition, this)]);
	  };
	
	   /**
	   *  Uses selector to determine which source in sources to use.
	   * @param {Function} selector The function which extracts the value for to test in a case statement.
	   * @param {Array} sources A object which has keys which correspond to the case statement labels.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.
	   *
	   * @returns {Observable} An observable sequence which is determined by a case statement.
	   */
	  Observable['case'] = function (selector, sources, defaultSourceOrScheduler) {
	    return observableDefer(function () {
	      isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
	      defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());
	
	      isScheduler(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));
	
	      var result = sources[selector()];
	      isPromise(result) && (result = observableFromPromise(result));
	
	      return result || defaultSourceOrScheduler;
	    });
	  };
	
	  var ExpandObservable = (function(__super__) {
	    inherits(ExpandObservable, __super__);
	    function ExpandObservable(source, fn, scheduler) {
	      this.source = source;
	      this._fn = fn;
	      this._scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    function scheduleRecursive(args, recurse) {
	      var state = args[0], self = args[1];
	      var work;
	      if (state.q.length > 0) {
	        work = state.q.shift();
	      } else {
	        state.isAcquired = false;
	        return;
	      }
	      var m1 = new SingleAssignmentDisposable();
	      state.d.add(m1);
	      m1.setDisposable(work.subscribe(new ExpandObserver(state, self, m1)));
	      recurse([state, self]);
	    }
	
	    ExpandObservable.prototype._ensureActive = function (state) {
	      var isOwner = false;
	      if (state.q.length > 0) {
	        isOwner = !state.isAcquired;
	        state.isAcquired = true;
	      }
	      isOwner && state.m.setDisposable(this._scheduler.scheduleRecursive([state, this], scheduleRecursive));
	    };
	
	    ExpandObservable.prototype.subscribeCore = function (o) {
	      var m = new SerialDisposable(),
	        d = new CompositeDisposable(m),
	        state = {
	          q: [],
	          m: m,
	          d: d,
	          activeCount: 0,
	          isAcquired: false,
	          o: o
	        };
	
	      state.q.push(this.source);
	      state.activeCount++;
	      this._ensureActive(state);
	      return d;
	    };
	
	    return ExpandObservable;
	  }(ObservableBase));
	
	  var ExpandObserver = (function(__super__) {
	    inherits(ExpandObserver, __super__);
	    function ExpandObserver(state, parent, m1) {
	      this._s = state;
	      this._p = parent;
	      this._m1 = m1;
	      __super__.call(this);
	    }
	
	    ExpandObserver.prototype.next = function (x) {
	      this._s.o.onNext(x);
	      var result = tryCatch(this._p._fn)(x);
	      if (result === errorObj) { return this._s.o.onError(result.e); }
	      this._s.q.push(result);
	      this._s.activeCount++;
	      this._p._ensureActive(this._s);
	    };
	
	    ExpandObserver.prototype.error = function (e) {
	      this._s.o.onError(e);
	    };
	
	    ExpandObserver.prototype.completed = function () {
	      this._s.d.remove(this._m1);
	      this._s.activeCount--;
	      this._s.activeCount === 0 && this._s.o.onCompleted();
	    };
	
	    return ExpandObserver;
	  }(AbstractObserver));
	
	   /**
	   *  Expands an observable sequence by recursively invoking selector.
	   *
	   * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.
	   * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.
	   * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.
	   */
	  observableProto.expand = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new ExpandObservable(this, selector, scheduler);
	  };
	
	  function argumentsToArray() {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return args;
	  }
	
	  var ForkJoinObservable = (function (__super__) {
	    inherits(ForkJoinObservable, __super__);
	    function ForkJoinObservable(sources, cb) {
	      this._sources = sources;
	      this._cb = cb;
	      __super__.call(this);
	    }
	
	    ForkJoinObservable.prototype.subscribeCore = function (o) {
	      if (this._sources.length === 0) {
	        o.onCompleted();
	        return disposableEmpty;
	      }
	
	      var count = this._sources.length;
	      var state = {
	        finished: false,
	        hasResults: new Array(count),
	        hasCompleted: new Array(count),
	        results: new Array(count)
	      };
	
	      var subscriptions = new CompositeDisposable();
	      for (var i = 0, len = this._sources.length; i < len; i++) {
	        var source = this._sources[i];
	        isPromise(source) && (source = observableFromPromise(source));
	        subscriptions.add(source.subscribe(new ForkJoinObserver(o, state, i, this._cb, subscriptions)));
	      }
	
	      return subscriptions;
	    };
	
	    return ForkJoinObservable;
	  }(ObservableBase));
	
	  var ForkJoinObserver = (function(__super__) {
	    inherits(ForkJoinObserver, __super__);
	    function ForkJoinObserver(o, s, i, cb, subs) {
	      this._o = o;
	      this._s = s;
	      this._i = i;
	      this._cb = cb;
	      this._subs = subs;
	      __super__.call(this);
	    }
	
	    ForkJoinObserver.prototype.next = function (x) {
	      if (!this._s.finished) {
	        this._s.hasResults[this._i] = true;
	        this._s.results[this._i] = x;
	      }
	    };
	
	    ForkJoinObserver.prototype.error = function (e) {
	      this._s.finished = true;
	      this._o.onError(e);
	      this._subs.dispose();
	    };
	
	    ForkJoinObserver.prototype.completed = function () {
	      if (!this._s.finished) {
	        if (!this._s.hasResults[this._i]) {
	          return this._o.onCompleted();
	        }
	        this._s.hasCompleted[this._i] = true;
	        for (var i = 0; i < this._s.results.length; i++) {
	          if (!this._s.hasCompleted[i]) { return; }
	        }
	        this._s.finished = true;
	
	        var res = tryCatch(this._cb).apply(null, this._s.results);
	        if (res === errorObj) { return this._o.onError(res.e); }
	
	        this._o.onNext(res);
	        this._o.onCompleted();
	      }
	    };
	
	    return ForkJoinObserver;
	  }(AbstractObserver));
	
	   /**
	   *  Runs all observable sequences in parallel and collect their last elements.
	   *
	   * @example
	   *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);
	   *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);
	   * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.
	   */
	  Observable.forkJoin = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
	    Array.isArray(args[0]) && (args = args[0]);
	    return new ForkJoinObservable(args, resultSelector);
	  };
	
	   /**
	   *  Runs two observable sequences in parallel and combines their last elemenets.
	   * @param {Observable} second Second observable sequence.
	   * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.
	   * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.
	   */
	  observableProto.forkJoin = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    if (Array.isArray(args[0])) {
	      args[0].unshift(this);
	    } else {
	      args.unshift(this);
	    }
	    return Observable.forkJoin.apply(null, args);
	  };
	
	  /**
	   * Comonadic bind operator.
	   * @param {Function} selector A transform function to apply to each element.
	   * @param {Object} scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.
	   * @returns {Observable} An observable sequence which results from the comonadic bind operation.
	   */
	  observableProto.manySelect = observableProto.extend = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = Rx.Scheduler.immediate);
	    var source = this;
	    return observableDefer(function () {
	      var chain;
	
	      return source
	        .map(function (x) {
	          var curr = new ChainObservable(x);
	
	          chain && chain.onNext(x);
	          chain = curr;
	
	          return curr;
	        })
	        .tap(
	          noop,
	          function (e) { chain && chain.onError(e); },
	          function () { chain && chain.onCompleted(); }
	        )
	        .observeOn(scheduler)
	        .map(selector);
	    }, source);
	  };
	
	  var ChainObservable = (function (__super__) {
	    inherits(ChainObservable, __super__);
	    function ChainObservable(head) {
	      __super__.call(this);
	      this.head = head;
	      this.tail = new AsyncSubject();
	    }
	
	    addProperties(ChainObservable.prototype, Observer, {
	      _subscribe: function (o) {
	        var g = new CompositeDisposable();
	        g.add(currentThreadScheduler.schedule(this, function (_, self) {
	          o.onNext(self.head);
	          g.add(self.tail.mergeAll().subscribe(o));
	        }));
	
	        return g;
	      },
	      onCompleted: function () {
	        this.onNext(Observable.empty());
	      },
	      onError: function (e) {
	        this.onNext(Observable['throw'](e));
	      },
	      onNext: function (v) {
	        this.tail.onNext(v);
	        this.tail.onCompleted();
	      }
	    });
	
	    return ChainObservable;
	
	  }(Observable));
	
	  var Map = root.Map || (function () {
	    function Map() {
	      this.size = 0;
	      this._values = [];
	      this._keys = [];
	    }
	
	    Map.prototype['delete'] = function (key) {
	      var i = this._keys.indexOf(key);
	      if (i === -1) { return false; }
	      this._values.splice(i, 1);
	      this._keys.splice(i, 1);
	      this.size--;
	      return true;
	    };
	
	    Map.prototype.get = function (key) {
	      var i = this._keys.indexOf(key);
	      return i === -1 ? undefined : this._values[i];
	    };
	
	    Map.prototype.set = function (key, value) {
	      var i = this._keys.indexOf(key);
	      if (i === -1) {
	        this._keys.push(key);
	        this._values.push(value);
	        this.size++;
	      } else {
	        this._values[i] = value;
	      }
	      return this;
	    };
	
	    Map.prototype.forEach = function (cb, thisArg) {
	      for (var i = 0; i < this.size; i++) {
	        cb.call(thisArg, this._values[i], this._keys[i]);
	      }
	    };
	
	    return Map;
	  }());
	
	  /**
	   * @constructor
	   * Represents a join pattern over observable sequences.
	   */
	  function Pattern(patterns) {
	    this.patterns = patterns;
	  }
	
	  /**
	   *  Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
	   *  @param other Observable sequence to match in addition to the current pattern.
	   *  @return {Pattern} Pattern object that matches when all observable sequences in the pattern have an available value.
	   */
	  Pattern.prototype.and = function (other) {
	    return new Pattern(this.patterns.concat(other));
	  };
	
	  /**
	   *  Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
	   *  @param {Function} selector Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.
	   *  @return {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  Pattern.prototype.thenDo = function (selector) {
	    return new Plan(this, selector);
	  };
	
	  function Plan(expression, selector) {
	    this.expression = expression;
	    this.selector = selector;
	  }
	
	  function handleOnError(o) { return function (e) { o.onError(e); }; }
	  function handleOnNext(self, observer) {
	    return function onNext () {
	      var result = tryCatch(self.selector).apply(self, arguments);
	      if (result === errorObj) { return observer.onError(result.e); }
	      observer.onNext(result);
	    };
	  }
	
	  Plan.prototype.activate = function (externalSubscriptions, observer, deactivate) {
	    var joinObservers = [], errHandler = handleOnError(observer);
	    for (var i = 0, len = this.expression.patterns.length; i < len; i++) {
	      joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], errHandler));
	    }
	    var activePlan = new ActivePlan(joinObservers, handleOnNext(this, observer), function () {
	      for (var j = 0, jlen = joinObservers.length; j < jlen; j++) {
	        joinObservers[j].removeActivePlan(activePlan);
	      }
	      deactivate(activePlan);
	    });
	    for (i = 0, len = joinObservers.length; i < len; i++) {
	      joinObservers[i].addActivePlan(activePlan);
	    }
	    return activePlan;
	  };
	
	  function planCreateObserver(externalSubscriptions, observable, onError) {
	    var entry = externalSubscriptions.get(observable);
	    if (!entry) {
	      var observer = new JoinObserver(observable, onError);
	      externalSubscriptions.set(observable, observer);
	      return observer;
	    }
	    return entry;
	  }
	
	  function ActivePlan(joinObserverArray, onNext, onCompleted) {
	    this.joinObserverArray = joinObserverArray;
	    this.onNext = onNext;
	    this.onCompleted = onCompleted;
	    this.joinObservers = new Map();
	    for (var i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      var joinObserver = this.joinObserverArray[i];
	      this.joinObservers.set(joinObserver, joinObserver);
	    }
	  }
	
	  ActivePlan.prototype.dequeue = function () {
	    this.joinObservers.forEach(function (v) { v.queue.shift(); });
	  };
	
	  ActivePlan.prototype.match = function () {
	    var i, len, hasValues = true;
	    for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      if (this.joinObserverArray[i].queue.length === 0) {
	        hasValues = false;
	        break;
	      }
	    }
	    if (hasValues) {
	      var firstValues = [],
	          isCompleted = false;
	      for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	        firstValues.push(this.joinObserverArray[i].queue[0]);
	        this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
	      }
	      if (isCompleted) {
	        this.onCompleted();
	      } else {
	        this.dequeue();
	        var values = [];
	        for (i = 0, len = firstValues.length; i < firstValues.length; i++) {
	          values.push(firstValues[i].value);
	        }
	        this.onNext.apply(this, values);
	      }
	    }
	  };
	
	  var JoinObserver = (function (__super__) {
	    inherits(JoinObserver, __super__);
	
	    function JoinObserver(source, onError) {
	      __super__.call(this);
	      this.source = source;
	      this.onError = onError;
	      this.queue = [];
	      this.activePlans = [];
	      this.subscription = new SingleAssignmentDisposable();
	      this.isDisposed = false;
	    }
	
	    var JoinObserverPrototype = JoinObserver.prototype;
	
	    JoinObserverPrototype.next = function (notification) {
	      if (!this.isDisposed) {
	        if (notification.kind === 'E') {
	          return this.onError(notification.error);
	        }
	        this.queue.push(notification);
	        var activePlans = this.activePlans.slice(0);
	        for (var i = 0, len = activePlans.length; i < len; i++) {
	          activePlans[i].match();
	        }
	      }
	    };
	
	    JoinObserverPrototype.error = noop;
	    JoinObserverPrototype.completed = noop;
	
	    JoinObserverPrototype.addActivePlan = function (activePlan) {
	      this.activePlans.push(activePlan);
	    };
	
	    JoinObserverPrototype.subscribe = function () {
	      this.subscription.setDisposable(this.source.materialize().subscribe(this));
	    };
	
	    JoinObserverPrototype.removeActivePlan = function (activePlan) {
	      this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);
	      this.activePlans.length === 0 && this.dispose();
	    };
	
	    JoinObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        this.subscription.dispose();
	      }
	    };
	
	    return JoinObserver;
	  } (AbstractObserver));
	
	  /**
	   *  Creates a pattern that matches when both observable sequences have an available value.
	   *
	   *  @param right Observable sequence to match with the current sequence.
	   *  @return {Pattern} Pattern object that matches when both observable sequences have an available value.
	   */
	  observableProto.and = function (right) {
	    return new Pattern([this, right]);
	  };
	
	  /**
	   *  Matches when the observable sequence has an available value and projects the value.
	   *
	   *  @param {Function} selector Selector that will be invoked for values in the source sequence.
	   *  @returns {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  observableProto.thenDo = function (selector) {
	    return new Pattern([this]).thenDo(selector);
	  };
	
	  /**
	   *  Joins together the results from several patterns.
	   *
	   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.
	   *  @returns {Observable} Observable sequence with the results form matching several patterns.
	   */
	  Observable.when = function () {
	    var len = arguments.length, plans;
	    if (Array.isArray(arguments[0])) {
	      plans = arguments[0];
	    } else {
	      plans = new Array(len);
	      for(var i = 0; i < len; i++) { plans[i] = arguments[i]; }
	    }
	    return new AnonymousObservable(function (o) {
	      var activePlans = [],
	          externalSubscriptions = new Map();
	      var outObserver = observerCreate(
	        function (x) { o.onNext(x); },
	        function (err) {
	          externalSubscriptions.forEach(function (v) { v.onError(err); });
	          o.onError(err);
	        },
	        function (x) { o.onCompleted(); }
	      );
	      try {
	        for (var i = 0, len = plans.length; i < len; i++) {
	          activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function (activePlan) {
	            var idx = activePlans.indexOf(activePlan);
	            activePlans.splice(idx, 1);
	            activePlans.length === 0 && o.onCompleted();
	          }));
	        }
	      } catch (e) {
	        return observableThrow(e).subscribe(o);
	      }
	      var group = new CompositeDisposable();
	      externalSubscriptions.forEach(function (joinObserver) {
	        joinObserver.subscribe();
	        group.add(joinObserver);
	      });
	
	      return group;
	    });
	  };
	
	  var TimerObservable = (function(__super__) {
	    inherits(TimerObservable, __super__);
	    function TimerObservable(dt, s) {
	      this._dt = dt;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    TimerObservable.prototype.subscribeCore = function (o) {
	      return this._s.scheduleFuture(o, this._dt, scheduleMethod);
	    };
	
	    function scheduleMethod(s, o) {
	      o.onNext(0);
	      o.onCompleted();
	    }
	
	    return TimerObservable;
	  }(ObservableBase));
	
	  function _observableTimer(dueTime, scheduler) {
	    return new TimerObservable(dueTime, scheduler);
	  }
	
	  function observableTimerDateAndPeriod(dueTime, period, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      var d = dueTime, p = normalizeTime(period);
	      return scheduler.scheduleRecursiveFuture(0, d, function (count, self) {
	        if (p > 0) {
	          var now = scheduler.now();
	          d = new Date(d.getTime() + p);
	          d.getTime() <= now && (d = new Date(now + p));
	        }
	        observer.onNext(count);
	        self(count + 1, new Date(d));
	      });
	    });
	  }
	
	  function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
	    return dueTime === period ?
	      new AnonymousObservable(function (observer) {
	        return scheduler.schedulePeriodic(0, period, function (count) {
	          observer.onNext(count);
	          return count + 1;
	        });
	      }) :
	      observableDefer(function () {
	        return observableTimerDateAndPeriod(new Date(scheduler.now() + dueTime), period, scheduler);
	      });
	  }
	
	  /**
	   *  Returns an observable sequence that produces a value after each period.
	   *
	   * @example
	   *  1 - res = Rx.Observable.interval(1000);
	   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
	   *
	   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
	   * @returns {Observable} An observable sequence that produces a value after each period.
	   */
	  var observableinterval = Observable.interval = function (period, scheduler) {
	    return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : defaultScheduler);
	  };
	
	  /**
	   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.
	   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
	   */
	  var observableTimer = Observable.timer = function (dueTime, periodOrScheduler, scheduler) {
	    var period;
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    if (periodOrScheduler != null && typeof periodOrScheduler === 'number') {
	      period = periodOrScheduler;
	    } else if (isScheduler(periodOrScheduler)) {
	      scheduler = periodOrScheduler;
	    }
	    if ((dueTime instanceof Date || typeof dueTime === 'number') && period === undefined) {
	      return _observableTimer(dueTime, scheduler);
	    }
	    if (dueTime instanceof Date && period !== undefined) {
	      return observableTimerDateAndPeriod(dueTime, periodOrScheduler, scheduler);
	    }
	    return observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
	  };
	
	  function observableDelayRelative(source, dueTime, scheduler) {
	    return new AnonymousObservable(function (o) {
	      var active = false,
	        cancelable = new SerialDisposable(),
	        exception = null,
	        q = [],
	        running = false,
	        subscription;
	      subscription = source.materialize().timestamp(scheduler).subscribe(function (notification) {
	        var d, shouldRun;
	        if (notification.value.kind === 'E') {
	          q = [];
	          q.push(notification);
	          exception = notification.value.error;
	          shouldRun = !running;
	        } else {
	          q.push({ value: notification.value, timestamp: notification.timestamp + dueTime });
	          shouldRun = !active;
	          active = true;
	        }
	        if (shouldRun) {
	          if (exception !== null) {
	            o.onError(exception);
	          } else {
	            d = new SingleAssignmentDisposable();
	            cancelable.setDisposable(d);
	            d.setDisposable(scheduler.scheduleRecursiveFuture(null, dueTime, function (_, self) {
	              var e, recurseDueTime, result, shouldRecurse;
	              if (exception !== null) {
	                return;
	              }
	              running = true;
	              do {
	                result = null;
	                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
	                  result = q.shift().value;
	                }
	                if (result !== null) {
	                  result.accept(o);
	                }
	              } while (result !== null);
	              shouldRecurse = false;
	              recurseDueTime = 0;
	              if (q.length > 0) {
	                shouldRecurse = true;
	                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
	              } else {
	                active = false;
	              }
	              e = exception;
	              running = false;
	              if (e !== null) {
	                o.onError(e);
	              } else if (shouldRecurse) {
	                self(null, recurseDueTime);
	              }
	            }));
	          }
	        }
	      });
	      return new BinaryDisposable(subscription, cancelable);
	    }, source);
	  }
	
	  function observableDelayAbsolute(source, dueTime, scheduler) {
	    return observableDefer(function () {
	      return observableDelayRelative(source, dueTime - scheduler.now(), scheduler);
	    });
	  }
	
	  function delayWithSelector(source, subscriptionDelay, delayDurationSelector) {
	    var subDelay, selector;
	    if (isFunction(subscriptionDelay)) {
	      selector = subscriptionDelay;
	    } else {
	      subDelay = subscriptionDelay;
	      selector = delayDurationSelector;
	    }
	    return new AnonymousObservable(function (o) {
	      var delays = new CompositeDisposable(), atEnd = false, subscription = new SerialDisposable();
	
	      function start() {
	        subscription.setDisposable(source.subscribe(
	          function (x) {
	            var delay = tryCatch(selector)(x);
	            if (delay === errorObj) { return o.onError(delay.e); }
	            var d = new SingleAssignmentDisposable();
	            delays.add(d);
	            d.setDisposable(delay.subscribe(
	              function () {
	                o.onNext(x);
	                delays.remove(d);
	                done();
	              },
	              function (e) { o.onError(e); },
	              function () {
	                o.onNext(x);
	                delays.remove(d);
	                done();
	              }
	            ));
	          },
	          function (e) { o.onError(e); },
	          function () {
	            atEnd = true;
	            subscription.dispose();
	            done();
	          }
	        ));
	      }
	
	      function done () {
	        atEnd && delays.length === 0 && o.onCompleted();
	      }
	
	      if (!subDelay) {
	        start();
	      } else {
	        subscription.setDisposable(subDelay.subscribe(start, function (e) { o.onError(e); }, start));
	      }
	
	      return new BinaryDisposable(subscription, delays);
	    }, source);
	  }
	
	  /**
	   *  Time shifts the observable sequence by dueTime.
	   *  The relative time intervals between the values are preserved.
	   *
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
	   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delay = function () {
	    var firstArg = arguments[0];
	    if (typeof firstArg === 'number' || firstArg instanceof Date) {
	      var dueTime = firstArg, scheduler = arguments[1];
	      isScheduler(scheduler) || (scheduler = defaultScheduler);
	      return dueTime instanceof Date ?
	        observableDelayAbsolute(this, dueTime, scheduler) :
	        observableDelayRelative(this, dueTime, scheduler);
	    } else if (Observable.isObservable(firstArg) || isFunction(firstArg)) {
	      return delayWithSelector(this, firstArg, arguments[1]);
	    } else {
	      throw new Error('Invalid arguments');
	    }
	  };
	
	  var DebounceObservable = (function (__super__) {
	    inherits(DebounceObservable, __super__);
	    function DebounceObservable(source, dt, s) {
	      isScheduler(s) || (s = defaultScheduler);
	      this.source = source;
	      this._dt = dt;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    DebounceObservable.prototype.subscribeCore = function (o) {
	      var cancelable = new SerialDisposable();
	      return new BinaryDisposable(
	        this.source.subscribe(new DebounceObserver(o, this._dt, this._s, cancelable)),
	        cancelable);
	    };
	
	    return DebounceObservable;
	  }(ObservableBase));
	
	  var DebounceObserver = (function (__super__) {
	    inherits(DebounceObserver, __super__);
	    function DebounceObserver(observer, dueTime, scheduler, cancelable) {
	      this._o = observer;
	      this._d = dueTime;
	      this._scheduler = scheduler;
	      this._c = cancelable;
	      this._v = null;
	      this._hv = false;
	      this._id = 0;
	      __super__.call(this);
	    }
	
	    function scheduleFuture(s, state) {
	      state.self._hv && state.self._id === state.currentId && state.self._o.onNext(state.x);
	      state.self._hv = false;
	    }
	
	    DebounceObserver.prototype.next = function (x) {
	      this._hv = true;
	      this._v = x;
	      var currentId = ++this._id, d = new SingleAssignmentDisposable();
	      this._c.setDisposable(d);
	      d.setDisposable(this._scheduler.scheduleFuture(this, this._d, function (_, self) {
	        self._hv && self._id === currentId && self._o.onNext(x);
	        self._hv = false;
	      }));
	    };
	
	    DebounceObserver.prototype.error = function (e) {
	      this._c.dispose();
	      this._o.onError(e);
	      this._hv = false;
	      this._id++;
	    };
	
	    DebounceObserver.prototype.completed = function () {
	      this._c.dispose();
	      this._hv && this._o.onNext(this._v);
	      this._o.onCompleted();
	      this._hv = false;
	      this._id++;
	    };
	
	    return DebounceObserver;
	  }(AbstractObserver));
	
	  function debounceWithSelector(source, durationSelector) {
	    return new AnonymousObservable(function (o) {
	      var value, hasValue = false, cancelable = new SerialDisposable(), id = 0;
	      var subscription = source.subscribe(
	        function (x) {
	          var throttle = tryCatch(durationSelector)(x);
	          if (throttle === errorObj) { return o.onError(throttle.e); }
	
	          isPromise(throttle) && (throttle = observableFromPromise(throttle));
	
	          hasValue = true;
	          value = x;
	          id++;
	          var currentid = id, d = new SingleAssignmentDisposable();
	          cancelable.setDisposable(d);
	          d.setDisposable(throttle.subscribe(
	            function () {
	              hasValue && id === currentid && o.onNext(value);
	              hasValue = false;
	              d.dispose();
	            },
	            function (e) { o.onError(e); },
	            function () {
	              hasValue && id === currentid && o.onNext(value);
	              hasValue = false;
	              d.dispose();
	            }
	          ));
	        },
	        function (e) {
	          cancelable.dispose();
	          o.onError(e);
	          hasValue = false;
	          id++;
	        },
	        function () {
	          cancelable.dispose();
	          hasValue && o.onNext(value);
	          o.onCompleted();
	          hasValue = false;
	          id++;
	        }
	      );
	      return new BinaryDisposable(subscription, cancelable);
	    }, source);
	  }
	
	  observableProto.debounce = function () {
	    if (isFunction (arguments[0])) {
	      return debounceWithSelector(this, arguments[0]);
	    } else if (typeof arguments[0] === 'number') {
	      return new DebounceObservable(this, arguments[0], arguments[1]);
	    } else {
	      throw new Error('Invalid arguments');
	    }
	  };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
	   * @param {Number} timeSpan Length of each window (specified as an integer denoting milliseconds).
	   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTime = observableProto.windowTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	    var source = this, timeShift;
	    timeShiftOrScheduler == null && (timeShift = timeSpan);
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    if (typeof timeShiftOrScheduler === 'number') {
	      timeShift = timeShiftOrScheduler;
	    } else if (isScheduler(timeShiftOrScheduler)) {
	      timeShift = timeSpan;
	      scheduler = timeShiftOrScheduler;
	    }
	    return new AnonymousObservable(function (observer) {
	      var groupDisposable,
	        nextShift = timeShift,
	        nextSpan = timeSpan,
	        q = [],
	        refCountDisposable,
	        timerD = new SerialDisposable(),
	        totalTime = 0;
	        groupDisposable = new CompositeDisposable(timerD),
	        refCountDisposable = new RefCountDisposable(groupDisposable);
	
	       function createTimer () {
	        var m = new SingleAssignmentDisposable(),
	          isSpan = false,
	          isShift = false;
	        timerD.setDisposable(m);
	        if (nextSpan === nextShift) {
	          isSpan = true;
	          isShift = true;
	        } else if (nextSpan < nextShift) {
	            isSpan = true;
	        } else {
	          isShift = true;
	        }
	        var newTotalTime = isSpan ? nextSpan : nextShift,
	          ts = newTotalTime - totalTime;
	        totalTime = newTotalTime;
	        if (isSpan) {
	          nextSpan += timeShift;
	        }
	        if (isShift) {
	          nextShift += timeShift;
	        }
	        m.setDisposable(scheduler.scheduleFuture(null, ts, function () {
	          if (isShift) {
	            var s = new Subject();
	            q.push(s);
	            observer.onNext(addRef(s, refCountDisposable));
	          }
	          isSpan && q.shift().onCompleted();
	          createTimer();
	        }));
	      };
	      q.push(new Subject());
	      observer.onNext(addRef(q[0], refCountDisposable));
	      createTimer();
	      groupDisposable.add(source.subscribe(
	        function (x) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
	        },
	        function (e) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onError(e); }
	          observer.onError(e);
	        },
	        function () {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onCompleted(); }
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
	   * @param {Number} timeSpan Maximum time length of a window.
	   * @param {Number} count Maximum element count of a window.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTimeOrCount = observableProto.windowTimeOrCount = function (timeSpan, count, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new AnonymousObservable(function (observer) {
	      var timerD = new SerialDisposable(),
	          groupDisposable = new CompositeDisposable(timerD),
	          refCountDisposable = new RefCountDisposable(groupDisposable),
	          n = 0,
	          windowId = 0,
	          s = new Subject();
	
	      function createTimer(id) {
	        var m = new SingleAssignmentDisposable();
	        timerD.setDisposable(m);
	        m.setDisposable(scheduler.scheduleFuture(null, timeSpan, function () {
	          if (id !== windowId) { return; }
	          n = 0;
	          var newId = ++windowId;
	          s.onCompleted();
	          s = new Subject();
	          observer.onNext(addRef(s, refCountDisposable));
	          createTimer(newId);
	        }));
	      }
	
	      observer.onNext(addRef(s, refCountDisposable));
	      createTimer(0);
	
	      groupDisposable.add(source.subscribe(
	        function (x) {
	          var newId = 0, newWindow = false;
	          s.onNext(x);
	          if (++n === count) {
	            newWindow = true;
	            n = 0;
	            newId = ++windowId;
	            s.onCompleted();
	            s = new Subject();
	            observer.onNext(addRef(s, refCountDisposable));
	          }
	          newWindow && createTimer(newId);
	        },
	        function (e) {
	          s.onError(e);
	          observer.onError(e);
	        }, function () {
	          s.onCompleted();
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };
	
	  function toArray(x) { return x.toArray(); }
	
	  /**
	   *  Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
	   * @param {Number} timeSpan Length of each buffer (specified as an integer denoting milliseconds).
	   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive buffers (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.
	   * @param {Scheduler} [scheduler]  Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of buffers.
	   */
	  observableProto.bufferWithTime = observableProto.bufferTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	    return this.windowWithTime(timeSpan, timeShiftOrScheduler, scheduler).flatMap(toArray);
	  };
	
	  function toArray(x) { return x.toArray(); }
	
	  /**
	   *  Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.
	   * @param {Number} timeSpan Maximum time length of a buffer.
	   * @param {Number} count Maximum element count of a buffer.
	   * @param {Scheduler} [scheduler]  Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of buffers.
	   */
	  observableProto.bufferWithTimeOrCount = observableProto.bufferTimeOrCount = function (timeSpan, count, scheduler) {
	    return this.windowWithTimeOrCount(timeSpan, count, scheduler).flatMap(toArray);
	  };
	
	  var TimeIntervalObservable = (function (__super__) {
	    inherits(TimeIntervalObservable, __super__);
	    function TimeIntervalObservable(source, s) {
	      this.source = source;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    TimeIntervalObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new TimeIntervalObserver(o, this._s));
	    };
	
	    return TimeIntervalObservable;
	  }(ObservableBase));
	
	  var TimeIntervalObserver = (function (__super__) {
	    inherits(TimeIntervalObserver, __super__);
	
	    function TimeIntervalObserver(o, s) {
	      this._o = o;
	      this._s = s;
	      this._l = s.now();
	      __super__.call(this);
	    }
	
	    TimeIntervalObserver.prototype.next = function (x) {
	      var now = this._s.now(), span = now - this._l;
	      this._l = now;
	      this._o.onNext({ value: x, interval: span });
	    };
	    TimeIntervalObserver.prototype.error = function (e) { this._o.onError(e); };
	    TimeIntervalObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return TimeIntervalObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Records the time interval between consecutive values in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timeInterval();
	   *  2 - res = source.timeInterval(Rx.Scheduler.timeout);
	   *
	   * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with time interval information on values.
	   */
	  observableProto.timeInterval = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new TimeIntervalObservable(this, scheduler);
	  };
	
	  var TimestampObservable = (function (__super__) {
	    inherits(TimestampObservable, __super__);
	    function TimestampObservable(source, s) {
	      this.source = source;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    TimestampObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new TimestampObserver(o, this._s));
	    };
	
	    return TimestampObservable;
	  }(ObservableBase));
	
	  var TimestampObserver = (function (__super__) {
	    inherits(TimestampObserver, __super__);
	    function TimestampObserver(o, s) {
	      this._o = o;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    TimestampObserver.prototype.next = function (x) {
	      this._o.onNext({ value: x, timestamp: this._s.now() });
	    };
	
	    TimestampObserver.prototype.error = function (e) {
	      this._o.onError(e);
	    };
	
	    TimestampObserver.prototype.completed = function () {
	      this._o.onCompleted();
	    };
	
	    return TimestampObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Records the timestamp for each value in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
	   *  2 - res = source.timestamp(Rx.Scheduler.default);
	   *
	   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the default scheduler is used.
	   * @returns {Observable} An observable sequence with timestamp information on values.
	   */
	  observableProto.timestamp = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new TimestampObservable(this, scheduler);
	  };
	
	  var SampleObservable = (function(__super__) {
	    inherits(SampleObservable, __super__);
	    function SampleObservable(source, sampler) {
	      this.source = source;
	      this._sampler = sampler;
	      __super__.call(this);
	    }
	
	    SampleObservable.prototype.subscribeCore = function (o) {
	      var state = {
	        o: o,
	        atEnd: false,
	        value: null,
	        hasValue: false,
	        sourceSubscription: new SingleAssignmentDisposable()
	      };
	
	      state.sourceSubscription.setDisposable(this.source.subscribe(new SampleSourceObserver(state)));
	      return new BinaryDisposable(
	        state.sourceSubscription,
	        this._sampler.subscribe(new SamplerObserver(state))
	      );
	    };
	
	    return SampleObservable;
	  }(ObservableBase));
	
	  var SamplerObserver = (function(__super__) {
	    inherits(SamplerObserver, __super__);
	    function SamplerObserver(s) {
	      this._s = s;
	      __super__.call(this);
	    }
	
	    SamplerObserver.prototype._handleMessage = function () {
	      if (this._s.hasValue) {
	        this._s.hasValue = false;
	        this._s.o.onNext(this._s.value);
	      }
	      this._s.atEnd && this._s.o.onCompleted();
	    };
	
	    SamplerObserver.prototype.next = function () { this._handleMessage(); };
	    SamplerObserver.prototype.error = function (e) { this._s.onError(e); };
	    SamplerObserver.prototype.completed = function () { this._handleMessage(); };
	
	    return SamplerObserver;
	  }(AbstractObserver));
	
	  var SampleSourceObserver = (function(__super__) {
	    inherits(SampleSourceObserver, __super__);
	    function SampleSourceObserver(s) {
	      this._s = s;
	      __super__.call(this);
	    }
	
	    SampleSourceObserver.prototype.next = function (x) {
	      this._s.hasValue = true;
	      this._s.value = x;
	    };
	    SampleSourceObserver.prototype.error = function (e) { this._s.o.onError(e); };
	    SampleSourceObserver.prototype.completed = function () {
	      this._s.atEnd = true;
	      this._s.sourceSubscription.dispose();
	    };
	
	    return SampleSourceObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Samples the observable sequence at each interval.
	   *
	   * @example
	   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
	   *  2 - res = source.sample(5000); // 5 seconds
	   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
	   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Sampled observable sequence.
	   */
	  observableProto.sample = function (intervalOrSampler, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return typeof intervalOrSampler === 'number' ?
	      new SampleObservable(this, observableinterval(intervalOrSampler, scheduler)) :
	      new SampleObservable(this, intervalOrSampler);
	  };
	
	  var TimeoutError = Rx.TimeoutError = function(message) {
	    this.message = message || 'Timeout has occurred';
	    this.name = 'TimeoutError';
	    Error.call(this);
	  };
	  TimeoutError.prototype = Object.create(Error.prototype);
	
	  function timeoutWithSelector(source, firstTimeout, timeoutDurationSelector, other) {
	    if (isFunction(firstTimeout)) {
	      other = timeoutDurationSelector;
	      timeoutDurationSelector = firstTimeout;
	      firstTimeout = observableNever();
	    }
	    Observable.isObservable(other) || (other = observableThrow(new TimeoutError()));
	    return new AnonymousObservable(function (o) {
	      var subscription = new SerialDisposable(),
	        timer = new SerialDisposable(),
	        original = new SingleAssignmentDisposable();
	
	      subscription.setDisposable(original);
	
	      var id = 0, switched = false;
	
	      function setTimer(timeout) {
	        var myId = id, d = new SingleAssignmentDisposable();
	
	        function timerWins() {
	          switched = (myId === id);
	          return switched;
	        }
	
	        timer.setDisposable(d);
	        d.setDisposable(timeout.subscribe(function () {
	          timerWins() && subscription.setDisposable(other.subscribe(o));
	          d.dispose();
	        }, function (e) {
	          timerWins() && o.onError(e);
	        }, function () {
	          timerWins() && subscription.setDisposable(other.subscribe(o));
	        }));
	      };
	
	      setTimer(firstTimeout);
	
	      function oWins() {
	        var res = !switched;
	        if (res) { id++; }
	        return res;
	      }
	
	      original.setDisposable(source.subscribe(function (x) {
	        if (oWins()) {
	          o.onNext(x);
	          var timeout = tryCatch(timeoutDurationSelector)(x);
	          if (timeout === errorObj) { return o.onError(timeout.e); }
	          setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
	        }
	      }, function (e) {
	        oWins() && o.onError(e);
	      }, function () {
	        oWins() && o.onCompleted();
	      }));
	      return new BinaryDisposable(subscription, timer);
	    }, source);
	  }
	
	  function timeout(source, dueTime, other, scheduler) {
	    if (isScheduler(other)) {
	      scheduler = other;
	      other = observableThrow(new TimeoutError());
	    }
	    if (other instanceof Error) { other = observableThrow(other); }
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    Observable.isObservable(other) || (other = observableThrow(new TimeoutError()));
	    return new AnonymousObservable(function (o) {
	      var id = 0,
	        original = new SingleAssignmentDisposable(),
	        subscription = new SerialDisposable(),
	        switched = false,
	        timer = new SerialDisposable();
	
	      subscription.setDisposable(original);
	
	      function createTimer() {
	        var myId = id;
	        timer.setDisposable(scheduler.scheduleFuture(null, dueTime, function () {
	          switched = id === myId;
	          if (switched) {
	            isPromise(other) && (other = observableFromPromise(other));
	            subscription.setDisposable(other.subscribe(o));
	          }
	        }));
	      }
	
	      createTimer();
	
	      original.setDisposable(source.subscribe(function (x) {
	        if (!switched) {
	          id++;
	          o.onNext(x);
	          createTimer();
	        }
	      }, function (e) {
	        if (!switched) {
	          id++;
	          o.onError(e);
	        }
	      }, function () {
	        if (!switched) {
	          id++;
	          o.onCompleted();
	        }
	      }));
	      return new BinaryDisposable(subscription, timer);
	    }, source);
	  }
	
	  observableProto.timeout = function () {
	    var firstArg = arguments[0];
	    if (firstArg instanceof Date || typeof firstArg === 'number') {
	      return timeout(this, firstArg, arguments[1], arguments[2]);
	    } else if (Observable.isObservable(firstArg) || isFunction(firstArg)) {
	      return timeoutWithSelector(this, firstArg, arguments[1], arguments[2]);
	    } else {
	      throw new Error('Invalid arguments');
	    }
	  };
	
	  var GenerateAbsoluteObservable = (function (__super__) {
	    inherits(GenerateAbsoluteObservable, __super__);
	    function GenerateAbsoluteObservable(state, cndFn, itrFn, resFn, timeFn, s) {
	      this._state = state;
	      this._cndFn = cndFn;
	      this._itrFn = itrFn;
	      this._resFn = resFn;
	      this._timeFn = timeFn;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    function scheduleRecursive(state, recurse) {
	      state.hasResult && state.o.onNext(state.result);
	
	      if (state.first) {
	        state.first = false;
	      } else {
	        state.newState = tryCatch(state.self._itrFn)(state.newState);
	        if (state.newState === errorObj) { return state.o.onError(state.newState.e); }
	      }
	      state.hasResult = tryCatch(state.self._cndFn)(state.newState);
	      if (state.hasResult === errorObj) { return state.o.onError(state.hasResult.e); }
	      if (state.hasResult) {
	        state.result = tryCatch(state.self._resFn)(state.newState);
	        if (state.result === errorObj) { return state.o.onError(state.result.e); }
	        var time = tryCatch(state.self._timeFn)(state.newState);
	        if (time === errorObj) { return state.o.onError(time.e); }
	        recurse(state, time);
	      } else {
	        state.o.onCompleted();
	      }
	    }
	
	    GenerateAbsoluteObservable.prototype.subscribeCore = function (o) {
	      var state = {
	        o: o,
	        self: this,
	        newState: this._state,
	        first: true,
	        hasResult: false
	      };
	      return this._s.scheduleRecursiveFuture(state, new Date(this._s.now()), scheduleRecursive);
	    };
	
	    return GenerateAbsoluteObservable;
	  }(ObservableBase));
	
	  /**
	   *  GenerateAbsolutes an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithAbsoluteTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return new Date(); }
	   *  });
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithAbsoluteTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new GenerateAbsoluteObservable(initialState, condition, iterate, resultSelector, timeSelector, scheduler);
	  };
	
	  var GenerateRelativeObservable = (function (__super__) {
	    inherits(GenerateRelativeObservable, __super__);
	    function GenerateRelativeObservable(state, cndFn, itrFn, resFn, timeFn, s) {
	      this._state = state;
	      this._cndFn = cndFn;
	      this._itrFn = itrFn;
	      this._resFn = resFn;
	      this._timeFn = timeFn;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    function scheduleRecursive(state, recurse) {
	      state.hasResult && state.o.onNext(state.result);
	
	      if (state.first) {
	        state.first = false;
	      } else {
	        state.newState = tryCatch(state.self._itrFn)(state.newState);
	        if (state.newState === errorObj) { return state.o.onError(state.newState.e); }
	      }
	
	      state.hasResult = tryCatch(state.self._cndFn)(state.newState);
	      if (state.hasResult === errorObj) { return state.o.onError(state.hasResult.e); }
	      if (state.hasResult) {
	        state.result = tryCatch(state.self._resFn)(state.newState);
	        if (state.result === errorObj) { return state.o.onError(state.result.e); }
	        var time = tryCatch(state.self._timeFn)(state.newState);
	        if (time === errorObj) { return state.o.onError(time.e); }
	        recurse(state, time);
	      } else {
	        state.o.onCompleted();
	      }
	    }
	
	    GenerateRelativeObservable.prototype.subscribeCore = function (o) {
	      var state = {
	        o: o,
	        self: this,
	        newState: this._state,
	        first: true,
	        hasResult: false
	      };
	      return this._s.scheduleRecursiveFuture(state, 0, scheduleRecursive);
	    };
	
	    return GenerateRelativeObservable;
	  }(ObservableBase));
	
	  /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithRelativeTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return 500; }
	   *  );
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithRelativeTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new GenerateRelativeObservable(initialState, condition, iterate, resultSelector, timeSelector, scheduler);
	  };
	
	  var DelaySubscription = (function(__super__) {
	    inherits(DelaySubscription, __super__);
	    function DelaySubscription(source, dt, s) {
	      this.source = source;
	      this._dt = dt;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    DelaySubscription.prototype.subscribeCore = function (o) {
	      var d = new SerialDisposable();
	
	      d.setDisposable(this._s.scheduleFuture([this.source, o, d], this._dt, scheduleMethod));
	
	      return d;
	    };
	
	    function scheduleMethod(s, state) {
	      var source = state[0], o = state[1], d = state[2];
	      d.setDisposable(source.subscribe(o));
	    }
	
	    return DelaySubscription;
	  }(ObservableBase));
	
	  /**
	   *  Time shifts the observable sequence by delaying the subscription with the specified relative time duration, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.delaySubscription(5000); // 5s
	   *  2 - res = source.delaySubscription(5000, Rx.Scheduler.default); // 5 seconds
	   *
	   * @param {Number} dueTime Relative or absolute time shift of the subscription.
	   * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delaySubscription = function (dueTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new DelaySubscription(this, dueTime, scheduler);
	  };
	
	  var SkipLastWithTimeObservable = (function (__super__) {
	    inherits(SkipLastWithTimeObservable, __super__);
	    function SkipLastWithTimeObservable(source, d, s) {
	      this.source = source;
	      this._d = d;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    SkipLastWithTimeObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new SkipLastWithTimeObserver(o, this));
	    };
	
	    return SkipLastWithTimeObservable;
	  }(ObservableBase));
	
	  var SkipLastWithTimeObserver = (function (__super__) {
	    inherits(SkipLastWithTimeObserver, __super__);
	
	    function SkipLastWithTimeObserver(o, p) {
	      this._o = o;
	      this._s = p._s;
	      this._d = p._d;
	      this._q = [];
	      __super__.call(this);
	    }
	
	    SkipLastWithTimeObserver.prototype.next = function (x) {
	      var now = this._s.now();
	      this._q.push({ interval: now, value: x });
	      while (this._q.length > 0 && now - this._q[0].interval >= this._d) {
	        this._o.onNext(this._q.shift().value);
	      }
	    };
	    SkipLastWithTimeObserver.prototype.error = function (e) { this._o.onError(e); };
	    SkipLastWithTimeObserver.prototype.completed = function () {
	      var now = this._s.now();
	      while (this._q.length > 0 && now - this._q[0].interval >= this._d) {
	        this._o.onNext(this._q.shift().value);
	      }
	      this._o.onCompleted();
	    };
	
	    return SkipLastWithTimeObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for skipping elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.
	   */
	  observableProto.skipLastWithTime = function (duration, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new SkipLastWithTimeObservable(this, duration, scheduler);
	  };
	
	  var TakeLastWithTimeObservable = (function (__super__) {
	    inherits(TakeLastWithTimeObservable, __super__);
	    function TakeLastWithTimeObservable(source, d, s) {
	      this.source = source;
	      this._d = d;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    TakeLastWithTimeObservable.prototype.subscribeCore = function (o) {
	      return this.source.subscribe(new TakeLastWithTimeObserver(o, this._d, this._s));
	    };
	
	    return TakeLastWithTimeObservable;
	  }(ObservableBase));
	
	  var TakeLastWithTimeObserver = (function (__super__) {
	    inherits(TakeLastWithTimeObserver, __super__);
	
	    function TakeLastWithTimeObserver(o, d, s) {
	      this._o = o;
	      this._d = d;
	      this._s = s;
	      this._q = [];
	      __super__.call(this);
	    }
	
	    TakeLastWithTimeObserver.prototype.next = function (x) {
	      var now = this._s.now();
	      this._q.push({ interval: now, value: x });
	      while (this._q.length > 0 && now - this._q[0].interval >= this._d) {
	        this._q.shift();
	      }
	    };
	    TakeLastWithTimeObserver.prototype.error = function (e) { this._o.onError(e); };
	    TakeLastWithTimeObserver.prototype.completed = function () {
	      var now = this._s.now();
	      while (this._q.length > 0) {
	        var next = this._q.shift();
	        if (now - next.interval <= this._d) { this._o.onNext(next.value); }
	      }
	      this._o.onCompleted();
	    };
	
	    return TakeLastWithTimeObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastWithTime = function (duration, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new TakeLastWithTimeObservable(this, duration, scheduler);
	  };
	
	  /**
	   *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastBufferWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          q.shift();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now(), res = [];
	        while (q.length > 0) {
	          var next = q.shift();
	          now - next.interval <= duration && res.push(next.value);
	        }
	        o.onNext(res);
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  var TakeWithTimeObservable = (function (__super__) {
	    inherits(TakeWithTimeObservable, __super__);
	    function TakeWithTimeObservable(source, d, s) {
	      this.source = source;
	      this._d = d;
	      this._s = s;
	      __super__.call(this);
	    }
	
	    function scheduleMethod(s, o) {
	      o.onCompleted();
	    }
	
	    TakeWithTimeObservable.prototype.subscribeCore = function (o) {
	      return new BinaryDisposable(
	        this._s.scheduleFuture(o, this._d, scheduleMethod),
	        this.source.subscribe(o)
	      );
	    };
	
	    return TakeWithTimeObservable;
	  }(ObservableBase));
	
	  /**
	   *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.takeWithTime(5000,  [optional scheduler]);
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.
	   */
	  observableProto.takeWithTime = function (duration, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new TakeWithTimeObservable(this, duration, scheduler);
	  };
	
	  var SkipWithTimeObservable = (function (__super__) {
	    inherits(SkipWithTimeObservable, __super__);
	    function SkipWithTimeObservable(source, d, s) {
	      this.source = source;
	      this._d = d;
	      this._s = s;
	      this._open = false;
	      __super__.call(this);
	    }
	
	    function scheduleMethod(s, self) {
	      self._open = true;
	    }
	
	    SkipWithTimeObservable.prototype.subscribeCore = function (o) {
	      return new BinaryDisposable(
	        this._s.scheduleFuture(this, this._d, scheduleMethod),
	        this.source.subscribe(new SkipWithTimeObserver(o, this))
	      );
	    };
	
	    return SkipWithTimeObservable;
	  }(ObservableBase));
	
	  var SkipWithTimeObserver = (function (__super__) {
	    inherits(SkipWithTimeObserver, __super__);
	
	    function SkipWithTimeObserver(o, p) {
	      this._o = o;
	      this._p = p;
	      __super__.call(this);
	    }
	
	    SkipWithTimeObserver.prototype.next = function (x) { this._p._open && this._o.onNext(x); };
	    SkipWithTimeObserver.prototype.error = function (e) { this._o.onError(e); };
	    SkipWithTimeObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return SkipWithTimeObserver;
	  }(AbstractObserver));
	
	  /**
	   *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   * @description
	   *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.
	   *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
	   *  may not execute immediately, despite the zero due time.
	   *
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.
	   * @param {Number} duration Duration for skipping elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.
	   */
	  observableProto.skipWithTime = function (duration, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new SkipWithTimeObservable(this, duration, scheduler);
	  };
	
	  var SkipUntilWithTimeObservable = (function (__super__) {
	    inherits(SkipUntilWithTimeObservable, __super__);
	    function SkipUntilWithTimeObservable(source, startTime, scheduler) {
	      this.source = source;
	      this._st = startTime;
	      this._s = scheduler;
	      __super__.call(this);
	    }
	
	    function scheduleMethod(s, state) {
	      state._open = true;
	    }
	
	    SkipUntilWithTimeObservable.prototype.subscribeCore = function (o) {
	      this._open = false;
	      return new BinaryDisposable(
	        this._s.scheduleFuture(this, this._st, scheduleMethod),
	        this.source.subscribe(new SkipUntilWithTimeObserver(o, this))
	      );
	    };
	
	    return SkipUntilWithTimeObservable;
	  }(ObservableBase));
	
	  var SkipUntilWithTimeObserver = (function (__super__) {
	    inherits(SkipUntilWithTimeObserver, __super__);
	
	    function SkipUntilWithTimeObserver(o, p) {
	      this._o = o;
	      this._p = p;
	      __super__.call(this);
	    }
	
	    SkipUntilWithTimeObserver.prototype.next = function (x) { this._p._open && this._o.onNext(x); };
	    SkipUntilWithTimeObserver.prototype.error = function (e) { this._o.onError(e); };
	    SkipUntilWithTimeObserver.prototype.completed = function () { this._o.onCompleted(); };
	
	    return SkipUntilWithTimeObserver;
	  }(AbstractObserver));
	
	
	  /**
	   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.
	   *
	   * @examples
	   *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);
	   *  2 - res = source.skipUntilWithTime(5000, [scheduler]);
	   * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped until the specified start time.
	   */
	  observableProto.skipUntilWithTime = function (startTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    return new SkipUntilWithTimeObservable(this, startTime, scheduler);
	  };
	
	  /**
	   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
	   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on.
	   * @returns {Observable} An observable sequence with the elements taken until the specified end time.
	   */
	  observableProto.takeUntilWithTime = function (endTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return new BinaryDisposable(
	        scheduler.scheduleFuture(o, endTime, function (_, o) { o.onCompleted(); }),
	        source.subscribe(o));
	    }, source);
	  };
	
	  /**
	   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
	   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item
	   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
	   * @returns {Observable} An Observable that performs the throttle operation.
	   */
	  observableProto.throttle = function (windowDuration, scheduler) {
	    isScheduler(scheduler) || (scheduler = defaultScheduler);
	    var duration = +windowDuration || 0;
	    if (duration <= 0) { throw new RangeError('windowDuration cannot be less or equal zero.'); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var lastOnNext = 0;
	      return source.subscribe(
	        function (x) {
	          var now = scheduler.now();
	          if (lastOnNext === 0 || now - lastOnNext >= duration) {
	            lastOnNext = now;
	            o.onNext(x);
	          }
	        },function (e) { o.onError(e); }, function () { o.onCompleted(); }
	      );
	    }, source);
	  };
	
	  var TransduceObserver = (function (__super__) {
	    inherits(TransduceObserver, __super__);
	    function TransduceObserver(o, xform) {
	      this._o = o;
	      this._xform = xform;
	      __super__.call(this);
	    }
	
	    TransduceObserver.prototype.next = function (x) {
	      var res = tryCatch(this._xform['@@transducer/step']).call(this._xform, this._o, x);
	      if (res === errorObj) { this._o.onError(res.e); }
	    };
	
	    TransduceObserver.prototype.error = function (e) { this._o.onError(e); };
	
	    TransduceObserver.prototype.completed = function () {
	      this._xform['@@transducer/result'](this._o);
	    };
	
	    return TransduceObserver;
	  }(AbstractObserver));
	
	  function transformForObserver(o) {
	    return {
	      '@@transducer/init': function() {
	        return o;
	      },
	      '@@transducer/step': function(obs, input) {
	        return obs.onNext(input);
	      },
	      '@@transducer/result': function(obs) {
	        return obs.onCompleted();
	      }
	    };
	  }
	
	  /**
	   * Executes a transducer to transform the observable sequence
	   * @param {Transducer} transducer A transducer to execute
	   * @returns {Observable} An Observable sequence containing the results from the transducer.
	   */
	  observableProto.transduce = function(transducer) {
	    var source = this;
	    return new AnonymousObservable(function(o) {
	      var xform = transducer(transformForObserver(o));
	      return source.subscribe(new TransduceObserver(o, xform));
	    }, source);
	  };
	
	  var SwitchFirstObservable = (function (__super__) {
	    inherits(SwitchFirstObservable, __super__);
	    function SwitchFirstObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    SwitchFirstObservable.prototype.subscribeCore = function (o) {
	      var m = new SingleAssignmentDisposable(),
	        g = new CompositeDisposable(),
	        state = {
	          hasCurrent: false,
	          isStopped: false,
	          o: o,
	          g: g
	        };
	
	      g.add(m);
	      m.setDisposable(this.source.subscribe(new SwitchFirstObserver(state)));
	      return g;
	    };
	
	    return SwitchFirstObservable;
	  }(ObservableBase));
	
	  var SwitchFirstObserver = (function(__super__) {
	    inherits(SwitchFirstObserver, __super__);
	    function SwitchFirstObserver(state) {
	      this._s = state;
	      __super__.call(this);
	    }
	
	    SwitchFirstObserver.prototype.next = function (x) {
	      if (!this._s.hasCurrent) {
	        this._s.hasCurrent = true;
	        isPromise(x) && (x = observableFromPromise(x));
	        var inner = new SingleAssignmentDisposable();
	        this._s.g.add(inner);
	        inner.setDisposable(x.subscribe(new InnerObserver(this._s, inner)));
	      }
	    };
	
	    SwitchFirstObserver.prototype.error = function (e) {
	      this._s.o.onError(e);
	    };
	
	    SwitchFirstObserver.prototype.completed = function () {
	      this._s.isStopped = true;
	      !this._s.hasCurrent && this._s.g.length === 1 && this._s.o.onCompleted();
	    };
	
	    inherits(InnerObserver, __super__);
	    function InnerObserver(state, inner) {
	      this._s = state;
	      this._i = inner;
	      __super__.call(this);
	    }
	
	    InnerObserver.prototype.next = function (x) { this._s.o.onNext(x); };
	    InnerObserver.prototype.error = function (e) { this._s.o.onError(e); };
	    InnerObserver.prototype.completed = function () {
	      this._s.g.remove(this._i);
	      this._s.hasCurrent = false;
	      this._s.isStopped && this._s.g.length === 1 && this._s.o.onCompleted();
	    };
	
	    return SwitchFirstObserver;
	  }(AbstractObserver));
	
	  /**
	   * Performs a exclusive waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.
	   */
	  observableProto.switchFirst = function () {
	    return new SwitchFirstObservable(this);
	  };
	
	observableProto.flatMapFirst = observableProto.exhaustMap = function(selector, resultSelector, thisArg) {
	    return new FlatMapObservable(this, selector, resultSelector, thisArg).switchFirst();
	};
	
	observableProto.flatMapWithMaxConcurrent = observableProto.flatMapMaxConcurrent = function(limit, selector, resultSelector, thisArg) {
	    return new FlatMapObservable(this, selector, resultSelector, thisArg).merge(limit);
	};
	
	  /** Provides a set of extension methods for virtual time scheduling. */
	  var VirtualTimeScheduler = Rx.VirtualTimeScheduler = (function (__super__) {
	    inherits(VirtualTimeScheduler, __super__);
	
	    /**
	     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
	     *
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function VirtualTimeScheduler(initialClock, comparer) {
	      this.clock = initialClock;
	      this.comparer = comparer;
	      this.isEnabled = false;
	      this.queue = new PriorityQueue(1024);
	      __super__.call(this);
	    }
	
	    var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;
	
	    VirtualTimeSchedulerPrototype.now = function () {
	      return this.toAbsoluteTime(this.clock);
	    };
	
	    VirtualTimeSchedulerPrototype.schedule = function (state, action) {
	      return this.scheduleAbsolute(state, this.clock, action);
	    };
	
	    VirtualTimeSchedulerPrototype.scheduleFuture = function (state, dueTime, action) {
	      var dt = dueTime instanceof Date ?
	        this.toRelativeTime(dueTime - this.now()) :
	        this.toRelativeTime(dueTime);
	
	      return this.scheduleRelative(state, dt, action);
	    };
	
	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    VirtualTimeSchedulerPrototype.add = notImplemented;
	
	    /**
	     * Converts an absolute time to a number
	     * @param {Any} The absolute time.
	     * @returns {Number} The absolute time in ms
	     */
	    VirtualTimeSchedulerPrototype.toAbsoluteTime = notImplemented;
	
	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    VirtualTimeSchedulerPrototype.toRelativeTime = notImplemented;
	
	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.schedulePeriodic = function (state, period, action) {
	      var s = new SchedulePeriodicRecursive(this, state, period, action);
	      return s.start();
	    };
	
	    /**
	     * Schedules an action to be executed after dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleRelative = function (state, dueTime, action) {
	      var runAt = this.add(this.clock, dueTime);
	      return this.scheduleAbsolute(state, runAt, action);
	    };
	
	    /**
	     * Starts the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.start = function () {
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	      }
	    };
	
	    /**
	     * Stops the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.stop = function () {
	      this.isEnabled = false;
	    };
	
	    /**
	     * Advances the scheduler's clock to the specified time, running all work till that point.
	     * @param {Number} time Absolute time to advance the scheduler's clock to.
	     */
	    VirtualTimeSchedulerPrototype.advanceTo = function (time) {
	      var dueToClock = this.comparer(this.clock, time);
	      if (this.comparer(this.clock, time) > 0) { throw new ArgumentOutOfRangeError(); }
	      if (dueToClock === 0) { return; }
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null && this.comparer(next.dueTime, time) <= 0) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	        this.clock = time;
	      }
	    };
	
	    /**
	     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.advanceBy = function (time) {
	      var dt = this.add(this.clock, time),
	          dueToClock = this.comparer(this.clock, dt);
	      if (dueToClock > 0) { throw new ArgumentOutOfRangeError(); }
	      if (dueToClock === 0) {  return; }
	
	      this.advanceTo(dt);
	    };
	
	    /**
	     * Advances the scheduler's clock by the specified relative time.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.sleep = function (time) {
	      var dt = this.add(this.clock, time);
	      if (this.comparer(this.clock, dt) >= 0) { throw new ArgumentOutOfRangeError(); }
	
	      this.clock = dt;
	    };
	
	    /**
	     * Gets the next scheduled item to be executed.
	     * @returns {ScheduledItem} The next scheduled item.
	     */
	    VirtualTimeSchedulerPrototype.getNext = function () {
	      while (this.queue.length > 0) {
	        var next = this.queue.peek();
	        if (next.isCancelled()) {
	          this.queue.dequeue();
	        } else {
	          return next;
	        }
	      }
	      return null;
	    };
	
	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleAbsolute = function (state, dueTime, action) {
	      var self = this;
	
	      function run(scheduler, state1) {
	        self.queue.remove(si);
	        return action(scheduler, state1);
	      }
	
	      var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
	      this.queue.enqueue(si);
	
	      return si.disposable;
	    };
	
	    return VirtualTimeScheduler;
	  }(Scheduler));
	
	  /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */
	  Rx.HistoricalScheduler = (function (__super__) {
	    inherits(HistoricalScheduler, __super__);
	
	    /**
	     * Creates a new historical scheduler with the specified initial clock value.
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function HistoricalScheduler(initialClock, comparer) {
	      var clock = initialClock == null ? 0 : initialClock;
	      var cmp = comparer || defaultSubComparer;
	      __super__.call(this, clock, cmp);
	    }
	
	    var HistoricalSchedulerProto = HistoricalScheduler.prototype;
	
	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    HistoricalSchedulerProto.add = function (absolute, relative) {
	      return absolute + relative;
	    };
	
	    HistoricalSchedulerProto.toAbsoluteTime = function (absolute) {
	      return new Date(absolute).getTime();
	    };
	
	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @memberOf HistoricalScheduler
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    HistoricalSchedulerProto.toRelativeTime = function (timeSpan) {
	      return timeSpan;
	    };
	
	    return HistoricalScheduler;
	  }(Rx.VirtualTimeScheduler));
	
	function OnNextPredicate(predicate) {
	    this.predicate = predicate;
	}
	
	OnNextPredicate.prototype.equals = function (other) {
	  if (other === this) { return true; }
	  if (other == null) { return false; }
	  if (other.kind !== 'N') { return false; }
	  return this.predicate(other.value);
	};
	
	function OnErrorPredicate(predicate) {
	  this.predicate = predicate;
	}
	
	OnErrorPredicate.prototype.equals = function (other) {
	  if (other === this) { return true; }
	  if (other == null) { return false; }
	  if (other.kind !== 'E') { return false; }
	  return this.predicate(other.error);
	};
	
	var ReactiveTest = Rx.ReactiveTest = {
	  /** Default virtual time used for creation of observable sequences in unit tests. */
	  created: 100,
	  /** Default virtual time used to subscribe to observable sequences in unit tests. */
	  subscribed: 200,
	  /** Default virtual time used to dispose subscriptions in unit tests. */
	  disposed: 1000,
	
	  /**
	   * Factory method for an OnNext notification record at a given time with a given value or a predicate function.
	   *
	   * 1 - ReactiveTest.onNext(200, 42);
	   * 2 - ReactiveTest.onNext(200, function (x) { return x.length == 2; });
	   *
	   * @param ticks Recorded virtual time the OnNext notification occurs.
	   * @param value Recorded value stored in the OnNext notification or a predicate.
	   * @return Recorded OnNext notification.
	   */
	  onNext: function (ticks, value) {
	    return typeof value === 'function' ?
	      new Recorded(ticks, new OnNextPredicate(value)) :
	      new Recorded(ticks, Notification.createOnNext(value));
	  },
	  /**
	   * Factory method for an OnError notification record at a given time with a given error.
	   *
	   * 1 - ReactiveTest.onNext(200, new Error('error'));
	   * 2 - ReactiveTest.onNext(200, function (e) { return e.message === 'error'; });
	   *
	   * @param ticks Recorded virtual time the OnError notification occurs.
	   * @param exception Recorded exception stored in the OnError notification.
	   * @return Recorded OnError notification.
	   */
	  onError: function (ticks, error) {
	    return typeof error === 'function' ?
	      new Recorded(ticks, new OnErrorPredicate(error)) :
	      new Recorded(ticks, Notification.createOnError(error));
	  },
	  /**
	   * Factory method for an OnCompleted notification record at a given time.
	   *
	   * @param ticks Recorded virtual time the OnCompleted notification occurs.
	   * @return Recorded OnCompleted notification.
	   */
	  onCompleted: function (ticks) {
	    return new Recorded(ticks, Notification.createOnCompleted());
	  },
	  /**
	   * Factory method for a subscription record based on a given subscription and disposal time.
	   *
	   * @param start Virtual time indicating when the subscription was created.
	   * @param end Virtual time indicating when the subscription was disposed.
	   * @return Subscription object.
	   */
	  subscribe: function (start, end) {
	    return new Subscription(start, end);
	  }
	};
	
	  /**
	   * Creates a new object recording the production of the specified value at the given virtual time.
	   *
	   * @constructor
	   * @param {Number} time Virtual time the value was produced on.
	   * @param {Mixed} value Value that was produced.
	   * @param {Function} comparer An optional comparer.
	   */
	  var Recorded = Rx.Recorded = function (time, value, comparer) {
	    this.time = time;
	    this.value = value;
	    this.comparer = comparer || defaultComparer;
	  };
	
	  /**
	   * Checks whether the given recorded object is equal to the current instance.
	   *
	   * @param {Recorded} other Recorded object to check for equality.
	   * @returns {Boolean} true if both objects are equal; false otherwise.
	   */
	  Recorded.prototype.equals = function (other) {
	    return this.time === other.time && this.comparer(this.value, other.value);
	  };
	
	  /**
	   * Returns a string representation of the current Recorded value.
	   *
	   * @returns {String} String representation of the current Recorded value.
	   */
	  Recorded.prototype.toString = function () {
	    return this.value.toString() + '@' + this.time;
	  };
	
	  /**
	   * Creates a new subscription object with the given virtual subscription and unsubscription time.
	   *
	   * @constructor
	   * @param {Number} subscribe Virtual time at which the subscription occurred.
	   * @param {Number} unsubscribe Virtual time at which the unsubscription occurred.
	   */
	  var Subscription = Rx.Subscription = function (start, end) {
	    this.subscribe = start;
	    this.unsubscribe = end || Number.MAX_VALUE;
	  };
	
	  /**
	   * Checks whether the given subscription is equal to the current instance.
	   * @param other Subscription object to check for equality.
	   * @returns {Boolean} true if both objects are equal; false otherwise.
	   */
	  Subscription.prototype.equals = function (other) {
	    return this.subscribe === other.subscribe && this.unsubscribe === other.unsubscribe;
	  };
	
	  /**
	   * Returns a string representation of the current Subscription value.
	   * @returns {String} String representation of the current Subscription value.
	   */
	  Subscription.prototype.toString = function () {
	    return '(' + this.subscribe + ', ' + (this.unsubscribe === Number.MAX_VALUE ? 'Infinite' : this.unsubscribe) + ')';
	  };
	
	  var MockDisposable = Rx.MockDisposable = function (scheduler) {
	    this.scheduler = scheduler;
	    this.disposes = [];
	    this.disposes.push(this.scheduler.clock);
	  };
	
	  MockDisposable.prototype.dispose = function () {
	    this.disposes.push(this.scheduler.clock);
	  };
	
	  var MockObserver = (function (__super__) {
	    inherits(MockObserver, __super__);
	
	    function MockObserver(scheduler) {
	      __super__.call(this);
	      this.scheduler = scheduler;
	      this.messages = [];
	    }
	
	    var MockObserverPrototype = MockObserver.prototype;
	
	    MockObserverPrototype.onNext = function (value) {
	      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnNext(value)));
	    };
	
	    MockObserverPrototype.onError = function (e) {
	      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnError(e)));
	    };
	
	    MockObserverPrototype.onCompleted = function () {
	      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnCompleted()));
	    };
	
	    return MockObserver;
	  })(Observer);
	
	  function MockPromise(scheduler, messages) {
	    var self = this;
	    this.scheduler = scheduler;
	    this.messages = messages;
	    this.subscriptions = [];
	    this.observers = [];
	    for (var i = 0, len = this.messages.length; i < len; i++) {
	      var message = this.messages[i],
	          notification = message.value;
	      (function (innerNotification) {
	        scheduler.scheduleAbsolute(null, message.time, function () {
	          var obs = self.observers.slice(0);
	
	          for (var j = 0, jLen = obs.length; j < jLen; j++) {
	            innerNotification.accept(obs[j]);
	          }
	          return disposableEmpty;
	        });
	      })(notification);
	    }
	  }
	
	  MockPromise.prototype.then = function (onResolved, onRejected) {
	    var self = this;
	
	    this.subscriptions.push(new Subscription(this.scheduler.clock));
	    var index = this.subscriptions.length - 1;
	
	    var newPromise;
	
	    var observer = Rx.Observer.create(
	      function (x) {
	        var retValue = onResolved(x);
	        if (retValue && typeof retValue.then === 'function') {
	          newPromise = retValue;
	        } else {
	          var ticks = self.scheduler.clock;
	          newPromise = new MockPromise(self.scheduler, [Rx.ReactiveTest.onNext(ticks, undefined), Rx.ReactiveTest.onCompleted(ticks)]);
	        }
	        var idx = self.observers.indexOf(observer);
	        self.observers.splice(idx, 1);
	        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);
	      },
	      function (err) {
	        onRejected(err);
	        var idx = self.observers.indexOf(observer);
	        self.observers.splice(idx, 1);
	        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);
	      }
	    );
	    this.observers.push(observer);
	
	    return newPromise || new MockPromise(this.scheduler, this.messages);
	  };
	
	  var HotObservable = (function (__super__) {
	    inherits(HotObservable, __super__);
	
	    function HotObservable(scheduler, messages) {
	      __super__.call(this);
	      var message, notification, observable = this;
	      this.scheduler = scheduler;
	      this.messages = messages;
	      this.subscriptions = [];
	      this.observers = [];
	      for (var i = 0, len = this.messages.length; i < len; i++) {
	        message = this.messages[i];
	        notification = message.value;
	        (function (innerNotification) {
	          scheduler.scheduleAbsolute(null, message.time, function () {
	            var obs = observable.observers.slice(0);
	
	            for (var j = 0, jLen = obs.length; j < jLen; j++) {
	              innerNotification.accept(obs[j]);
	            }
	            return disposableEmpty;
	          });
	        })(notification);
	      }
	    }
	
	    HotObservable.prototype._subscribe = function (o) {
	      var observable = this;
	      this.observers.push(o);
	      this.subscriptions.push(new Subscription(this.scheduler.clock));
	      var index = this.subscriptions.length - 1;
	      return disposableCreate(function () {
	        var idx = observable.observers.indexOf(o);
	        observable.observers.splice(idx, 1);
	        observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);
	      });
	    };
	
	    return HotObservable;
	  })(Observable);
	
	  var ColdObservable = (function (__super__) {
	    inherits(ColdObservable, __super__);
	
	    function ColdObservable(scheduler, messages) {
	      __super__.call(this);
	      this.scheduler = scheduler;
	      this.messages = messages;
	      this.subscriptions = [];
	    }
	
	    ColdObservable.prototype._subscribe = function (o) {
	      var message, notification, observable = this;
	      this.subscriptions.push(new Subscription(this.scheduler.clock));
	      var index = this.subscriptions.length - 1;
	      var d = new CompositeDisposable();
	      for (var i = 0, len = this.messages.length; i < len; i++) {
	        message = this.messages[i];
	        notification = message.value;
	        (function (innerNotification) {
	          d.add(observable.scheduler.scheduleRelative(null, message.time, function () {
	            innerNotification.accept(o);
	            return disposableEmpty;
	          }));
	        })(notification);
	      }
	      return disposableCreate(function () {
	        observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);
	        d.dispose();
	      });
	    };
	
	    return ColdObservable;
	  })(Observable);
	
	  /** Virtual time scheduler used for testing applications and libraries built using Reactive Extensions. */
	  Rx.TestScheduler = (function (__super__) {
	    inherits(TestScheduler, __super__);
	
	    function baseComparer(x, y) {
	      return x > y ? 1 : (x < y ? -1 : 0);
	    }
	
	    function TestScheduler() {
	      __super__.call(this, 0, baseComparer);
	    }
	
	    /**
	     * Schedules an action to be executed at the specified virtual time.
	     *
	     * @param state State passed to the action to be executed.
	     * @param dueTime Absolute virtual time at which to execute the action.
	     * @param action Action to be executed.
	     * @return Disposable object used to cancel the scheduled action (best effort).
	     */
	    TestScheduler.prototype.scheduleAbsolute = function (state, dueTime, action) {
	      dueTime <= this.clock && (dueTime = this.clock + 1);
	      return __super__.prototype.scheduleAbsolute.call(this, state, dueTime, action);
	    };
	    /**
	     * Adds a relative virtual time to an absolute virtual time value.
	     *
	     * @param absolute Absolute virtual time value.
	     * @param relative Relative virtual time value to add.
	     * @return Resulting absolute virtual time sum value.
	     */
	    TestScheduler.prototype.add = function (absolute, relative) {
	      return absolute + relative;
	    };
	    /**
	     * Converts the absolute virtual time value to a DateTimeOffset value.
	     *
	     * @param absolute Absolute virtual time value to convert.
	     * @return Corresponding DateTimeOffset value.
	     */
	    TestScheduler.prototype.toAbsoluteTime = function (absolute) {
	      return new Date(absolute).getTime();
	    };
	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     *
	     * @param timeSpan TimeSpan value to convert.
	     * @return Corresponding relative virtual time value.
	     */
	    TestScheduler.prototype.toRelativeTime = function (timeSpan) {
	      return timeSpan;
	    };
	    /**
	     * Starts the test scheduler and uses the specified virtual times to invoke the factory function, subscribe to the resulting sequence, and dispose the subscription.
	     *
	     * @param create Factory method to create an observable sequence.
	     * @param created Virtual time at which to invoke the factory to create an observable sequence.
	     * @param subscribed Virtual time at which to subscribe to the created observable sequence.
	     * @param disposed Virtual time at which to dispose the subscription.
	     * @return Observer with timestamped recordings of notification messages that were received during the virtual time window when the subscription to the source sequence was active.
	     */
	    TestScheduler.prototype.startScheduler = function (createFn, settings) {
	      settings || (settings = {});
	      settings.created == null && (settings.created = ReactiveTest.created);
	      settings.subscribed == null && (settings.subscribed = ReactiveTest.subscribed);
	      settings.disposed == null && (settings.disposed = ReactiveTest.disposed);
	
	      var observer = this.createObserver(), source, subscription;
	
	      this.scheduleAbsolute(null, settings.created, function () {
	        source = createFn();
	        return disposableEmpty;
	      });
	
	      this.scheduleAbsolute(null, settings.subscribed, function () {
	        subscription = source.subscribe(observer);
	        return disposableEmpty;
	      });
	
	      this.scheduleAbsolute(null, settings.disposed, function () {
	        subscription.dispose();
	        return disposableEmpty;
	      });
	
	      this.start();
	
	      return observer;
	    };
	
	    /**
	     * Creates a hot observable using the specified timestamped notification messages either as an array or arguments.
	     * @param messages Notifications to surface through the created sequence at their specified absolute virtual times.
	     * @return Hot observable sequence that can be used to assert the timing of subscriptions and notifications.
	     */
	    TestScheduler.prototype.createHotObservable = function () {
	      var len = arguments.length, args;
	      if (Array.isArray(arguments[0])) {
	        args = arguments[0];
	      } else {
	        args = new Array(len);
	        for (var i = 0; i < len; i++) { args[i] = arguments[i]; }
	      }
	      return new HotObservable(this, args);
	    };
	
	    /**
	     * Creates a cold observable using the specified timestamped notification messages either as an array or arguments.
	     * @param messages Notifications to surface through the created sequence at their specified virtual time offsets from the sequence subscription time.
	     * @return Cold observable sequence that can be used to assert the timing of subscriptions and notifications.
	     */
	    TestScheduler.prototype.createColdObservable = function () {
	      var len = arguments.length, args;
	      if (Array.isArray(arguments[0])) {
	        args = arguments[0];
	      } else {
	        args = new Array(len);
	        for (var i = 0; i < len; i++) { args[i] = arguments[i]; }
	      }
	      return new ColdObservable(this, args);
	    };
	
	    /**
	     * Creates a resolved promise with the given value and ticks
	     * @param {Number} ticks The absolute time of the resolution.
	     * @param {Any} value The value to yield at the given tick.
	     * @returns {MockPromise} A mock Promise which fulfills with the given value.
	     */
	    TestScheduler.prototype.createResolvedPromise = function (ticks, value) {
	      return new MockPromise(this, [Rx.ReactiveTest.onNext(ticks, value), Rx.ReactiveTest.onCompleted(ticks)]);
	    };
	
	    /**
	     * Creates a rejected promise with the given reason and ticks
	     * @param {Number} ticks The absolute time of the resolution.
	     * @param {Any} reason The reason for rejection to yield at the given tick.
	     * @returns {MockPromise} A mock Promise which rejects with the given reason.
	     */
	    TestScheduler.prototype.createRejectedPromise = function (ticks, reason) {
	      return new MockPromise(this, [Rx.ReactiveTest.onError(ticks, reason)]);
	    };
	
	    /**
	     * Creates an observer that records received notification messages and timestamps those.
	     * @return Observer that can be used to assert the timing of received notifications.
	     */
	    TestScheduler.prototype.createObserver = function () {
	      return new MockObserver(this);
	    };
	
	    return TestScheduler;
	  })(VirtualTimeScheduler);
	
	  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) {
	    inherits(AnonymousObservable, __super__);
	
	    // Fix subscriber to check for undefined or function returned to decorate as Disposable
	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber :
	        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }
	
	    function setDisposable(s, state) {
	      var ado = state[0], self = state[1];
	      var sub = tryCatch(self.__subscribe).call(self, ado);
	      if (sub === errorObj && !ado.fail(errorObj.e)) { thrower(errorObj.e); }
	      ado.setDisposable(fixSubscriber(sub));
	    }
	
	    function AnonymousObservable(subscribe, parent) {
	      this.source = parent;
	      this.__subscribe = subscribe;
	      __super__.call(this);
	    }
	
	    AnonymousObservable.prototype._subscribe = function (o) {
	      var ado = new AutoDetachObserver(o), state = [ado, this];
	
	      if (currentThreadScheduler.scheduleRequired()) {
	        currentThreadScheduler.schedule(state, setDisposable);
	      } else {
	        setDisposable(null, state);
	      }
	      return ado;
	    };
	
	    return AnonymousObservable;
	
	  }(Observable));
	
	  var AutoDetachObserver = (function (__super__) {
	    inherits(AutoDetachObserver, __super__);
	
	    function AutoDetachObserver(observer) {
	      __super__.call(this);
	      this.observer = observer;
	      this.m = new SingleAssignmentDisposable();
	    }
	
	    var AutoDetachObserverPrototype = AutoDetachObserver.prototype;
	
	    AutoDetachObserverPrototype.next = function (value) {
	      var result = tryCatch(this.observer.onNext).call(this.observer, value);
	      if (result === errorObj) {
	        this.dispose();
	        thrower(result.e);
	      }
	    };
	
	    AutoDetachObserverPrototype.error = function (err) {
	      var result = tryCatch(this.observer.onError).call(this.observer, err);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };
	
	    AutoDetachObserverPrototype.completed = function () {
	      var result = tryCatch(this.observer.onCompleted).call(this.observer);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };
	
	    AutoDetachObserverPrototype.setDisposable = function (value) { this.m.setDisposable(value); };
	    AutoDetachObserverPrototype.getDisposable = function () { return this.m.getDisposable(); };
	
	    AutoDetachObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.m.dispose();
	    };
	
	    return AutoDetachObserver;
	  }(AbstractObserver));
	
	  var UnderlyingObservable = (function (__super__) {
	    inherits(UnderlyingObservable, __super__);
	    function UnderlyingObservable(m, u) {
	      this._m = m;
	      this._u = u;
	      __super__.call(this);
	    }
	
	    UnderlyingObservable.prototype.subscribeCore = function (o) {
	      return new BinaryDisposable(this._m.getDisposable(), this._u.subscribe(o));
	    };
	
	    return UnderlyingObservable;
	  }(ObservableBase));
	
	  var GroupedObservable = (function (__super__) {
	    inherits(GroupedObservable, __super__);
	    function GroupedObservable(key, underlyingObservable, mergedDisposable) {
	      __super__.call(this);
	      this.key = key;
	      this.underlyingObservable = !mergedDisposable ?
	        underlyingObservable :
	        new UnderlyingObservable(mergedDisposable, underlyingObservable);
	    }
	
	    GroupedObservable.prototype._subscribe = function (o) {
	      return this.underlyingObservable.subscribe(o);
	    };
	
	    return GroupedObservable;
	  }(Observable));
	
	  /**
	   *  Represents an object that is both an observable sequence as well as an observer.
	   *  Each notification is broadcasted to all subscribed observers.
	   */
	  var Subject = Rx.Subject = (function (__super__) {
	    inherits(Subject, __super__);
	    function Subject() {
	      __super__.call(this);
	      this.isDisposed = false;
	      this.isStopped = false;
	      this.observers = [];
	      this.hasError = false;
	    }
	
	    addProperties(Subject.prototype, Observer.prototype, {
	      _subscribe: function (o) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.observers.push(o);
	          return new InnerSubscription(this, o);
	        }
	        if (this.hasError) {
	          o.onError(this.error);
	          return disposableEmpty;
	        }
	        o.onCompleted();
	        return disposableEmpty;
	      },
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onCompleted();
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.error = error;
	          this.hasError = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onNext(value);
	          }
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });
	
	    /**
	     * Creates a subject from the specified observer and observable.
	     * @param {Observer} observer The observer used to send messages to the subject.
	     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
	     * @returns {Subject} Subject implemented using the given observer and observable.
	     */
	    Subject.create = function (observer, observable) {
	      return new AnonymousSubject(observer, observable);
	    };
	
	    return Subject;
	  }(Observable));
	
	  /**
	   *  Represents the result of an asynchronous operation.
	   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
	   */
	  var AsyncSubject = Rx.AsyncSubject = (function (__super__) {
	    inherits(AsyncSubject, __super__);
	
	    /**
	     * Creates a subject that can only receive one value and that value is cached for all future observations.
	     * @constructor
	     */
	    function AsyncSubject() {
	      __super__.call(this);
	      this.isDisposed = false;
	      this.isStopped = false;
	      this.hasValue = false;
	      this.observers = [];
	      this.hasError = false;
	    }
	
	    addProperties(AsyncSubject.prototype, Observer.prototype, {
	      _subscribe: function (o) {
	        checkDisposed(this);
	
	        if (!this.isStopped) {
	          this.observers.push(o);
	          return new InnerSubscription(this, o);
	        }
	
	        if (this.hasError) {
	          o.onError(this.error);
	        } else if (this.hasValue) {
	          o.onNext(this.value);
	          o.onCompleted();
	        } else {
	          o.onCompleted();
	        }
	
	        return disposableEmpty;
	      },
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
	      /**
	       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
	       */
	      onCompleted: function () {
	        var i, len;
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          var os = cloneArray(this.observers), len = os.length;
	
	          if (this.hasValue) {
	            for (i = 0; i < len; i++) {
	              var o = os[i];
	              o.onNext(this.value);
	              o.onCompleted();
	            }
	          } else {
	            for (i = 0; i < len; i++) {
	              os[i].onCompleted();
	            }
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the error.
	       * @param {Mixed} error The Error to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.hasError = true;
	          this.error = error;
	
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
	       * @param {Mixed} value The value to store in the subject.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.value = value;
	        this.hasValue = true;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	        this.error = null;
	        this.value = null;
	      }
	    });
	
	    return AsyncSubject;
	  }(Observable));
	
	  /**
	   *  Represents a value that changes over time.
	   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
	   */
	  var BehaviorSubject = Rx.BehaviorSubject = (function (__super__) {
	    inherits(BehaviorSubject, __super__);
	    function BehaviorSubject(value) {
	      __super__.call(this);
	      this.value = value;
	      this.observers = [];
	      this.isDisposed = false;
	      this.isStopped = false;
	      this.hasError = false;
	    }
	
	    addProperties(BehaviorSubject.prototype, Observer.prototype, {
	      _subscribe: function (o) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.observers.push(o);
	          o.onNext(this.value);
	          return new InnerSubscription(this, o);
	        }
	        if (this.hasError) {
	          o.onError(this.error);
	        } else {
	          o.onCompleted();
	        }
	        return disposableEmpty;
	      },
	      /**
	       * Gets the current value or throws an exception.
	       * Value is frozen after onCompleted is called.
	       * After onError is called always throws the specified exception.
	       * An exception is always thrown after dispose is called.
	       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.
	       */
	      getValue: function () {
	        checkDisposed(this);
	        if (this.hasError) { thrower(this.error); }
	        return this.value;
	      },
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onCompleted();
	        }
	
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        this.hasError = true;
	        this.error = error;
	
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onError(error);
	        }
	
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.value = value;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onNext(value);
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	        this.value = null;
	        this.error = null;
	      }
	    });
	
	    return BehaviorSubject;
	  }(Observable));
	
	  /**
	   * Represents an object that is both an observable sequence as well as an observer.
	   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
	   */
	  var ReplaySubject = Rx.ReplaySubject = (function (__super__) {
	
	    var maxSafeInteger = Math.pow(2, 53) - 1;
	
	    function createRemovableDisposable(subject, observer) {
	      return disposableCreate(function () {
	        observer.dispose();
	        !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
	      });
	    }
	
	    inherits(ReplaySubject, __super__);
	
	    /**
	     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
	     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
	     *  @param {Number} [windowSize] Maximum time length of the replay buffer.
	     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
	     */
	    function ReplaySubject(bufferSize, windowSize, scheduler) {
	      this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
	      this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
	      this.scheduler = scheduler || currentThreadScheduler;
	      this.q = [];
	      this.observers = [];
	      this.isStopped = false;
	      this.isDisposed = false;
	      this.hasError = false;
	      this.error = null;
	      __super__.call(this);
	    }
	
	    addProperties(ReplaySubject.prototype, Observer.prototype, {
	      _subscribe: function (o) {
	        checkDisposed(this);
	        var so = new ScheduledObserver(this.scheduler, o), subscription = createRemovableDisposable(this, so);
	
	        this._trim(this.scheduler.now());
	        this.observers.push(so);
	
	        for (var i = 0, len = this.q.length; i < len; i++) {
	          so.onNext(this.q[i].value);
	        }
	
	        if (this.hasError) {
	          so.onError(this.error);
	        } else if (this.isStopped) {
	          so.onCompleted();
	        }
	
	        so.ensureActive();
	        return subscription;
	      },
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
	      _trim: function (now) {
	        while (this.q.length > this.bufferSize) {
	          this.q.shift();
	        }
	        while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
	          this.q.shift();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        var now = this.scheduler.now();
	        this.q.push({ interval: now, value: value });
	        this._trim(now);
	
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onNext(value);
	          observer.ensureActive();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        this.error = error;
	        this.hasError = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onError(error);
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onCompleted();
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });
	
	    return ReplaySubject;
	  }(Observable));
	
	  var AnonymousSubject = Rx.AnonymousSubject = (function (__super__) {
	    inherits(AnonymousSubject, __super__);
	    function AnonymousSubject(observer, observable) {
	      this.observer = observer;
	      this.observable = observable;
	      __super__.call(this);
	    }
	
	    addProperties(AnonymousSubject.prototype, Observer.prototype, {
	      _subscribe: function (o) {
	        return this.observable.subscribe(o);
	      },
	      onCompleted: function () {
	        this.observer.onCompleted();
	      },
	      onError: function (error) {
	        this.observer.onError(error);
	      },
	      onNext: function (value) {
	        this.observer.onNext(value);
	      }
	    });
	
	    return AnonymousSubject;
	  }(Observable));
	
	  /**
	  * Used to pause and resume streams.
	  */
	  Rx.Pauser = (function (__super__) {
	    inherits(Pauser, __super__);
	    function Pauser() {
	      __super__.call(this);
	    }
	
	    /**
	     * Pauses the underlying sequence.
	     */
	    Pauser.prototype.pause = function () { this.onNext(false); };
	
	    /**
	    * Resumes the underlying sequence.
	    */
	    Pauser.prototype.resume = function () { this.onNext(true); };
	
	    return Pauser;
	  }(Subject));
	
	  if (true) {
	    root.Rx = Rx;
	
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Rx;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (freeExports && freeModule) {
	    // in Node.js or RingoJS
	    if (moduleExports) {
	      (freeModule.exports = Rx).Rx = Rx;
	    } else {
	      freeExports.Rx = Rx;
	    }
	  } else {
	    // in a browser or Rhino
	    root.Rx = Rx;
	  }
	
	  // All code before this point will be filtered from stack traces.
	  var rEndingLine = captureLine();
	
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)(module), (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }
/******/ ]);
//# sourceMappingURL=vgplayer-web.js.map